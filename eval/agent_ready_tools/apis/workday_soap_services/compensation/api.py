from dataclasses import dataclass, field
from decimal import Decimal
from typing import Optional

from xsdata.models.datatype import XmlDate, XmlDateTime, XmlTime


@dataclass
class AcademicPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowancePlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Allowance_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowanceUnitPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Allowance_Unit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowanceValuePlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Allowance_Value_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AndOrOperatorsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "And_Or_OperatorsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AuthenticationFaultType:
    class Meta:
        name = "Authentication_FaultType"
        target_namespace = "urn:com.workday/bsvc"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenchmarkJobRequestCriteriaType:
    """
    Benchmark Job Request Criteria.

    Attributes:
        include_inactive: Include Inactive indicates the response will also include inactive
            Benchmark Jobs.
    """

    class Meta:
        name = "Benchmark_Job_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenchmarkJobResponseGroupType:
    """
    Benchmark Job Response Group.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Benchmark_Job_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitMultiplierOrderObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Benefit_Multiplier_OrderObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BonusPercentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Bonus_Percent_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BonusPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Bonus_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BusinessProcessTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Business_Process_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CalculatedPlanInterfaceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Calculated_Plan_InterfaceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CalculationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CalculationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommissionPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Commission_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommonYesNoObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Common_Yes_NoObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompaRatioRangeSegmentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compa_Ratio_Range_SegmentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompanyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CompanyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationAssignableComponentTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Assignable_Component_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationAssignablePlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Assignable_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBasisObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_BasisObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBasisConfigurableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Basis_ConfigurableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBasisFunctionalAreaObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Basis_Functional_AreaObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkAgingConfigurationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_Aging_ConfigurationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkCompositeCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_Composite_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkCycleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_CycleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkDefaultObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_DefaultObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkJobObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_JobObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkJobProfileTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_Job_Profile_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkPercentileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_PercentileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkWeightStrategyTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_Weight_Strategy_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkForJobObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_for_JobObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkForJobStoredObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Benchmark_for_Job__Stored_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationChangeTemplateRequestCriteriaType:
    """
    Request Criteria for this request.

    Note that there are none available.

    Attributes:
        include_inactive: Include Inactive Compensation Change Templates
    """

    class Meta:
        name = "Compensation_Change_Template_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationChangeTemplateResponseGroupType:
    """
    Include Reference.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Compensation_Change_Template_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationEligibilityRuleRequestCriteriaType:
    """
    Request Criteria for this request.

    Note that there are none available.
    """

    class Meta:
        name = "Compensation_Eligibility_Rule_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class CompensationEligibilityRuleResponseGroupType:
    """
    Provides the filters for the web service operation.

    Attributes:
        hide_configuration_dependencies: If true, will not load any configuration dependencies,
            e.g., Compensation Package, Compensation Grade/Profiles, Compensation Plans.
    """

    class Meta:
        name = "Compensation_Eligibility_Rule_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    hide_configuration_dependencies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hide_Configuration_Dependencies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_GradeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeHierarchyRequestReferencesType:
    """
    Utilize the compensation grade hierarchy element to retrieve specific instance(s) of
    compensation grade hierarchy data.

    Attributes:
        effective_date: Effective Date
    """

    class Meta:
        name = "Compensation_Grade_Hierarchy_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Grade_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeProfileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Grade_ProfileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeRequestCriteriaType:
    """
    Get Compensation Grades Request Criteria.

    Attributes:
        include_inactive: Include Inactive indicates the response will also include inactive
            Compensation Plans and Guideline components.
    """

    class Meta:
        name = "Compensation_Grade_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeResponseGroupType:
    """
    Provides the filters for the web service operation.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Compensation_Grade_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_MatrixObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationMatrixRequestCriteriaType:
    """
    Request criteria.

    Attributes:
        name: Return the compensation matrix with the name specified by this parameter.
        compensation_matrix_amount_based: If true, return all Amount based compensation matrices.
        compensation_matrix_non_weighted_percent_based: If true, return all Non-weighted percent
            Based compensation matrices.
        compensation_matrix_weighted_percent_based: If true, return all weighted percent based
            compensation matrices.
        classic_compensation_matrix_based: If true, return only Classic Compensation Matrices.
        total_value_matrix_based: If true, return only Total Value Matrices.
    """

    class Meta:
        name = "Compensation_Matrix_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_amount_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Amount_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_non_weighted_percent_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Non-weighted_Percent_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_weighted_percent_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Weighted_Percent_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    classic_compensation_matrix_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Classic_Compensation_Matrix_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    total_value_matrix_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Total_Value_Matrix_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixResponseGroupType:
    """
    The response group.

    Attributes:
        include_reference: Indicates reference included.
        include_compensation_matrix_data: Indicates compensation matrix data included.
    """

    class Meta:
        name = "Compensation_Matrix_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_compensation_matrix_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Compensation_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPackageObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_PackageObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPayEarningObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Pay_EarningObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPlanResponseGroupType:
    """
    Use to limit the returned data for a given Compensation Plan.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Compensation_Plan_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPreviousSystemHistoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Previous_System_HistoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationRoundingRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Rounding_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationScorecardRequestCriteriaType:
    """
    Contains additional request criteria to limit the information returned.

    Currently no additional criteria is supported.
    """

    class Meta:
        name = "Compensation_Scorecard_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class CompensationScorecardResponseGroupType:
    """
    Contains additional response criteria to enhance the information returned.

    Attributes:
        include_reference: When True, unique reference identifiers will be returned for all relevant
            objects.
    """

    class Meta:
        name = "Compensation_Scorecard_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardResultRequestCriteriaType:
    """
    Contains additional request criteria to limit the information returned.

    Currently no additional criteria is supported.
    """

    class Meta:
        name = "Compensation_Scorecard_Result_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class CompensationScorecardResultResponseGroupType:
    """
    Contains additional response criteria to enhance the information returned.

    Attributes:
        include_reference: When True, unique reference identifiers will be returned for all relevant
            objects.
    """

    class Meta:
        name = "Compensation_Scorecard_Result_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSetupSecuritySegmentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Setup_Security_SegmentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationStepObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_StepObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_SurveyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobDetailObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_DetailObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobMatchableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_MatchableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobMatchesResponseGroupType:
    """
    Allows grouping results for Get Compensation Survey Job Matches web service.

    Attributes:
        include_reference: Indicates reference included.
    """

    class Meta:
        name = "Compensation_Survey_Job_Matches_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobResultObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_ResultObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobResultComponentCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_Component_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobResultCustomTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_Custom_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobResultPercentileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_PercentileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobSubDetailObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_Job_Sub-DetailObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobsResponseGroupType:
    """
    Allows grouping results for Get Compensation Survey Jobs web service.

    Attributes:
        include_reference: Indicates reference included.
    """

    class Meta:
        name = "Compensation_Survey_Jobs_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyResultObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Survey_ResultObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyResultScopeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Compensation_Survey_Result_ScopeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyResultScopeDataType:
    """
    Scope of a compensation survey job result.

    Attributes:
        result_scope_name: Scope of a compensation survey job result.
    """

    class Meta:
        name = "Compensation_Survey_Result_Scope_DataType"
        target_namespace = "urn:com.workday/bsvc"

    result_scope_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Result_Scope_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationTemplateObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_TemplateObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationTemplateFieldObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Template_FieldObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationTemplateSectionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Template_SectionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationTrancheReplacementDataType:
    """
    This is a wrapper for the Compensation Tranche Replacement Data which is used to display and
    replace Compensation Tranche Data within Bonus Plan; it is optional.

    Attributes:
        name: Tranche Name
        percentage: Tranche Percentage
    """

    class Meta:
        name = "Compensation_Tranche_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    name: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )


@dataclass
class CompensationWeightedPercentMatrixObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Weighted_Percent_MatrixObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConditionEntryOptionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Condition_Entry_OptionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConditionRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Condition_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConditionRuleCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Condition_Rule_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConfigurableCompensationBasisRequestCriteriaType:
    """
    Use to choose whether or not to include inactive configurable compensation bases.

    Attributes:
        include_inactive: Include Inactive indicates the response will also include inactive
            configurable compensation bases.
    """

    class Meta:
        name = "Configurable_Compensation_Basis_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConfigurableCompensationBasisResponseGroupType:
    """
    Use to limit the return of configurable compensation bases based on dependencies.

    Attributes:
        hide_configuration_dependencies: If true, will not load any configuration dependencies,
            e.g., Compensation Package, Compensation Grade/Profiles, Compensation Plans.
    """

    class Meta:
        name = "Configurable_Compensation_Basis_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    hide_configuration_dependencies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hide_Configuration_Dependencies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CountryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CurrencyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CurrencyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DefaultScorecardObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Default_ScorecardObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DeferredBonusCalculationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Deferred_Bonus_CalculationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EligibilityWaitingPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Eligibility_Waiting_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EligibleEarningsOverrideObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Eligible_Earnings_OverrideObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EligibleEarningsOverridePeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Eligible_Earnings_Override_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EligibleEarningsResponseGroupType:
    """
    The response group allows for the response data to be tailored to only included elements that
    the user is looking for.

    If no response group is provided in the request the following elements will be returned:  Reference, Eligible Earnings Data

    Attributes:
        include_reference: Indicates if the Reference for the Eligible Earnings is included in the
            response.
        include_eligible_earnings_data: Indicates if the details of the Eligible Earnings is
            included in the response.
    """

    class Meta:
        name = "Eligible_Earnings_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_eligible_earnings_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Eligible_Earnings_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "EmployeeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeSeveranceWorksheetEventObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Severance_Worksheet_EventObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeSeveranceWorksheetEventRequestCriteriaType:
    """Request Criteria to filter Employee Severance Worksheet Event results."""

    class Meta:
        name = "Employee_Severance_Worksheet_Event_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class EmployeeSeveranceWorksheetEventResponseGroupType:
    """
    Response Group for Employee Severance Worksheet Event.

    Attributes:
        include_reference: Boolean to determine if to include reference to Employee Severance
            Worksheet Event
    """

    class Meta:
        name = "Employee_Severance_Worksheet_Event_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EnhancedSeveranceMatrixResponseGroupType:
    """
    The response group.

    Attributes:
        include_reference: Indicates reference included.
    """

    class Meta:
        name = "Enhanced_Severance_Matrix_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventAttachmentCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Event_Attachment_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EventClassificationSubcategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Event_Classification_SubcategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExceptionDataType:
    """
    Exception (Errors and Warning) associated with the transaction.

    Attributes:
        classification: Exception Classification (Error or Warning)
        message: Exception Detail
    """

    class Meta:
        name = "Exception_DataType"
        target_namespace = "urn:com.workday/bsvc"

    classification: Optional[str] = field(
        default=None,
        metadata={
            "name": "Classification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExpenseAccumulatorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Expense_AccumulatorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExpenseItemObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Expense_ItemObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExternalFieldObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "External_FieldObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FifthCompensationBenchmarkPercentileAmountDataType:
    """
    Value of the fifth percentile field.

    Attributes:
        fifth_percentile_value: Compensation benchmark value.
    """

    class Meta:
        name = "Fifth_Compensation_Benchmark_Percentile_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fifth_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class FifthPercentileCompensationSurveyJobResultFieldDataType:
    """
    Value of the fifth compensation survey job result percentile field.

    Attributes:
        fifth_percentile_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Fifth_Percentile_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fifth_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class FirstCompensationBenchmarkPercentileAmountDataType:
    """
    Value of the first percentile field.

    Attributes:
        first_percentile_value: Compensation benchmark value.
    """

    class Meta:
        name = "First_Compensation_Benchmark_Percentile_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class FirstCustomFieldCompensationSurveyJobResultFieldDataType:
    """
    Value of the first compensation survey job result custom field.

    Attributes:
        first_custom_type_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "First_Custom_Field_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_custom_type_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "First_Custom_Type_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class FirstPercentileCompensationSurveyJobResultFieldDataType:
    """
    Value of the first compensation survey job result percentile field.

    Attributes:
        first_percentile_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "First_Percentile_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class FourthCompensationBenchmarkPercentileAmountDataType:
    """
    Value of the fourth percentile field.

    Attributes:
        fourth_percentile_value: Compensation benchmark value.
    """

    class Meta:
        name = "Fourth_Compensation_Benchmark_Percentile_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fourth_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class FourthCustomFieldCompensationSurveyJobResultFieldDataType:
    """
    Value of the fourth compensation survey job result custom field.

    Attributes:
        fourth_custom_type_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Fourth_Custom_Field_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fourth_custom_type_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Type_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class FourthPercentileCompensationSurveyJobResultFieldDataType:
    """
    Value of the fourth compensation survey job result percentile field.

    Attributes:
        fourth_percentile_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Fourth_Percentile_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fourth_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class FrequencyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "FrequencyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FrequencyBehaviorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Frequency_BehaviorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FuturePaymentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Future_Payment_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HourlyPlanDataType:
    """
    This is a wrapper for the Hourly Data.

    Attributes:
        amount: Amount for the Hourly Plan Compensation data.
        minimum_wage: Minimum wage indicator for the Hourly Plan Compensation data.
    """

    class Meta:
        name = "Hourly_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    minimum_wage: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Minimum_Wage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstanceIdtype:
    class Meta:
        name = "Instance_IDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_FamilyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobProfileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_ProfileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobRequisitionEnabledObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Requisition_EnabledObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocalityPayAreaObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Locality_Pay_AreaObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "LocationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ManagementLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Management_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MeritPercentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Merit_Percent_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MeritPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Merit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MetadataSecurityGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Metadata_Security_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OneTimePaymentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "One-Time_Payment_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OneTimePaymentPlanCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "One-Time_Payment_Plan_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryDataType:
    """
    Data that is persisted.

    Attributes:
        id: ID
        category: Category Name
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_Category_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    category: Optional[str] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryRequestCriteriaType:
    """Request Criteria."""

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_Category_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class OneTimePaymentPlanConfigurableCategoryResponseGroupType:
    """
    Response Group.

    Attributes:
        include_reference: Reference Boolean
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_Category_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanRequestCriteriaType:
    """
    Values in this element can be used to filter the types of One-Time Payment Plans returned.

    Attributes:
        include_inactive: Include Inactive indicates the response will also include inactive One-
            Time Payment Plans.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanResponseGroupType:
    """
    Use to limit the returned data for a given One-Time Payment Plan.

    Attributes:
        include_reference: Include Reference.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanScheduleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "One-Time_Payment_Plan_ScheduleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayRangeQuartileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Pay_Range_QuartileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayRangeSegmentTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Pay_Range_Segment_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayrollWorktagObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Payroll_WorktagObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceCriteriaObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Performance_CriteriaObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PerformanceCriteriaDataType:
    """
    Contains information on scorecard.

    Attributes:
        goal_id: Unique identifier
        goal_name: Name of criteria.
        goal_description: Description of criteria.
        goal_weight: Weight of criieria.
    """

    class Meta:
        name = "Performance_Criteria_DataType"
        target_namespace = "urn:com.workday/bsvc"

    goal_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Goal_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    goal_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Goal_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    goal_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Goal_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    goal_weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Goal_Weight",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )


@dataclass
class PeriodActivityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_ActivityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityAssignmentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Activity_AssignmentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Activity_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityRateMatrixObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Activity_Rate_MatrixObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityRateMatrixRequestCriteriaType:
    """
    Request criteria.

    Attributes:
        include_inactive: Include Inactive indicates the response will also include inactive period
            activity rate matrices.
    """

    class Meta:
        name = "Period_Activity_Rate_Matrix_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityTaskObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Activity_TaskObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityTaskInterfaceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Activity_Task_InterfaceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityTaskRequestCriteriaType:
    """
    Utilize the period activity task to retrieve specific instance(s) of period activity task and
    its associated data.

    Attributes:
        include_inactive: Include Inactive indicates the response will also include inactive period
            work tasks.
    """

    class Meta:
        name = "Period_Activity_Task_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityTaskResponseGroupType:
    """
    Provides the filters for the web service operation.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Period_Activity_Task_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityUnitObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Activity_UnitObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodSalaryPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Salary_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PositionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionElementObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_ElementObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionRestrictionsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_RestrictionsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PotentialObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PotentialObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProcessingFaultType:
    class Meta:
        name = "Processing_FaultType"
        target_namespace = "urn:com.workday/bsvc"

    detail_message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Detail_Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelationalOperatorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Relational_OperatorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ResponseFilterType:
    """
    Parameters that let you filter the data returned in the response.

    You can filter returned data by dates and page attributes.

    Attributes:
        as_of_effective_date: Indicates the date when application data, such as benefits and
            compensation, become effective (Also referred to as the Effective Moment). If you don't
            specify a date, this date defaults to today.{+4}
        as_of_entry_date_time: The date and time the data was entered into the system. (This field
            is also referred to as the Entry Moment). If the date isn't specified, the default date
            is the current date and time.
        page: The numbered page of data Workday returns in the response. The default page is the
            first page(Page = 1). For responses that contain more than one page of data, use this
            parameter to retrieve the additional pages of data. For example, set Page = 2 to
            retrieve the second page of data. Note: If you set the page parameter, you must also
            specify the "As_Of_Entry_Date" to ensure that the result set remains the same between
            your requests.
        count: Sets the number of objects to return within each response page. Set a value between 1
            and 999. The default value is 100.
    """

    class Meta:
        name = "Response_FilterType"
        target_namespace = "urn:com.workday/bsvc"

    as_of_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "As_Of_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_entry_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "As_Of_Entry_DateTime",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    page: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Page",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    count: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 3,
            "fraction_digits": 0,
        },
    )


@dataclass
class ResponseResultsType:
    """
    The "Response_Results" element contains summary information about the data that has been
    returned from your request including "Total_Results", "Total_Pages", and the current "Page"
    returned.

    Attributes:
        total_results: The total number of results that your request returned.
        total_pages: The total number of pages requested. A page of data in a WWS has a 100 entry
            maximum.
        page_results: The number of results in the current page.
        page: The page number of the data the WWS returned for your request.
    """

    class Meta:
        name = "Response_ResultsType"
        target_namespace = "urn:com.workday/bsvc"

    total_results: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    total_pages: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Pages",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    page_results: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Page_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    page: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Page",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class RetentionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "RetentionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RetirementSavingsPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Retirement_Savings_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ReviewRatingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Review_RatingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ReviewRatingScaleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Review_Rating_ScaleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SalaryPayPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Salary_Pay_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SalaryPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Salary_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SalaryUnitPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Salary_Unit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ScorecardProfilePerformanceCriteriaDataType:
    """
    Contains set of goals or criteria.

    Attributes:
        scorecard_profile_goal_id: Unique identifier
        scorecard_profile_goal_name: Name of Ccriteria.
        scorecard_profile_goal_description: Description of criteria.
        scorecard_profile_goal_weight: Weight of criteria.
    """

    class Meta:
        name = "Scorecard_Profile_Performance_Criteria_DataType"
        target_namespace = "urn:com.workday/bsvc"

    scorecard_profile_goal_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Scorecard_Profile_Goal_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scorecard_profile_goal_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Scorecard_Profile_Goal_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scorecard_profile_goal_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Scorecard_Profile_Goal_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scorecard_profile_goal_weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scorecard_Profile_Goal_Weight",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )


@dataclass
class ScoresetContainerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Scoreset_ContainerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecondCompensationBenchmarkPercentileAmountDataType:
    """
    Value of the second percentile field.

    Attributes:
        second_percentile_value: Compensation benchmark value.
    """

    class Meta:
        name = "Second_Compensation_Benchmark_Percentile_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class SecondCustomFieldCompensationSurveyJobResultFieldDataType:
    """
    Value of the second compensation survey job result custom field.

    Attributes:
        second_custom_type_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Second_Custom_Field_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_custom_type_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Type_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class SecondPercentileCompensationSurveyJobResultFieldDataType:
    """
    Value of the second compensation survey job result percentile field.

    Attributes:
        second_percentile_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Second_Percentile_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class SecurityGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Security_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SeveranceMatrixFilterOptionsType:
    """
    Severance Matrix Filter Options.

    Attributes:
        compensation_basis_range: If true, return only Compensation Basis Range Matrices
        service_length_basis_range: If true, return only Length of Service Range Matrices
        duration_matrix_entry_type: If true, return only Severance Matrices with Duration type
            entries.
        length_of_service_matrix_entry_type: If true, return only Severance Matrices with Length of
            Service type entries.
    """

    class Meta:
        name = "Severance_Matrix_Filter_OptionsType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_basis_range: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    service_length_basis_range: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Service_Length_Basis_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    duration_matrix_entry_type: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Duration_Matrix_Entry_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    length_of_service_matrix_entry_type: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Length_of_Service_Matrix_Entry_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SeveranceMatrixAbstractObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Severance_Matrix__abstract_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SeverancePackageObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Severance_PackageObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SeverancePackageComponentTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Severance_Package_Component_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SeveranceServiceDateObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Severance_Service_DateObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockDateRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Date_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockGrantObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_GrantObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockGrantTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Grant_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockParticipationRateTableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Participation_Rate_TableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockParticipationRateTableRequestCriteriaType:
    """
    Request Criteria.

    Attributes:
        include_inactive: Flag to indicate whether or not to include inactive Stock Participation
            Rate Tables.
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockParticipationRateTableResponseGroupType:
    """
    Response Group.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPercentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Percent_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockVestingScheduleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Vesting_ScheduleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TenantedPayrollWorktagObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Tenanted_Payroll_WorktagObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TenantedSecurityGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Tenanted_Security_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ThirdCompensationBenchmarkPercentileAmountDataType:
    """
    Value of the third percentile field.

    Attributes:
        third_percentile_value: Compensation benchmark value.
    """

    class Meta:
        name = "Third_Compensation_Benchmark_Percentile_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    third_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class ThirdCustomFieldCompensationSurveyJobResultFieldDataType:
    """
    Value of the third compensation survey job result custom field.

    Attributes:
        third_custom_type_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Third_Custom_Field_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    third_custom_type_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Third_Custom_Type_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class ThirdPercentileCompensationSurveyJobResultFieldDataType:
    """
    Value of the third compensation survey job result percentile field.

    Attributes:
        third_percentile_value: Compensation Survey Job Result Field Value.
    """

    class Meta:
        name = "Third_Percentile_Compensation_Survey_Job_Result_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    third_percentile_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )


@dataclass
class TimeProrationRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Time_Proration_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TimeZoneObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Time_ZoneObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UniqueIdentifierObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Unique_IdentifierObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UnitOfMeasureObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Unit_of_MeasureObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ValidationErrorType:
    class Meta:
        name = "Validation_ErrorType"
        target_namespace = "urn:com.workday/bsvc"

    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    detail_message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Detail_Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    xpath: Optional[str] = field(
        default=None,
        metadata={
            "name": "Xpath",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WebServiceBackgroundProcessRuntimeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Web_Service_Background_Process_RuntimeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkdayCommonHeaderType:
    class Meta:
        name = "Workday_Common_HeaderType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference_descriptors_in_response: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference_Descriptors_In_Response",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "WorkerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerResponseGroupForReferenceType:
    """
    The response group allows for the response data to be tailored to only included elements that
    the user is looking for.

    If no response group is provided in the request, then all groups
    will be returned. If the Response Group element is returned, you can
    select which sections of data to include in the response.

    Attributes:
        include_reference: Indicates if the Reference to the Worker should be included in the
            response at the Previous_System_Job_History element level. It is always returned in the
            Previous_System_Job_History_Data level.
    """

    class Meta:
        name = "Worker_Response_Group_for_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompplObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "compplObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Allowance_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AllowancePlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowanceUnitPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Allowance_Unit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AllowanceUnitPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowanceValuePlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Allowance_Value_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AllowanceValuePlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AndOrOperatorsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "And_Or_OperatorsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AndOrOperatorsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicationInstanceExceptionsDataType:
    """
    Element containing application related exceptions data.

    Attributes:
        exception_data: Exception Data
    """

    class Meta:
        name = "Application_Instance_Exceptions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    exception_data: list[ExceptionDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exception_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AuthenticationFault(AuthenticationFaultType):
    class Meta:
        name = "Authentication_Fault"
        namespace = "urn:com.workday/bsvc"


@dataclass
class BenefitMultiplierOrderObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Benefit_Multiplier_OrderObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BenefitMultiplierOrderObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPercentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Bonus_Percent_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BonusPercentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Bonus_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BonusPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessProcessTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Business_Process_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BusinessProcessTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CalculatedPlanInterfaceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Calculated_Plan_InterfaceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CalculatedPlanInterfaceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CalculationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CalculationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommissionPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Commission_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommissionPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommonYesNoObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Common_Yes_NoObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommonYesNoObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompaRatioRangeSegmentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compa_Ratio_Range_SegmentObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompaRatioRangeSegmentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompanyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompanyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationAssignableComponentTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Assignable_Component_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationAssignableComponentTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationAssignablePlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Assignable_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationAssignablePlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBasisObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_BasisObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBasisObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBasisConfigurableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Basis_ConfigurableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBasisConfigurableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBasisFunctionalAreaObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Basis_Functional_AreaObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBasisFunctionalAreaObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkAgingConfigurationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_Aging_ConfigurationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkAgingConfigurationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkCompositeCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_Composite_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkCompositeCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkCycleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_CycleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkCycleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkDefaultObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_DefaultObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkDefaultObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkJobObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_JobObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkJobObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkJobProfileTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_Job_Profile_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkJobProfileTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkPercentileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_PercentileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkPercentileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkWeightStrategyTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_Weight_Strategy_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkWeightStrategyTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkForJobObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_for_JobObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkForJobObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkForJobStoredObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Benchmark_for_Job__Stored_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationBenchmarkForJobStoredObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_GradeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationGradeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Grade_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationGradeLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeProfileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Grade_ProfileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationGradeProfileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_MatrixObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationMatrixObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPackageObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_PackageObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPackageObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPayEarningObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Pay_EarningObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPayEarningObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPreviousSystemHistoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Previous_System_HistoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPreviousSystemHistoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationRoundingRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Rounding_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationRoundingRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSetupSecuritySegmentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Setup_Security_SegmentObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSetupSecuritySegmentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationStepObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_StepObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationStepObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_SurveyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobDetailObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_DetailObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobDetailObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobMatchableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_MatchableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobMatchableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobResultObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_ResultObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobResultObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobResultComponentCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_Component_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobResultComponentCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobResultCustomTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_Custom_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobResultCustomTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobResultPercentileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_PercentileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobResultPercentileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobSubDetailObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Job_Sub-DetailObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyJobSubDetailObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyResultObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_ResultObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyResultObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyResultScopeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Survey_Result_ScopeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationSurveyResultScopeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationTemplateObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_TemplateObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationTemplateObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationTemplateFieldObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Template_FieldObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationTemplateFieldObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationTemplateSectionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Template_SectionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationTemplateSectionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationWeightedPercentMatrixObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Weighted_Percent_MatrixObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationWeightedPercentMatrixObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionEntryOptionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Condition_Entry_OptionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ConditionEntryOptionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Condition_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ConditionRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionRuleCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Condition_Rule_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ConditionRuleCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CurrencyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CurrencyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DefaultScorecardObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Default_ScorecardObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DefaultScorecardObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeferredBonusCalculationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Deferred_Bonus_CalculationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DeferredBonusCalculationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibilityWaitingPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Eligibility_Waiting_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EligibilityWaitingPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibleEarningsOverrideObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Eligible_Earnings_OverrideObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EligibleEarningsOverrideObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibleEarningsOverridePeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Eligible_Earnings_Override_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EligibleEarningsOverridePeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeSeveranceWorksheetEventObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Severance_Worksheet_EventObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeSeveranceWorksheetEventObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EnhancedSeveranceMatrixRequestCriteriaType:
    """
    Request Criteria.

    Attributes:
        name: Returns the Severance Matrix with the name specified by this parameter.
        enhanced_severance_matrix_filter_options: Filtering options to specify the type of matrix to
            be returned.
        include_inactive: If true, inactive matrices will be included in the returned set. If false,
            inactive matrices will not be included.
    """

    class Meta:
        name = "Enhanced_Severance_Matrix_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enhanced_severance_matrix_filter_options: list[SeveranceMatrixFilterOptionsType] = field(
        default_factory=list,
        metadata={
            "name": "Enhanced_Severance_Matrix_Filter_Options",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventAttachmentCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Event_Attachment_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventAttachmentCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventClassificationSubcategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Event_Classification_SubcategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventClassificationSubcategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExpenseAccumulatorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Expense_AccumulatorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExpenseAccumulatorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExpenseItemObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Expense_ItemObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExpenseItemObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalFieldObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_FieldObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalFieldObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FrequencyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[FrequencyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FrequencyBehaviorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Frequency_BehaviorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FrequencyBehaviorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FuturePaymentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Future_Payment_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FuturePaymentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationGradeHierarchyRequestType:
    """
    Request element to get compensation grade hierarchy information.

    If no criteria are specified in either the compensation grade
    hierarchy request references or compensation grade hierarchy request
    criteria elements, all instances will be returned.

    Attributes:
        request_references: Request References
        response_filter: Response Filter
        version
    """

    class Meta:
        name = "Get_Compensation_Grade_Hierarchy_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationGradeHierarchyRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstanceObjectType:
    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[InstanceIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_FamilyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobFamilyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobProfileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_ProfileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobProfileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionEnabledObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Requisition_EnabledObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobRequisitionEnabledObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalityPayAreaObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Locality_Pay_AreaObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocalityPayAreaObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagementLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Management_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ManagementLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPercentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Merit_Percent_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MeritPercentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Merit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MeritPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MetadataSecurityGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Metadata_Security_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MetadataSecurityGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "One-Time_Payment_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OneTimePaymentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "One-Time_Payment_Plan_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OneTimePaymentPlanCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OneTimePaymentPlanConfigurableCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanScheduleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "One-Time_Payment_Plan_ScheduleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OneTimePaymentPlanScheduleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayRangeQuartileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Pay_Range_QuartileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayRangeQuartileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayRangeSegmentTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Pay_Range_Segment_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayRangeSegmentTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayrollWorktagObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Payroll_WorktagObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayrollWorktagObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceCriteriaObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Performance_CriteriaObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PerformanceCriteriaObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_ActivityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityAssignmentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Activity_AssignmentObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityAssignmentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Activity_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityRateMatrixObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Activity_Rate_MatrixObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityRateMatrixObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityTaskObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Activity_TaskObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityTaskObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityTaskInterfaceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Activity_Task_InterfaceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityTaskInterfaceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityUnitObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Activity_UnitObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodActivityUnitObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodSalaryPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Salary_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodSalaryPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionElementObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_ElementObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionElementObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionRestrictionsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_RestrictionsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionRestrictionsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PotentialObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[PotentialObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProcessingFault(ProcessingFaultType):
    class Meta:
        name = "Processing_Fault"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RelationalOperatorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Relational_OperatorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelationalOperatorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetentionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[RetentionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetirementSavingsPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Retirement_Savings_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RetirementSavingsPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewRatingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Review_RatingObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ReviewRatingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewRatingScaleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Review_Rating_ScaleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ReviewRatingScaleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryPayPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Salary_Pay_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SalaryPayPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Salary_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SalaryPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryUnitPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Salary_Unit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SalaryUnitPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ScoresetContainerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Scoreset_ContainerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ScoresetContainerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecurityGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Security_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SecurityGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SeveranceMatrixAbstractObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Severance_Matrix__abstract_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SeveranceMatrixAbstractObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SeverancePackageObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Severance_PackageObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SeverancePackageObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SeverancePackageComponentTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Severance_Package_Component_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SeverancePackageComponentTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SeveranceServiceDateObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Severance_Service_DateObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SeveranceServiceDateObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockDateRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Date_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockDateRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockGrantObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_GrantObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockGrantObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockGrantTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Grant_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockGrantTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockParticipationRateTableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Participation_Rate_TableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockParticipationRateTableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPercentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Percent_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockPercentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockVestingScheduleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Vesting_ScheduleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockVestingScheduleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TenantedPayrollWorktagObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Tenanted_Payroll_WorktagObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TenantedPayrollWorktagObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TenantedSecurityGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Tenanted_Security_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TenantedSecurityGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TimeProrationRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Time_Proration_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TimeProrationRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TimeZoneObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Time_ZoneObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TimeZoneObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UniqueIdentifierObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Unique_IdentifierObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UniqueIdentifierObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnitOfMeasureObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Unit_of_MeasureObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UnitOfMeasureObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ValidationFaultType:
    class Meta:
        name = "Validation_FaultType"
        target_namespace = "urn:com.workday/bsvc"

    validation_error: list[ValidationErrorType] = field(
        default_factory=list,
        metadata={
            "name": "Validation_Error",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WebServiceBackgroundProcessRuntimeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Web_Service_Background_Process_RuntimeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WebServiceBackgroundProcessRuntimeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkdayCommonHeader(WorkdayCommonHeaderType):
    class Meta:
        name = "Workday_Common_Header"
        namespace = "urn:com.workday/bsvc"


@dataclass
class WorkerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompplObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "compplObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompplObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddIndividualStockAmountDataType:
    """
    Contains stock grant amount data including shares granted, percent, and amount currency.

    Attributes:
        shares_granted: Number of shares granted for a unit stock plan.
        grant_percent: Percent of compensation basis allotted to stock grant for a percent stock
            plan. Cannot exceed 10,000% of employee base pay.
        grant_amount: Amount allotted for stock grant for an amount stock plan. Cannot exceed
            10,000% of employee base pay.
        grant_amount_currency_reference: Currency of the stock grant. Required for both percent or
            amount.
    """

    class Meta:
        name = "Add_Individual_Stock_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    shares_granted: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Shares_Granted",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    grant_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    grant_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    grant_amount_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Amount_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddStockGrantResponseType:
    """
    Responds with the Event ID for the Request Stock Grant Event.

    Attributes:
        stock_package_event_reference: Event ID of the Request Stock Grant Event.
        version
    """

    class Meta:
        name = "Add_Stock_Grant_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    stock_package_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Package_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllocationDetailForPeriodPayDataType:
    """
    Contains costing allocation for Period Activity Pay assignment line.

    Attributes:
        order: Order assign to costing allocation
        costing_company_reference: Optional: Specify a costing company to charge against this period
            activity assignment. Intercompany Accounting must be enabled in Edit Tenant Setup -
            Payroll.
        costing_worktag_reference: Worktag to use for costing allocation
        distribution_percent: Percentage of line amount to be distributed on the specified costing
            worktag
        distribution_amount: Amount to be distributed on the specified costing worktag
    """

    class Meta:
        name = "Allocation_Detail_for_Period_Pay_DataType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_company_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Costing_Company_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_worktag_reference: list[TenantedPayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Costing_Worktag_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    distribution_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Distribution_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 9,
            "fraction_digits": 6,
        },
    )
    distribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Distribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 38,
            "fraction_digits": 12,
        },
    )


@dataclass
class AllowancePlanAmountBasedProfileReplacementDataDetailsType:
    """
    Allowance Plan Amount Based Profile Replacement Data Details.

    Attributes:
        amount: Enter the amount of the target allowance amount. Workday uses this value if it can
            find no other target value for the employee. This can happen when employees are not
            eligible for any of the multiple plan targets, or are eligible for multiple plan profile
            targets.
        currency_reference: Currency
    """

    class Meta:
        name = "Allowance_Plan_Amount_Based_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowancePlanPercentBasedProfileReplacementDataDetailsType:
    """
    Allowance Plan Percent Based Profile Replacement Data Details.

    Attributes:
        percent: Enter the amount of the target allowance percent. Workday uses this value if it can
            find no other target value for the employee. This can happen when employees are not
            eligible for any of the multiple plan targets, or are eligible for multiple plan profile
            targets.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        ceiling_amount: The Ceiling Amount for the Allowance Percent Plan Profile.
        ceiling_currency_reference: The Ceiling Currency for the Allowance Percent Plan Profile.
    """

    class Meta:
        name = "Allowance_Plan_Percent_Based_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ceiling_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Ceiling_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    ceiling_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Ceiling_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanReimbursableDataType:
    """
    Allowance Plan Reimbursable Data consists of information pertinent only to reimbursable
    allowance plans.

    Attributes:
        expense_item_reference: The expense item associated with the reimbursable allowance plan.
        expense_accumulator_reference: The expense accumulator associated with the reimbursable
            allowance plan.
    """

    class Meta:
        name = "Allowance_Plan_Reimbursable_DataType"
        target_namespace = "urn:com.workday/bsvc"

    expense_item_reference: Optional[ExpenseItemObjectType] = field(
        default=None,
        metadata={
            "name": "Expense_Item_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    expense_accumulator_reference: Optional[ExpenseAccumulatorObjectType] = field(
        default=None,
        metadata={
            "name": "Expense_Accumulator_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowancePlanUnitBasedProfileReplacementDataDetailsType:
    """
    Allowance Plan Unit Based Profile Replacement Data Details.

    Attributes:
        number_of_units: Enter the number of the target allowance number of units. Workday uses this
            value if it can find no other target value for the employee. This can happen when
            employees are not eligible for any of the multiple plan targets, or are eligible for
            multiple plan profile targets.
        per_unit_amount: Enter the amount of the target allowance amount per unit. Workday uses this
            value if it can find no other target value for the employee. This can happen when
            employees are not eligible for any of the multiple plan targets, or are eligible for
            multiple plan profile targets.
        currency_reference: Currency
    """

    class Meta:
        name = "Allowance_Plan_Unit_Based_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AlternatePayRangeDataType:
    """
    The alternative compensation pay range.

    Attributes:
        compensation_basis_reference: The configured compensation basis.  Each pay range for a
            compensation grade or grade profile must use a different configured compensation basis.
        minimum: The minimum of the salary range.
        midpoint: The midpoint of the salary range.
        maximum: The maximum of the salary range.
        spread: The spread from the range minimum to range maximum.
        segment_1_top: The top value for Segment 1.
        segment_2_top: The top value for Segment 2.
        segment_3_top: The top value for Segment 3.
        segment_4_top: The top value for Segment 4.
        segment_5_top: The top value for Segment 5.
    """

    class Meta:
        name = "Alternate_Pay_Range_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_basis_reference: Optional[CompensationBasisConfigurableObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    minimum: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    midpoint: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Midpoint",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    maximum: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 32,
            "fraction_digits": 6,
        },
    )
    spread: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Spread",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 32,
            "fraction_digits": 6,
        },
    )
    segment_1_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_1_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_2_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_2_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_3_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_3_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_4_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_4_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_5_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_5_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )


@dataclass
class AmountPlanProfileReplacementDataDetailsType:
    """
    Amount Plan Profile Replacement Data Details.

    Attributes:
        amount: Enter the amount of the target bonus amount. Workday uses this value if it can find
            no other target value for the employee. This can happen when employees have no
            individual target, are not eligible for any of the multiple plan profile targets, or are
            eligible for multiple plan profile targets. This is optional for single target bonus
            plans so that you have the option to create a bonus plan without using it to budget for
            bonuses. The default, however, is required for all bonus plans that use multiple
            targets.
        currency_reference: Currency
    """

    class Meta:
        name = "Amount_Plan_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ApplicationInstanceRelatedExceptionsDataType:
    """
    Element containing Exceptions Data.

    Attributes:
        exceptions_data: Exceptions Data
    """

    class Meta:
        name = "Application_Instance_Related_Exceptions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    exceptions_data: list[ApplicationInstanceExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeResponseType:
    """
    Response element for the Assign Employee's Eligible Period Activities business process.

    Attributes:
        period_activity_eligibility_event_reference: Reference element representing a unique
            instance of Assign Employee's Eligible Activities business process.
        version
    """

    class Meta:
        name = "Assign_Eligible_Period_Activities_for_Employee_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_eligibility_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Eligibility_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenchmarkJobRequestReferencesType:
    """
    Benchmark Job Request References.

    Attributes:
        benchmark_job_reference: Benchmark Job Reference
    """

    class Meta:
        name = "Benchmark_Job_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job_reference: list[CompensationBenchmarkDefaultObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class BonusPaymentDataType:
    """
    Data for Employee's one-time ad-hoc bonus payment information.

    Attributes:
        bonus_plan_reference: The name of the bonus plan in which the employee participates.
        coverage_start_date: Coverage Start Date
        coverage_end_date: Coverage End Date
        percent: Requires either the bonus percent or amount to be specified for the employee.  If
            Percent is specified, the calculation basis will be determine from the bonus plan to
            derive the bonus amount in the plan's currency.  If bonus amount is specified,  the
            percent will be derived based on the currency reference entered.
        amount: Requires either the bonus percent or amount to be specified for the employee.  If
            Percent is specified, the calculation basis will be determine from the bonus plan to
            derive the bonus amount in the plan's currency.  If bonus amount is specified, the
            percent will be derived based on the currency reference entered.
        currency_reference: Identifies the currency in which the bonus is to be paid.  This can be
            either the plan currency or employee's local currency.
        comment: Comment about the Employee's Bonus
    """

    class Meta:
        name = "Bonus_Payment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_plan_reference: Optional[BonusPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    coverage_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessProcessAttachmentDataType:
    """
    Element for the attachments pertaining to a Event entered through a web service.

    Attributes:
        file_name: Filename for the attachment.
        event_attachment_description: Free form text comment about the attachment.
        event_attachment_category_reference: Category of attachment.
        file: Binary file contents.
        content_type: Text attribute identifying Content Type of the Attachment.
    """

    class Meta:
        name = "Business_Process_Attachment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    event_attachment_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Event_Attachment_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_attachment_category_reference: Optional[EventAttachmentCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Attachment_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Content_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 80,
        },
    )


@dataclass
class BusinessProcessCommentDataType:
    """
    Captures a comment for the Business Process.

    Attributes:
        comment: Free form comment regarding the business process.
        worker_reference: Default the Person making the comment to the processing person if not
            submitted via the web service.
    """

    class Meta:
        name = "Business_Process_Comment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CalculatedPlanDataType:
    """
    Data for creation of a Calculated Plan.

    Attributes:
        compensation_element_reference: Compensation Element for a Calculated Plan
        amount_calculation_reference: The Payroll Calculation Engine Calculation associated with
            this Calculated Plan.
        target_percent_calculation_reference: Select the sub- calculation that reflects the
            percentage portion of the Amount Calculation. Workday uses this percentage in MBT
            calculations, if applicable.
        ceiling_amount_calculation_reference: Select the sub- calculation that reflects the ceiling
            portion of the Amount Calculation. Workday uses this ceiling calculation in MBT
            calculations, if applicable.
        currency_reference: The default Currency for this plan.
        frequency_reference: The default Frequency for this plan.
        is_dynamic_calculated_plan: Will create a Dynamic Calculated Plan if selected. Purely
            informational and cannot be used to change plan type once plans are created.
        is_event_driven_calculated_plan: Will create an Event Driven Calculated Plan if selected.
            Purely informational and cannot be used to change plan type once plans are created.
        exclude_from_total_salary_and_allowance_compensation_basis: Select Y to exclude the
            calculated plan from Total Salary and Allowances compensation basis, or N to include the
            calculated plan in the Total Salary and Allowances compensation basis.
        plan_type_name_override: Overrides the plan type name for the calculated plan.
    """

    class Meta:
        name = "Calculated_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_calculation_reference: Optional[CalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Amount_Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    target_percent_calculation_reference: Optional[CalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Target_Percent_Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ceiling_amount_calculation_reference: Optional[CalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Ceiling_Amount_Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_dynamic_calculated_plan: Optional[bool] = field(
        default=None,
        metadata={
            "name": "is_Dynamic_Calculated_Plan",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_event_driven_calculated_plan: Optional[bool] = field(
        default=None,
        metadata={
            "name": "is_Event_Driven_Calculated_Plan",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_from_total_salary_and_allowance_compensation_basis: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_from_Total_Salary_and_Allowance_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    plan_type_name_override: Optional[str] = field(
        default=None,
        metadata={
            "name": "Plan_Type_Name_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommissionPlanProfileReplacementDataDetailsType:
    """
    Commission Plan Profile Replacement Data Details.

    Attributes:
        amount: Enter the amount of the target commission amount. Workday uses this value if it can
            find no other target value for the employee. This can happen when employees are not
            eligible for any of the multiple plan targets, or are eligible for multiple plan profile
            targets.
        draw_amount: Enter the amount of the target commission draw amount. Workday uses this value
            if it can find no other target value for the employee. This can happen when employees
            are not eligible for any of the multiple plan targets, or are eligible for multiple plan
            profile targets.
        currency_reference: Currency
    """

    class Meta:
        name = "Commission_Plan_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    draw_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Draw_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensatableDefaultGuidelinesDataType:
    """
    Data element containing the compensation guidelines for a compensation change.

    Attributes:
        compensation_package_reference: Compensation Package to assign.
        compensation_grade_reference: Compensation grade to assign. Required if you select a
            compensation package. Doesn't default for Request Compensation Change.
        compensation_grade_profile_reference: Profile within the Compensation Grade to assign.
            Does not default for Request Compensation Change.
        compensation_step_reference: Compensation Step within the Compensation Grade Profile.
    """

    class Meta:
        name = "Compensatable_Default_Guidelines_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_package_reference: Optional[CompensationPackageObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile_reference: Optional[CompensationGradeProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step_reference: Optional[CompensationStepObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableGuidelinesDataType:
    """
    Data element containing the compensation guidelines for a compensation change.

    Attributes:
        compensation_package_reference: Compensation Package to assign.
        compensation_grade_reference: Compensation grade to assign. Required if you select a
            compensation package. Doesn't default for Request Compensation Change.
        compensation_grade_profile_reference: Profile within the Compensation Grade to assign.
            Does not default for Request Compensation Change.
        compensation_step_reference: Compensation Step within the Compensation Grade Profile.
        progression_start_date: Start date for the Compensation Step.
    """

    class Meta:
        name = "Compensatable_Guidelines_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_package_reference: Optional[CompensationPackageObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile_reference: Optional[CompensationGradeProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step_reference: Optional[CompensationStepObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    progression_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Progression_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkAmountReplacmentDataType:
    """
    Benchmark Job Composite Data.

    Attributes:
        percentile_reference: Valid options include 5th to 95th percentile, in increments of 5's.
            For example, 5th, 10th, 15th, 20th, 25th, etc.
        amount: The base salary amount that maps to a Benchmark Percentile.
    """

    class Meta:
        name = "Compensation_Benchmark_Amount_Replacment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    percentile_reference: Optional[CompensationBenchmarkPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class CompensationBenchmarkComponentCategoryAgingSelectorType:
    """
    Compensation Component Category Selector for Aging Configuration.

    Attributes:
        compensation_component_reference: Component Category for Calculated Benchmark Cycle Aging
            Configuration
        all_compensation_components: All Component Category Boolean for Calculated Benchmark Cycle
            Aging Configuration
    """

    class Meta:
        name = "Compensation_Benchmark_Component_Category_Aging_SelectorType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_component_reference: list[
        CompensationSurveyJobResultComponentCategoryObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Component_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    all_compensation_components: Optional[bool] = field(
        default=None,
        metadata={
            "name": "All_Compensation_Components",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkComponentCategorySelectorType:
    """
    Compensation Benchmark Component Category Selector.

    Attributes:
        compensation_component_reference: Compensation Components Reference
        all_compensation_components: All Compensation Components
    """

    class Meta:
        name = "Compensation_Benchmark_Component_Category_SelectorType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_component_reference: list[
        CompensationSurveyJobResultComponentCategoryObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Component_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    all_compensation_components: Optional[bool] = field(
        default=None,
        metadata={
            "name": "All_Compensation_Components",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkCycleHeaderDataType:
    """
    Compensation Benchmark Cycle Header Data.

    Attributes:
        id: Benchmark Cycle ID
        cycle_name: Benchmark Cycle Name
        weight_method_reference: Weight Method
        custom_field_reference: Custom Field Reference
        effective_date: Cycle Effective Date
        age_to_date: Cycle Age to Date
    """

    class Meta:
        name = "Compensation_Benchmark_Cycle_Header_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cycle_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Cycle_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    weight_method_reference: Optional[CompensationBenchmarkWeightStrategyTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Weight_Method_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    custom_field_reference: Optional[CompensationSurveyJobResultCustomTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Custom_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    age_to_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Age_to_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkJobConfigurationJobProfileFamilySelectorType:
    """
    Weight and Adjustment Configuration Selector of All Job Profiles, Job Profiles, or Job Families.

    Attributes:
        job_profile_reference: Job Profiles Reference
        job_family_reference: Job Families Reference
        all_job_profiles: All Job Profiles
    """

    class Meta:
        name = "Compensation_Benchmark_Job_Configuration_Job_Profile_Family_SelectorType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    all_job_profiles: Optional[bool] = field(
        default=None,
        metadata={
            "name": "All_Job_Profiles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkJobInputParametersType:
    """
    Compensation Benchmark Job Input Parameters.

    Attributes:
        first_percentile_reference: First percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        second_percentile_reference: Second percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        third_percentile_reference: Third percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        fourth_percentile_reference: Fourth percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        fifth_percentile_reference: Fifth percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
    """

    class Meta:
        name = "Compensation_Benchmark_Job_Input_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    first_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkProfileSelectorType:
    """
    Compensation Benchmark Profile Selector.

    Attributes:
        default_benchmark_profile: Default Benchmark Profile
        benchmark_profile_reference: Compensation Benchmark Profile Reference
    """

    class Meta:
        name = "Compensation_Benchmark_Profile_SelectorType"
        target_namespace = "urn:com.workday/bsvc"

    default_benchmark_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Default_Benchmark_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_profile_reference: Optional[CompensationBenchmarkJobProfileTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkResultConfigurationDataType:
    """
    Compensation Benchmark Result Configuration Data.

    Attributes:
        compensation_survey_reference: Compensation Survey Reference
        compensation_survey_result_reference: Compensation Survey Result Set Reference
        compensation_survey_result_scope_reference: Compensation Survey Result Scope Reference
    """

    class Meta:
        name = "Compensation_Benchmark_Result_Configuration_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: Optional[CompensationSurveyObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_survey_result_reference: Optional[CompensationSurveyResultObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_survey_result_scope_reference: Optional[
        CompensationSurveyResultScopeObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Result_Scope_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationBenchmarkSurveysSurveyResultSetsSelectorForAgingConfigurationType:
    """
    Compensation Surveys/Survey Result Sets Selector for Aging Configuration.

    Attributes:
        compensation_survey_reference: Compensation Survey Reference
        compensation_survey_result_reference: Compensation Survey Result Set Reference
    """

    class Meta:
        name = (
            "Compensation_Benchmark_Surveys_Survey_Result_Sets_Selector_for_Aging_ConfigurationType"
        )
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: list[CompensationSurveyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_survey_result_reference: list[CompensationSurveyResultObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Survey_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationChangeTemplateRequestReferencesType:
    """
    Utilize the Request References element to retrieve specific instance(s) of Compensation Change
    Template and its associated data.

    Attributes:
        template_reference: Compensation Change Template Request References
    """

    class Meta:
        name = "Compensation_Change_Template_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    template_reference: list[CompensationTemplateObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Template_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationDurationSeveranceMatrixEntryDataType:
    """
    The data for the matrix entry.

    Attributes:
        minimum_compensation_basis_range: Indicates the minimum value of the compensation basis
            range to determine eligibility for this matrix band.
        maximum_compensation_basis_range: Indicates the maximum value of the compensation basis
            range to determine eligibility for this matrix band.
        eligibility_rule_reference: This indicates the Eligibility Rule that the employee must pass
            in order to qualify for this entry.
        duration: This indicates the duration for a Duration type entry only.
        minimum_duration: This indicates the minimum recommendation for the duration or length of
            service for the entry.
        maximum_duration: This indicates the maximum recommendation for the duration/length of
            service for the entry.
    """

    class Meta:
        name = "Compensation_Duration_Severance_Matrix_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    minimum_compensation_basis_range: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Compensation_Basis_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    maximum_compensation_basis_range: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Compensation_Basis_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    minimum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    maximum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class CompensationEligibilityRuleRequestReferencesType:
    """
    Compensation Eligibility Rule References for rules to return.

    Attributes:
        compensation_eligibility_rule_reference: Compensation Eligibility Rule Reference
    """

    class Meta:
        name = "Compensation_Eligibility_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationGradeLevelDataType:
    """
    Contains compensation grade level data.

    Attributes:
        id: Compensation Grade Level ID.
        rank: Rank
        name: The unique grade level name.
        compensation_grade_reference: Compensation Grade reference
    """

    class Meta:
        name = "Compensation_Grade_Level_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rank: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Rank",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_grade_reference: list[CompensationGradeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationGradeRequestReferencesType:
    """
    Utilize the compensation grade element to retrieve specific instance(s) of compensation grade
    and its associated data.

    Attributes:
        compensation_grade_reference: Compensation Grade Reference
    """

    class Meta:
        name = "Compensation_Grade_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_reference: list[CompensationGradeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationLengthOfServiceSeveranceMatrixEntryDataType:
    """
    The data for the matrix entry.

    Attributes:
        minimum_compensation_basis_range: Indicates the minimum value of the compensation basis
            range to determine eligibility for this matrix band.
        maximum_compensation_basis_range: Indicates the maximum value of the compensation basis
            range to determine eligibility for this matrix band.
        eligibility_rule_reference: This indicates the Eligibility Rule that the employee must pass
            in order to qualify for this entry.
        length_of_service_multiplier: This indicates the length of service factor for a Length of
            Service type entry only.
        minimum_duration: This indicates the minimum recommendation for the duration or length of
            service for the entry.
        maximum_duration: This indicates the maximum recommendation for the duration/length of
            service for the entry.
    """

    class Meta:
        name = "Compensation_Length_of_Service_Severance_Matrix_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    minimum_compensation_basis_range: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Compensation_Basis_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    maximum_compensation_basis_range: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Compensation_Basis_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    length_of_service_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Length_of_Service_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 2,
        },
    )
    minimum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    maximum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class CompensationMatrixEntryAmountBasedDataType:
    """
    Data for a single compensation matrix entry.

    Attributes:
        compensation_entry_target_rule_reference: Condition rules for this compensation matrix
            entry. This determins when this entry applies itself.
        performance_evaluation_rating_reference: The performance evaluation rating to which this
            compensation matrix entry applies.
        quartile_placement_reference: The pay range quartile to which this compensation matrix entry
            applies.
        retention_reference: The retention value to which this compensation matrix entry applies.
        compa_ratio_range_segment_reference: The Compa Ratio value to which this compensation matrix
            entry applies.
        pay_range_segment_reference: The Pay Range Segment value to which this compensation matrix
            entry applies.
        potential_reference: The Potential value to which this compensation matrix entry applies.
        minimum_amount: The minimum modificatoin amount for this compensation matrix entry.
        maximum_amount: The maximum modification amount for this compensation matrix entry.
        currency_reference: The currency associated with the target rule for the minimum and maximum
            amount on the merit increase matrix.  If no value is specified, a default currency will
            be assigned provided the Default Currency exists on the parent element "MIM for Amount
            Bonus Plan Data".  Otherwise, you must enter a currency value.  Note:  For Single Target
            without any Target Rule, the currency is always set from the default currency.
    """

    class Meta:
        name = "Compensation_Matrix_Entry_Amount_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_entry_target_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Entry_Target_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    performance_evaluation_rating_reference: Optional[ReviewRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Performance_Evaluation_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    quartile_placement_reference: Optional[PayRangeQuartileObjectType] = field(
        default=None,
        metadata={
            "name": "Quartile_Placement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retention_reference: Optional[RetentionObjectType] = field(
        default=None,
        metadata={
            "name": "Retention_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compa_ratio_range_segment_reference: Optional[CompaRatioRangeSegmentObjectType] = field(
        default=None,
        metadata={
            "name": "Compa_Ratio_Range_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_range_segment_reference: Optional[PayRangeSegmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Range_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    potential_reference: Optional[PotentialObjectType] = field(
        default=None,
        metadata={
            "name": "Potential_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    minimum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    maximum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixEntryPercentBasedDataType:
    """
    Data for a single entry in a percent based compensation matrix.

    Attributes:
        compensation_matrix_entry_eligibility_rule_reference: The condition rules for this
            Compensation Matrix. Condition rules determine when the modifications defined in the
            matrix apply.
        performance_evaluation_rating_reference: The performance evaluation rating to which this
            compensation matrix entry applies.
        quartile_placement_reference: The pay range quartile to which this compensation matrix entry
            applies.
        retention_reference: The retention value to which this compensation matrix entry applies.
        compa_ratio_range_segment_reference: The Compa Ratio value to which this compensation matrix
            entry applies.
        pay_range_segment_reference: The Pay Range Segment value to which this compensation matrix
            entry applies.
        potential_reference: The Potential value to which this compensation matrix entry applies.
        minimum_percent: The minimum value for this compensation matrix entry.
        maximum_percent: The maximum value for this compensation matrix entry.
    """

    class Meta:
        name = "Compensation_Matrix_Entry_Percent_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_entry_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Entry_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    performance_evaluation_rating_reference: Optional[ReviewRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Performance_Evaluation_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    quartile_placement_reference: Optional[PayRangeQuartileObjectType] = field(
        default=None,
        metadata={
            "name": "Quartile_Placement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retention_reference: Optional[RetentionObjectType] = field(
        default=None,
        metadata={
            "name": "Retention_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compa_ratio_range_segment_reference: Optional[CompaRatioRangeSegmentObjectType] = field(
        default=None,
        metadata={
            "name": "Compa_Ratio_Range_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_range_segment_reference: Optional[PayRangeSegmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Range_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    potential_reference: Optional[PotentialObjectType] = field(
        default=None,
        metadata={
            "name": "Potential_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    minimum_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    maximum_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )


@dataclass
class CompensationMatrixRequestReferencesType:
    """
    Request references element.

    Attributes:
        compensation_matrices_reference: The compensation matrix references.
    """

    class Meta:
        name = "Compensation_Matrix_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrices_reference: list[CompensationMatrixObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrices_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanRequestCriteriaType:
    """
    Values in this element can be used to filter the types of Compensation Plans returned.

    Attributes:
        plan_type_reference: Plan Type Reference elements are used to limit the compensation plans
            returned by a type.  The ID identifier attribute is "Compensation_Plan_Type_ID".  The
            supported type values are BONUS, FUTURE.
        include_inactive: Include Inactive indicates the response will also include inactive
            Compensation Plans and Guideline components.
    """

    class Meta:
        name = "Compensation_Plan_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    plan_type_reference: list[CompensationAssignableComponentTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Plan_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanRequestReferencesType:
    """
    Use this element to request specific Compensation Plans given the reference ID values.

    Attributes:
        compensation_plan_reference: Compensation Plan Reference
    """

    class Meta:
        name = "Compensation_Plan_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: list[CompensationAssignablePlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationScorecardRequestReferencesType:
    """
    A container for one or more unique scorecard identifiers.

    Attributes:
        compensation_scorecard_reference: One or more unique scorecard identifiers.
    """

    class Meta:
        name = "Compensation_Scorecard_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_reference: list[DefaultScorecardObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationScorecardResultRequestReferencesType:
    """
    A container for one or more unique scorecard result identifiers.

    Attributes:
        compensation_scorecard_result_reference: One or more unique scorecard result identifiers.
    """

    class Meta:
        name = "Compensation_Scorecard_Result_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_result_reference: list[ScoresetContainerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Scorecard_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationStepDataType:
    """
    A compensation step.

    Attributes:
        compensation_step_id: The ID for the compensation step.  This is the index for the
            compensation step and will be autopopulated if left blank.
        effective_date: The effective date of an update to a Comp Step.  If an effective date is not
            provided, the effective date for the compensation grade will be used or current
            processing date will be used.
        sequence: The step sequence.
        name: The step name.
        amount: The step amount.
        interval: The progression interval to the next step (i.e. 1, 2, 10)
        period_reference: The progression period to the next step (i.e. days, months, years)
        progression_rule_reference: The progression rule to advance to the next step.
        grace_period_interval: The number of hours or workweeks determined by Grace Period Type in
            which the worker can be in a nonpay status before their next step progression date is
            affected.
        grace_period_type_reference: Determines whether the Grace Period Interval will be measured
            in workweeks or working hours.
        inactive: Inactive status indicator for Compensation Step.
    """

    class Meta:
        name = "Compensation_Step_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_step_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sequence: Optional[str] = field(
        default=None,
        metadata={
            "name": "Sequence",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    interval: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Interval",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    period_reference: Optional[FrequencyBehaviorObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    progression_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Progression_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grace_period_interval: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grace_Period_Interval",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 0,
        },
    )
    grace_period_type_reference: Optional[FrequencyBehaviorObjectType] = field(
        default=None,
        metadata={
            "name": "Grace_Period_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobSubDetailDataType:
    """
    Data element with further details of a survey job, such as specialty.

    Attributes:
        job_sub_detail_reference: Reference of further details of a survey job, such as specialty.
        specialty: Specialized area of a survey job.
    """

    class Meta:
        name = "Compensation_Survey_Job_Sub-Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_sub_detail_reference: Optional[CompensationSurveyJobSubDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Sub-Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    specialty: Optional[str] = field(
        default=None,
        metadata={
            "name": "Specialty",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobsCriteriaType:
    """
    Compensation Survey Jobs Criteria element.

    Attributes:
        compensation_survey_reference: The instance of compensation survey that the survey job will
            be linked to.
    """

    class Meta:
        name = "Compensation_Survey_Jobs_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: Optional[CompensationSurveyObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobsReferencesType:
    """
    Compensation Survey Jobs References element.

    Attributes:
        job_detail_reference: Reference ID for the survey job with job title and possibly level,
            function, or family.
    """

    class Meta:
        name = "Compensation_Survey_Jobs_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    job_detail_reference: list[CompensationSurveyJobDetailObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationSurveyJobsRequestReferencesType:
    """
    Compensation survey reference element.

    Attributes:
        compensation_survey_reference: The instance of compensation survey that the data will be
            applied to.
    """

    class Meta:
        name = "Compensation_Survey_Jobs_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: list[CompensationSurveyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationSurveyResultInputParametersType:
    """
    Compensation Survey Result Input Parameters.

    Attributes:
        first_custom_type_reference: Type of the first compensation survey job result custom field.
            Example: number of companies, number of employees, or average.
        second_custom_type_reference: Type of the second compensation survey job result custom
            field. Example: number of companies, number of employees, or average.
        third_custom_type_reference: Type of the third compensation survey job result custom field.
            Example: number of companies, number of employees, or average.
        fourth_custom_type_reference: Type of the fourth compensation survey job result custom
            field. Example: number of companies, number of employees, or average.
        first_percentile_reference: First percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        second_percentile_reference: Second percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        third_percentile_reference: Third percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        fourth_percentile_reference: Fourth percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
        fifth_percentile_reference: Fifth percentile field for compensation benchmark. Example,
            10th, 25th, 50th, 75th, or 90th.
    """

    class Meta:
        name = "Compensation_Survey_Result_Input_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    first_custom_type_reference: Optional[CompensationSurveyJobResultCustomTypeObjectType] = field(
        default=None,
        metadata={
            "name": "First_Custom_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_custom_type_reference: Optional[CompensationSurveyJobResultCustomTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_type_reference: Optional[CompensationSurveyJobResultCustomTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Third_Custom_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_custom_type_reference: Optional[CompensationSurveyJobResultCustomTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_reference: Optional[CompensationSurveyJobResultPercentileObjectType] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyResultScopeSelectorType:
    """
    Compensation Survey Result Scope Selector for Aging Configuration.

    Attributes:
        compensation_survey_result_scope_reference: Compensation Survey Result Scope for Calculated
            Benchmark Cycle Aging Configuration
        all_compensation_survey_result_scopes: All Compensation Survey Result Scope Boolean for
            Calculated Benchmark Cycle Aging Configuration
    """

    class Meta:
        name = "Compensation_Survey_Result_Scope_SelectorType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_result_scope_reference: list[CompensationSurveyResultScopeObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Compensation_Survey_Result_Scope_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    all_compensation_survey_result_scopes: Optional[bool] = field(
        default=None,
        metadata={
            "name": "All_Compensation_Survey_Result_Scopes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationTemplateFieldDataType:
    """
    Compensation Template Field Data.

    Attributes:
        employee_visibility_date_reference: Employee Visibility Date Compensation Template Fields
        future_dated_events_reference: Future Dated Events Compensation Template Fields
        total_base_pay_field_reference: Total Base Pay Compensation Fields
        primary_compensation_basis_field_reference: Primary Compensation Basis Compensation Template
            Fields
        guidelines_field_reference: Guidelines Compensation Template Fields
        salary_field_reference: Salary Compensation Template Fields
        hourly_field_reference: Hourly Compensation Template Fields
        period_salary_field_reference: Period Salary Compensation Template Fields
        unit_salary_field_reference: Unit Salary Compensation Template Fields
        allowance_field_reference: Allowance Compensation Template Fields
        merit_field_reference: Merit Compensation Template Fields
        bonus_field_reference: Bonus Compensation Template Fields
        stock_field_reference: Stock Compensation Template Fields
        commission_field_reference: Commission Compensation Template Fields
        other_field_reference: Other Compensation Template Fields
    """

    class Meta:
        name = "Compensation_Template_Field_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_visibility_date_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Visibility_Date_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    future_dated_events_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Future_Dated_Events_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    total_base_pay_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Total_Base_Pay_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_compensation_basis_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Primary_Compensation_Basis_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    guidelines_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Guidelines_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Salary_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hourly_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Hourly_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Salary_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Salary_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Merit_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Commission_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    other_field_reference: list[CompensationTemplateFieldObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Other_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationTemplateSectionDataType:
    """
    Compensation Template Section Data.

    Attributes:
        template_section_reference: Compensation Template Sections
    """

    class Meta:
        name = "Compensation_Template_Section_DataType"
        target_namespace = "urn:com.workday/bsvc"

    template_section_reference: list[CompensationTemplateSectionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Template_Section_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConfigurableCompensationBasisDataType:
    """
    Contains information specific to a configurable compensation basis.

    Excludes Manage by Basis Total information.

    Attributes:
        id: Unique attribute identifying a valid instance of a configurable compensation basis.
        inactive: Inactive status indicator for the configurable compensation basis.
        name: Unique name identifying a valid instance of a configurable compensation basis.
        description: Description for the valid instance of configurable compensation basis.
        use_to_view_compensation: Indicator to allow display of configurable compensation basis on
            the worker's related actions menu.
        ranking: Ranking used if an employee is eligible for more than 1 compensation basis.
        eligibility_rule_reference: Eligibility Rules to establish who is eligible for this
            configurable compensation basis. If you select multiple eligibility rules, Workday
            evaluates each rule independently to determine employee eligibility for the compensation
            basis. Employees are eligible if they meet the qualifications of any one rule.
        compensation_basis_functional_area_reference: Functional area(s) for this configurable
            compensation basis. Benefits: 08f38eba0e48433a8fd1392dc9855d51, Compensation:
            e7f8e997756f419f80c963ee9c88dd0c, Planning: 9e48f14fb6a11000062945274d9430fb, or
            Projects and Work: b6e6f96990064b7995b0e84b01c9a0ba.
        salary_plans_all: If selected, all salary plans will be included in the configurable
            compensation basis.
        salary_plans_base_pay_only: If selected, salary plans will be used only towards base pay.
        salary_plans_selected_by_compensation_basis_reference: Select plans to be included in the
            configurable compensation basis.
        allowance_plans_all: If selected, all allowance plans will be included in the configurable
            compensation basis.
        allowance_plans_base_pay_only: If selected, allowance plans will be used only towards base
            pay.
        allowance_plans_selected_by_compensation_basis_reference: Select plans to be included in the
            configurable compensation basis.
        bonus_plans_all: If selected, all bonus plans will be included in the configurable
            compensation basis.
        bonus_plans_selected_by_compensation_basis_reference: Select plans to be included in the
            configurable compensation basis.
        commission_plans_all: If selected, all commission plans will be included in the configurable
            compensation basis.
        commission_plans_selected_by_compensation_basis_reference: Select plans to be included in
            the configurable compensation basis.
        future_payment_plans_all: If selected, all future payment plans will be included in the
            configurable compensation basis.
        future_payment_plans_selected_by_compensation_basis_reference: Select plans to be included
            in the configurable compensation basis.
        stock_plans_all: If selected, all stock plans will be included in the configurable
            compensation basis.
        stock_plans_selected_by_compensation_basis_reference: Select plans to be included in the
            configurable compensation basis.
        calculated_plans_all: If selected, all calculated plans will be included in the configurable
            compensation basis.
        calculated_plans_base_pay_only: If selected, calculated plans will be used only towards base
            pay.
        calculated_plans_selected_by_compensation_basis_reference: Select plans to be included in
            the configurable compensation basis.
        retirement_savings_plans_all: If selected, all retirement savings plans will be included in
            the configurable compensation basis.
        period_salary_plans_all: If selected, all period salary plans will be included in the
            configurable compensation basis.
        period_salary_plans_base_pay_only: If selected, period salary plans will be used only
            towards base pay.
        period_salary_plans_selected_by_compensation_basis_reference: Select plans to be included in
            the configurable compensation basis.
    :ivar
        retirement_savings_plans_selected_by_compensation_basis_reference:
        Select plans to be included in the configurable compensation
        basis.
    """

    class Meta:
        name = "Configurable_Compensation_Basis_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_to_view_compensation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_to_View_Compensation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ranking: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Ranking",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_basis_functional_area_reference: list[
        CompensationBasisFunctionalAreaObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Basis_Functional_Area_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    salary_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Salary_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_plans_base_pay_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Salary_Plans_-_Base_Pay_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_plans_selected_by_compensation_basis_reference: list[CompensationPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Salary_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allowance_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plans_base_pay_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allowance_Plans_-_Base_Pay_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plans_selected_by_compensation_basis_reference: list[AllowancePlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Bonus_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plans_selected_by_compensation_basis_reference: list[BonusPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Commission_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plans_selected_by_compensation_basis_reference: list[CommissionPlanObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Commission_Plans_Selected_by_Compensation_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    future_payment_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Future_Payment_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    future_payment_plans_selected_by_compensation_basis_reference: list[
        FuturePaymentPlanObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Future_Payment_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Stock_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plans_selected_by_compensation_basis_reference: list[StockPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Calculated_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plans_base_pay_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Calculated_Plans_-_Base_Pay_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plans_selected_by_compensation_basis_reference: list[
        CalculatedPlanInterfaceObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Calculated_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_savings_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Retirement_Savings_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_savings_plans_selected_by_compensation_basis_reference: list[
        RetirementSavingsPlanObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Retirement_Savings_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plans_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plans_-_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plans_base_pay_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plans_-_Base_Pay_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plans_selected_by_compensation_basis_reference: list[
        PeriodSalaryPlanObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Period_Salary_Plans_Selected_by_Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConfigurableCompensationBasisRequestReferencesType:
    """
    Use this element to request configurable compensation bases given reference ID values.

    Attributes:
        configurable_compensation_basis_reference: Configurable Compensation Basis Request Reference
    """

    class Meta:
        name = "Configurable_Compensation_Basis_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    configurable_compensation_basis_reference: list[CompensationBasisConfigurableObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Configurable_Compensation_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class CreateSeveranceWorksheetResponseType:
    """
    Launch Employee Severance Worksheet Response.

    Attributes:
        employee_severance_worksheet_event_reference: The Employee Severance Worksheet Event
            Reference
        version
    """

    class Meta:
        name = "Create_Severance_Worksheet_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    employee_severance_worksheet_event_reference: Optional[
        EmployeeSeveranceWorksheetEventObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Employee_Severance_Worksheet_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeferredCompensationProfilesDataType:
    """
    Deferred Compensation Profiles.

    Attributes:
        eligibility_rule_reference: Eligibility Rule
        calculation_reference: Calculation
        stock_plan_reference: Stock Plan
    """

    class Meta:
        name = "Deferred_Compensation_Profiles_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    calculation_reference: Optional[DeferredBonusCalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    stock_plan_reference: Optional[StockPercentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EligibleEarningRequestCriteriaType:
    """
    Utilize the Request Criteria element to search for specific instance(s) of Eligible Earnings.

    Attributes:
        worker_reference: A unique identifier for the worker.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        eligible_earnings_period_reference: A unique identifier for the Eligible Earnings Override
            Period.
        bonus_plans_reference: Unique bonus plan identifiers
        stock_plans_reference: Unique stock plan identifiers
    """

    class Meta:
        name = "Eligible_Earning_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_earnings_period_reference: Optional[EligibleEarningsOverridePeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plans_reference: list[BonusPercentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plans_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plans_reference: list[StockPercentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plans_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibleEarningsDataType:
    """
    Data element for the Put Eligible Earnings.

    Attributes:
        eligible_earnings_id: The integration ID used to reference the Eligible Earnings Override.
            If the ID for the Eligible Earnings Override is found, the web service will update the
            existing data.  Otherwise, a new Eligible Earnings Override will be created.
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        period_reference: Reference element representing a unique instance of Eligible Earnings
            Override Period.
        apply_to_all_bonus_plans: Eligible Earnings Override applies to all Bonus Plans.
        bonus_plans_reference: Eligible Earnings Override is restricted to the specified Bonus
            Plans.
        apply_to_all_stock_plans: Eligible Earnings Override applies to all Stock Plans.
        stock_plans_reference: Eligible Earnings Override is restricted to the specified Stock
            Plans.
        amount: Amount for the Eligible Earnings Override.
        currency_reference: Reference element representing a unique instance of Currency.
    """

    class Meta:
        name = "Eligible_Earnings_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_reference: Optional[EligibleEarningsOverridePeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    apply_to_all_bonus_plans: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_to_All_Bonus_Plans",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plans_reference: list[BonusPercentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plans_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_to_all_stock_plans: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_to_All_Stock_Plans",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plans_reference: list[StockPercentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plans_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibleEarningsOverrideHvDataType:
    """
    Data element for the Put Eligible Earnings.

    Attributes:
        eligible_earnings_id: The integration ID used to reference the Eligible Earnings Override.
            If the ID for the Eligible Earnings Override is found, the web service will update the
            existing data. Otherwise, a new Eligible Earnings Override will be created.
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: An optional reference element indicating the Position/Job the
            transaction will be processed against. Used in multiple-job scenarios.
        apply_to_all_bonus_plans: Eligible Earnings Override applies to all Bonus Plans.
        restrict_to_bonus_plans_reference: Eligible Earnings Override is restricted to the specified
            Bonus Plans.
        apply_to_all_stock_plans: Eligible Earnings Override applies to all Stock Plans.
        restrict_to_stock_plans_reference: Eligible Earnings Override is restricted to the specified
            Stock Plans.
        amount: Amount for the Eligible Earnings Override.
        currency_reference: Reference element representing a unique instance of Currency.
    """

    class Meta:
        name = "Eligible_Earnings_Override__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_to_all_bonus_plans: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_to_All_Bonus_Plans",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    restrict_to_bonus_plans_reference: list[BonusPercentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Restrict_to_Bonus_Plans_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_to_all_stock_plans: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_to_All_Stock_Plans",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    restrict_to_stock_plans_reference: list[StockPercentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Restrict_to_Stock_Plans_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EligibleEarningsRequestReferencesType:
    """
    Utilize the Request References element to retrieve specific instance(s) of Eligible Earnings and
    its associated data.

    Attributes:
        eligible_earnings_reference: A unique identifier for the Eligible Earnings requested.
    """

    class Meta:
        name = "Eligible_Earnings_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings_reference: list[EligibleEarningsOverrideObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligible_Earnings_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class EmployeeMeritAdjustmentDataType:
    """
    Data element for the Request Employee Merit Adjustment business process.

    Attributes:
        base_pay_plan_reference: Salary or hourly plan to update or assign. Doesn't default for
            Request Compensation Change.
        percent_change: Percent of the compensation basis defined on the salary or hourly plan.
            Workday calculates the amount using this percent. Mutually exclusive from the amount.
        amount_change: Amount difference from the compensation change.
        new_amount: New amount for the employee merit adjustment.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
        compensation_comment: Comment for the employee merit increase adjustment.
    """

    class Meta:
        name = "Employee_Merit_Adjustment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    base_pay_plan_reference: Optional[SalaryPayPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Base_Pay_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    new_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "New_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeSeveranceWorksheetEventRequestReferencesType:
    """
    Reference for Employee Severance Worksheet Event.

    Attributes:
        employee_severance_worksheet_event_reference: Reference for Employee Severance Worksheet
            Event
    """

    class Meta:
        name = "Employee_Severance_Worksheet_Event_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    employee_severance_worksheet_event_reference: list[
        EmployeeSeveranceWorksheetEventObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Severance_Worksheet_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class EnhancedSeveranceMatrixRequestReferencesType:
    """
    Request references element.

    Attributes:
        enhanced_severance_matrix_reference: The Severance Matrix references.
    """

    class Meta:
        name = "Enhanced_Severance_Matrix_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    enhanced_severance_matrix_reference: list[SeveranceMatrixAbstractObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Enhanced_Severance_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class FifthCompensationBenchmarkForJobComponentContainerDataType:
    """
    Fifth compensation component of a compensation benchmark.

    Example: Base Pay, Target Incentives.

    Attributes:
        fifth_component_reference: Fifth compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        first_percentile_field_data: Value of the first percentile field.
        second_percentile_field_data: Value of the second percentile field.
        third_percentile_field_data: Value of the third percentile field.
        fourth_percentile_field_data: Value of the fourth percentile field.
        fifth_percentile_field_data: Value of the fifth percentile field.
    """

    class Meta:
        name = "Fifth_Compensation_Benchmark_for_Job_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fifth_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    first_percentile_field_data: Optional[FirstCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_percentile_field_data: Optional[SecondCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    third_percentile_field_data: Optional[ThirdCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_percentile_field_data: Optional[FourthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fifth_percentile_field_data: Optional[FifthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class FifthCompensationSurveyJobResultComponentContainerDataType:
    """
    Fifth compensation components of a survey job.

    Example: Base Pay, Target Incentives.

    Attributes:
        fifth_component_reference: Fifth compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        first_custom_field_data: Value of the first compensation survey job result custom field.
        second_custom_field_data: Value of the second compensation survey job result custom field.
        third_custom_field_data: Value of the third compensation survey job result custom field.
        fourth_custom_field_data: Value of the fourth compensation survey job result custom field.
        first_percentile_field_data: Value of the first compensation survey job result percentile
            field.
        second_percentile_field_data: Value of the second compensation survey job result percentile
            field.
        third_percentile_field_data: Value of the third compensation survey job result percentile
            field.
        fourth_percentile_field_data: Value of the fourth compensation survey job result percentile
            field.
        fifth_percentile_field_data: Value of the fifth compensation survey job result percentile
            field.
    """

    class Meta:
        name = "Fifth_Compensation_Survey_Job_Result_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fifth_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    first_custom_field_data: Optional[FirstCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_custom_field_data: Optional[
        SecondCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_field_data: Optional[ThirdCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_custom_field_data: Optional[
        FourthCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_field_data: Optional[
        FirstPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_field_data: Optional[
        SecondPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_field_data: Optional[
        ThirdPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_field_data: Optional[
        FourthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_field_data: Optional[
        FifthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FilterDateTimeZoneDataType:
    """
    DateTimeZone value for filter.

    Attributes:
        filter_date_time: DateTime value for DateTimeZone Filter.
        filter_time_zone_reference: Reference to TimeZone for DateTimeZone Filter.
    """

    class Meta:
        name = "Filter_DateTimeZone_DataType"
        target_namespace = "urn:com.workday/bsvc"

    filter_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Filter_DateTime",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_time_zone_reference: Optional[TimeZoneObjectType] = field(
        default=None,
        metadata={
            "name": "Filter_TimeZone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FirstCompensationBenchmarkForJobComponentContainerDataType:
    """
    First compensation component of a compensation benchmark.

    Example: Base Pay, Target Incentives.

    Attributes:
        first_component_reference: First compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        first_percentile_field_data: Value of the first percentile field.
        second_percentile_field_data: Value of the second percentile field.
        third_percentile_field_data: Value of the third percentile field.
        fourth_percentile_field_data: Value of the fourth percentile field.
        fifth_percentile_field_data: Value of the fifth percentile field.
    """

    class Meta:
        name = "First_Compensation_Benchmark_for_Job_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "First_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    first_percentile_field_data: Optional[FirstCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_percentile_field_data: Optional[SecondCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    third_percentile_field_data: Optional[ThirdCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_percentile_field_data: Optional[FourthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fifth_percentile_field_data: Optional[FifthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class FirstCompensationSurveyJobResultComponentContainerDataType:
    """
    First compensation components of a survey job.

    Example: Base Pay, Target Incentives.

    Attributes:
        first_component_reference: First compensation components of a survey job. Example: Base Pay,
            Target Incentives.
        first_custom_field_data: Value of the first compensation survey job result custom field.
        second_custom_field_data: Value of the second compensation survey job result custom field.
        third_custom_field_data: Value of the third compensation survey job result custom field.
        fourth_custom_field_data: Value of the fourth compensation survey job result custom field.
        first_percentile_field_data: Value of the first compensation survey job result percentile
            field.
        second_percentile_field_data: Value of the second compensation survey job result percentile
            field.
        third_percentile_field_data: Value of the third compensation survey job result percentile
            field.
        fourth_percentile_field_data: Value of the fourth compensation survey job result percentile
            field.
        fifth_percentile_field_data: Value of the fifth compensation survey job result percentile
            field.
    """

    class Meta:
        name = "First_Compensation_Survey_Job_Result_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "First_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    first_custom_field_data: Optional[FirstCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_custom_field_data: Optional[
        SecondCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_field_data: Optional[ThirdCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_custom_field_data: Optional[
        FourthCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_field_data: Optional[
        FirstPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_field_data: Optional[
        SecondPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_field_data: Optional[
        ThirdPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_field_data: Optional[
        FourthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_field_data: Optional[
        FifthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FourthCompensationBenchmarkForJobComponentContainerDataType:
    """
    Fourth compensation component of a compensation benchmark.

    Example: Base Pay, Target Incentives.

    Attributes:
        fourth_component_reference: Fourth compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        first_percentile_field_data: Value of the first percentile field.
        second_percentile_field_data: Value of the second percentile field.
        third_percentile_field_data: Value of the third percentile field.
        fourth_percentile_field_data: Value of the fourth percentile field.
        fifth_percentile_field_data: Value of the fifth percentile field.
    """

    class Meta:
        name = "Fourth_Compensation_Benchmark_for_Job_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fourth_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    first_percentile_field_data: Optional[FirstCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_percentile_field_data: Optional[SecondCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    third_percentile_field_data: Optional[ThirdCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_percentile_field_data: Optional[FourthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fifth_percentile_field_data: Optional[FifthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class FourthCompensationSurveyJobResultComponentContainerDataType:
    """
    Fourth compensation components of a survey job.

    Example: Base Pay, Target Incentives.

    Attributes:
        fourth_component_reference: Fourth compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        first_custom_field_data: Value of the first compensation survey job result custom field.
        second_custom_field_data: Value of the second compensation survey job result custom field.
        third_custom_field_data: Value of the third compensation survey job result custom field.
        fourth_custom_field_data: Value of the fourth compensation survey job result custom field.
        first_percentile_field_data: Value of the first compensation survey job result percentile
            field.
        second_percentile_field_data: Value of the second compensation survey job result percentile
            field.
        third_percentile_field_data: Value of the third compensation survey job result percentile
            field.
        fourth_percentile_field_data: Value of the fourth compensation survey job result percentile
            field.
        fifth_percentile_field_data: Value of the fifth compensation survey job result percentile
            field.
    """

    class Meta:
        name = "Fourth_Compensation_Survey_Job_Result_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fourth_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    first_custom_field_data: Optional[FirstCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_custom_field_data: Optional[
        SecondCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_field_data: Optional[ThirdCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_custom_field_data: Optional[
        FourthCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_field_data: Optional[
        FirstPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_field_data: Optional[
        SecondPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_field_data: Optional[
        ThirdPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_field_data: Optional[
        FourthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_field_data: Optional[
        FifthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FuturePaymentPlanAssignmentDataType:
    """
    Future payment plan assignment data submitted by the put future payment plan assignment request.

    Attributes:
        compensation_plan_reference: Compensation Plan Reference
        individual_target_amount: Individual Target Amount
        individual_target_currency_reference: Individual Target Currency Reference
        individual_target_payment_date: Individual Target Payment Date
        comment: Comment
    """

    class Meta:
        name = "Future_Payment_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[FuturePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_payment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Payment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FuturePaymentPlanAssignmentRequestCriteriaType:
    """
    Future Payment Plan Assignment Request Criteria contains a set of zero or more Employees for
    whom Future Payment Plan Assignments are requested.

    Attributes:
        employee_reference: Optional set of employees for whom future payment plan assignments
            should be retrieved. Assignments will be grouped by position for employees that have
            more than one active position.
        position_reference: Optional set of positions for whom future payment plan assignments
            should be retrieved.
    """

    class Meta:
        name = "Future_Payment_Plan_Assignment_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: list[PositionElementObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FuturePaymentPlanDataType:
    """
    Future Payment Plan Data.

    Attributes:
        compensation_element_reference: Compensation Element Reference
        currency_reference: The future payment plan currency.  If none is provide, the tenant
            default is used.
        frequency_reference: The future payment plan frequency.  If none is provide, the tenant
            default is used.
        allow_individual_targets: Allow Target Override indicator is used to permit the entry of a
            target number or percent for an individual employee assigned to this plan.
        include_all_bonus_compensation_plans: Include All Bonus Plans
        bonus_compensation_plan_reference: Bonus Plan Reference
        include_all_one_time_payment_compensation_plans: Include All One-Time Payment Plans
        one_time_payment_compensation_plan_reference: One-Time Payment Plan Reference
        amount: Amount
    """

    class Meta:
        name = "Future_Payment_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allow_individual_targets: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Individual_Targets",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_all_bonus_compensation_plans: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_All_Bonus_Compensation_Plans",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_compensation_plan_reference: list[BonusPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_all_one_time_payment_compensation_plans: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_All_One-Time_Payment_Compensation_Plans",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_compensation_plan_reference: list[OneTimePaymentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class GetCompensationGradeHierarchyRequest(GetCompensationGradeHierarchyRequestType):
    class Meta:
        name = "Get_Compensation_Grade_Hierarchy_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GrantTypeSplitReplacementDataType:
    """
    Data for Grant Type Split.

    Attributes:
        stock_grant_type_reference: Grant Type of the stock or option.
        stock_vesting_schedule_reference: Vesting schedule of stock or option.
        stock_date_rule_reference: The expiration rule for the stock or option.
        grant_split_percent: Fractional proportion of the Grant. Must sum up to 1.
    """

    class Meta:
        name = "Grant_Type_Split_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_grant_type_reference: Optional[StockGrantTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Grant_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    stock_vesting_schedule_reference: Optional[StockVestingScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Vesting_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_date_rule_reference: Optional[StockDateRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Date_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_split_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Split_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )


@dataclass
class JobProfileForCompensationSurveyJobMatchType:
    """
    Data element for job profile for compensation survey job match.

    Attributes:
        job_profile_reference: Reference of job profile in Workday for the compensation survey job
            match.
    """

    class Meta:
        name = "Job_Profile_for_Compensation_Survey_Job_MatchType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocalityPayAreaLocationDataType:
    """
    Contains location information for the locality pay area.

    Attributes:
        location_reference: Active Location with usage of Business Site reference associated to the
            locality pay area.
        delete: If True is entered, the Location will be removed from the Locality Pay Area.
    """

    class Meta:
        name = "Locality_Pay_Area_Location_DataType"
        target_namespace = "urn:com.workday/bsvc"

    location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalityPayAreaRequestReferencesType:
    """
    Utilize the Request References element to retrieve specific instance(s) of Locality Pay Area and
    its associated data.

    Attributes:
        locality_pay_area_reference: A unique identifier for the Locality Pay Area requested.
    """

    class Meta:
        name = "Locality_Pay_Area_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    locality_pay_area_reference: list[LocalityPayAreaObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Locality_Pay_Area_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class MeritPlanProfileAmountReplacementDataType:
    """
    Data for a Merit Amount plan profile.

    Attributes:
        profile_amount: Target Amount for this Plan Profile
        currency_reference: Currency for the Profile Amount
        condition_rule_reference: Condition Rule for this Plan Profile
        compensation_basis_reference: Compensation Basis for this Plan Profile
    """

    class Meta:
        name = "Merit_Plan_Profile_Amount_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    profile_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Profile_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPlanProfilePercentReplacementDataType:
    """
    This is a wrapper for the Merit Plan Percent Plan Profile Percent Replacement; used to display
    or replace Percent Plan Profile Data.

    Attributes:
        eligibility_rule_reference: This is the eligibility rule associated to the Merit Plan
            Profile.
        percentage: Target Percentage for a Merit Plan Profile.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
    """

    class Meta:
        name = "Merit_Plan_Profile_Percent_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentDataType:
    """
    Data Element that contains the one-time payment information.

    Attributes:
        one_time_payment_plan_reference: One-time payment plan for the one-time payment. If Multiple
            One-Time Payments is enabled on the Edit Tenant Setup - HCM task, there can be multiple
            plans.
        scheduled_payment_date: Date the employee will receive the one-time payment. Workday
            defaults the effective date if a Scheduled Payment Date is not provided. Multiple One-
            Time Payments must be enabled on the Edit Tenant Setup - HCM task.
        clawback_date: Enter a clawback date for this one-time payment. Payment is no longer
            eligible for recovery after this date.
        coverage_start_date: Start date of the period a FLSA-eligible wage increase applies.
        coverage_end_date: End date of the period a FLSA-eligible wage increase applies.
        amount: Amount of the one time payment.  Decimal precision of the amount must match the
            currency.  This is mutually exclusive with the percent.
        percent: Percent of the calculation basis defined on the one- time payment plan. Workday
            calculates the amount based on this percent. This is mutually exclusive with the amount.
        currency_reference: Currency for the one-time payment. Defaults to the one-time payment plan
            currency default if not provided.
        comment: Comment for the one-time payment.
        do_not_pay: If True, Workday Payroll doesn't process this one- time payment.
        costing_company_reference: Optional: Specify a costing company to charge this one-time
            payment to.  Intercompany Accounting must be enabled in Edit Tenant Setup - Payroll.
        one_time_payment_worktags_reference: The worktags associated with this one-time payment. If
            provided, the worktag type must match that of the Worktag Balancing Configuration unless
            the employee has that organizational assignment.
    """

    class Meta:
        name = "One-Time_Payment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_reference: Optional[OneTimePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "One_Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scheduled_payment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Scheduled_Payment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    clawback_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Clawback_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_pay: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_company_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Costing_Company_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_worktags_reference: list[TenantedPayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "One_Time_Payment_Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanAmountBasedProfileReplacementDataType:
    """
    This is a wrapper for the One-Time Payment Plan Amount Based Profile Data; this is used to
    display or replace One-Time Payment Plan Amount Based Profile Data.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        amount: Enter the amount of the target one-time payment amount. Workday uses this value if
            it can find no other target value for the employee. This can happen when employees are
            not eligible for any of the multiple plan targets, or are eligible for multiple plan
            profile targets.
        currency_reference: Currency
        minimum_amount: Enter the recommended minimum amount for this profile.
        maximum_amount: Enter the recommended maximum amount for this profile.
        worktags_reference: The worktags associated with this one-time payment.
        schedule_reference: Contains a reference for One-Time Payment Plan Schedule instance
        clawback_schedule_reference: The reference ID for the one-time payment plan schedule.
        cost_to_new_hire_organizations: Indicator for whether or not charging this One-Time Payment
            to New Hire Organizations.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Amount_Based_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    minimum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    maximum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    worktags_reference: list[PayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    schedule_reference: Optional[OneTimePaymentPlanScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    clawback_schedule_reference: Optional[OneTimePaymentPlanScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Clawback_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cost_to_new_hire_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cost_to_New_Hire_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryType:
    """
    Response Data.

    Attributes:
        one_time_payment_plan_configurable_category_reference: Class
        one_time_payment_plan_configurable_category_data: Contains ID &amp; Name
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_CategoryType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_configurable_category_reference: Optional[
        OneTimePaymentPlanConfigurableCategoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_configurable_category_data: Optional[
        OneTimePaymentPlanConfigurableCategoryDataType
    ] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryRequestReferencesType:
    """
    Request References.

    Attributes:
        one_time_payment_plan_configurable_category_reference: Workset used in One-Time Payment Plan
            Configurable Category Request References. The workset is part of the One-Time Payment
            Plan Configurable Categories Request &amp; One-Time Payment Plan Configurable Categories
            elements.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_Category_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_configurable_category_reference: list[
        OneTimePaymentPlanConfigurableCategoryObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class OneTimePaymentPlanPercentBasedProfileReplacementDataType:
    """
    This is a wrapper for the One-Time Payment Plan Percent Based Profile Data; this is used to
    display or replace One-Time Payment Plan Percent Based Profile Data.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        percent: Enter the target one-time payment percent. Workday uses this value if it can find
            no other target value for the employee. This can happen when employees are not eligible
            for any of the multiple plan targets, or are eligible for multiple plan profile targets.
        minimum_percent: Enter the recommended minimum percent for this profile.
        maximum_percent: Enter the recommended maximum percent for this profile.
        worktags_reference: The worktags associated with this one-time payment.
        clawback_schedule_reference: The reference ID for the one-time payment plan schedule.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Percent_Based_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    minimum_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    maximum_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    worktags_reference: list[PayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    clawback_schedule_reference: Optional[OneTimePaymentPlanScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Clawback_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanRequestReferencesType:
    """
    Use this element to request specific One-Time Payment Plans given reference ID values.

    Attributes:
        one_time_payment_plan_reference: One-Time Payment Plan Reference
    """

    class Meta:
        name = "One-Time_Payment_Plan_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_reference: list[OneTimePaymentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PercentPlanProfileReplacementDataDetailsType:
    """
    Percent Plan Profile Replacement Data Details.

    Attributes:
        percentage: Enter the percent of the target bonus amount.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
    """

    class Meta:
        name = "Percent_Plan_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 4,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PerformanceFactorCompensationMatrixWeightedDataType:
    """
    Performance Factor Compensation Matrix Weighted Data is part of Performance Factors Data within
    a Bonus Plan; there must be one Performance Factor Compensation Matrix Weighted Data for a
    Performance Factors Data.

    Attributes:
        compensation_matrix_weighted_reference: Identifies the compensation matrix used to calculate
            the employee's target amount during the bonus process. You must enter at least one
            compensation matrix.
        apply_net_attainment: Indicates that Net Attainment is an input to employee bonus targets.
        weight: The total weight between all compensation matrices and scorecards must total 100
            percent.
        bonus_modifier_reference: This is the Bonus Modifier defined for the compensation matrix.
            This impacts the bonus amount awarded.
    """

    class Meta:
        name = "Performance_Factor_Compensation_Matrix_Weighted_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_weighted_reference: Optional[
        CompensationWeightedPercentMatrixObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Weighted_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_net_attainment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_Net_Attainment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weight",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )
    bonus_modifier_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Modifier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceFactorScorecardDataType:
    """
    Performance Factor Scorecard Data is part of Performance Factors Data within a Bonus Plan.

    There must be at least one Performance Factor Scorecard Data within
    the Performance Factors Data.

    Attributes:
        scorecard_reference: Identifies the scorecards used to calculate the employee's target
            amount during the bonus process. You must enter at least one.
        weight: The total weight between all compensation matrices and scorecards must total 100
            percent.
        bonus_modifier_reference: This is the Bonus Modifier defined for the compensation scorecard.
            This impacts the bonus amount awarded.
    """

    class Meta:
        name = "Performance_Factor_Scorecard_DataType"
        target_namespace = "urn:com.workday/bsvc"

    scorecard_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weight",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )
    bonus_modifier_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Modifier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceMatrixDataType:
    """
    This is a wrapper for the Bonus Plan Performance Matrix and is mutually exclusive with
    Performance Factors Data.

    Attributes:
        compensation_matrix_reference: Identifies the compensation matrix used to calculate the
            employee's target amount during the bonus process.
        use_matrix_as_reference_only: Select if you do not want the bonus process to use the
            compensation matrix to calculate pools, but display the ranges only for reference. When
            setting up the bonus process for the bonus plan, Workday displays the bonus pool based
            on the matrix side-by-side with the bonus pool, which reflects the budget from an
            executive level. You can then compare the two pools to figure out whether the money
            you've received to fund the bonus event can cover the published matrix requirements, or
            whether the guidelines exceed the allowed budget.
        apply_net_attainment: Indicates that Net Attainment is an input to employee bonus targets.
        bonus_modifier_reference: This is the Bonus Modifier defined for the compensation matrix.
            This impacts the bonus amount awarded.
    """

    class Meta:
        name = "Performance_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_matrix_as_reference_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Matrix_as_Reference_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_net_attainment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_Net_Attainment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_modifier_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Modifier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityAssignmentDeletedDataType:
    """
    Contains assignments which have been removed from the employee.

    An assignment can only be removed if no pay activity has occurred.

    Attributes:
        period_activity_assignment_reference: Reference element to an existing individual period
            activity assignment.  Must be provided when changing or deleting an assignment
        period_activity_reference: Reference element to a Period Activity.  Required when adding a
            new period activity assignment.
        period_activity_task_reference: Reference element of a Period Activity Task.  Use when
            adding a new period activity task assignment.
        period_activity_start_date: Start Date of the activity assignment.  Must fall on or after
            the Period Range if provided. Defaults from the given Period Range if not provided.
        period_activity_end_date: End Date of the activity assignment. Must fall on or before the
            Period Range if provided. Defaults from the given Period Range if not provided.
        comment: An optional comment about the assignment
    """

    class Meta:
        name = "Period_Activity_Assignment_Deleted_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_assignment_reference: Optional[PeriodActivityAssignmentObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_reference: Optional[PeriodActivityObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_task_reference: Optional[PeriodActivityTaskObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Activity_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 500,
        },
    )


@dataclass
class PeriodActivityEligibilityEntryDataType:
    """
    Encapsulating element containing eligible period activity data.

    Attributes:
        period_activity_reference: Reference element representing a unique instance of a Period
            Activity.
        period_activity_task_reference: Reference element representing a unique instance of Period
            Activity Task.
        assigned_unit_quantity: The Units Quantity that will default in the assignment. This can
            only be set if the Period Activity and Period Activity Task are entered as well.
    """

    class Meta:
        name = "Period_Activity_Eligibility_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_reference: Optional[PeriodActivityObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_task_reference: Optional[PeriodActivityTaskObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assigned_unit_quantity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Unit_Quantity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )


@dataclass
class PeriodActivityRateMatrixEntrySequenceDataType:
    """
    Period Activity Rate Matrix entry data for rate and accelerator.

    Attributes:
        default_unit_rate: The default unit rate for rate matrix entry
        accelerator_amount: The accelerator amoutn for rate matrix entry
        accelerator_percent: The accelerator percent for rate matrix entry
        accelerator_base_reference: Accelerator Base Reference
    """

    class Meta:
        name = "Period_Activity_Rate_Matrix_Entry_Sequence_DataType"
        target_namespace = "urn:com.workday/bsvc"

    default_unit_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Unit_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    accelerator_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Accelerator_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    accelerator_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Accelerator_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 6,
        },
    )
    accelerator_base_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Accelerator_Base_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityRateMatrixRequestReferencesType:
    """
    Utilize the period activity rate matrix to retrieve specific instance(s) of period activity rate
    matrix and its associated data.

    Attributes:
        period_activity_rate_matrix_reference: Period Activity Rate Matrix reference
    """

    class Meta:
        name = "Period_Activity_Rate_Matrix_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_rate_matrix_reference: list[PeriodActivityRateMatrixObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PeriodActivityTaskDataType:
    """
    Contains Period Activity Task data.

    Attributes:
        id: The ID for the period activity task.  This is the index for the period activity task and
            will be autopopulated if left blank.
        period_activity_task_code: The Period Activity Task Code.
        period_activity_task_name: The Period Activity Task Name.
        period_activity_task_description: The description of a Period Activity Task
        period_activity_unit_reference: The Period Activity Unit associated with this Period
            Activity Task.
        academic_period_reference: The Academic Period associated with this Period Activity Task.
        default_unit_quantity: The Default Unit Quantity used when assigning tasks.
        allow_unit_quantity_override: A boolean value that indicates whether the Default Unit
            Quantity can be overridden or not on assignment.
        inactive: Inactive status indicator for this Period Activity Task.
    """

    class Meta:
        name = "Period_Activity_Task_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_task_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_task_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_task_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_unit_reference: Optional[PeriodActivityUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_period_reference: Optional[AcademicPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_unit_quantity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Unit_Quantity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    allow_unit_quantity_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Unit_Quantity_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityTaskRequestReferencesType:
    """
    Utilize the period activity task to retrieve specific instance(s) of period activity task and
    its associated data.

    Attributes:
        period_activity_task_reference: Period Work Task Reference
    """

    class Meta:
        name = "Period_Activity_Task_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_task_reference: list[PeriodActivityTaskObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PeriodPlanProfileReplacementDataDetailsType:
    """
    Profile data for Period Salary Plan.

    Attributes:
        default_compensation_period_multiplier: Target Number of Units for a Period Salary Plan
            Profile.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
    """

    class Meta:
        name = "Period_Plan_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    default_compensation_period_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Compensation_Period_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PreviousSystemCompensationHistoryDetailDataType:
    """
    Container for the detailed data for a previous system compensation history entry.

    Attributes:
        id: Unique identifier for a Previous System Compensation History entry. This can be entered
            here on an add to set the reference id to a customer determined value or left blank and
            a default value will be saved.  If you are updating an existing entry, entering a value
            here will change the reference id.
        worker_history_name: Name to identify the Previous System Compensation History. This does
            not have to be unique.  During an update, if no value is sent then the existing value
            will be kept. Required on an Add.
        action_date: Date of the Previous System Compensation entry. During an update, if no value
            is sent, then the existing date will be kept. Required on an Add.
        reason: Reason for the Previous System Compensation Entry. During an update, if no value is
            sent then the existing value will be kept. Required on an Add.
        amount: Amount of the Compensation for the Previous System Compensation Entry. During an
            update, if no value is sent then the existing value will be kept.
        currency_reference: Reference to the Currency.
        frequency_reference: Reference to a Frequency.
        amount_change: Amount of the compensation change for the Previous System Compensation Entry.
            During an update, if no value is sent then the existing value will be kept.
        description: Free Form Description for the Previous System Compensation Entry. During an
            update, if no valie is sent then the existing value will be kept.
    """

    class Meta:
        name = "Previous_System_Compensation_History_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_history_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_History_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    action_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Action_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfileScorecardResultDataType:
    """
    Contains the set of goals and goal values for this result.

    Attributes:
        goal_reference: A unique performance goal reference.
        achievement: A numeric value indicating the level of achievement against the related
            performance goal.
    """

    class Meta:
        name = "Profile_Scorecard_Result_DataType"
        target_namespace = "urn:com.workday/bsvc"

    goal_reference: Optional[PerformanceCriteriaObjectType] = field(
        default=None,
        metadata={
            "name": "Goal_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    achievement: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Achievement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 6,
        },
    )


@dataclass
class ProposedAllowancePlanAssignmentDataType:
    """
    Encapsulating element containing all Allowance Plan Compensation data.

    Attributes:
        allowance_plan_reference: Allowance Plan to update or assign. Does not default for Request
            Compensation Change.
        percent: Percent for the allowance plan. Required if percent allowance plan is entered and
            there is no default percent for the plan. The amount will be calculated using this
            percent. Mutually exclusive from the amount.
        amount: Amount for the allowance plan. Decimal precision of the amount must match the
            currency. Required if amount allowance plan is entered and there is no default amount
            for the plan. Mutually exclusive from the percent.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        currency_reference: Currency of the allowance plan. Required if amount allowance plan is
            entered and there is no default currency for the plan.
        frequency_reference: Frequency of the allowance plan. Required if there is no default
            frequency for the plan.
        expected_end_date: Expected end date for the plan assignment.
        reimbursement_start_date: Reimbursement Start Date.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Allowance_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allowance_plan_reference: Optional[AllowanceValuePlanObjectType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 10,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reimbursement_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Reimbursement_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedAllowanceUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Allowance Plan Compensation data.

    Attributes:
        unit_allowance_plan_reference: Unit Allowance Plan to update or assign.  Does not default
            for Request Compensation Change.
        number_of_units: Number of units to assign. Required if there is no default number of units
            for the plan.
        frequency_reference: Frequency of the unit allowance plan. Required if there is no default
            frequency for the plan.
        per_unit_amount: Amount per unit of the unit allowance plan. Required if there is no default
            amount per unit for the plan.
        currency_reference: Currency of the unit amount. Required if there is no default currency
            for the plan.
        reimbursement_start_date: Reimbursement Start Date.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Allowance_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_allowance_plan_reference: Optional[AllowanceUnitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Allowance_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reimbursement_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Reimbursement_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBasePayPlanAssignmentDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        pay_plan_reference: Salary or hourly plan to update or assign. Doesn't default for Request
            Compensation Change.
        amount: Amount for the salary or hourly plan assignment. Required if the plan has no default
            amount. Decimal precision of the amount must match the currency.  Mutually exclusive
            from the percent.
        percent_change: Percent of the compensation basis defined on the salary or hourly plan.
            Workday calculates the amount using this percent. Mutually exclusive from the amount.
        amount_change: Amount difference from the compensation change.
        currency_reference: Currency of the plan assignment.
        frequency_reference: Frequency of the salary or hourly plan. Required if the plan has no
            default frequency.
        expected_end_date: Expected end date for the plan assignment.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Base_Pay_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_plan_reference: Optional[SalaryPayPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBonusPlanAssignmentDataType:
    """
    Encapsulating element containing all Bonus Plan Compensation data.

    Attributes:
        bonus_plan_reference: Bonus Plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_amount: Individual target amount that overrides the default target percent
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        individual_target_percent: Individual target percent that overrides the default target
            percent on the plan, provided Allow Target Override is enabled on the plan. Mutually
            exclusive from Individual Target Amount.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        guaranteed_minimum: If true, employee is guaranteed the minimum for the bonus plan.
        percent_assigned: Percent of the bonus assigned. If none entered, default is 100%.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Bonus_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_plan_reference: Optional[BonusPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_assigned: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_Assigned",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCalculatedPlanAssignmentDataType:
    """
    Encapsulating element containing all Calculated Plan Compensation data.

    Attributes:
        calculated_plan_reference: Calculated plan to update or assign.  Does not default for
            Request Compensation Change.
        amount_override: This field allows an override amount to be specified for workerswho are
            managed by compensation basis.
        currency_reference: Currency of the calculated plan.
        frequency_reference: Frequency of the calculated plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Calculated_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    calculated_plan_reference: Optional[CalculatedPlanInterfaceObjectType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_override: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCommissionPlanAssignmentDataType:
    """
    Encapsulating element containing all Commission Plan Compensation data.

    Attributes:
        commission_plan_reference: Commission plan to update or assign. Does not default for Request
            Compensation Change.
        target_amount: Target amount for the Commission Plan.
        currency_reference: Currency for the Commission Plan. Required if the target amount is
            entered and there is no default currency for the plan.
        frequency_reference: Frequency for the Commission Plan. Required if the target amount is
            entered and there is no default amount for the plan.
        draw_amount: Draw amount for the Commission Plan.
        draw_frequency_reference: Reference element representing a unique instance of Frequency for
            the Draw Amount.
        draw_duration: Description of the duration of the draw amount. For informational purposes.
        recoverable: If true, the compensation element is recoverable.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Commission_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    commission_plan_reference: Optional[CommissionPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Draw_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    draw_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Draw_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_duration: Optional[str] = field(
        default=None,
        metadata={
            "name": "Draw_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recoverable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Recoverable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedMeritPlanAssignmentDataType:
    """
    Encapsulating element containing all Merit Plan Compensation data.

    Attributes:
        merit_plan_reference: Merit Plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_amount: Individual target amount that overrides the default target amount
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        individual_target_percent: Individual target percent that overrides the default target
            percent on the plan, provided Allow Target Override is enabled on the plan. Mutually
            exclusive from Individual Target Amount.
        guaranteed_minimum: If true, employee is guaranteed the minimum for the merit plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Merit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    merit_plan_reference: Optional[MeritPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedPeriodSalaryPlanAssignmentDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        period_salary_plan_reference: Period salary plan to update or assign.  Does not default for
            Request Compensation Change.
        compensation_period_reference: Compensation period of time measure.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        currency_reference: Currency of the period salary plan.
        compensation_period_multiplier: Default Compensation Period Multiplier is required.
        frequency_reference: Frequency of the period salary plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Period_Salary_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_salary_plan_reference: Optional[PeriodSalaryPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedSalaryUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Salary Plan Compensation data.

    Attributes:
        unit_salary_plan_reference: Unit salary plan to update or assign. Doesn't default for
            Request Compensation Change.
        per_unit_amount: Amount per unit of the unit salary plan. Decimal precision of the amount
            must match the currency. Required if there is no default amount for the plan.
        currency_reference: Currency of the unit amount. Required if there is no default currency
            for the plan.
        default_units: Number of units to assign.
        frequency_reference: Frequency of the unit salary plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Salary_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_salary_plan_reference: Optional[SalaryUnitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedStockPlanAssignmentDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        stock_plan_reference: Stock plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_shares: Individual target shares that overrides the default target shares
            on the plan, provided Allow Target Override is enabled on the plan.
        individual_target_percent: Individual target percent that overrides the default target
            amount on the plan, provided Allow Target Override is enabled on the plan.
        individual_target_amount: Individual target amount that overrides the default target amount
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        currency_reference: Workday ignores any currency specified for the stock plan and assigns a
            currency based on worker eligibility for stock plans.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Stock_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_reference: Optional[StockPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutBenchmarkJobResponseType:
    """
    Response element to put Benchmark Job.

    Attributes:
        benchmark_job_reference: Benchmark Job Reference
        version
    """

    class Meta:
        name = "Put_Benchmark_Job_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job_reference: Optional[CompensationBenchmarkDefaultObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationBenchmarkDataResponseType:
    """
    Put Compensation Benchmark for Job Response.

    Attributes:
        compensation_benchmark_reference: Compensation Benchmark Jobs.
        version
    """

    class Meta:
        name = "Put_Compensation_Benchmark_Data_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_benchmark_reference: Optional[CompensationBenchmarkForJobObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Benchmark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationEligibilityRuleResponseType:
    """
    Put Compensation Eligibility Rule Response element.

    Attributes:
        compensation_eligibility_rule_reference: Compensation Eligibility Rule Reference
        version
    """

    class Meta:
        name = "Put_Compensation_Eligibility_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationGradeHierarchyResponseType:
    """
    Response element containing instances of compensation grade hierarchy data.

    Attributes:
        effective_date: Date when the Compensation Grade Hierarchy becomes effective or takes
            effect.
        compensation_grade_level_reference: Contains compensation grade hierarchy information based
            on request references or request criteria.
        version
    """

    class Meta:
        name = "Put_Compensation_Grade_Hierarchy_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_level_reference: list[CompensationGradeLevelObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationGradeResponseType:
    """
    Responds with the reference ID for the compensation grade.

    Attributes:
        compensation_grade_reference: Compensation Grade Reference
        version
    """

    class Meta:
        name = "Put_Compensation_Grade_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationMatrixResponseType:
    """
    The response to a request to modify or create Compensation Matrix data.

    Attributes:
        merit_increase_matrix_reference: A reference to the created or modified compensation matrix.
        version
    """

    class Meta:
        name = "Put_Compensation_Matrix_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    merit_increase_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Merit_Increase_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationPlanResponseType:
    """
    Response element to put Compensation Plan (Bonus, Merit, Allowance, Future Payment, Commission,
    and Base Pay Plans).

    Attributes:
        compensation_plan_reference: Utilize the compensation plan element to retrieve specific
            instance(s) of compensation grade.
        version
    """

    class Meta:
        name = "Put_Compensation_Plan_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[CompensationAssignablePlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationScorecardResponseType:
    """
    Compensation Scorecard Response.

    Attributes:
        compensation_scorecard_reference: Reference ID of Compensation Scorecard.
        version
    """

    class Meta:
        name = "Put_Compensation_Scorecard_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationScorecardResultResponseType:
    """
    Contains the scorecard result identifier of the added or modified result.

    Attributes:
        compensation_scorecard_result_reference: A unique scorecard result identifier.
        version
    """

    class Meta:
        name = "Put_Compensation_Scorecard_Result_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_result_reference: Optional[ScoresetContainerObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobDetailResponseType:
    """
    Response element for Put Compensation Survey Job web service.

    Attributes:
        job_detail_reference: Reference ID for the survey job with job title and possibly level,
            function, or family.
        version
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Detail_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    job_detail_reference: Optional[CompensationSurveyJobDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobMatchesResponseType:
    """
    Response element for Put Compensation Survey Job Matches web service.

    Attributes:
        compensation_survey_reference: Compensation Survey
        version
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Matches_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: Optional[CompensationSurveyObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobResultResponseType:
    """
    Compensation survey results.

    Attributes:
        compensation_survey_job_result_reference: Compensation survey results.
        version
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Result_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_job_result_reference: Optional[CompensationSurveyJobResultObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Compensation_Survey_Job_Result_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutConfigurableCompensationBasisResponseType:
    """
    Response element for Put Configurable Compensation Basis, excluding Manage by Basis Total
    information.

    Attributes:
        configurable_compensation_basis_reference: Configurable Compensation Basis Request Reference
        version
    """

    class Meta:
        name = "Put_Configurable_Compensation_Basis_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    configurable_compensation_basis_reference: Optional[CompensationBasisConfigurableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Configurable_Compensation_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutEnhancedSeveranceMatrixResponseType:
    """
    The response for the Put Enhanced Severance Matrix web service.

    Attributes:
        severance_matrix_abstract_reference: The Enhanced Severance Matrix created or updated by the
            Put Enhanced Severance Matrix web service.
        version
    """

    class Meta:
        name = "Put_Enhanced_Severance_Matrix_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    severance_matrix_abstract_reference: Optional[SeveranceMatrixAbstractObjectType] = field(
        default=None,
        metadata={
            "name": "Severance_Matrix__abstract__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFuturePaymentPlanAssignmentResponseType:
    """
    Response to a put future payment plan assignment request.

    Attributes:
        employee_reference: The employee to whom the set of future payment plans were assigned.
        position_reference: The position to whom the set of future payment plans were assigned.
        assignment_date: Assignment date of the future payment plan assignment.
        version
    """

    class Meta:
        name = "Put_Future_Payment_Plan_Assignment_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutImportProcessResponseType:
    """
    Put Import Process Response element.

    Attributes:
        import_process_reference: Web Service Background Process Runtime element
        header_instance_reference: Header Instance element
        version
    """

    class Meta:
        name = "Put_Import_Process_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    import_process_reference: Optional[WebServiceBackgroundProcessRuntimeObjectType] = field(
        default=None,
        metadata={
            "name": "Import_Process_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    header_instance_reference: Optional[InstanceObjectType] = field(
        default=None,
        metadata={
            "name": "Header_Instance_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutOneTimePaymentPlanConfigurableCategoryRequestType:
    """
    Incoming request element.

    Attributes:
        one_time_payment_plan_configurable_category_reference: Class
        one_time_payment_plan_configurable_category_data: Contains ID &amp; Name
        add_only: Flag
        version
    """

    class Meta:
        name = "Put_One-Time_Payment_Plan_Configurable_Category_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_configurable_category_reference: Optional[
        OneTimePaymentPlanConfigurableCategoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_configurable_category_data: Optional[
        OneTimePaymentPlanConfigurableCategoryDataType
    ] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutOneTimePaymentPlanConfigurableCategoryResponseType:
    """
    Response Element.

    Attributes:
        one_time_payment_plan_configurable_category_reference: Class
        version
    """

    class Meta:
        name = "Put_One-Time_Payment_Plan_Configurable_Category_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_configurable_category_reference: Optional[
        OneTimePaymentPlanConfigurableCategoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutOneTimePaymentPlanResponseType:
    """
    Response element for put one-time payment plan, including Amount Based and Percent Based plans.

    Attributes:
        one_time_payment_plan_reference: Contains an instance of a successfully put one-time payment
            plan.
        version
    """

    class Meta:
        name = "Put_One-Time_Payment_Plan_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_reference: Optional[OneTimePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPeriodActivityRateMatrixResponseType:
    """
    Put Period Activity Rate Matrix response.

    Attributes:
        period_activity_rate_matrix_reference: New Period Activity Rate Matrix
        version
    """

    class Meta:
        name = "Put_Period_Activity_Rate_Matrix_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_rate_matrix_reference: Optional[PeriodActivityRateMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPeriodActivityTaskResponseType:
    """
    Responds with the reference ID for the period activity task.

    Attributes:
        period_activity_task_reference: Period Work Task Reference
        version
    """

    class Meta:
        name = "Put_Period_Activity_Task_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_task_reference: Optional[PeriodActivityTaskObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPreviousSystemCompensationHistoryResponseType:
    """
    Response for Put Previous System Compensation History.

    Returns the worker.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        version
    """

    class Meta:
        name = "Put_Previous_System_Compensation_History_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStockParticipationRateTableResponseType:
    """
    Put Stock Participation Rate Table Response.

    Attributes:
        stock_participation_rate_table_reference: Stock Participation Rate Table Reference
        version
    """

    class Meta:
        name = "Put_Stock_Participation_Rate_Table_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    stock_participation_rate_table_reference: Optional[StockParticipationRateTableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Stock_Participation_Rate_Table_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveCompensationPlanAssignmentDataType:
    """
    Specific compensation plan assigned to the worker to be removed.

    Attributes:
        compensation_plan_reference: Compensation plan assigned to the worker to be removed.
    """

    class Meta:
        name = "Remove_Compensation_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: list[CompensationPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestBonusPaymentResponseType:
    """
    Response element containing the reference to the Bonus Payment Request.

    Attributes:
        bonus_payment_event_reference: Reference to the Put Bonus Payment Request
        version
    """

    class Meta:
        name = "Request_Bonus_Payment_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_payment_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Payment_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestCompensationChangeResponseType:
    """
    Response element for the Request Compensation Change business process.

    Attributes:
        request_compensation_change_event_reference: Reference element representing a unique
            instance of Request Compensation Change business process.
        version
    """

    class Meta:
        name = "Request_Compensation_Change_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_compensation_change_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Request_Compensation_Change_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestDefaultCompensationResponseType:
    """
    Response element for the Request Default Compensation business process.

    Attributes:
        request_default_compensation_event_reference: Reference element representing a unique
            instance of Request Default Compensation business process
        version
    """

    class Meta:
        name = "Request_Default_Compensation_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_default_compensation_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestEmployeeMeritAdjustmentResponseType:
    """
    Response element for the Request Employee Merit Adjustment business process.

    Attributes:
        employee_merit_adjustment_event_reference: Reference element representing a unique instance
            of Request Employee Merit Adjustment business process.
        version
    """

    class Meta:
        name = "Request_Employee_Merit_Adjustment_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    employee_merit_adjustment_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Merit_Adjustment_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestRequisitionCompensationChangeResponseType:
    """
    Response element for the Request Requisition Compensation Change business process.

    Attributes:
        compensation_event_for_job_requisition_reference: Reference element representing a unique
            instance of Request Requisition Compensation Change business process.
        version
    """

    class Meta:
        name = "Request_Requisition_Compensation_Change_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_event_for_job_requisition_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Event_for_Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryPlanDataType:
    """
    This is a wrapper for Salary Plans.

    Attributes:
        apply_full_time_equivalent: Assignment amounts are to be entered in full-time equivalent
            amounts. Workday prorates compensation for employees assigned to this plan based on the
            full-time equivalent hours percentage. If not selected, assignment amounts are to be
            entered as the flat amount to be paid to the employee. Workday will divide the assigned
            amount by the ~employee’s~ FTE for 100% FTE calculations.
        use_assigned_value_in_100_percent_calculation: Assignment amounts are to be entered as the
            flat amount to be paid to the employee. Workday will use the assigned amount in 100% FTE
            calculations. The amount assigned to each employee will serve as a fixed value for the
            calculation. If not selected, Workday will divide the assigned amount by the
            ~employee’s~ FTE for 100% FTE calculations.
        rounding_rule_reference: If selected, Workday applies a rounding rule on prorated
            calculations.
    """

    class Meta:
        name = "Salary_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    apply_full_time_equivalent: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_Full_Time_Equivalent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_assigned_value_in_100_percent_calculation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Assigned_Value_in_100_Percent_Calculation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ScorecardProfileDataType:
    """
    Contains scorecard data.

    Attributes:
        scorecard_profile_id: Unique identifier
        scorecard_profile_target_rule_reference: A unique eligibility rule reference. The rule
            delineates results by how a worker matches the rule evaluation.
        scorecard_profile_goal_data: Contains set of goals and goal values that apply to the
            eligibility rule.
    """

    class Meta:
        name = "Scorecard_Profile_DataType"
        target_namespace = "urn:com.workday/bsvc"

    scorecard_profile_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Scorecard_Profile_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scorecard_profile_target_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Scorecard_Profile_Target__Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scorecard_profile_goal_data: list[ScorecardProfilePerformanceCriteriaDataType] = field(
        default_factory=list,
        metadata={
            "name": "Scorecard_Profile_Goal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ScorecardResultDataType:
    """
    Contains the set of goals and goal values for this result.

    Attributes:
        goal_reference: A unique performance goal reference.
        achievement: A numeric value indicating the level of achievement against the related
            performance goal.
    """

    class Meta:
        name = "Scorecard_Result_DataType"
        target_namespace = "urn:com.workday/bsvc"

    goal_reference: Optional[PerformanceCriteriaObjectType] = field(
        default=None,
        metadata={
            "name": "Goal_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    achievement: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Achievement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 6,
        },
    )


@dataclass
class SecondCompensationBenchmarkForJobComponentContainerDataType:
    """
    Second compensation component of a compensation benchmark.

    Example: Base Pay, Target Incentives.

    Attributes:
        second_component_reference: Second compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        first_percentile_field_data: Value of the first percentile field.
        second_percentile_field_data: Value of the second percentile field.
        third_percentile_field_data: Value of the third percentile field.
        fourth_percentile_field_data: Value of the fourth percentile field.
        fifth_percentile_field_data: Value of the fifth percentile field.
    """

    class Meta:
        name = "Second_Compensation_Benchmark_for_Job_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    first_percentile_field_data: Optional[FirstCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_percentile_field_data: Optional[SecondCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    third_percentile_field_data: Optional[ThirdCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_percentile_field_data: Optional[FourthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fifth_percentile_field_data: Optional[FifthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class SecondCompensationSurveyJobResultComponentContainerDataType:
    """
    Second compensation components of a survey job.

    Example: Base Pay, Target Incentives.

    Attributes:
        second_component_reference: Second compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        first_custom_field_data: Value of the first compensation survey job result custom field.
        second_custom_field_data: Value of the second compensation survey job result custom field.
        third_custom_field_data: Value of the third compensation survey job result custom field.
        fourth_custom_field_data: Value of the fourth compensation survey job result custom field.
        first_percentile_field_data: Value of the first compensation survey job result percentile
            field.
        second_percentile_field_data: Value of the second compensation survey job result percentile
            field.
        third_percentile_field_data: Value of the third compensation survey job result percentile
            field.
        fourth_percentile_field_data: Value of the fourth compensation survey job result percentile
            field.
        fifth_percentile_field_data: Value of the fifth compensation survey job result percentile
            field.
    """

    class Meta:
        name = "Second_Compensation_Survey_Job_Result_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    first_custom_field_data: Optional[FirstCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_custom_field_data: Optional[
        SecondCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_field_data: Optional[ThirdCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_custom_field_data: Optional[
        FourthCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_field_data: Optional[
        FirstPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_field_data: Optional[
        SecondPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_field_data: Optional[
        ThirdPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_field_data: Optional[
        FourthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_field_data: Optional[
        FifthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ServiceDurationSeveranceMatrixEntryDataType:
    """
    The data for the matrix entry.

    Attributes:
        minimum_length_of_service: This indicates the minimum years of service an employee must have
            to qualify for this entry.
        maximum_length_of_service: This indicates the maximum years of service an employee must have
            to qualify for this entry.
        eligibility_rule_reference: This indicates the Eligibility Rule that the employee must pass
            in order to qualify for this entry.
        duration: This indicates the duration for a Duration type entry only.
        minimum_duration: This indicates the minimum recommendation for the duration or length of
            service for the entry.
        maximum_duration: This indicates the maximum recommendation for the duration/length of
            service for the entry.
    """

    class Meta:
        name = "Service_Duration_Severance_Matrix_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    minimum_length_of_service: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Length_of_Service",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 2,
        },
    )
    maximum_length_of_service: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Length_of_Service",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 2,
        },
    )
    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    minimum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    maximum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class ServiceLengthSeveranceMatrixEntryDataType:
    """
    The data for the matrix entry.

    Attributes:
        minimum_length_of_service: This indicates the minimum years of service an employee must have
            to qualify for this entry.
        maximum_length_of_service: This indicates the maximum years of service an employee must have
            to qualify for this entry.
        eligibility_rule_reference: This indicates the Eligibility Rule that the employee must pass
            in order to qualify for this entry.
        length_of_service_multiplier: This indicates the length of service factor for a Length of
            Service type entry only.
        minimum_duration: This indicates the minimum recommendation for the duration or length of
            service for the entry.
        maximum_duration: This indicates the maximum recommendation for the duration/length of
            service for the entry.
    """

    class Meta:
        name = "Service_Length_Severance_Matrix_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    minimum_length_of_service: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Length_of_Service",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 2,
        },
    )
    maximum_length_of_service: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Length_of_Service",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 2,
        },
    )
    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    length_of_service_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Length_of_Service_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 2,
        },
    )
    minimum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    maximum_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class SeverancePackageComponentDataType:
    """
    Element to input data for a severance package component on a worksheet.

    Fields for a component type, eligibility, and comment

    Attributes:
        severance_package_component_type_reference: Reference to a severance package component type.
            The component type must be included in the selected severance package.
        eligible: Boolean indicating if employee is eligible for component or not.
        comments: Comment to attach to severance package component for employee.
    """

    class Meta:
        name = "Severance_Package_Component_DataType"
        target_namespace = "urn:com.workday/bsvc"

    severance_package_component_type_reference: Optional[
        SeverancePackageComponentTypeObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Severance_Package_Component_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Eligible",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SeverancePayComponentDataType:
    """
    Subedit to enter Severance Pay Component Information.

    Fields entered here will override default amounts.

    Attributes:
        severance_package_component_type_reference: Reference for a Severance Package Component
            Type.
        duration: Number of weeks for the assignment of the severance pay component
        override_duration: Boolean to indicate if you want override the duration amount or use the
            default duration instead based on the package
        pay_rate: An amount to be paid weekly for ongoing severance.
        override_pay_rate: Boolean to indicate if you want to override the pay rate amount or use
            the default amount instead
        total: Total Amount for a Severance Pay Component.
        severance_salary_plan_reference: Reference to a salary plan used for Ongoing Severance Pay.
        severance_component_comment: Comment for a Severance Pay Component.
        currency_reference: Currency used for amounts on pay component subedits.
    """

    class Meta:
        name = "Severance_Pay_Component_DataType"
        target_namespace = "urn:com.workday/bsvc"

    severance_package_component_type_reference: Optional[
        SeverancePackageComponentTypeObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Severance_Package_Component_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    override_duration: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Override_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Pay_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    override_pay_rate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Override_Pay_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    total: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    severance_salary_plan_reference: Optional[SalaryPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Severance_Salary_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    severance_component_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Severance_Component_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SixthCompensationBenchmarkForJobComponentContainerDataType:
    """
    Sixth compensation component of a compensation benchmark.

    Example: Base Pay, Target Incentives.

    Attributes:
        sixth_component_reference: Sixth compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        first_percentile_field_data: Value of the first percentile field.
        second_percentile_field_data: Value of the second percentile field.
        third_percentile_field_data: Value of the third percentile field.
        fourth_percentile_field_data: Value of the fourth percentile field.
        fifth_percentile_field_data: Value of the fifth percentile field.
    """

    class Meta:
        name = "Sixth_Compensation_Benchmark_for_Job_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    sixth_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Sixth_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    first_percentile_field_data: Optional[FirstCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_percentile_field_data: Optional[SecondCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    third_percentile_field_data: Optional[ThirdCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_percentile_field_data: Optional[FourthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fifth_percentile_field_data: Optional[FifthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class SixthCompensationSurveyJobResultComponentContainerDataType:
    """
    Sixth compensation components of a survey job.

    Example: Base Pay, Target Incentives.

    Attributes:
        sixth_component_reference: Sixth compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        first_custom_field_data: Value of the first compensation survey job result custom field.
        second_custom_field_data: Value of the second compensation survey job result custom field.
        third_custom_field_data: Value of the third compensation survey job result custom field.
        fourth_custom_field_data: Value of the fourth compensation survey job result custom field.
        first_percentile_field_data: Value of the first compensation survey job result percentile
            field.
        second_percentile_field_data: Value of the second compensation survey job result percentile
            field.
        third_percentile_field_data: Value of the third compensation survey job result percentile
            field.
        fourth_percentile_field_data: Value of the fourth compensation survey job result percentile
            field.
        fifth_percentile_field_data: Value of the fifth compensation survey job result percentile
            field.
    """

    class Meta:
        name = "Sixth_Compensation_Survey_Job_Result_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    sixth_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Sixth_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    first_custom_field_data: Optional[FirstCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_custom_field_data: Optional[
        SecondCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_field_data: Optional[ThirdCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_custom_field_data: Optional[
        FourthCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_field_data: Optional[
        FirstPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_field_data: Optional[
        SecondPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_field_data: Optional[
        ThirdPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_field_data: Optional[
        FourthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_field_data: Optional[
        FifthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockParticipationRateTableEntryData20Type:
    """
    Stock Participation Rate Table Entry Data.

    Attributes:
        delete: If True is entered, the Stock Participation Rate Table Entry will be deleted.
        entry_sort_order: The sort order for the Stock Participation Rate Table Entry.
        management_level_reference: Reference element representing a unique instance of Management
            Level.
        job_profile_reference: Reference element representing a unique instance of Job Profile.
        country_reference: Reference element representing a unique instance of Country.
        compensation_grade_reference: Reference element representing a unique instance of
            Compensation Grade.
        eligibility_rule_reference: Reference element representing a unique instance of Condition
            Rule.
        percentage_rate: The stock participation percentage rate for the Stock Participation Rate
            Table Entry.
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Entry_Data_2.0Type"
        target_namespace = "urn:com.workday/bsvc"

    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    entry_sort_order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Entry_Sort_Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    management_level_reference: list[ManagementLevelObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Management_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_reference: list[CompensationGradeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percentage_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )


@dataclass
class StockParticipationRateTableRequestReferencesType:
    """
    Request References.

    Attributes:
        stock_participation_rate_table_reference: Stock Participation Rate Table Reference
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    stock_participation_rate_table_reference: list[StockParticipationRateTableObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Participation_Rate_Table_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StockProfileGrantSplitReplacementDataType:
    """
    Grant Split Data for Stock Profile.

    Attributes:
        stock_grant_type_reference: Grant Type of the stock or option.
        stock_vesting_schedule_reference: Vesting schedule of stock or option.
        stock_date_rule_reference: The expiration rule for the stock or option.
        grant_split_percent: The expiration rule for the stock or option.
    """

    class Meta:
        name = "Stock_Profile_Grant_Split_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_grant_type_reference: Optional[StockGrantTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Grant_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    stock_vesting_schedule_reference: Optional[StockVestingScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Vesting_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_date_rule_reference: Optional[StockDateRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Date_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_split_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Split_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )


@dataclass
class ThirdCompensationBenchmarkForJobComponentContainerDataType:
    """
    Third compensation component of a compensation benchmark.

    Example: Base Pay, Target Incentives.

    Attributes:
        third_component_reference: Third compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        first_percentile_field_data: Value of the first percentile field.
        second_percentile_field_data: Value of the second percentile field.
        third_percentile_field_data: Value of the third percentile field.
        fourth_percentile_field_data: Value of the fourth percentile field.
        fifth_percentile_field_data: Value of the fifth percentile field.
    """

    class Meta:
        name = "Third_Compensation_Benchmark_for_Job_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    third_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    first_percentile_field_data: Optional[FirstCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_percentile_field_data: Optional[SecondCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    third_percentile_field_data: Optional[ThirdCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_percentile_field_data: Optional[FourthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fourth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fifth_percentile_field_data: Optional[FifthCompensationBenchmarkPercentileAmountDataType] = (
        field(
            default=None,
            metadata={
                "name": "Fifth_Percentile_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class ThirdCompensationSurveyJobResultComponentContainerDataType:
    """
    Third compensation components of a survey job.

    Example: Base Pay, Target Incentives.

    Attributes:
        third_component_reference: Third compensation components of a survey job. Example: Base Pay,
            Target Incentives.
        first_custom_field_data: Value of the first compensation survey job result custom field.
        second_custom_field_data: Value of the second compensation survey job result custom field.
        third_custom_field_data: Value of the third compensation survey job result custom field.
        fourth_custom_field_data: Value of the fourth compensation survey job result custom field.
        first_percentile_field_data: Value of the first compensation survey job result percentile
            field.
        second_percentile_field_data: Value of the second compensation survey job result percentile
            field.
        third_percentile_field_data: Value of the third compensation survey job result percentile
            field.
        fourth_percentile_field_data: Value of the fourth compensation survey job result percentile
            field.
        fifth_percentile_field_data: Value of the fifth compensation survey job result percentile
            field.
    """

    class Meta:
        name = "Third_Compensation_Survey_Job_Result_Component_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    third_component_reference: Optional[CompensationSurveyJobResultComponentCategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Component_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    first_custom_field_data: Optional[FirstCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "First_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    second_custom_field_data: Optional[
        SecondCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_custom_field_data: Optional[ThirdCustomFieldCompensationSurveyJobResultFieldDataType] = (
        field(
            default=None,
            metadata={
                "name": "Third_Custom_Field_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    fourth_custom_field_data: Optional[
        FourthCustomFieldCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Custom_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_percentile_field_data: Optional[
        FirstPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_percentile_field_data: Optional[
        SecondPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_percentile_field_data: Optional[
        ThirdPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_percentile_field_data: Optional[
        FourthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_percentile_field_data: Optional[
        FifthPercentileCompensationSurveyJobResultFieldDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Percentile_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TotalValueCompensationMatrixDataType:
    """
    The data for this Total Value Matrix.

    Attributes:
        amount_based: If true, this Total Value Matrix is Amount based.
        percent_based: If true, this Total Value Matrix is Percent based.
        weighted_based: If true, this Total Value Matrix is Weighted based.
        calculation_reference: The calculation of this Total Value Matrix.
        default_currency_reference: The default currency for this Total Value Matrix. Only Amount
            type matrices have default currency.
        frequency_reference: The frequency for this Total Value Matrix. Only Amount type matrices
            have frequency.
    """

    class Meta:
        name = "Total_Value_Compensation_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    amount_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Amount_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Percent_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    weighted_based: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Weighted_Based",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculation_reference: Optional[CalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    default_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnitSalaryPlanDataType:
    """
    This is a wrapper for the Base Pay Unit Salaries.

    Attributes:
        per_unit_amount: A Per Unit Amount to pay.  Required if No Individual Override is True.
        default_units: The Default Units, which is your best guess of the number of units an
            employee will work during the for the specified Frequency (time period). Units
            multiplied by per unit amount determines an employee's pay. An employee can ultimately
            work and be paid for a different number of units than this default. Required if No
            Individual Override is True.
        unit_of_measure_reference: A Unit of measure for the work performed. For example, a box of
            items packed.
        no_individual_override: No Individual Override indicator prevents default values from being
            overridden for specific employees assigned to a Unit Salary Plan; if the value is True,
            then Per Unit Amount and Default Units are required.
    """

    class Meta:
        name = "Unit_Salary_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    default_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    unit_of_measure_reference: Optional[UnitOfMeasureObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Of_Measure_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    no_individual_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "No_Individual_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UpdateStockGrantDataType:
    """
    Stock Grant data to be updated.

    Attributes:
        grant_id: Stock grant id.
        grant_date: Stock grant date.
        grant_price: Stock grant price.
        grant_price_currency_reference: Stock grant price currency.
        board_approved: Stock grant board approved flag.
        vest_from_date: Stock grant vest from date.
        expiration_date: Stock grant expiration date.
        options_pricing_factor: Stock grant options pricing factor.
        shares_vested: Number of shares vested. Applies to options or grants only.
        shares_unvested: Number of shares unvested. Applies to options or grants only.
        vesting_price: The price associated to the grant vesting date.
        vested_as_of: The most recent vesting date of the grant.
        long_term_cash_amount_vested: Amount vested. Applies to long- term cash only.
        long_term_cash_amount_unvested: Amount unvested. Applies to long-term cash only.
    """

    class Meta:
        name = "Update_Stock_Grant_DataType"
        target_namespace = "urn:com.workday/bsvc"

    grant_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Grant_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Grant_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_price: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Price",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    grant_price_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Price_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    board_approved: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Board_Approved",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vest_from_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vest_From_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    options_pricing_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Options_Pricing_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 4,
        },
    )
    shares_vested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Shares_Vested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    shares_unvested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Shares_Unvested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    vesting_price: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Vesting_Price",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    vested_as_of: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vested_As_Of",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    long_term_cash_amount_vested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Long_Term_Cash_Amount_Vested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    long_term_cash_amount_unvested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Long_Term_Cash_Amount_Unvested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )


@dataclass
class UpdateStockGrantResponseType:
    """
    Update Stock Grant Response.

    Attributes:
        stock_grant_reference: Stock grant which was updated.
        version
    """

    class Meta:
        name = "Update_Stock_Grant_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    stock_grant_reference: Optional[StockGrantObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Grant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ValidationFault(ValidationFaultType):
    class Meta:
        name = "Validation_Fault"
        namespace = "urn:com.workday/bsvc"


@dataclass
class WorkerRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Worker and its
    associated data.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        skip_non_existing_instances
        ignore_invalid_references
    """

    class Meta:
        name = "Worker_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    skip_non_existing_instances: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip_Non_Existing_Instances",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ignore_invalid_references: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ignore_Invalid_References",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationGradeHierarchyInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationGradeHierarchyInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationGradeHierarchyInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_grade_hierarchy_request: Optional[GetCompensationGradeHierarchyRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Compensation_Grade_Hierarchy_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class AddIndividualStockGrantDataType:
    """
    Data element for the Request Stock Grant business process.

    Attributes:
        stock_grant_reference_id: Stock grant reference ID.
        grant_type_reference: Type of stock grant: ISO, RSU, etc. Must correspond to a grant type in
            the stock plan.
        grant_id: Stock grant ID.
        grant_date: Grant date.
        vesting_schedule_reference: Vesting schedule for the stock plan.
        vest_from_date: From Date of the vesting schedule.
        expiration_date: Expiration date of the stock grant.
        amount_data: Amount data for the stock grant
        grant_price: Grant price for the stock grant.
        grant_price_currency_reference: Currency of the Grant Price. Required if Grant Price is
            entered.
        options_pricing_factor: Options pricing factor for stock grant.
        board_approved: If true, the stock grant has been board approved.
        comments: Comments of the stock grant.
        shares_vested: Number of shares vested. Applies to options or grants only.
        shares_unvested: Number of shares unvested. Applies to options or grants only.
        long_term_cash_amount_vested: Amount vested. Applies to long- term cash only.
        long_term_cash_amount_unvested: Amount unvested. Applies to long-term cash only.
        vesting_price: The price associated to the grant vesting date.
        vested_as_of: The most recent vesting date of the grant.
    """

    class Meta:
        name = "Add_Individual_Stock_Grant_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_grant_reference_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Stock_Grant_Reference_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_type_reference: Optional[StockGrantTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    grant_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Grant_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Grant_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vesting_schedule_reference: Optional[StockVestingScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Vesting_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vest_from_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vest_From_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_data: Optional[AddIndividualStockAmountDataType] = field(
        default=None,
        metadata={
            "name": "Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_price: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Price",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    grant_price_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Price_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    options_pricing_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Options_Pricing_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 4,
        },
    )
    board_approved: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Board_Approved",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    shares_vested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Shares_Vested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    shares_unvested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Shares_Unvested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    long_term_cash_amount_vested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Long_Term_Cash_Amount_Vested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    long_term_cash_amount_unvested: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Long_Term_Cash_Amount_Unvested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    vesting_price: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Vesting_Price",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    vested_as_of: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vested_As_Of",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddStockGrantResponse(AddStockGrantResponseType):
    class Meta:
        name = "Add_Stock_Grant_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AllowancePlanAmountBasedProfileReplacementDataType:
    """
    This is a wrapper for the Allowance Plan Amount Based Profile Data; this is used to display or
    replace Allowance Plan Amount Based Profile Data.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the allowance plan profile from the
            allowance plan. Workday uses eligibility rule to determine the profile to remove.
        allowance_plan_amount_based_profile_replacement_data_details
    """

    class Meta:
        name = "Allowance_Plan_Amount_Based_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_amount_based_profile_replacement_data_details: Optional[
        AllowancePlanAmountBasedProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Amount_Based_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanPercentBasedProfileReplacementDataType:
    """
    This is a wrapper for the Allowance Plan Percent Based Profile Data; this is used to display or
    replace Allowance Plan Percent Based Profile Data.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the allowance plan profile from the
            allowance plan. Workday uses eligibility rule to determine the profile to remove.
        allowance_plan_percent_based_profile_replacement_data_details
    """

    class Meta:
        name = "Allowance_Plan_Percent_Based_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_percent_based_profile_replacement_data_details: Optional[
        AllowancePlanPercentBasedProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Percent_Based_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanUnitBasedProfileReplacementDataType:
    """
    This is a wrapper for the Allowance Plan Unit Based Profile Data; this is used to display or
    replace Allowance Plan Unit Based Profile Data.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the allowance plan profile from the
            allowance plan. Workday uses eligibility rule to determine the profile to remove.
        allowance_plan_unit_based_profile_replacement_data_details
    """

    class Meta:
        name = "Allowance_Plan_Unit_Based_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_unit_based_profile_replacement_data_details: Optional[
        AllowancePlanUnitBasedProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Unit_Based_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AlternativePayRangeType:
    """
    Contains an alternative pay range and its associated data.

    Attributes:
        delete: If True is entered, the Alternative Pay Range will be removed from the Compensation
            Grade or Grade Profile.
        alternate_pay_range_data: Contains alternative pay range data.
    """

    class Meta:
        name = "Alternative_Pay_RangeType"
        target_namespace = "urn:com.workday/bsvc"

    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    alternate_pay_range_data: Optional[AlternatePayRangeDataType] = field(
        default=None,
        metadata={
            "name": "Alternate_Pay_Range_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeDataType:
    """
    Wrapper Element for the Assign Employee's ligible Activities business process.

    Attributes:
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        eligible_activity_date: Date for the eligible period activities.
        reason_reference: The reason for assign eligible Period Activities to an employee.
        eligible_period_activities_sub_data
    """

    class Meta:
        name = "Assign_Eligible_Period_Activities_for_Employee_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_activity_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Eligible_Activity_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    eligible_period_activities_sub_data: list[PeriodActivityEligibilityEntryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Eligible_Period_Activities_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeResponse(
    AssignEligiblePeriodActivitiesForEmployeeResponseType
):
    class Meta:
        name = "Assign_Eligible_Period_Activities_for_Employee_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class BasePayPlanDataType:
    """
    Base Pay Plan Data consists of common information from the following Base Pay Plans: Salary,
    Hourly, and Unit.

    Attributes:
        compensation_element_reference: Compensation Plan Default Compensation Element for a Base
            Pay Plan.
        currency_reference: The compensation plan currency.  If none is provided, the tenant default
            is used.
        frequency_reference: The compensation plan frequency.  If none is provided, the tenant
            default is used.
        exclude_from_merit: Indicates if the base pay plan is eligible for the merit process.
        salary_data: This is a wrapper for Salary Plans.
        hourly_data: This is a wrapper for the Hourly Data.
        unit_data: This is a wrapper for the Base Pay Unit Salaries.
    """

    class Meta:
        name = "Base_Pay_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_from_merit: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_from_Merit",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_data: Optional[SalaryPlanDataType] = field(
        default=None,
        metadata={
            "name": "Salary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hourly_data: Optional[HourlyPlanDataType] = field(
        default=None,
        metadata={
            "name": "Hourly_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_data: Optional[UnitSalaryPlanDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenchmarkJobCompositeDataType:
    """
    Benchmark Job Composite Data.

    Attributes:
        benchmark_composite_category_reference: Valid options are "Base Pay Composite" or "Total
            Cash Composite".
        competitive_market_target_percentile_reference: The value entered is what the system will
            consider your market target. For example, the Competitive Market Target is defined as
            the 50th percentile and the base salary for the 50th is defined as 45,000. If the Target
            Spread is 10%, any employee whose base salary is between 42,550 - 47,250 will be
            considered At Market for this Benchmark Job.
        target_spread: The value entered is used to define what the range is for an employee to be
            considered At Market. The value entered will be applied to define the bottom and top of
            the range. For example, the Competitive Market Target is defined as the 50th percentile
            and the base salary for the 50th is defined as 45,000. If the Target Spread is 10%, any
            employee whose base salary is between 42,750 - 47,250 will be considered At Market for
            this Benchmark Job.
        benchmark_amount_replacement_data: Benchmark Amount Data
        delete: If True, the Benchmark Composite with the matching Category provided will be
            removed.
    """

    class Meta:
        name = "Benchmark_Job_Composite_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_composite_category_reference: Optional[
        CompensationBenchmarkCompositeCategoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Benchmark_Composite_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    competitive_market_target_percentile_reference: Optional[
        CompensationBenchmarkPercentileObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Competitive_Market_Target_Percentile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_spread: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Spread__",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    benchmark_amount_replacement_data: list[CompensationBenchmarkAmountReplacmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Amount_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanPercentPlanProfileReplacementDataType:
    """
    Used to display or replace Percent Plan Profile Data for a Percent Bonus Plan.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the bonus plan profile from the bonus plan.
            Workday uses eligibility rule to determine the profile to remove.
        percent_plan_profile_replacement_data_details
    """

    class Meta:
        name = "Bonus_Plan_Percent_Plan_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_plan_profile_replacement_data_details: Optional[
        PercentPlanProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Percent_Plan_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanProfileReplacementAmountDataType:
    """
    This is a wrapper for the Bonus Plan Amount; this is used to display or replace Amount Plan
    Profile Data; it is required and mutually exclusive with Bonus Plan Percentage.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the bonus plan profile from the bonus plan.
            Workday uses eligibility rule to determine the profile to remove.
        amount_plan_profile_replacement_data_details
    """

    class Meta:
        name = "Bonus_Plan_Profile_Replacement_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_plan_profile_replacement_data_details: Optional[
        AmountPlanProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Amount_Plan_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessProcessParametersType:
    """
    Container for the processing options for a business process.

    If no options are submitted (or the options are submitted as
    'false') then the business process is simply initiated as if it
    where submitted on-line with approvals, reviews, notifications and
    to-do's in place. If the Initiator is an Integration System User,
    any validations you configured on the Initiation step are ignored.

    Attributes:
        auto_complete: When set to "true" or "1", the business process is automatically processed.
            This means that all approvals will be automatically approved in the system, all reviews
            and to-do's will be automatically by-passed, and all notifications will be automatically
            suppressed.
        run_now: Indicates the transaction should process to completion before the response is
            generated. Note: All &lt; v12 operations will process with Run_Now = True for backwards
            compatibility but please review this setting in your environment for performance
            conditions.
        discard_on_exit_validation_error: Enforces all validation conditions defined on the
            initiation step. If any condition is true, the validation error blocks the step from
            exiting and a business process event isn't created. The attribute is currently not
            available for use. It will be generally available for all web services in a future
            release.
        comment_data
        business_process_attachment_data
    """

    class Meta:
        name = "Business_Process_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    auto_complete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Auto_Complete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    run_now: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Run_Now",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    discard_on_exit_validation_error: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Discard_On_Exit_Validation_Error",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment_data: Optional[BusinessProcessCommentDataType] = field(
        default=None,
        metadata={
            "name": "Comment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_attachment_data: list[BusinessProcessAttachmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Process_Attachment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommissionPlanProfileReplacementDataType:
    """
    This is a wrapper for the Commission Plan Profile Data; this is used to display or replace
    Commission Plan Profile Data.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the commission plan profile from the
            commission plan. Workday uses eligibility rule to determine the profile to remove.
        commission_plan_profile_replacement_data_details: Commission Plan Profile Replacement Data
            Details
    """

    class Meta:
        name = "Commission_Plan_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_profile_replacement_data_details: Optional[
        CommissionPlanProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkAgingConfigurationDataType:
    """
    Aging Configuration Data Selector for Calculated Compensation Benchmark Cycle.

    Attributes:
        id: Override ID for Calculated Benchmark Cycle Aging Configuration
        job_profile_family_selector: Aging Configuration Selector of All Job Profiles, Job Profiles,
            or Job Families.
        compensation_component_selector: Compensation Component Category Selector for Aging
            Configuration
        compensation_survey_result_selector: Compensation Surveys/Survey Result Sets Selector for
            Aging Configuration
        compensation_survey_result_scope_selector: Compensation Survey Result Scope Selector for
            Aging Configuration
        annual_aging_factor: Aging Factor for Calculated Benchmark Cycle Aging Configuration
    """

    class Meta:
        name = "Compensation_Benchmark_Aging_Configuration_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_family_selector: Optional[
        CompensationBenchmarkJobConfigurationJobProfileFamilySelectorType
    ] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Family_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_component_selector: Optional[
        CompensationBenchmarkComponentCategoryAgingSelectorType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Component_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_survey_result_selector: Optional[
        CompensationBenchmarkSurveysSurveyResultSetsSelectorForAgingConfigurationType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Result_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_survey_result_scope_selector: Optional[
        CompensationSurveyResultScopeSelectorType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Result_Scope_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    annual_aging_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Annual_Aging_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 7,
            "fraction_digits": 4,
        },
    )


@dataclass
class CompensationBenchmarkConfigurableStoredDataType:
    """
    Compensation Benchmark Profile.

    Attributes:
        benchmark_profile_reference: For Default, leave this field blank. For other benchmark
            profiles, put the reference ID or WID.
        currency_reference: Currency Reference
        frequency_reference: Frequency Reference
        first_component_container_data: First compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        second_component_container_data: Second compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        third_component_container_data: Third compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        fourth_component_container_data: Fourth compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        fifth_component_container_data: Fifth compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
        sixth_component_container_data: Sixth compensation component of a compensation benchmark.
            Example: Base Pay, Target Incentives.
    """

    class Meta:
        name = "Compensation_Benchmark_Configurable__Stored__DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_profile_reference: Optional[CompensationBenchmarkJobProfileTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    first_component_container_data: Optional[
        FirstCompensationBenchmarkForJobComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_component_container_data: Optional[
        SecondCompensationBenchmarkForJobComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_component_container_data: Optional[
        ThirdCompensationBenchmarkForJobComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_component_container_data: Optional[
        FourthCompensationBenchmarkForJobComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_component_container_data: Optional[
        FifthCompensationBenchmarkForJobComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sixth_component_container_data: Optional[
        SixthCompensationBenchmarkForJobComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Sixth_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkWeightsAndAdjustmentsConfigurationDataType:
    """
    Configuration Weight and Adjustment Data.

    Attributes:
        compensation_survey_result_configuration_data: Compensation Survey/Survey Result Set and
            Scope Data for Weight and Adjustment Configuration
        weight_factor: Weight Factor
        adjustment_factor: Adjustment Factor
    """

    class Meta:
        name = "Compensation_Benchmark_Weights_And_Adjustments_Configuration_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_result_configuration_data: Optional[
        CompensationBenchmarkResultConfigurationDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Result_Configuration_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    weight_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weight_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 6,
            "fraction_digits": 3,
        },
    )
    adjustment_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Adjustment_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 6,
            "fraction_digits": 3,
        },
    )


@dataclass
class CompensationChangeTemplatesDataType:
    """
    Compensation Change Template Data.

    Attributes:
        template_id: Reference ID for the compensation change template
        template_name: Specify a unique name for the template.
        inactive: Inactivate the template so it doesn't apply during the event.
        security_groups_reference: The template applies for users who have access to at least one
            specified security group.
        business_process_type_reference: Specify the business process type where the template will
            apply.
        reason_reference: Specify one or more reasons to associate with the template. When the
            reason associated with the event is one specified for the template, then the template
            will apply on the compensation change step.
        template_section_data: Specify the sections to display for this template.
        template_field_data: Specify the fields to display for the section.
    """

    class Meta:
        name = "Compensation_Change_Templates_DataType"
        target_namespace = "urn:com.workday/bsvc"

    template_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Template_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    template_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Template_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    security_groups_reference: list[SecurityGroupObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Security_Groups_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_type_reference: Optional[BusinessProcessTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: list[EventClassificationSubcategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    template_section_data: list[CompensationTemplateSectionDataType] = field(
        default_factory=list,
        metadata={
            "name": "Template_Section_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    template_field_data: list[CompensationTemplateFieldDataType] = field(
        default_factory=list,
        metadata={
            "name": "Template_Field_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationDurationSeveranceMatrixDataType:
    """
    The compensation duration severance matrix data element.

    Attributes:
        compensation_basis_reference: Enter the name of the Compensation Basis used to define the
            range of the minimum and maximum values.
        calculate_compensation_basis_as_of_date_reference: X, Y, or Z, depending on if the worker's
            compensation as of the Target Termination Date, Last Day Worked, or the Beginning of
            Current Year will be used to determine matrix band eligibility.
        currency_reference: Enter the three character currency code used to define the range of the
            minimum and maximum values.
        frequency_reference: Enter the frequency, Weekly, Biweekly, Semimonthly, Monthly, or Annual
            used to define the minimum and maximum compensation basis range values.
        compensation_duration_severance_matrix_entry_data: The data for each entry in the matrix.
    """

    class Meta:
        name = "Compensation_Duration_Severance_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    calculate_compensation_basis_as_of_date_reference: Optional[SeveranceServiceDateObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Calculate_Compensation_Basis_As_Of_Date_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_duration_severance_matrix_entry_data: list[
        CompensationDurationSeveranceMatrixEntryDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Duration_Severance_Matrix_Entry_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationGradeLevelType:
    """
    Contains compensation grade level and its associated data.

    Attributes:
        compensation_grade_level_reference: Compensation Grade Level Reference
        compensation_grade_level_data: Compensation Grade Level Data
    """

    class Meta:
        name = "Compensation_Grade_LevelType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_level_reference: Optional[CompensationGradeLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_level_data: Optional[CompensationGradeLevelDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Level_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationLengthOfServiceSeveranceMatrixDataType:
    """
    The compensation length of service severance matrix data element.

    Attributes:
        compensation_basis_reference: Enter the name of the Compensation Basis used to define the
            range of the minimum and maximum values.
        calculate_compensation_basis_as_of_date_reference: X, Y, or Z, depending on if the worker's
            compensation as of the Target Termination Date, Last Day Worked, or the Beginning of
            Current Year will be used to determine matrix band eligibility.
        currency_reference: Enter the three character currency code used to define the range of the
            minimum and maximum values.
        frequency_reference: Enter the frequency, Weekly, Biweekly, Semimonthly, Monthly, or Annual
            used to define the minimum and maximum compensation basis range values.
        compensation_rounding_rule_reference: Enter the name of the Compensation Rounding Rule to be
            used with this matrix.
        multiplier_order_reference: Enter Multiply then round to multiply service duration and then
            apply the rounding rule. Enter Round then multiply to first apply the rounding rule to
            the service duration and then multiply that product by the length of service multiplier.
        compensation_length_of_service_severance_matrix_entry_data: The data for each entry in the
            matrix.
    """

    class Meta:
        name = "Compensation_Length_of_Service_Severance_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    calculate_compensation_basis_as_of_date_reference: Optional[SeveranceServiceDateObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Calculate_Compensation_Basis_As_Of_Date_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    multiplier_order_reference: Optional[BenefitMultiplierOrderObjectType] = field(
        default=None,
        metadata={
            "name": "Multiplier_Order_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_length_of_service_severance_matrix_entry_data: list[
        CompensationLengthOfServiceSeveranceMatrixEntryDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Length_of_Service_Severance_Matrix_Entry_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationMatrixAmountBasedDataType:
    """
    The amount based data for this compensation matrix.

    Attributes:
        default_frequency_reference: The default frequency for this compensation matrix.
        default_currency_reference: The default currency for this compensation matrix.
        compensation_matrix_target_rules_reference: Specifying a target rule means that the merit
            increase matrix (MIM) only applies to employees that fall within that target rule.
            Specifying two or more target rules results in multiple-target MIMs with target ranges
            applicable to those employees that fall within the target rule.  Leaving the Target Rule
            Reference empty will result in a single-target MIM that can be used for across the
            entire organization.
        compensation_matrix_entry_amount_based_data: Entry data for this amount based compensation
            matrix.
    """

    class Meta:
        name = "Compensation_Matrix_Amount_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    default_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    default_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_target_rules_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Target_Rules_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_entry_amount_based_data: list[
        CompensationMatrixEntryAmountBasedDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Entry_Amount_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixNonWeightedPercentBasedDataType:
    """
    Data for a non-weighted percent based compensation matrix.

    Attributes:
        compensation_matrix_target_rules_reference: Specifying a target rule means that the merit
            increase matrix (MIM) only applies to employees that fall within that target rule.
            Specifying two or more target rules results in multiple-target MIMs with target ranges
            applicable to those employees that fall within the target rule.  Leaving the Target Rule
            Reference empty will result in a single-target MIM that can be used for across the
            entire organization.
        compensation_matrix_entry_percent_based_data
    """

    class Meta:
        name = "Compensation_Matrix_Non-weighted_Percent_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_target_rules_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Target_Rules_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_entry_percent_based_data: list[
        CompensationMatrixEntryPercentBasedDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Entry_Percent_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixWeightedPercentBasedDataType:
    """
    Data for this weight percent based compensation matrix.

    Attributes:
        compensation_matrix_target_rules_reference: Specifying a target rule means that the merit
            increase matrix (MIM) only applies to employees that fall within that target rule.
            Specifying two or more target rules results in multiple-target MIMs with target ranges
            applicable to those employees that fall within the target rule.  Leaving the Target Rule
            Reference empty will result in a single-target MIM that can be used for across the
            entire organization.
        compensation_matrix_entry_percent_based_data
    """

    class Meta:
        name = "Compensation_Matrix_Weighted_Percent_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_target_rules_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Target_Rules_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_entry_percent_based_data: list[
        CompensationMatrixEntryPercentBasedDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Entry_Percent_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardDataType:
    """
    Contains scorecard data.

    Attributes:
        id: A unique scorecard identifier.
        effective_date: The effective date of the scorecard.
        scorecard_name: The name of the scorecard.
        inactive: Inactive
        scorecard_description: Description of the scorecard.
        scorecard_goals_data: Performance criteria for scorecard.
        scorecard_profile_data: Contains a rule/profile delineated set of goals.
    """

    class Meta:
        name = "Compensation_Scorecard_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scorecard_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Scorecard_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scorecard_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Scorecard_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scorecard_goals_data: list[PerformanceCriteriaDataType] = field(
        default_factory=list,
        metadata={
            "name": "Scorecard_Goals_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    scorecard_profile_data: list[ScorecardProfileDataType] = field(
        default_factory=list,
        metadata={
            "name": "Scorecard_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationStepType:
    """
    Contains the pay range data.

    Attributes:
        compensation_step_reference: Compensation Step Reference
        compensation_step_data: Compensation Step Data
        delete: If True is entered, the Step will be removed from this Grade or Grade Profile as of
            the effective date.
    """

    class Meta:
        name = "Compensation_StepType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_step_reference: Optional[CompensationStepObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step_data: Optional[CompensationStepDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobDataType:
    """
    Data element with survey job code, job title, level, job description, function, or family.

    Attributes:
        survey_job_detail_id: Reference ID for the survey job with job title and possibly level,
            function, or family.
        survey_reference: The instance of compensation survey that the survey job will be linked to.
        job_code: Job code of a job in a compensation survey.
        job_title: Job title of a job in a compensation survey.
        level: Job level of a job in a compensation survey.
        job_description: Job description of a job in a compensation survey.
        function: Functional area of a job in a compensation survey.
        family: Job family of a job in the compensation survey, usually referring to the group of
            jobs with similar title but different levels.
        job_sub_detail: Survey job sub detail.
    """

    class Meta:
        name = "Compensation_Survey_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    survey_job_detail_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Survey_Job_Detail_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    survey_reference: Optional[CompensationSurveyObjectType] = field(
        default=None,
        metadata={
            "name": "Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    level: Optional[str] = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    function: Optional[str] = field(
        default=None,
        metadata={
            "name": "Function",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    family: Optional[str] = field(
        default=None,
        metadata={
            "name": "Family",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_sub_detail: list[CompensationSurveyJobSubDetailDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Sub-Detail",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobMatchDataType:
    """
    Data element for compensation survey job match.

    Attributes:
        job_profile
        note: Note for the compensation survey job match.
        eligibility_rule_reference: Eligibility rules for the compensation survey job match. Workday
            matches only workers, positions, or job requisitions passing one of the eligibility
            rules to the survey job.
        do_not_send_to_survey: Yes indicates that compensation data for this job match won't be sent
            to the compensation survey. No or blank indicates that data is sent to the compensation
            survey.
    """

    class Meta:
        name = "Compensation_Survey_Job_Match_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile: Optional[JobProfileForCompensationSurveyJobMatchType] = field(
        default=None,
        metadata={
            "name": "Job_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_send_to_survey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Send_to_Survey",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobResultDataType:
    """
    Compensation Survey Job Result.

    Attributes:
        survey_job_result_id: Reference ID for the survey job with job title and possibly level,
            function, or family.
        survey_result_set_reference: The instance of compensation survey result set the the survey
            job result will be linked to.
        survey_job_reference: Survey job of a compensation survey job result. Use this field, or use
            Survey Job Code and optionally Survey Job Level and Survey Job Specialty.
        survey_job_result_scope_data: Scope of a compensation survey job result.
        survey_job_result_currency_reference: Currency of a compensation survey job result.
        survey_job_result_frequency_reference: Frequency of a compensation survey job result.
        first_component_container_data: First compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        second_component_container_data: Second compensation components of a survey job. Example:
            Base Pay, Target Incentives.
        third_component_container_data: Third compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        fourth_component_container_data: Fourth compensation components of a survey job. Example:
            Base Pay, Target Incentives.
        fifth_component_container_data: Fifth compensation components of a survey job. Example: Base
            Pay, Target Incentives.
        sixth_component_container_data: Sixth compensation components of a survey job. Example: Base
            Pay, Target Incentives.
    """

    class Meta:
        name = "Compensation_Survey_Job_Result_DataType"
        target_namespace = "urn:com.workday/bsvc"

    survey_job_result_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Survey_Job_Result_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    survey_result_set_reference: Optional[CompensationSurveyResultObjectType] = field(
        default=None,
        metadata={
            "name": "Survey_Result_Set_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    survey_job_reference: Optional[CompensationSurveyJobMatchableObjectType] = field(
        default=None,
        metadata={
            "name": "Survey_Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    survey_job_result_scope_data: Optional[CompensationSurveyResultScopeDataType] = field(
        default=None,
        metadata={
            "name": "Survey_Job_Result_Scope_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    survey_job_result_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Survey_Job_Result_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    survey_job_result_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Survey_Job_Result_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    first_component_container_data: Optional[
        FirstCompensationSurveyJobResultComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_component_container_data: Optional[
        SecondCompensationSurveyJobResultComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    third_component_container_data: Optional[
        ThirdCompensationSurveyJobResultComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Third_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fourth_component_container_data: Optional[
        FourthCompensationSurveyJobResultComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fourth_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fifth_component_container_data: Optional[
        FifthCompensationSurveyJobResultComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Fifth_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sixth_component_container_data: Optional[
        SixthCompensationSurveyJobResultComponentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Sixth_Component_Container_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionItemDataWwstype:
    """
    Wrapper element containing data for each Condition Item.

    Attributes:
        order: Text value for order of Condition Item.
        and_or_operator_reference: Reference to the And Or Operator used on this Condition Item.
        open_parentheses: Specify an Open Parentheses for the Condition Item by placing the "("
            character here.
        relational_operator_reference: Reference to the Relational Operator to use for this
            Condition Item.
        condition_entry_option_reference: Reference to the Condition Entry Option to use for this
            Condition Item.
        close_parentheses: Specify an Close Parentheses for the Condition Item by placing the ")"
            character here.
        source_external_field_reference: Reference to the External Field to use as the source for
            this Condition Item.
        source_condition_rule_reference: Reference to the Condition Rule to use as the source for
            this Condition Item.
        filter_boolean: Boolean value for Filter.
        filter_date: Date value for Filter.
        filter_date_time_zone: DateTimeZone value for filter.
        filter_time: Time value for filter.
        filter_number: Numeric value for Filter Number.
        filter_text: Text value for Filter.
        target_external_field_reference: Reference to Target External Field for this Condition
            Item..
        target_instance_reference: Reference to specific object to be used in filter for this
            Condition Rule.
    """

    class Meta:
        name = "Condition_Item_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 6,
        },
    )
    and_or_operator_reference: Optional[AndOrOperatorsObjectType] = field(
        default=None,
        metadata={
            "name": "And_Or_Operator_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    open_parentheses: Optional[str] = field(
        default=None,
        metadata={
            "name": "Open_Parentheses",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    relational_operator_reference: Optional[RelationalOperatorObjectType] = field(
        default=None,
        metadata={
            "name": "Relational_Operator_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    condition_entry_option_reference: Optional[ConditionEntryOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Condition_Entry_Option_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_parentheses: Optional[str] = field(
        default=None,
        metadata={
            "name": "Close_Parentheses",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    source_external_field_reference: Optional[ExternalFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Source_External_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    source_condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Source_Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_boolean: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Filter_Boolean",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Filter_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_date_time_zone: Optional[FilterDateTimeZoneDataType] = field(
        default=None,
        metadata={
            "name": "Filter_DateTimeZone",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "Filter_Time",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_number: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Filter_Number",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 4,
        },
    )
    filter_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filter_Text",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_external_field_reference: Optional[ExternalFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Target_External_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_instance_reference: list[InstanceObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Target_Instance_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConfigurableCompensationBasisType:
    """
    An instance of a configurable compensation basis and its data.

    Attributes:
        configurable_compensation_basis_reference: Configurable Compensation Basis Request Reference
        configurable_compensation_basis_data: Configurable compensation basis data
    """

    class Meta:
        name = "Configurable_Compensation_BasisType"
        target_namespace = "urn:com.workday/bsvc"

    configurable_compensation_basis_reference: Optional[CompensationBasisConfigurableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Configurable_Compensation_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    configurable_compensation_basis_data: Optional[ConfigurableCompensationBasisDataType] = field(
        default=None,
        metadata={
            "name": "Configurable_Compensation_Basis_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateSeveranceWorksheetResponse(CreateSeveranceWorksheetResponseType):
    class Meta:
        name = "Create_Severance_Worksheet_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class DeferredCompensationDataType:
    """
    Deferred Compensation.

    Attributes:
        deferred_compensation_eligibility_reference: Deferred Compensation Eligibility
        default_calculation_reference: Default Calculation
        default_stock_plan_reference: Default Stock Plan
        deferred_compensation_profiles: Deferred Compensation Profiles
    """

    class Meta:
        name = "Deferred_Compensation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    deferred_compensation_eligibility_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Deferred_Compensation_Eligibility_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    default_calculation_reference: Optional[DeferredBonusCalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    default_stock_plan_reference: Optional[StockPercentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    deferred_compensation_profiles: list[DeferredCompensationProfilesDataType] = field(
        default_factory=list,
        metadata={
            "name": "Deferred_Compensation_Profiles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibleEarningsType:
    """
    Contains Eligible Earnings Override information based on Request References or Request Criteria.

    Attributes:
        eligible_earnings_reference: A unique identifier to reference an Eligible Earnings Override.
        eligible_earnings_data: Contains the detailed information about an employee's Eligible
            Earnings Override.
    """

    class Meta:
        name = "Eligible_EarningsType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings_reference: Optional[EligibleEarningsOverrideObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_earnings_data: Optional[EligibleEarningsDataType] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeSeveranceWorksheetDataType:
    """
    Employee Severance Worksheet Data.

    Attributes:
        effective_date: Severance Worksheet Effective Date
        severance_package_reference: This is the Severance Package which will be used in the
            Employee Severance Worksheet.  Only Severance Packages with an effective date on or
            before the effective date of the Employee Severance Worksheet are valid.
        employee_reference: The Employee for the Severance Worksheet. The Employee must have a match
            in the eligibility rules defined on the Severance Matrix or Severance Notice, which have
            been specified on the Severance Package. Also, the Employee must be active and NOT have
            a Severance Worksheet in-progress or completed.
        termination_date: The date which the employee will be terminated.
        last_day_of_work: Date of last day of work for the employee
        pay_through_date: Date through which the employee will continue to be paid. Workday
            calculates the Pay Through Date from the severance matrix. Updating the Pay Through Date
            affects length of payment for severance and post-termination compensation.
        reason_for_severance_reference: Reason for employee's severance.
        reason_for_termination_reference: Reference for Termination Reason
        regrettable_reference: Boolean indicating if Termination of Employee is Regrettable.
        send_to_payroll: If selected, instructs Workday to use the information in the Severance
            Worksheet to populate the details of the employee's Termination process.
        notified_employee_date: Date employee was notified of Termination and Severance Package.
        severance_response_due_date: Date Response to Severance Is Due
        worksheet_delivered_date: Date Severance Worksheet was delivered to employee.
        worksheet_signed_date: Date Severance Worksheet is Signed by Employee
        worksheet_declined_date: Date Severance Worksheet is Declined by Employee
        revocation_cutoff_date: Last day employee has to revoke their signature on the Severance
            Package.
        severance_pay_component_data
        severance_package_component_data: Subelement for entering a severance component type along
            with eligibility and a comment
        pay_range_currency_reference: Currency used for amounts on pay component subedits.
    """

    class Meta:
        name = "Employee_Severance_Worksheet_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    severance_package_reference: Optional[SeverancePackageObjectType] = field(
        default=None,
        metadata={
            "name": "Severance_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    termination_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Termination_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_through_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Pay_Through_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_for_severance_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_for_Severance_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_for_termination_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_for_Termination_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    regrettable_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Regrettable_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    send_to_payroll: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Send_to_Payroll",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notified_employee_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notified_Employee_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    severance_response_due_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Severance_Response_Due_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worksheet_delivered_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Worksheet_Delivered_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worksheet_signed_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Worksheet_Signed_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worksheet_declined_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Worksheet_Declined_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    revocation_cutoff_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Revocation_Cutoff_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    severance_pay_component_data: list[SeverancePayComponentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Severance_Pay_Component_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    severance_package_component_data: list[SeverancePackageComponentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Severance_Package_Component_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_range_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Range_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FinancialsBusinessSubProcessParametersType:
    """
    Container for the processing options for sub-business processes within a business process.

    If no options are submitted (or the options are submitted as
    'false') then the sub-business process is simply initiated as if it
    where submitted on-line with approvals, reviews, notifications and
    to-do's in place. If the Initiator is an Integration System User,
    any validations you configured on the Initiation step are ignored.

    Attributes:
        skip: When set to "true" or "1", the business process is automatically skipped (if it is
            defined as "skippable" within the business process definition).
        business_process_comment_data
    """

    class Meta:
        name = "Financials_Business_Sub_Process_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    skip: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_comment_data: Optional[BusinessProcessCommentDataType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Comment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetBenchmarkJobsRequestType:
    """
    Request element to get Benchmark Job.

    Attributes:
        request_references: Benchmark Job Request Reference
        request_criteria: Benchmark Job Request Criteria
        response_filter: Response Filter
        response_group: Benchmark Job Response Group
        version
    """

    class Meta:
        name = "Get_Benchmark_Jobs_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[BenchmarkJobRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[BenchmarkJobRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[BenchmarkJobResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationChangeTemplatesRequestType:
    """
    Request element to get Compensation Change Template information.

    If no criteria are specified, all instances of Compensation Change
    Templates will be returned.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        version
    """

    class Meta:
        name = "Get_Compensation_Change_Templates_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationChangeTemplateRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationChangeTemplateRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationChangeTemplateResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationEligibilityRulesRequestType:
    """Get Compensation Eligibility Rules Request incoming element."""

    class Meta:
        name = "Get_Compensation_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationEligibilityRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationEligibilityRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationEligibilityRulesWithoutDependenciesRequestType:
    """Get Compensation Eligibility Rules without Dependencies Request element."""

    class Meta:
        name = "Get_Compensation_Eligibility_Rules_without_Dependencies_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationEligibilityRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationGradesRequestType:
    """
    Request element to get compensation grade and grade profile information.

    If no criteria are specified in either the compensation grade
    request references or compensaiton grade request criteria elements,
    all instances of eligible earnings will be returned.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        version
    """

    class Meta:
        name = "Get_Compensation_Grades_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationGradeRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationGradeRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationGradeResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationMatricesRequestType:
    """
    Get Compensation Matrices Request Element.

    Attributes:
        request_references: Use this element to request particular instances of compensation matrix.
        request_criteria: Use this element to request a matrix by name or matrices by type.
        response_filter
        response_group: The response group.
        version
    """

    class Meta:
        name = "Get_Compensation_Matrices_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationMatrixRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationMatrixRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationMatrixResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationPlansRequestType:
    """
    Request element to get compensation plan information.

    If no criteria is specified in the compensation plan request
    references or compensaiton plan request criteria elements, all
    compensation plans will be returned.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        version
    """

    class Meta:
        name = "Get_Compensation_Plans_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationPlanRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationPlanRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationPlanResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationScorecardResultsRequestType:
    """
    Contains the request details to retrieve one or more scorecard results.

    Attributes:
        request_references: A container for one or more unique scorecard result identifiers.
        request_criteria: Contains additional request criteria to limit the information returned.
            Currently no additional criteria is supported.
        response_filter
        response_group: Contains additional response criteria to enhance the information returned.
        version
    """

    class Meta:
        name = "Get_Compensation_Scorecard_Results_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationScorecardResultRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationScorecardResultRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationScorecardResultResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationScorecardsRequestType:
    """
    Contains the request details to retrieve one or more scorecards.

    Attributes:
        request_references: A container for one or more unique scorecard identifiers.
        request_criteria: Contains additional request criteria to limit the information returned.
            Currently no additional criteria is supported.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Contains additional response criteria to enhance the information returned.
        version
    """

    class Meta:
        name = "Get_Compensation_Scorecards_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationScorecardRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationScorecardRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationScorecardResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationSurveyJobDetailsRequestType:
    """
    Request element for Get Compensation Survey Jobs web service.

    Attributes:
        request_references: Compensation Survey Jobs References element.
        request_criteria: Compensation Survey Jobs Criteria element.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Allows grouping results for Get Compensation Survey Jobs web service.
        version
    """

    class Meta:
        name = "Get_Compensation_Survey_Job_Details_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationSurveyJobsReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationSurveyJobsCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationSurveyJobsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationSurveyJobMatchesRequestType:
    """
    Request element for Get Compensation Survey Job Matches web service.

    Attributes:
        request_references: Compensation survey reference element.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Allows grouping results for Get Compensation Survey Job Matches web service.
        version
    """

    class Meta:
        name = "Get_Compensation_Survey_Job_Matches_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationSurveyJobsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationSurveyJobMatchesResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetConfigurableCompensationBasisRequestType:
    """Request element to get configurable compensation bases."""

    class Meta:
        name = "Get_Configurable_Compensation_Basis_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ConfigurableCompensationBasisRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ConfigurableCompensationBasisRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[ConfigurableCompensationBasisResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetEligibleEarningsRequestType:
    """
    Request element to get eligible earnings override information for an employee, eligible earnings
    override period or percent based bonus plan.

    If no criteria are specified in either the Eligible Earnings Request
    References or Eligible Earnings Request Criteria elements, all
    instances of eligible earnings override will be returned.

    Attributes:
        request_references: Utilize the Request References element to retrieve specific instance(s)
            of Eligible Earnings and its associated data.
        request_criteria: Utilize the Request Criteria element to search for specific instance(s) of
            Eligible Earnings.
        response_filter: The "Response_Filter" element contains common WWS information that allows
            you control the response data that you will be provided including As_Of_Date,
            As_Of_Entry_Moment, and Page attributes.
        response_group: The response group allows for the response data to be tailored to only
            included elements that the user is looking for.  If no response group is provided in the
            request the following elements will be returned:  Reference, Eligible Earnings Data
        version
    """

    class Meta:
        name = "Get_Eligible_Earnings_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EligibleEarningsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EligibleEarningRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[EligibleEarningsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetEnhancedSeveranceMatricesRequestType:
    """
    Get Enhanced Severance Matrix request element.

    Attributes:
        request_references: Use this element to request particular instances of Severance Matrices.
        request_criteria: Use this element to request a matrix by name or by type of matrix.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: The response group.
        version
    """

    class Meta:
        name = "Get_Enhanced_Severance_Matrices_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EnhancedSeveranceMatrixRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EnhancedSeveranceMatrixRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[EnhancedSeveranceMatrixResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFuturePaymentPlanAssignmentsRequestType:
    """
    Request element to get future payment plan assignments.

    If no criteria are specified then all assignments active for today will be returned, grouped by
    employee.
    """

    class Meta:
        name = "Get_Future_Payment_Plan_Assignments_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_criteria: Optional[FuturePaymentPlanAssignmentRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetLocalityPayAreasRequestType:
    """
    Request element to get Locality Pay Area information.

    If no criteria are specified in either the Locality Pay Area Request References or Locality Pay
    Area Request Criteria elements, all instances of Locality Pay Areas will be returned.
    """

    class Meta:
        name = "Get_Locality_Pay_Areas_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[LocalityPayAreaRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetOneTimePaymentPlanConfigurableCategoriesRequestType:
    """
    Request element.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        version
    """

    class Meta:
        name = "Get_One-Time_Payment_Plan_Configurable_Categories_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[OneTimePaymentPlanConfigurableCategoryRequestReferencesType] = (
        field(
            default=None,
            metadata={
                "name": "Request_References",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_criteria: Optional[OneTimePaymentPlanConfigurableCategoryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[OneTimePaymentPlanConfigurableCategoryResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetOneTimePaymentPlansRequestType:
    """
    Request element to get one-time payment plan information.

    If no criteria is specified in the One-Time Payment Plan Request References or One-Time Payment
    Plan Request Criteria elements, all one-time payment plans will be returned.
    """

    class Meta:
        name = "Get_One-Time_Payment_Plans_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[OneTimePaymentPlanRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[OneTimePaymentPlanRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[OneTimePaymentPlanResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPeriodActivityRateMatricesRequestType:
    """
    Request element to get period activity rate matrix information.

    If no criteria is specified in either the period activity rate
    matrix request references or period activity rate matrix request
    criteria elements, all active instances will be returned.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter
        version
    """

    class Meta:
        name = "Get_Period_Activity_Rate_Matrices_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[PeriodActivityRateMatrixRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[PeriodActivityRateMatrixRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPeriodActivityTasksRequestType:
    """
    Request element to get period activity task information.

    If no criteria are specified in either the period activity task
    request references or period activity task request criteria
    elements, all active instances will be returned.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        version
    """

    class Meta:
        name = "Get_Period_Activity_Tasks_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[PeriodActivityTaskRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[PeriodActivityTaskRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[PeriodActivityTaskResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPreviousSystemCompensationHistoryRequestType:
    """
    Request element used to return a worker's compensation history loaded from a previous system.

    If no worker reference is requested, then all workers with previous system compensation data
    will be returned.
    """

    class Meta:
        name = "Get_Previous_System_Compensation_History_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkerRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[WorkerResponseGroupForReferenceType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStockParticipationRateTablesRequestType:
    """
    Request element to get stock participation rate table information.

    If no criteria is specified in the request references or request
    criteria elements, then all stock participation rate tables will be
    returned.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        version
    """

    class Meta:
        name = "Get_Stock_Participation_Rate_Tables_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StockParticipationRateTableRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StockParticipationRateTableRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StockParticipationRateTableResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportEligibleEarningsOverrideHvRequestType:
    """
    This element contains an Eligible Earnings Override.

    Attributes:
        eligible_earnings_override_period_reference: The Eligible Earnings Override Period which all
            the Eligible Earnings Overrides belong to.
        eligible_earnings_reference: Reference element representing a unique instance of Eligible
            Earnings Override. You will need to provide the Workday ID or reference ID of the
            Eligible Earnings Override in order to update an existing instance.
        eligible_earnings_data: Wrapper element for the Eligible Earnings Request data.
    """

    class Meta:
        name = "Import_Eligible_Earnings_Override__HV__RequestType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings_override_period_reference: Optional[
        EligibleEarningsOverridePeriodObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Override_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    eligible_earnings_reference: Optional[EligibleEarningsOverrideObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_earnings_data: Optional[EligibleEarningsOverrideHvDataType] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocalityPayAreaDataType:
    """
    All data for this Locality Pay Area.

    Attributes:
        id: The integration ID used to reference the Locality Pay Area.
        effective_date: Effective Date of the Locality Pay Area
        name: Locality Pay Area Name
        description: Locality Pay Area Description
        percentage: Locality Pay Area Percentage
        location: Location references associated to the locality pay area.
    """

    class Meta:
        name = "Locality_Pay_Area_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 10,
        },
    )
    location: list[LocalityPayAreaLocationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPlanAmountDataType:
    """
    Data specific to a Merit Amount Plan.

    Attributes:
        amount: Required amount for an amount based merit plan
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        manage_by_compensation_basis_rules: Indicates if Merit Amounts will be managed by the
            Compensation Basis Rules.
        merit_plan_profile_amount_replacement_data: Wrapper for Merit Amount Plan Profile Data.
    """

    class Meta:
        name = "Merit_Plan_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_by_compensation_basis_rules: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Manage_By_Compensation_Basis_Rules",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_profile_amount_replacement_data: list[MeritPlanProfileAmountReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Merit_Plan_Profile_Amount_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class MeritPlanPercentDataType:
    """
    Required Percent Data for Merit Plan; consists of default percent and/or  Merit Plan Profiles.

    Attributes:
        percentage: Default target percent for the merit plan.
        manage_by_compensation_basis_rules: Indicates if Merit Amounts will be managed by the
            Compensation Basis Rules.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        merit_plan_profile_percent_replacement_data: This is a wrapper for the Merit Plan Percent
            Plan Profile Percent Replacement; used to display or replace Percent Plan Profile Data.
    """

    class Meta:
        name = "Merit_Plan_Percent_DataType"
        target_namespace = "urn:com.workday/bsvc"

    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_rules: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Manage_By_Compensation_Basis_Rules",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_profile_percent_replacement_data: list[
        MeritPlanProfilePercentReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Merit_Plan_Profile_Percent_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanAmountBasedDataType:
    """
    One-Time Payment Plan Amount Based Data contains information specific to an amount based plan.

    Attributes:
        compensation_element_reference: Default Compensation Element for the plan.  Compensation
            elements store the earnings associated with compensation.
        cost_to_new_hire_organizations: Indicator for whether or not charging this One-Time Payment
            to New Hire Organizations.
        minimum_amount: Minimum amount for one-time payment plan.
        maximum_amount: Maximum amount for one-time payment plan.
        target_amount: Amount to pay to the employee as a one-time payment.
        currency_reference: Currency in which the amount is paid.
        one_time_payment_plan_amount_based_profile_replacement_data: This is a wrapper for the One-
            Time Payment Plan Amount Based Profile Data; this is used to display or replace One-Time
            Payment Plan Amount Based Profile Data.
        worktags_reference: The worktags associated with this one-time payment.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Amount_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cost_to_new_hire_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cost_to_New_Hire_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    minimum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    maximum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_amount_based_profile_replacement_data: list[
        OneTimePaymentPlanAmountBasedProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan_Amount_Based_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worktags_reference: list[PayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanConfigurableCategoryResponseDataType:
    """
    Response Element.

    Attributes:
        one_time_payment_plan_configurable_category: Contains One-Time Payment Plan Class &amp; Data
            Element
    """

    class Meta:
        name = "One-Time_Payment_Plan_Configurable_Category_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_configurable_category: list[
        OneTimePaymentPlanConfigurableCategoryType
    ] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan_Configurable_Category",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanPercentBasedDataType:
    """
    One-Time Payment Plan Percent Based Data contains information specific to an percent based plan.

    Attributes:
        compensation_element_reference: Default Compensation Element for the plan.  Compensation
            elements store the earnings associated with compensation.
        minimum_percent: Minimum percent for one-time payment plan.
        maximum_percent: Maximum percent for one-time payment plan.
        target_percent: Percent used to calculate the payment amount.
        frequency_reference: Reference Frequency with which to calculate the payment amount.
        one_time_payment_plan_percent_based_profile_replacement_data: This is a wrapper for the One-
            Time Payment Plan Percent Based Profile Data; this is used to display or replace One-
            Time Payment Plan Percent Based Profile Data.
        worktags_reference: The worktags associated with this one-time payment.
    """

    class Meta:
        name = "One-Time_Payment_Plan_Percent_Based_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    minimum_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    maximum_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_percent_based_profile_replacement_data: list[
        OneTimePaymentPlanPercentBasedProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan_Percent_Based_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worktags_reference: list[PayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceFactorsDataType:
    """
    Performance Factors Data is part of Bonus Plan and is mutually exclusive with Performance Matrix
    Data.

    It consists of one or more Performance Factor Scorecard Data and one
    Performance Factor Compensation Matrix Weighted Data.

    Attributes:
        performance_factor_scorecard_data: Performance Factor Scorecard Data is part of Performance
            Factors Data within a Bonus Plan.  There must be at least one Performance Factor
            Scorecard Data within the Performance Factors Data.
        individual_performance_factor_weighted_data: Performance Factor Compensation Matrix Weighted
            Data is part of Performance Factors Data within a Bonus Plan; there must be one
            Performance Factor Compensation Matrix Weighted Data for a Performance Factors Data.
    """

    class Meta:
        name = "Performance_Factors_DataType"
        target_namespace = "urn:com.workday/bsvc"

    performance_factor_scorecard_data: list[PerformanceFactorScorecardDataType] = field(
        default_factory=list,
        metadata={
            "name": "Performance_Factor_Scorecard_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_performance_factor_weighted_data: Optional[
        PerformanceFactorCompensationMatrixWeightedDataType
    ] = field(
        default=None,
        metadata={
            "name": "Individual_Performance_Factor_Weighted_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityPayCostingDataType:
    """
    Contains one or more costing allocation splits for the specific Period Activity Pay assignment
    line.

    Attributes:
        allocation_detail_for_period_pay: Costing allocation for Period Activity Pay assignment
            line.
    """

    class Meta:
        name = "Period_Activity_Pay_Costing_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allocation_detail_for_period_pay: list[AllocationDetailForPeriodPayDataType] = field(
        default_factory=list,
        metadata={
            "name": "Allocation_Detail_for_Period_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PeriodActivityRateMatrixEntryDataType:
    """
    Period Activity Rate Matrix entry data for each row in the matrix.

    Attributes:
        period_activity_category_reference: Period Activity Category reference
        period_activity_unit_reference: Period Activity Unit reference
        period_activity_rate_matrix_entry_sequence_data
    """

    class Meta:
        name = "Period_Activity_Rate_Matrix_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_category_reference: Optional[PeriodActivityCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_unit_reference: Optional[PeriodActivityUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_rate_matrix_entry_sequence_data: Optional[
        PeriodActivityRateMatrixEntrySequenceDataType
    ] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Entry_Sequence_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodActivityTaskType:
    """
    Contains a period activity task and its associated data.

    Attributes:
        period_activity_task_reference: Period Activity Task Reference
        period_activity_task_data: Period Activity Task Data
    """

    class Meta:
        name = "Period_Activity_TaskType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_task_reference: Optional[PeriodActivityTaskObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_task_data: list[PeriodActivityTaskDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Task_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodPlanProfileReplacementDataType:
    """
    Profile data for Period Salary Plan.

    Attributes:
        eligibility_rule_reference: This is the eligibility rule associated to the Period Salary
            Plan Profile.
        delete_profile: If you enter Y, Workday removes the period plan profile from the period
            plan. Workday uses eligibility rule to determine the profile to remove.
        period_plan_profile_replacement_data_details
    """

    class Meta:
        name = "Period_Plan_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_plan_profile_replacement_data_details: Optional[
        PeriodPlanProfileReplacementDataDetailsType
    ] = field(
        default=None,
        metadata={
            "name": "Period_Plan_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionFuturePaymentPlanAssignmentDataType:
    """
    Future payment plan assignments for a position effective for specific date.

    Attributes:
        employee_reference: The employee to whom the set of future payment plan assignments are
            assigned to or will be assigned to.
        position_reference: The position to whom the set of future payment plan assignments are
            assigned to or will be assigned to.
        assignment_date: Assignment date for the future payment plan assignment.
        future_payment_plan_assignment_data
    """

    class Meta:
        name = "Position_Future_Payment_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    future_payment_plan_assignment_data: list[FuturePaymentPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Future_Payment_Plan_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PreviousSystemCompensationHistoryDataType:
    """
    Container for defining whether a previous system compensation history entry is being added,
    updated or deleted.

    Attributes:
        previous_system_compensation_history_reference: Unique identifier for a previous system
            compensation entry. Required if you are deleting or updating an existing entry. Leave
            blank on an Add.
        previous_system_compensation_history_detail_data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        delete: Flag indicating that the referenced data should be deleted.
    """

    class Meta:
        name = "Previous_System_Compensation_History_DataType"
        target_namespace = "urn:com.workday/bsvc"

    previous_system_compensation_history_reference: Optional[
        CompensationPreviousSystemHistoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Previous_System_Compensation_History_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    previous_system_compensation_history_detail_data: Optional[
        PreviousSystemCompensationHistoryDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Previous_System_Compensation_History_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfileCompensationScorecardResultDataType:
    """
    Contains a rule/profile delineated set of goals and goal values for this result.

    Attributes:
        eligibility_rule_reference: A unique eligibility rule reference.  The rule delineates
            results by how a worker matches the rule evaluation.
        scorecard_result_data: Contains the set of goals and goal values for this result.
    """

    class Meta:
        name = "Profile_Compensation_Scorecard_Result_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scorecard_result_data: list[ProfileScorecardResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Scorecard_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ProposedAllowancePlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Allowance Plan Compensation data.

    Attributes:
        allowance_plan_sub_data: Encapsulating element containing all Allowance Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Allowance_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allowance_plan_sub_data: list[ProposedAllowancePlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedAllowanceUnitPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Unit Allowance Plan Compensation data.

    Attributes:
        unit_allowance_plan_sub_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Allowance_Unit_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_allowance_plan_sub_data: list[ProposedAllowanceUnitPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Allowance_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBasePayPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        pay_plan_sub_data: Encapsulating element containing all Salary or Hourly Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Base_Pay_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_plan_sub_data: list[ProposedBasePayPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Pay_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBonusPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Bonus Plan Compensation data.

    Attributes:
        bonus_plan_sub_data: Encapsulating element containing all Bonus Plan Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Bonus_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_plan_sub_data: list[ProposedBonusPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCalculatedPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Calculated Plan Compensation data.

    Attributes:
        calculated_plan_sub_data: Encapsulating element containing all Calculated Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Calculated_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    calculated_plan_sub_data: list[ProposedCalculatedPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Calculated_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCommissionPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Commission Plan Compensation data.

    Attributes:
        commission_plan_sub_data: Encapsulating element containing all Commission Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Commission_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    commission_plan_sub_data: list[ProposedCommissionPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Commission_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedMeritPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Merit Plan Compensation data.

    Attributes:
        merit_plan_sub_data: Encapsulating element containing all Merit Plan Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Merit_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    merit_plan_sub_data: list[ProposedMeritPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Merit_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedPeriodSalaryPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        period_salary_plan_sub_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Period_Salary_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_salary_plan_sub_data: list[ProposedPeriodSalaryPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Salary_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedSalaryUnitPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Unit Salary Plan Compensation data.

    Attributes:
        unit_salary_plan_sub_data: Encapsulating element containing all Unit Salary Plan
            Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Salary_Unit_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_salary_plan_sub_data: list[ProposedSalaryUnitPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Salary_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedStockPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        stock_plan_sub_data
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Stock_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_sub_data: list[ProposedStockPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutBenchmarkJobResponse(PutBenchmarkJobResponseType):
    class Meta:
        name = "Put_Benchmark_Job_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationBenchmarkDataResponse(PutCompensationBenchmarkDataResponseType):
    class Meta:
        name = "Put_Compensation_Benchmark_Data_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationChangeTemplatesResponseType:
    """
    Response element for Compensation Change Template.

    Attributes:
        compensation_change_template_reference: Unique Identifier for a Compensation Change Template
        exceptions_response_data
        version
    """

    class Meta:
        name = "Put_Compensation_Change_Templates_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_change_template_reference: Optional[CompensationTemplateObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Template_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationEligibilityRuleResponse(PutCompensationEligibilityRuleResponseType):
    class Meta:
        name = "Put_Compensation_Eligibility_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationGradeHierarchyResponse(PutCompensationGradeHierarchyResponseType):
    class Meta:
        name = "Put_Compensation_Grade_Hierarchy_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationGradeResponse(PutCompensationGradeResponseType):
    class Meta:
        name = "Put_Compensation_Grade_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationMatrixResponse(PutCompensationMatrixResponseType):
    class Meta:
        name = "Put_Compensation_Matrix_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationPlanResponse(PutCompensationPlanResponseType):
    class Meta:
        name = "Put_Compensation_Plan_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationScorecardResponse(PutCompensationScorecardResponseType):
    class Meta:
        name = "Put_Compensation_Scorecard_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationScorecardResultResponse(PutCompensationScorecardResultResponseType):
    class Meta:
        name = "Put_Compensation_Scorecard_Result_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationSurveyJobDetailResponse(PutCompensationSurveyJobDetailResponseType):
    class Meta:
        name = "Put_Compensation_Survey_Job_Detail_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationSurveyJobMatchesResponse(PutCompensationSurveyJobMatchesResponseType):
    class Meta:
        name = "Put_Compensation_Survey_Job_Matches_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationSurveyJobResultResponse(PutCompensationSurveyJobResultResponseType):
    class Meta:
        name = "Put_Compensation_Survey_Job_Result_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutConfigurableCompensationBasisRequestType:
    """
    Request element to modify configurable compensation bases.

    Attributes:
        configurable_compensation_basis_reference: Configurable Compensation Basis Reference ID or
            WID. Required when updating an existing compensation basis.
        configurable_compensation_basis_data: Configurable compensation basis data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Configurable_Compensation_Basis_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    configurable_compensation_basis_reference: Optional[CompensationBasisConfigurableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Configurable_Compensation_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    configurable_compensation_basis_data: Optional[ConfigurableCompensationBasisDataType] = field(
        default=None,
        metadata={
            "name": "Configurable_Compensation_Basis_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutConfigurableCompensationBasisResponse(PutConfigurableCompensationBasisResponseType):
    class Meta:
        name = "Put_Configurable_Compensation_Basis_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutEnhancedSeveranceMatrixResponse(PutEnhancedSeveranceMatrixResponseType):
    class Meta:
        name = "Put_Enhanced_Severance_Matrix_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutFuturePaymentPlanAssignmentResponse(PutFuturePaymentPlanAssignmentResponseType):
    class Meta:
        name = "Put_Future_Payment_Plan_Assignment_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutImportProcessResponse(PutImportProcessResponseType):
    class Meta:
        name = "Put_Import_Process_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutLocalityPayAreaResponseType:
    """
    Response element for Put Locality Pay Area.

    Attributes:
        locality_pay_area_reference: Unique Identifier for a Locality Pay Area. Also known as
            Locality Pay Area ID.
        exceptions_response_data: Element containing Exceptions Data
        version
    """

    class Meta:
        name = "Put_Locality_Pay_Area_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    locality_pay_area_reference: Optional[LocalityPayAreaObjectType] = field(
        default=None,
        metadata={
            "name": "Locality_Pay_Area_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutOneTimePaymentPlanConfigurableCategoryRequest(
    PutOneTimePaymentPlanConfigurableCategoryRequestType
):
    class Meta:
        name = "Put_One-Time_Payment_Plan_Configurable_Category_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutOneTimePaymentPlanConfigurableCategoryResponse(
    PutOneTimePaymentPlanConfigurableCategoryResponseType
):
    class Meta:
        name = "Put_One-Time_Payment_Plan_Configurable_Category_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutOneTimePaymentPlanResponse(PutOneTimePaymentPlanResponseType):
    class Meta:
        name = "Put_One-Time_Payment_Plan_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPeriodActivityRateMatrixResponse(PutPeriodActivityRateMatrixResponseType):
    class Meta:
        name = "Put_Period_Activity_Rate_Matrix_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPeriodActivityTaskRequestType:
    """
    This web service operation is designed to load period activity tasks.

    Attributes:
        period_activity_task_reference: Period Work Task Reference
        period_activity_task_data: Period Work Task Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Period_Activity_Task_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_task_reference: Optional[PeriodActivityTaskObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_task_data: Optional[PeriodActivityTaskDataType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPeriodActivityTaskResponse(PutPeriodActivityTaskResponseType):
    class Meta:
        name = "Put_Period_Activity_Task_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPreviousSystemCompensationHistoryResponse(
    PutPreviousSystemCompensationHistoryResponseType
):
    class Meta:
        name = "Put_Previous_System_Compensation_History_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStockParticipationRateTableResponse(PutStockParticipationRateTableResponseType):
    class Meta:
        name = "Put_Stock_Participation_Rate_Table_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestBonusPaymentDataType:
    """
    Wrapper element for the Request Bonus Payment business process.

    Attributes:
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        effective_date: Effective Date of the Bonus Payment
        visibility_date: Date the employee can view the bonus adjustment event. Employee Visibility
            Date must be enabled in the HCM tenant settings.
        bonus_compensation_snapshot_date: This Date is used to calculate the employee Compensation
            Basis. If you do not supply this date, the bonus payment will be calculated on Total
            Base Pay. If you do supply this date, the bonus payment will be calculated on the
            Compensation Basis setup on the bonus plan.
        eligible_earnings_override_period_reference: The Reference ID of the Eligible Earning
            Override Period
        bonus_reason_reference: Reference element representing a unique instance of Bonus Reason.
        bonus_payment_data: Element containing Bonus Payment information.
        ignore_plan_assignment: When this flag is set, the bonus payment will be loaded, even if the
            plan is no longer assigned. Eligibility will also be ignored.
    """

    class Meta:
        name = "Request_Bonus_Payment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    visibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Visibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_compensation_snapshot_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Bonus_Compensation_Snapshot_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_earnings_override_period_reference: Optional[
        EligibleEarningsOverridePeriodObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Eligible_Earnings_Override_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_payment_data: Optional[BonusPaymentDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Payment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    ignore_plan_assignment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ignore_Plan_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestBonusPaymentResponse(RequestBonusPaymentResponseType):
    class Meta:
        name = "Request_Bonus_Payment_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestCompensationChangeResponse(RequestCompensationChangeResponseType):
    class Meta:
        name = "Request_Compensation_Change_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestDefaultCompensationResponse(RequestDefaultCompensationResponseType):
    class Meta:
        name = "Request_Default_Compensation_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestEmployeeMeritAdjustmentDataType:
    """
    Wrapper Element for the Request Employee Merit Adjustment business process.

    Attributes:
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        merit_increase_effective_date: Date for the employee merit adjustment.
        merit_increase_visibility_date: Date the employee can view the merit adjustment event.
            Employee Visibility Date must be enabled in the HCM tenant settings.
        merit_plan_reference: Reference element representing a unique instance of Merit (Percent)
            Plan.
        merit_reason_reference: Reference element representing a unique instance of Merit Reason.
        employee_merit_adjustment_sub_data
    """

    class Meta:
        name = "Request_Employee_Merit_Adjustment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_increase_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Merit_Increase_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    merit_increase_visibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Merit_Increase_Visibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_reference: Optional[MeritPercentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Merit_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_merit_adjustment_sub_data: list[EmployeeMeritAdjustmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Merit_Adjustment_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class RequestEmployeeMeritAdjustmentResponse(RequestEmployeeMeritAdjustmentResponseType):
    class Meta:
        name = "Request_Employee_Merit_Adjustment_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestOneTimePaymentDataType:
    """
    Wrapper element for the Request One-Time Payment business process.

    Attributes:
        employee_reference: Employee to receive the one-time payment.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        effective_date: Date the one-time payment for the employee is effective.
        employee_visibility_date: Date the employee can view the one- time payment event.  Employee
            Visibility Date must be enabled in the HCM tenant settings.
        reason_reference: Reason for the one-time payment.  Use format:
            General_Event_Subcategory_ID.
        one_time_payment_sub_data: One-Time Payment Sub Data
    """

    class Meta:
        name = "Request_One-Time_Payment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_visibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Employee_Visibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_sub_data: list[OneTimePaymentDataType] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class RequestOneTimePaymentResponseType:
    """
    Response element containing the reference for the one time payment.

    Attributes:
        one_time_payment_event_reference: Event ID of the Request One- Time Payment Event.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Request_One-Time_Payment_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestRequisitionCompensationChangeResponse(
    RequestRequisitionCompensationChangeResponseType
):
    class Meta:
        name = "Request_Requisition_Compensation_Change_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RetrieveSeveranceWorksheetsRequestType:
    """
    Request for getting back Employee Severance Worksheets.

    Attributes:
        request_references: Reference for Employee Severance Worksheet that you want returned.
        request_criteria: Request criteria to filter Employee Severance Worksheets returned
        response_filter
        response_group: Response group for Employee Severance Worksheet Event.
        version
    """

    class Meta:
        name = "Retrieve_Severance_Worksheets_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EmployeeSeveranceWorksheetEventRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EmployeeSeveranceWorksheetEventRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[EmployeeSeveranceWorksheetEventResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ServiceDurationSeveranceMatrixDataType:
    """
    The service length specific duration severance matrix data element.

    Attributes:
        length_of_service_unit_reference: Days, Weeks, Months, or Years depending on the units used
            to define minimum and maximum length of service.
        service_duration_severance_matrix_entry_data: The data for each entry in the matrix.
    """

    class Meta:
        name = "Service_Duration_Severance_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    length_of_service_unit_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Length_of_Service_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    service_duration_severance_matrix_entry_data: list[
        ServiceDurationSeveranceMatrixEntryDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Service_Duration_Severance_Matrix_Entry_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ServiceLengthSeveranceMatrixDataType:
    """
    The Service Length Severance Matrix data element.

    Attributes:
        length_of_service_unit_reference: Days, Weeks, Months, or Years depending on the units used
            to define minimum and maximum length of service.
        compensation_rounding_rule_reference: Enter the name of the Compensation Rounding Rule to be
            used with this matrix.
        multiplier_order_reference: Enter Multiply then round to multiply service duration and then
            apply the rounding rule. Enter Round then multiply to first apply the rounding rule to
            the service duration and then multiply that product by the length of service multiplier.
        service_length_severance_matrix_entry_data: The data for each entry in the matrix.
    """

    class Meta:
        name = "Service_Length_Severance_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    length_of_service_unit_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Length_of_Service_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    multiplier_order_reference: Optional[BenefitMultiplierOrderObjectType] = field(
        default=None,
        metadata={
            "name": "Multiplier_Order_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    service_length_severance_matrix_entry_data: list[ServiceLengthSeveranceMatrixEntryDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Service_Length_Severance_Matrix_Entry_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )


@dataclass
class StockParticipationRateTableData20Type:
    """
    Stock Participation Rate Table Data.

    Attributes:
        stock_participation_rate_table_id: Reference ID for this Stock Participation Rate Table.
        inactive: Inactive status indicator for this Stock Participation Rate Table.
        name: The name of this Stock Participation Rate Table.
        description: The description of this Stock Participation Rate Table.
        default_percentage_rate: The default stock participation percentage rate of this Stock
            Participation Rate Table.
        uses_classic_criteria: Selection for using Classic Criteria dimensions on this Stock
            Participation Rate Table.
        uses_eligibility_rules: Selection for using Eligibility Rule dimensions on this Stock
            Participation Rate Table.
        stock_participation_rate_table_entry_data
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Data_2.0Type"
        target_namespace = "urn:com.workday/bsvc"

    stock_participation_rate_table_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Stock_Participation_Rate_Table_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_percentage_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Percentage_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 4,
        },
    )
    uses_classic_criteria: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Uses_Classic_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    uses_eligibility_rules: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Uses_Eligibility_Rules",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_participation_rate_table_entry_data: list[StockParticipationRateTableEntryData20Type] = (
        field(
            default_factory=list,
            metadata={
                "name": "Stock_Participation_Rate_Table_Entry_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class StockPlanAmountProfileReplacementDataDetailsType:
    """
    Stock Plan Amount Profile Replacement Data Details.

    Attributes:
        target_amount: Target Amount for the Stock Plan Profile.
        currency_reference: Currency of the Target Amount.
        stock_profile_grant_split_replacement_data
    """

    class Meta:
        name = "Stock_Plan_Amount_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    stock_profile_grant_split_replacement_data: list[StockProfileGrantSplitReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Stock_Profile_Grant_Split_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )


@dataclass
class StockPlanPercentProfileReplacementDataDetailsType:
    """
    Stock Plan Percent Profile Replacement Data Details.

    Attributes:
        target_percent: Target Percent for Stock Plan Profile.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        stock_profile_grant_split_replacement_data
    """

    class Meta:
        name = "Stock_Plan_Percent_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 4,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_profile_grant_split_replacement_data: list[StockProfileGrantSplitReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Stock_Profile_Grant_Split_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )


@dataclass
class StockPlanUnitProfileReplacementDataDetailsType:
    """
    Stock Plan Unit Profile Replacement Data Details.

    Attributes:
        target_shares: Target expressed as number of shares.
        stock_profile_grant_split_replacement_data
    """

    class Meta:
        name = "Stock_Plan_Unit_Profile_Replacement_Data_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    stock_profile_grant_split_replacement_data: list[StockProfileGrantSplitReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Stock_Profile_Grant_Split_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )


@dataclass
class UpdateStockGrantRequestType:
    """
    Stock grant request.

    Attributes:
        stock_grant_reference: Stock grant reference.
        stock_grant_data: Stock grant data.
        version
    """

    class Meta:
        name = "Update_Stock_Grant_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    stock_grant_reference: Optional[StockGrantObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Grant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    stock_grant_data: Optional[UpdateStockGrantDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Grant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UpdateStockGrantResponse(UpdateStockGrantResponseType):
    class Meta:
        name = "Update_Stock_Grant_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AddStockGrantOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["AddStockGrantOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        add_stock_grant_response: Optional[AddStockGrantResponse] = field(
            default=None,
            metadata={
                "name": "Add_Stock_Grant_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["AddStockGrantOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["AddStockGrantOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["AssignEligiblePeriodActivitiesForEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_eligible_period_activities_for_employee_response: Optional[
            AssignEligiblePeriodActivitiesForEmployeeResponse
        ] = field(
            default=None,
            metadata={
                "name": "Assign_Eligible_Period_Activities_for_Employee_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["AssignEligiblePeriodActivitiesForEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "AssignEligiblePeriodActivitiesForEmployeeOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class CreateSeveranceWorksheetOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["CreateSeveranceWorksheetOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        create_severance_worksheet_response: Optional[CreateSeveranceWorksheetResponse] = field(
            default=None,
            metadata={
                "name": "Create_Severance_Worksheet_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["CreateSeveranceWorksheetOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["CreateSeveranceWorksheetOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportCompensationBenchmarkConfigurationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationBenchmarkConfigurationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportCompensationBenchmarkConfigurationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportCompensationBenchmarkConfigurationOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportCompensationBenchmarkDataOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationBenchmarkDataOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportCompensationBenchmarkDataOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportCompensationBenchmarkDataOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportCompensationSurveyJobDetailsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationSurveyJobDetailsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportCompensationSurveyJobDetailsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportCompensationSurveyJobDetailsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportCompensationSurveyJobResultsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationSurveyJobResultsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportCompensationSurveyJobResultsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportCompensationSurveyJobResultsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportEligibleEarningsOverrideOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportEligibleEarningsOverrideOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportEligibleEarningsOverrideOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportEligibleEarningsOverrideOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportRequestCompensationChangeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportRequestCompensationChangeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportRequestCompensationChangeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportRequestCompensationChangeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportRequestOneTimePaymentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportRequestOneTimePaymentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ImportRequestOneTimePaymentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ImportRequestOneTimePaymentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutBenchmarkJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutBenchmarkJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_benchmark_job_response: Optional[PutBenchmarkJobResponse] = field(
            default=None,
            metadata={
                "name": "Put_Benchmark_Job_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutBenchmarkJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutBenchmarkJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationBenchmarkDataOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationBenchmarkDataOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_benchmark_data_response: Optional[PutCompensationBenchmarkDataResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Compensation_Benchmark_Data_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["PutCompensationBenchmarkDataOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationBenchmarkDataOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationEligibilityRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationEligibilityRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_eligibility_rule_response: Optional[
            PutCompensationEligibilityRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Eligibility_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationEligibilityRuleOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationEligibilityRuleOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationGradeHierarchyOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationGradeHierarchyOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_grade_hierarchy_response: Optional[
            PutCompensationGradeHierarchyResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Grade_Hierarchy_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationGradeHierarchyOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationGradeHierarchyOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationGradeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationGradeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_grade_response: Optional[PutCompensationGradeResponse] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Grade_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationGradeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationGradeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationMatrixOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationMatrixOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_matrix_response: Optional[PutCompensationMatrixResponse] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Matrix_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationMatrixOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationMatrixOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationPlansOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationPlansOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_plan_response: Optional[PutCompensationPlanResponse] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Plan_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationPlansOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationPlansOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationScorecardResultOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationScorecardResultOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_scorecard_result_response: Optional[
            PutCompensationScorecardResultResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Scorecard_Result_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationScorecardResultOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationScorecardResultOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationScorecardOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationScorecardOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_scorecard_response: Optional[PutCompensationScorecardResponse] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Scorecard_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationScorecardOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationScorecardOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationSurveyJobDetailOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationSurveyJobDetailOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_survey_job_detail_response: Optional[
            PutCompensationSurveyJobDetailResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Survey_Job_Detail_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationSurveyJobDetailOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationSurveyJobDetailOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationSurveyJobMatchesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationSurveyJobMatchesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_survey_job_matches_response: Optional[
            PutCompensationSurveyJobMatchesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Survey_Job_Matches_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationSurveyJobMatchesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationSurveyJobMatchesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutCompensationSurveyJobResultOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationSurveyJobResultOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_survey_job_result_response: Optional[
            PutCompensationSurveyJobResultResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Survey_Job_Result_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationSurveyJobResultOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationSurveyJobResultOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutConfigurableCompensationBasisOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutConfigurableCompensationBasisOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_configurable_compensation_basis_response: Optional[
            PutConfigurableCompensationBasisResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Configurable_Compensation_Basis_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutConfigurableCompensationBasisOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutConfigurableCompensationBasisOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutEnhancedSeveranceMatrixOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutEnhancedSeveranceMatrixOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_enhanced_severance_matrix_response: Optional[PutEnhancedSeveranceMatrixResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Enhanced_Severance_Matrix_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["PutEnhancedSeveranceMatrixOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutEnhancedSeveranceMatrixOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutFuturePaymentPlanAssignmentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutFuturePaymentPlanAssignmentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_future_payment_plan_assignment_response: Optional[
            PutFuturePaymentPlanAssignmentResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Future_Payment_Plan_Assignment_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutFuturePaymentPlanAssignmentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutFuturePaymentPlanAssignmentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutOneTimePaymentPlanConfigurableCategoryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutOneTimePaymentPlanConfigurableCategoryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutOneTimePaymentPlanConfigurableCategoryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_one_time_payment_plan_configurable_category_request: Optional[
            PutOneTimePaymentPlanConfigurableCategoryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_One-Time_Payment_Plan_Configurable_Category_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutOneTimePaymentPlanConfigurableCategoryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutOneTimePaymentPlanConfigurableCategoryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_one_time_payment_plan_configurable_category_response: Optional[
            PutOneTimePaymentPlanConfigurableCategoryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_One-Time_Payment_Plan_Configurable_Category_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutOneTimePaymentPlanConfigurableCategoryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "PutOneTimePaymentPlanConfigurableCategoryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutOneTimePaymentPlanOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutOneTimePaymentPlanOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_one_time_payment_plan_response: Optional[PutOneTimePaymentPlanResponse] = field(
            default=None,
            metadata={
                "name": "Put_One-Time_Payment_Plan_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutOneTimePaymentPlanOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutOneTimePaymentPlanOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutPeriodActivityRateMatrixOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutPeriodActivityRateMatrixOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_period_activity_rate_matrix_response: Optional[PutPeriodActivityRateMatrixResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Period_Activity_Rate_Matrix_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["PutPeriodActivityRateMatrixOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutPeriodActivityRateMatrixOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutPeriodActivityTaskOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutPeriodActivityTaskOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_period_activity_task_response: Optional[PutPeriodActivityTaskResponse] = field(
            default=None,
            metadata={
                "name": "Put_Period_Activity_Task_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutPeriodActivityTaskOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutPeriodActivityTaskOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutPreviousSystemCompensationHistoryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutPreviousSystemCompensationHistoryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_previous_system_compensation_history_response: Optional[
            PutPreviousSystemCompensationHistoryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Previous_System_Compensation_History_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutPreviousSystemCompensationHistoryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutPreviousSystemCompensationHistoryOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutStockParticipationRateTableOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutStockParticipationRateTableOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_stock_participation_rate_table_response: Optional[
            PutStockParticipationRateTableResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Stock_Participation_Rate_Table_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutStockParticipationRateTableOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutStockParticipationRateTableOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class RequestBonusPaymentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestBonusPaymentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_bonus_payment_response: Optional[RequestBonusPaymentResponse] = field(
            default=None,
            metadata={
                "name": "Request_Bonus_Payment_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["RequestBonusPaymentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RequestBonusPaymentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class RequestCompensationChangeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestCompensationChangeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_compensation_change_response: Optional[RequestCompensationChangeResponse] = field(
            default=None,
            metadata={
                "name": "Request_Compensation_Change_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["RequestCompensationChangeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RequestCompensationChangeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class RequestDefaultCompensationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestDefaultCompensationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_default_compensation_response: Optional[RequestDefaultCompensationResponse] = field(
            default=None,
            metadata={
                "name": "Request_Default_Compensation_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["RequestDefaultCompensationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RequestDefaultCompensationOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class RequestEmployeeMeritAdjustmentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestEmployeeMeritAdjustmentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_employee_merit_adjustment_response: Optional[
            RequestEmployeeMeritAdjustmentResponse
        ] = field(
            default=None,
            metadata={
                "name": "Request_Employee_Merit_Adjustment_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["RequestEmployeeMeritAdjustmentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RequestEmployeeMeritAdjustmentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class RequestRequisitionCompensationChangeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestRequisitionCompensationChangeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_requisition_compensation_change_response: Optional[
            RequestRequisitionCompensationChangeResponse
        ] = field(
            default=None,
            metadata={
                "name": "Request_Requisition_Compensation_Change_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["RequestRequisitionCompensationChangeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RequestRequisitionCompensationChangeOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class UpdateStockGrantOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["UpdateStockGrantOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        update_stock_grant_response: Optional[UpdateStockGrantResponse] = field(
            default=None,
            metadata={
                "name": "Update_Stock_Grant_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["UpdateStockGrantOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["UpdateStockGrantOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class AddStockGrantDataType:
    """
    Wrapper element for the Request Stock Grant business process.

    Attributes:
        effective_date: Date the stock grant becomes effective.
        employee_reference: Employee to receive the stock grant.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        stock_plan_reference: Stock Plan for the Stock Grants.
        reason_reference: Reason for the stock plan assignment. Use the format:
            General_Event_Subcategory.
        stock_grant_data: Reference element to the stock grant.
    """

    class Meta:
        name = "Add_Stock_Grant_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_reference: Optional[StockPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_grant_data: list[AddIndividualStockGrantDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Grant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class AllowancePlanAmountDataType:
    """
    Contains Allowance Plan Amount Data.

    Attributes:
        amount: Amount for Amount Allowance Plan; required if No Individual Override is True.
        allowance_plan_amount_based_profile_replacement_data: This is a wrapper for the Allowance
            Plan Amount Based Profile Data; this is used to display or replace Allowance Plan Amount
            Based Profile Data.
    """

    class Meta:
        name = "Allowance_Plan_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    allowance_plan_amount_based_profile_replacement_data: list[
        AllowancePlanAmountBasedProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_Amount_Based_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanPercentDataType:
    """
    Contains Allowance Plan Percent data.

    Attributes:
        percentage: Percentage for Percent Allowance Plan; required if No Individual Override is
            True.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        ceiling_amount: The Ceiling Amount for the Allowance Percent Plan.
        ceiling_currency_reference: The Ceiling Currency for the Allowance Percent Plan.
        allowance_plan_percent_based_profile_replacement_data: This is a wrapper for the Allowance
            Plan Percent Based Profile Data; this is used to display or replace Allowance Plan
            Percent Based Profile Data.
    """

    class Meta:
        name = "Allowance_Plan_Percent_DataType"
        target_namespace = "urn:com.workday/bsvc"

    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ceiling_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Ceiling_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    ceiling_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Ceiling_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_percent_based_profile_replacement_data: list[
        AllowancePlanPercentBasedProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_Percent_Based_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanUnitDataType:
    """
    Contains Allowance Plan Unit data.

    Attributes:
        per_unit_amount: Per Unit Amount for Unit Allowance Plan; required if No Individual Override
            is True.
        default_units: Number of Units for which to pay an allowance; required if No Individual
            Override is True.
        unit_of_measure_reference: Unit of measure for Unit Data of an Allowance Plan; required.
        allowance_plan_unit_based_profile_replacement_data: This is a wrapper for the Allowance Plan
            Unit Based Profile Data; this is used to display or replace Allowance Plan Unit Based
            Profile Data.
    """

    class Meta:
        name = "Allowance_Plan_Unit_DataType"
        target_namespace = "urn:com.workday/bsvc"

    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    default_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    unit_of_measure_reference: Optional[UnitOfMeasureObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Of_Measure_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    allowance_plan_unit_based_profile_replacement_data: list[
        AllowancePlanUnitBasedProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_Unit_Based_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeRequestType:
    """Web service operation to assign a period activity for an employee."""

    class Meta:
        name = "Assign_Eligible_Period_Activities_for_Employee_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_eligible_period_activities_for_employee_data: Optional[
        AssignEligiblePeriodActivitiesForEmployeeDataType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Eligible_Period_Activities_for_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanAmountDataType:
    """
    Contains Bonus Plan Amount data.

    Attributes:
        amount: Enter the amount of the target bonus amount. Workday uses this value if it can find
            no other target value for the employee. This can happen when employees have no
            individual target, are not eligible for any of the multiple plan profile targets, or are
            eligible for multiple plan profile targets. This is optional for single target bonus
            plans so that you have the option to create a bonus plan without using it to budget for
            bonuses. The default, however, is required for all bonus plans that use multiple
            targets.
        amount_plan_profile_replacement_data: This is a wrapper for the Bonus Plan Amount; this is
            used to display or replace Amount Plan Profile Data; it is required and mutually
            exclusive with Bonus Plan Percentage.
    """

    class Meta:
        name = "Bonus_Plan_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    amount_plan_profile_replacement_data: list[BonusPlanProfileReplacementAmountDataType] = field(
        default_factory=list,
        metadata={
            "name": "Amount_Plan_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanPercentDataType:
    """
    Contains Bonus Plan Percent data.

    Attributes:
        percentage: Enter the percent of the target bonus amount. Workday uses this value if it can
            find no other target value for the employee. This can happen when employees have no
            individual target, are not eligible for any of the multiple plan profile targets, or are
            eligible for multiple plan profile targets. This is optional for single target bonus
            plans so that you have the option to create a bonus plan without using it to budget for
            bonuses. The default, however, is required for all bonus plans that use multiple
            targets.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        percent_plan_profile_replacement_data: Used to display or replace Percent Plan Profile Data
            for a Percent Bonus Plan.
    """

    class Meta:
        name = "Bonus_Plan_Percent_DataType"
        target_namespace = "urn:com.workday/bsvc"

    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 4,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    percent_plan_profile_replacement_data: list[BonusPlanPercentPlanProfileReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Percent_Plan_Profile_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class CheckPositionBudgetSubBusinessProcessType:
    """
    Top element used for Check Position Budget as a sub business process.

    Attributes:
        business_sub_process_parameters: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
    """

    class Meta:
        name = "Check_Position_Budget_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[FinancialsBusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommissionPlanDataType:
    """
    Commission Plan Data.

    Attributes:
        compensation_element_reference: Compensation Plan Default Compensation Element for a
            Commission Plan.
        currency_reference: Currency reference.  Defaults to the tenant currency if no value is
            provided.
        frequency_reference: The compensation plan frequency.  If none is provided, the tenant
            default is used.
        target_amount: The Target Amount to default to an employee's compensation.
        draw_amount: The Draw Amount, Draw Frequency, and Draw Duration are for informational
            purposes and passing to a third- party commission system.
        draw_frequency_reference: The Draw Amount, Draw Frequency, and Draw Duration are for
            informational purposes and passing to a third-party commission system.
        draw_duration: The Draw Amount, Draw Frequency, and Draw Duration are for informational
            purposes and passing to a third- party commission system.
        recoverable: Indicates whether commission payments made for this plan are Recoverable by
            default.
        commission_plan_profile_replacement_data: This is a wrapper for the Commission Plan Profile
            Data; this is used to display or replace Commission Plan Profile Data.
    """

    class Meta:
        name = "Commission_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    draw_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Draw_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    draw_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Draw_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_duration: Optional[str] = field(
        default=None,
        metadata={
            "name": "Draw_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recoverable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Recoverable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_profile_replacement_data: list[CommissionPlanProfileReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Commission_Plan_Profile_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class CompensationBenchmarkAgingHvDataType:
    """
    Compensation Benchmark Cycle Aging (HV) Data.

    Attributes:
        aging_configuration_reference: Aging Configuration Reference
        delete: Delete Compensation Benchmark Aging Configuration
        aging_configuration_data: Benchmark Data for Aging Configuration
    """

    class Meta:
        name = "Compensation_Benchmark_Aging__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    aging_configuration_reference: Optional[CompensationBenchmarkAgingConfigurationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Aging_Configuration_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aging_configuration_data: Optional[CompensationBenchmarkAgingConfigurationDataType] = field(
        default=None,
        metadata={
            "name": "Aging_Configuration_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkCalculationConfigurationContainerDataType:
    """
    Weight and Adjustment Component Configuration Data.

    Attributes:
        compensation_component_selector: Compensation Component Category Selector for Weight and
            Adjustment Configuration
        weight_and_adjustment_calculation_data: Calculation Data for Weight and Adjustment
            Configuration
    """

    class Meta:
        name = "Compensation_Benchmark_Calculation_Configuration_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_component_selector: Optional[
        CompensationBenchmarkComponentCategorySelectorType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Component_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    weight_and_adjustment_calculation_data: list[
        CompensationBenchmarkWeightsAndAdjustmentsConfigurationDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Weight_and_Adjustment_Calculation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationBenchmarkProfileDataType:
    """
    Benchmark Job Data.

    Attributes:
        compensation_eligibility_rule_reference: You can specify certain criteria such as location
            to provide more granularity to the base pay or total cash composite for groups of
            employees.
        currency_reference: This value will be applied to the Base Pay Composite and Total Cash
            Composite categories.
        frequency_reference: This value will be applied to the Base Pay Composite and Total Cash
            Composite categories.
        benchmark_job_composite_replacement_data: Benchmark Job Composite Data
    """

    class Meta:
        name = "Compensation_Benchmark_Profile_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_job_composite_replacement_data: list[BenchmarkJobCompositeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Job_Composite_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkForJobDataType:
    """
    Compensation Benchmark.

    Attributes:
        benchmark_id: Compensation Benchmark ID
        job_profile_reference: Job Profile Reference
        benchmark_cycle_reference: Reference for loaded compensation benchmark cycles.
        benchmark_profile_data: Compensation Benchmark Profile
    """

    class Meta:
        name = "Compensation_Benchmark_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Benchmark_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benchmark_cycle_reference: Optional[CompensationBenchmarkCycleObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Cycle_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benchmark_profile_data: list[CompensationBenchmarkConfigurableStoredDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationBenchmarkForJobHvDataType:
    """
    Compensation Benchmark.

    Attributes:
        benchmark_id: Compensation Benchmark ID
        job_profile_reference: Job Profile Reference
        benchmark_profile_data: Compensation Benchmark Profile
    """

    class Meta:
        name = "Compensation_Benchmark_for_Job__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Benchmark_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benchmark_profile_data: list[CompensationBenchmarkConfigurableStoredDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationChangeDataType:
    """
    Data element that contains the compensation change information.

    Attributes:
        reason_reference: Reason for the compensation change. Use format: General_Event_Subcategory.
        override_compensation_basis_calculation: This field allows you to override the amount
            calculated for plan assignments for a worker managed by compensation basis.
        primary_compensation_basis: Sum of the employee's plan assignments as defined by their
            primary compensation basis.
        primary_compensation_basis_amount_change: Amount you can change the primary compensation
            basis for employees managed by basis total. Mutually exclusive from the percent.
        primary_compensation_basis_percent_change: Percent you can change the primary compensation
            basis for employees managed by a compensation basis. Mutually exclusive from the amount.
        compensation_guidelines_data: Data element containing the compensation guidelines for a
            compensation change.
        pay_plan_data: Encapsulating element containing all Salary or Hourly Plan Compensation data.
        unit_salary_plan_data: Encapsulating element containing all Unit Salary Plan Compensation
            data.
        allowance_plan_data: Encapsulating element containing all Allowance Plan Compensation data.
        unit_allowance_plan_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        bonus_plan_data: Encapsulating element containing all Bonus Plan Compensation data.
        merit_plan_data: Encapsulating element containing all Merit Plan Compensation data.
        commission_plan_data: Encapsulating element containing all Commission Plan Compensation
            data.
        stock_plan_data: Encapsulating element containing all Stock Plan Compensation data.
        remove_plan_data: Reference specific compensation plans assigned to the worker to be removed
            as part of this request.
        period_salary_plan_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        calculated_plan_data: Encapsulating element containing all Calculated Plan Compensation
            data.
    """

    class Meta:
        name = "Compensation_Change_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    override_compensation_basis_calculation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Override_Compensation_Basis_Calculation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    compensation_guidelines_data: Optional[CompensatableGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_data: Optional[ProposedAllowancePlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_allowance_plan_data: Optional[ProposedAllowanceUnitPlanAssignmentContainerDataType] = (
        field(
            default=None,
            metadata={
                "name": "Unit_Allowance_Plan_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_plan_data: list[RemoveCompensationPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Remove_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationChangeTemplatesType:
    """
    Compensation Change Template.

    Attributes:
        compensation_change_templates_reference: Instance of compensation change template
        compensation_change_templates_data: Compensation Change template
    """

    class Meta:
        name = "Compensation_Change_TemplatesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_change_templates_reference: Optional[CompensationTemplateObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Templates_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_change_templates_data: Optional[CompensationChangeTemplatesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Templates_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationDefaultDataType:
    """
    Data element that contains the compensation default information.

    If a section is to be provided, it must be provided fully as it will
    fully replace the current default compensation.

    Attributes:
        primary_compensation_basis: Sum of the employee's plan assignments as defined by their
            primary compensation basis.
        primary_compensation_basis_amount_change: Amount you can change the primary compensation
            basis for employees managed by basis total. Mutually exclusive from the percent.
        primary_compensation_basis_percent_change: Percent you can change the primary compensation
            basis for employees managed by a compensation basis. Mutually exclusive from the amount.
        guidelines_data: Data element containing the compensation guidelines for a compensation
            change.
        pay_plan_data: Encapsulating element containing all Salary or Hourly Plan Compensation data.
        unit_salary_plan_data: Encapsulating element containing all Unit Salary Plan Compensation
            data.
        allowance_plan_non_unit_based_data: Encapsulating element containing all Allowance Plan
            Compensation data.
        allowance_plan_unit_based_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        bonus_plan_data: Encapsulating element containing all Bonus Plan Compensation data.
        merit_plan_data: Encapsulating element containing all Merit Plan Compensation data.
        commission_plan_data: Encapsulating element containing all Commission Plan Compensation
            data.
        stock_plan_data: Encapsulating element containing all Stock Plan Compensation data.
        period_salary_plan_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        calculated_plan_data: Encapsulating element containing all Calculated Plan Compensation
            data.
    """

    class Meta:
        name = "Compensation_Default_DataType"
        target_namespace = "urn:com.workday/bsvc"

    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    guidelines_data: Optional[CompensatableDefaultGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_non_unit_based_data: Optional[
        ProposedAllowancePlanAssignmentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Non-Unit_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_unit_based_data: Optional[
        ProposedAllowanceUnitPlanAssignmentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Unit_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeHierarchyDataType:
    """
    Contains compensation grade hierarchy data.

    Attributes:
        effective_date: Effective Date of the compensation grade hierarchy.
        compensation_grade_level: This is a wrapper for compensation grade level .
    """

    class Meta:
        name = "Compensation_Grade_Hierarchy_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_grade_level: list[CompensationGradeLevelType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Level",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixDataType:
    """
    All data for this compensation matrix.

    Attributes:
        compensation_matrix_matrix_id: The unique ID of this Compensation Matrix.
        effective_date: The effective date of this merit increase matrix.  If no date is provided,
            this will default to 1900-01-01.
        compensation_matrix_name: The name of this Compensation Matrix. This will be displayed
            throughout the Workday system.
        compensation_matrix_description: The description, including purpose and application, of this
            Compensation Matrix.
        rating_scale_reference: The Rating Scale used by this Compensation Matrix.
        total_value_compensation_matrix_data: The data for this Total Value Matrix.
        compensation_matrix_non_weighted_percent_based_data: The Data for this compensation matrix,
            if it is to be based on non- weighted percentages.
        compensation_matrix_amount_based_data: The Data for this compensation matrix, if it is to be
            amount based.
        compensation_matrix_for_weighted_percent_based_data: The Data for this compensation matrix,
            if it is to be based on weighted percentages.
    """

    class Meta:
        name = "Compensation_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_matrix_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Matrix_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_matrix_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rating_scale_reference: Optional[ReviewRatingScaleObjectType] = field(
        default=None,
        metadata={
            "name": "Rating_Scale_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    total_value_compensation_matrix_data: Optional[TotalValueCompensationMatrixDataType] = field(
        default=None,
        metadata={
            "name": "Total_Value_Compensation_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_non_weighted_percent_based_data: list[
        CompensationMatrixNonWeightedPercentBasedDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Non-weighted_Percent_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_amount_based_data: list[CompensationMatrixAmountBasedDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Amount_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_for_weighted_percent_based_data: list[
        CompensationMatrixWeightedPercentBasedDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_for_Weighted_Percent_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPayRangeDataType:
    """
    The compensation pay range.

    Attributes:
        number_of_segments: Number of Pay Range Segments can be specified as 3,4, or 5.
        minimum: The minimum of the salary range.
        midpoint: The midpoint of the salary range.
        maximum: The maximum of the salary range.
        spread: The spread from the range minimum to range maximum.
        segment_1_top: The top value for Segment 1.
        segment_2_top: The top value for Segment 2.
        segment_3_top: The top value for Segment 3.
        segment_4_top: The top value for Segment 4.
        segment_5_top: The top value for Segment 5.
        currency_reference: The pay range currency.  In nothing is supplied the tenant default
            currency is used.
        frequency_reference: The pay range frequency.  If nothing is supplied the tenant default
            frequency is used.
        salary_plan_reference: The salary plan used in conjuction with the compensation steps
            defined.
        allow_override: Specifies if the amount in the compensation steps can be overriden when
            assigned to an employee.
        compensation_step: Compensation Step
    """

    class Meta:
        name = "Compensation_Pay_Range_DataType"
        target_namespace = "urn:com.workday/bsvc"

    number_of_segments: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Segments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    minimum: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    midpoint: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Midpoint",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    maximum: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 32,
            "fraction_digits": 6,
        },
    )
    spread: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Spread",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 32,
            "fraction_digits": 6,
        },
    )
    segment_1_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_1_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_2_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_2_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_3_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_3_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_4_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_4_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    segment_5_top: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Segment_5_Top",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_plan_reference: Optional[SalaryPayPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Salary_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allow_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step: list[CompensationStepType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Step",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardType:
    """
    Contains scorecard data.

    Attributes:
        compensation_scorecard_reference: Reference to scorecard.
        compensation_scorecard_data: Contains scorecard data.
    """

    class Meta:
        name = "Compensation_ScorecardType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_scorecard_data: list[CompensationScorecardDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Scorecard_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardResultDataType:
    """
    Contains the detailed scorecard result information.

    Attributes:
        id: A unique scorecard result identifier.
        evaluation_date: The date the scorecard was scored with this result.
        compensation_scorecard_reference: A unique scorecard reference.
        scorecard_result_data: Contains the set of goals and goal values for this result.
        profile_scorecard_result_data: Contains a rule/profile delineated set of goals and goal
            values for this result.
    """

    class Meta:
        name = "Compensation_Scorecard_Result_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    evaluation_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Evaluation_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_scorecard_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scorecard_result_data: list[ScorecardResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Scorecard_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    profile_scorecard_result_data: list[ProfileCompensationScorecardResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Profile_Scorecard_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobDetailType:
    """
    Response data element for Get Compensation Survey Jobs web service.

    Attributes:
        job_detail_reference: Reference of the survey job with job title and possibly level,
            function, or family.
        job_detail_data
    """

    class Meta:
        name = "Compensation_Survey_Job_DetailType"
        target_namespace = "urn:com.workday/bsvc"

    job_detail_reference: Optional[CompensationSurveyJobDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_detail_data: Optional[CompensationSurveyJobDataType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobDetailHvtype:
    """
    Request element for Import Compensation Survey Jobs web service.

    Attributes:
        copy_matches_for_unmatched_job_from_most_recent_survey: If a survey job doesn't have a
            matched job profile, entering Yes copies job matches from the most recent compensation
            survey into this one. If a survey job already has a matched job profile, Workday doesn't
            overwrite the match. If you enter No or leave this field blank, Workday doesn't copy job
            matches.
        job_detail_reference: Reference ID for the survey job with job title and possibly level,
            function, or family.
        job_detail_data: Reference of the survey job with job title and possibly level, function, or
            family.
    """

    class Meta:
        name = "Compensation_Survey_Job_Detail_HVType"
        target_namespace = "urn:com.workday/bsvc"

    copy_matches_for_unmatched_job_from_most_recent_survey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Copy_Matches_for_Unmatched_Job_from_Most_Recent_Survey",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_detail_reference: Optional[CompensationSurveyJobDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_detail_data: Optional[CompensationSurveyJobDataType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationSurveyJobSubDetailWithMatchesDataType:
    """
    Data element with further details of a survey job, such as specialty.

    Attributes:
        job_sub_detail_reference: Reference of further details of a survey job, such as specialty.
        job_match: Data element for compensation survey job match.
    """

    class Meta:
        name = "Compensation_Survey_Job_Sub-Detail_With_Matches_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_sub_detail_reference: Optional[CompensationSurveyJobSubDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Sub-Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_match: list[CompensationSurveyJobMatchDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Match",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionRuleDataWwstype:
    """
    Wrapper containing data for Condition Rule.

    Attributes:
        condition_rule_id: Text value for reference ID for Condition Rule.
        rule_description: Text description of Condition Rule.
        comment: Text comment for Condition Rule.
        condition_rule_category_reference: Categories for Condition Rule.
        condition_item_data: Data for each Condition Rule
        countries_reference: Countries for Condition Rule
    """

    class Meta:
        name = "Condition_Rule_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rule_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Rule_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    condition_rule_category_reference: list[ConditionRuleCategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Rule_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    condition_item_data: list[ConditionItemDataWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Item_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    countries_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Countries_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConfigurableCompensationBasisResponseDataType:
    """Response element containing instances of configurable compensation bases and their associated
    data."""

    class Meta:
        name = "Configurable_Compensation_Basis_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    configurable_compensation_basis: list[ConfigurableCompensationBasisType] = field(
        default_factory=list,
        metadata={
            "name": "Configurable_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateSeveranceWorksheetRequestType:
    """
    Launch Employee Severance Worksheet Request.

    Attributes:
        business_process_parameters
        employee_severance_worksheet_data: Employee Severance Worksheet Data
        version
    """

    class Meta:
        name = "Create_Severance_Worksheet_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_severance_worksheet_data: Optional[EmployeeSeveranceWorksheetDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Severance_Worksheet_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibleEarningsResponseDataType:
    """Contains Eligible Earnings Override information based on Request References or Request
    Criteria."""

    class Meta:
        name = "Eligible_Earnings_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings: list[EligibleEarningsType] = field(
        default_factory=list,
        metadata={
            "name": "Eligible_Earnings",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeSeveranceWorksheetEventType:
    """
    Contains reference to Employee Severance Worksheet Event and Employee Severance Worksheet Event
    Data.

    Attributes:
        employee_severance_worksheet_event_reference: Employee Severance Worksheet Event Reference
        employee_severance_worksheet_data
    """

    class Meta:
        name = "Employee_Severance_Worksheet_EventType"
        target_namespace = "urn:com.workday/bsvc"

    employee_severance_worksheet_event_reference: Optional[
        EmployeeSeveranceWorksheetEventObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Employee_Severance_Worksheet_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_severance_worksheet_data: list[EmployeeSeveranceWorksheetDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Severance_Worksheet_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EnhancedSeveranceMatrixDataType:
    """
    Element to specify the data for the type of severance matrix to put/update.

    Attributes:
        enhanced_severance_matrix_id: The reference ID for the Severance Matrix.
        effective_date: The effective date for which the data in this web service will take take
            effect.
        enhanced_severance_matrix_name: The name of the Severance Matrix. Shows up when selecting a
            matrix in prompts.
        inactive: If true, the matrix is considered inactive and won't show up as an option to
            select in Severance Packages.
        duration_unit_reference: Days, Weeks, or Months depending on the units used to define notice
            or severance payment durations.
        service_duration_severance_matrix_data
        service_length_severance_matrix_data
        compensation_duration_severance_matrix_data
        compensation_length_of_service_severance_matrix_data
    """

    class Meta:
        name = "Enhanced_Severance_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enhanced_severance_matrix_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Enhanced_Severance_Matrix_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    enhanced_severance_matrix_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Enhanced_Severance_Matrix_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    duration_unit_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Duration_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    service_duration_severance_matrix_data: Optional[ServiceDurationSeveranceMatrixDataType] = (
        field(
            default=None,
            metadata={
                "name": "Service_Duration_Severance_Matrix_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    service_length_severance_matrix_data: Optional[ServiceLengthSeveranceMatrixDataType] = field(
        default=None,
        metadata={
            "name": "Service_Length_Severance_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_duration_severance_matrix_data: Optional[
        CompensationDurationSeveranceMatrixDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Duration_Severance_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_length_of_service_severance_matrix_data: Optional[
        CompensationLengthOfServiceSeveranceMatrixDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Length_of_Service_Severance_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetBenchmarkJobsRequest(GetBenchmarkJobsRequestType):
    class Meta:
        name = "Get_Benchmark_Jobs_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationChangeTemplatesRequest(GetCompensationChangeTemplatesRequestType):
    class Meta:
        name = "Get_Compensation_Change_Templates_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationEligibilityRulesRequest(GetCompensationEligibilityRulesRequestType):
    class Meta:
        name = "Get_Compensation_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationEligibilityRulesWithoutDependenciesRequest(
    GetCompensationEligibilityRulesWithoutDependenciesRequestType
):
    class Meta:
        name = "Get_Compensation_Eligibility_Rules_without_Dependencies_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationGradesRequest(GetCompensationGradesRequestType):
    class Meta:
        name = "Get_Compensation_Grades_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationMatricesRequest(GetCompensationMatricesRequestType):
    class Meta:
        name = "Get_Compensation_Matrices_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationPlansRequest(GetCompensationPlansRequestType):
    class Meta:
        name = "Get_Compensation_Plans_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationScorecardResultsRequest(GetCompensationScorecardResultsRequestType):
    class Meta:
        name = "Get_Compensation_Scorecard_Results_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationScorecardsRequest(GetCompensationScorecardsRequestType):
    class Meta:
        name = "Get_Compensation_Scorecards_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationSurveyJobDetailsRequest(GetCompensationSurveyJobDetailsRequestType):
    class Meta:
        name = "Get_Compensation_Survey_Job_Details_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationSurveyJobMatchesRequest(GetCompensationSurveyJobMatchesRequestType):
    class Meta:
        name = "Get_Compensation_Survey_Job_Matches_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetConfigurableCompensationBasisRequest(GetConfigurableCompensationBasisRequestType):
    class Meta:
        name = "Get_Configurable_Compensation_Basis_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetEligibleEarningsRequest(GetEligibleEarningsRequestType):
    class Meta:
        name = "Get_Eligible_Earnings_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetEnhancedSeveranceMatricesRequest(GetEnhancedSeveranceMatricesRequestType):
    class Meta:
        name = "Get_Enhanced_Severance_Matrices_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetFuturePaymentPlanAssignmentsRequest(GetFuturePaymentPlanAssignmentsRequestType):
    class Meta:
        name = "Get_Future_Payment_Plan_Assignments_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetLocalityPayAreasRequest(GetLocalityPayAreasRequestType):
    class Meta:
        name = "Get_Locality_Pay_Areas_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetOneTimePaymentPlanConfigurableCategoriesRequest(
    GetOneTimePaymentPlanConfigurableCategoriesRequestType
):
    class Meta:
        name = "Get_One-Time_Payment_Plan_Configurable_Categories_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetOneTimePaymentPlanConfigurableCategoriesResponseType:
    """
    Response.

    Attributes:
        request_references: Request Reference
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        response_results: Response Result
        response_data: Data Element
        version
    """

    class Meta:
        name = "Get_One-Time_Payment_Plan_Configurable_Categories_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[OneTimePaymentPlanConfigurableCategoryRequestReferencesType] = (
        field(
            default=None,
            metadata={
                "name": "Request_References",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_criteria: Optional[OneTimePaymentPlanConfigurableCategoryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[OneTimePaymentPlanConfigurableCategoryResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[OneTimePaymentPlanConfigurableCategoryResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetOneTimePaymentPlansRequest(GetOneTimePaymentPlansRequestType):
    class Meta:
        name = "Get_One-Time_Payment_Plans_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPeriodActivityRateMatricesRequest(GetPeriodActivityRateMatricesRequestType):
    class Meta:
        name = "Get_Period_Activity_Rate_Matrices_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPeriodActivityTasksRequest(GetPeriodActivityTasksRequestType):
    class Meta:
        name = "Get_Period_Activity_Tasks_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPreviousSystemCompensationHistoryRequest(GetPreviousSystemCompensationHistoryRequestType):
    class Meta:
        name = "Get_Previous_System_Compensation_History_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStockParticipationRateTablesRequest(GetStockParticipationRateTablesRequestType):
    class Meta:
        name = "Get_Stock_Participation_Rate_Tables_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportEligibleEarningsOverrideRequestType:
    """
    Loads eligible earnings overrides for a specific period.

    To apply the override to a specific bonus plan, add the bonus plan
    to the operation filter. To apply the override to all current and
    future bonus plans, select "Apply to All Bonus Plans". An in-
    progress Compensation Review Process immediately implements these
    overrides if the Participation Options are configured to support
    this. Unlike the Put Eligible Earnings operation, if the input
    template contains any errors, the entire operation fails.

    Attributes:
        eligible_earnings: Contains an Eligible Earning.
        version
    """

    class Meta:
        name = "Import_Eligible_Earnings_Override_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    eligible_earnings: list[ImportEligibleEarningsOverrideHvRequestType] = field(
        default_factory=list,
        metadata={
            "name": "Eligible_Earnings",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalityPayAreaType:
    """
    Locality Pay Area Element.

    Attributes:
        locality_pay_area_reference: A unique identifier for the Locality Pay Area requested.
        locality_pay_area_data
    """

    class Meta:
        name = "Locality_Pay_AreaType"
        target_namespace = "urn:com.workday/bsvc"

    locality_pay_area_reference: Optional[LocalityPayAreaObjectType] = field(
        default=None,
        metadata={
            "name": "Locality_Pay_Area_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    locality_pay_area_data: list[LocalityPayAreaDataType] = field(
        default_factory=list,
        metadata={
            "name": "Locality_Pay_Area_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPlanDataType:
    """
    Merit Plan Data.

    Attributes:
        currency_reference: Currency reference.  Defaults to the tenant currency if no value is
            provided.
        frequency_reference: Frequency for Merit Plan; default to "Annual" and is read-only.
        subject_to_statutory_minimum: This box being checked indicates that the given Merit Plan is
            eligible for a Statutory Increase
        allow_individual_targets: Allow Target Override indicator is used to permit the entry of a
            target number or percent for an individual employee assigned to this plan.
        compensation_matrix_reference: If you want to base merit increases on results of completed
            performance reviews, select the Compensation Matrix for Performance Factors that you
            want to use to appropriately award your employees with merit increases based on their
            evaluation rating.
        use_matrix_as_reference_only: The "Use MIM as Reference Only" option is applicable only when
            Merit Increase Matrix is defined for the plan.
        waiting_period_reference: Waiting Period is used to restrict employee eligibility for the
            merit plan until after the employee has satisfied the waiting period criteria.  By using
            waiting periods, you can assign the merit plan to employees at any time, relying on the
            waiting period to control plan eligibility. If you assign a waiting period to a merit
            plan and an individual employee is still in the waiting period on the effective date of
            the merit process event, Workday includes the employee as an exception and sets the
            suggested target percent (and prorated target increase percent, if applicable) for this
            employee to 0. In addition, the merit pool will not reflect the employee's target. If
            you launch the merit process with the exception employees, managers can override the
            zero target values if necessary.
        include_active_employees_in_waiting_period: When this box is checked, employees in a waiting
            period will be included in a process and will appear with a default target of zero.
        time_proration_rule_reference: Time Proration Rule is used to prorate employees' target
            compensation in a compensation event for this plan according to time-based criteria such
            as leave of absence or time since hire.
        rounding_rule_reference: Rounding Rule for Compensation Plan to establish Rounding Options
            for calculated amount values.
        include_active_employees_assigned_plan_during_process_period: If selected, employees
            assigned this plan at any time during the process period are included in the process.
        percent_data: Required Percent Data for Merit Plan; consists of default percent and/or
            Merit Plan Profiles.
        amount_data: Data for an Amount Based Merit Plan
        hide_target_from_tenanted_security_groups_reference: Indicates which security groups
            individual targets should be hidden from.
        hide_target_from_workday_security_groups_reference: Indicates which security groups
            individual targets should be hidden from.
    """

    class Meta:
        name = "Merit_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    subject_to_statutory_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Subject_to_Statutory_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allow_individual_targets: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Individual_Targets",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_matrix_as_reference_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Matrix_As_Reference_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    waiting_period_reference: Optional[EligibilityWaitingPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Waiting_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_active_employees_in_waiting_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Active_Employees_in_Waiting_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_proration_rule_reference: Optional[TimeProrationRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Proration_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_active_employees_assigned_plan_during_process_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Active_Employees_Assigned_Plan_During_Process_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_data: Optional[MeritPlanPercentDataType] = field(
        default=None,
        metadata={
            "name": "Percent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_data: Optional[MeritPlanAmountDataType] = field(
        default=None,
        metadata={
            "name": "Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hide_target_from_tenanted_security_groups_reference: list[TenantedSecurityGroupObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hide_Target_from_Tenanted_Security_Groups_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    hide_target_from_workday_security_groups_reference: list[MetadataSecurityGroupObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hide_Target_from_Workday_Security_Groups_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class OneTimePaymentPlanDataType:
    """
    Contains common information for the following One-Time Payment Plans:  Amount Based and Percent
    Based.  It also must contain either a One-Time Payment Plan Amount Based Data or a One-Time
    Payment Plan Percent Based Data.

    Attributes:
        one_time_payment_plan_id: Unique attribute identifying a valid instance of One-Time Payment
            Plan.
        effective_date: The effective date of the one-time payment plan.  It is recommended to use
            1900-01-01.
        plan_name: Unique attribute identifying a valid instance of One-Time Payment Plan.
        description: Attribute used to describe a one-time payment plan.
        category_reference: Category for One-Time Payment Plan.
        schedule_reference: Contains a reference for One-Time Payment Plan Schedule instance
        clawback_schedule_reference: The reference ID for the one-time payment plan schedule.
        clawback_calculation_reference: Select a calculation to calculate an amount to recover for a
            one-time payment.
        setup_security_segment_reference: The assigned setup security segment.
        eligibility_rule_reference: Eligibility Rules establish who is eligible for this
            compensation component.  If you select multiple eligibility rules, Workday evaluates
            each rule independently to determine employee eligibility for the compensation
            component. Employees are eligible if they meet the qualifications of any one rule.
        inactive: Inactive status indicator for one-time payment plans.
        use_coverage_dates: Indicator for whether or not to Use Coverage Dates.
        worker_selectable: Indicator for whether workers can select this plan when requesting a one-
            time payment for themselves.
        amount_data
        percent_data
    """

    class Meta:
        name = "One-Time_Payment_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    category_reference: Optional[OneTimePaymentPlanCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    schedule_reference: Optional[OneTimePaymentPlanScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    clawback_schedule_reference: Optional[OneTimePaymentPlanScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Clawback_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    clawback_calculation_reference: Optional[CalculationObjectType] = field(
        default=None,
        metadata={
            "name": "Clawback_Calculation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    setup_security_segment_reference: list[CompensationSetupSecuritySegmentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Setup_Security_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_coverage_dates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Coverage_Dates",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_selectable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Worker_Selectable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_data: Optional[OneTimePaymentPlanAmountBasedDataType] = field(
        default=None,
        metadata={
            "name": "Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_data: Optional[OneTimePaymentPlanPercentBasedDataType] = field(
        default=None,
        metadata={
            "name": "Percent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityAssignmentVersionDataType:
    """
    Contains the individual assignment details of a new activity, changes to an existing activity,
    or an existing activity to be deleted.

    Attributes:
        period_activity_pay_assignment_reference: Reference element to an existing individual period
            activity assignment.  Must be provided when changing or deleting an assignment
        period_activity_reference: Reference element to a Period Activity.  Required when adding a
            new period activity assignment.
        period_activity_task_reference: Reference element of a Period Activity Task.  Use when
            adding a new period activity task assignment.
        period_activity_start_date: Start Date of the activity assignment.  Must fall on or after
            the Period Range if provided. Defaults from the given Period Range if not provided.
        period_activity_end_date: End Date of the activity assignment. Must fall on or before the
            Period Range if provided. Defaults from the given Period Range if not provided.
        currency_reference: Currency reference for any provided amounts. Defaults from the given
            Period Activity Rate Matrix if not provided.
        work_hours_per_week: Work hours per week
        work_hours_per_activity_period: Work hours per Activity Period
        weekly_service_hours: Weekly service hours credited to the assignee.
        assigned_amount: A total payment amount for the duration of the assignment in the reference
            currency.  If not provided, the quantity and unit rate will be used to calculate this
            value.
        assigned_quantity: A quantity representing the activity in the units of the activity or
            activity task.  If not provided the assigned amount and unit rate will be used to
            calculate this value.
        assigned_unit_rate: A unit rate amount in the reference currency used to calculate the
            assigned amount or quantity if necessary. Defaults from the given Period Activity Rate
            Matrix if not provided.
        payment_start_date: Start Date of the payment for the activity assignment. Defaults from the
            given Period Range if not provided.
        payment_end_date: End Date of the payment for the activity assignment. Defaults from the
            given Period Range if not provided.
        do_not_pay: If the Do Not Pay boolean value is set, then the Payment Start and Payment End
            dates will be cleared and no payment schedule will be generated.  This will result in no
            payments for this assignment.
        comment: An optional comment about the assignment
        period_activity_pay_costing
    """

    class Meta:
        name = "Period_Activity_Assignment_Version_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_pay_assignment_reference: Optional[PeriodActivityAssignmentObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Pay_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_reference: Optional[PeriodActivityObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_task_reference: Optional[PeriodActivityTaskObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Activity_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_hours_per_week: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Per_Week",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    work_hours_per_activity_period: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Per_Activity_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 6,
            "fraction_digits": 2,
        },
    )
    weekly_service_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weekly_Service_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    assigned_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 36,
            "fraction_digits": 6,
        },
    )
    assigned_quantity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Quantity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    assigned_unit_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Unit_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    payment_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Payment_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Payment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_pay: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 500,
        },
    )
    period_activity_pay_costing: Optional[PeriodActivityPayCostingDataType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Pay_Costing",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityPayAssignmentDataType:
    """
    Contains the individual assignment details of a new activity, changes to an existing activity,
    or an existing activity to be deleted.

    Attributes:
        period_activity_pay_assignment_reference: Reference element to an existing individual period
            activity assignment.  Must be provided when changing or deleting an assignment
        period_activity_reference: Reference element to a Period Activity.  Required when adding a
            new period activity assignment.
        period_activity_task_or_course_section_reference: Reference element of a Period Activity
            Task or Course Section. Use when adding a new period activity task or course section
            assignment
        period_activity_start_date: Start Date of the activity assignment.  Must fall on or after
            the Period Range if provided. Defaults from the given Period Range if not provided.
        period_activity_end_date: End Date of the activity assignment. Must fall on or before the
            Period Range if provided. Defaults from the given Period Range if not provided.
        work_hours_per_week: Work hours per week
        work_hours_per_activity_period: Work hours per Activity Period
        weekly_service_hours: Weekly service hours credited to the assignee.
        currency_reference: Currency reference for any provided amounts. Defaults from the given
            Period Activity Rate Matrix if not provided.
        assigned_amount: A total payment amount for the duration of the assignment in the reference
            currency.  If not provided, the quantity and unit rate will be used to calculate this
            value.
        assigned_quantity: A quantity representing the activity in the units of the activity or
            activity task.  If not provided the assigned amount and unit rate will be used to
            calculate this value.
        assigned_unit_rate: A unit rate amount in the reference currency used to calculate the
            assigned amount or quantity if necessary. Defaults from the given Period Activity Rate
            Matrix if not provided.
        payment_start_date: Start Date of the payment for the activity assignment. Defaults from the
            given Period Range if not provided.
        payment_end_date: End Date of the payment for the activity assignment. Defaults from the
            given Period Range if not provided.
        do_not_pay: If the Do Not Pay boolean value is set, then the Payment Start and Payment End
            dates will be cleared and no payment schedule will be generated.  This will result in no
            payments for this assignment.
        comment: An optional comment about the assignment
        period_activity_pay_costing: Container for costing allocations for Period Activity Pay
            assignment line
        delete: When the value is True, the given assignment will be removed if no payment activity
            has been made against the assignment.
    """

    class Meta:
        name = "Period_Activity_Pay_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_pay_assignment_reference: Optional[PeriodActivityAssignmentObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Pay_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_reference: Optional[PeriodActivityObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_task_or_course_section_reference: Optional[
        PeriodActivityTaskInterfaceObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Task_or_Course_Section_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Activity_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_hours_per_week: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Per_Week",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    work_hours_per_activity_period: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Per_Activity_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 6,
            "fraction_digits": 2,
        },
    )
    weekly_service_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weekly_Service_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assigned_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 36,
            "fraction_digits": 6,
        },
    )
    assigned_quantity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Quantity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    assigned_unit_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Assigned_Unit_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    payment_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Payment_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Payment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_pay: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 500,
        },
    )
    period_activity_pay_costing: Optional[PeriodActivityPayCostingDataType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Pay_Costing",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityRateMatrixDataType:
    """
    Period Activity Rate Matrix data.

    Attributes:
        id: ID
        period_activity_rate_table_name: Name of the period activity rate matrix
        effective_date: Effective Date of the period activity rate matrix changes
        condition_rule_reference: Associated condition rules
        currency_reference: Associated currency
        inactive: Indicates whether the period activity rate matrix is inactive or not
        period_activity_rate_matrix_entry_data
    """

    class Meta:
        name = "Period_Activity_Rate_Matrix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_rate_table_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Table_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    condition_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_rate_matrix_entry_data: list[PeriodActivityRateMatrixEntryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Entry_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PeriodActivityTaskResponseDataType:
    """
    Contains period activity task information based on Request References or Request Criteria.

    Attributes:
        period_activity_task: Period Activity Task
    """

    class Meta:
        name = "Period_Activity_Task_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_task: list[PeriodActivityTaskType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Task",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodPlanDataType:
    """
    Period Plan Data.

    Attributes:
        compensation_element_reference: Compensation Plan Default Compensation Element for a Period
            Salary Plan.
        default_compensation_period_multiplier: The multiplier for a Period Salary Plan.
        unit_of_duration_reference: A Unit of time duration; for example, day, week, or month.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        period_plan_profile_replacement_data: This is a wrapper for the Period Salary Plan Profile
            Replacement; used to display or replace Period Plan Profile Data
    """

    class Meta:
        name = "Period_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    default_compensation_period_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Compensation_Period_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    unit_of_duration_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_of_Duration_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_plan_profile_replacement_data: list[PeriodPlanProfileReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Plan_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionFuturePaymentPlanAssignmentsType:
    """Groups an Employee's Future Payment Plan Assignments."""

    class Meta:
        name = "Position_Future_Payment_Plan_AssignmentsType"
        target_namespace = "urn:com.workday/bsvc"

    position_future_payment_plan_assignment_data: list[
        PositionFuturePaymentPlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Position_Future_Payment_Plan_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PreviousSystemCompensationHistoryType:
    """
    Contains the data for adding, updating or deleting a previous system compensation history entry
    for a worker.

    Attributes:
        worker_reference: Unique Identifier for a worker (Employee or Contingent Worker).
        previous_system_job_history
    """

    class Meta:
        name = "Previous_System_Compensation_HistoryType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    previous_system_job_history: list[PreviousSystemCompensationHistoryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Previous_System_Job_History",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PutCompensationChangeTemplatesRequestType:
    """
    Request element to put Compensation Change Template.

    Attributes:
        compensation_change_template_reference: Compensation Change Template Reference
        delete: Delete the template.
        compensation_change_templates_data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Compensation_Change_Templates_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_change_template_reference: Optional[CompensationTemplateObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Template_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_change_templates_data: Optional[CompensationChangeTemplatesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Templates_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationChangeTemplatesResponse(PutCompensationChangeTemplatesResponseType):
    class Meta:
        name = "Put_Compensation_Change_Templates_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationScorecardRequestType:
    """
    Contains scorecard information.

    Attributes:
        compensation_scorecard_reference: A unique scorecard identifier.
        compensation_scorecard_data: Contains the detailed scorecard information
        add_only: When True, indicates only a new scorecard will be added
        version
    """

    class Meta:
        name = "Put_Compensation_Scorecard_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_scorecard_data: Optional[CompensationScorecardDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobDetailRequestType:
    """
    Request element for Put Compensation Survey Job web service.

    Attributes:
        copy_matches_for_unmatched_job_from_most_recent_survey: If a survey job doesn't have a
            matched job profile, entering Yes copies job matches from the most recent compensation
            survey into this one. If a survey job already has a matched job profile, Workday doesn't
            overwrite the match. If you enter No or leave this field blank, Workday doesn't copy job
            matches.
        job_detail_reference: Reference ID for the survey job with job title and possibly level,
            function, or family.
        job_detail_data: Reference of the survey job with job title and possibly level, function, or
            family.
        version
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Detail_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    copy_matches_for_unmatched_job_from_most_recent_survey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Copy_Matches_for_Unmatched_Job_from_Most_Recent_Survey",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_detail_reference: Optional[CompensationSurveyJobDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_detail_data: Optional[CompensationSurveyJobDataType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobResultRequestType:
    """
    Put Compensation Survey Result Request.

    Attributes:
        job_result_input_parameters: Compensation Survey Result Input Parameters.
        job_result_reference: Compensation Survey Result.
        job_result_data: Compensation Survey Result.
        version
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Result_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    job_result_input_parameters: list[CompensationSurveyResultInputParametersType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Result_Input_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_result_reference: Optional[CompensationSurveyJobResultObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_result_data: Optional[CompensationSurveyJobResultDataType] = field(
        default=None,
        metadata={
            "name": "Job_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobResultRequestHvtype:
    """
    Request element for Import Compensation Survey Job Results web service.

    Attributes:
        compensation_survey_job_result_input_parameters
        compensation_survey_job_result_reference: Reference ID for the compensation survey job
            result.
        compensation_survey_job_result_data: Compensation Survey Job Result.
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Result_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_job_result_input_parameters: Optional[
        CompensationSurveyResultInputParametersType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Job_Result_Input_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_survey_job_result_reference: Optional[CompensationSurveyJobResultObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Compensation_Survey_Job_Result_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    compensation_survey_job_result_data: Optional[CompensationSurveyJobResultDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Job_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PutConfigurableCompensationBasisRequest(PutConfigurableCompensationBasisRequestType):
    class Meta:
        name = "Put_Configurable_Compensation_Basis_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutFuturePaymentPlanAssignmentRequestType:
    """
    This web service assigns a future payment plan to an employee for consumption in the future
    payment true up bonus process.

    Attributes:
        position_future_payment_plan_assignment_data: The position the set of future payment plan
            assignments will be assigned to.
        version
    """

    class Meta:
        name = "Put_Future_Payment_Plan_Assignment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    position_future_payment_plan_assignment_data: Optional[
        PositionFuturePaymentPlanAssignmentDataType
    ] = field(
        default=None,
        metadata={
            "name": "Position_Future_Payment_Plan_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutLocalityPayAreaRequestType:
    """
    Contains data for adding or updating a Locality Pay Area.

    Attributes:
        locality_pay_area_reference: A unique identifier for the Locality Pay Area to be updated.
        locality_pay_area_data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Locality_Pay_Area_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    locality_pay_area_reference: Optional[LocalityPayAreaObjectType] = field(
        default=None,
        metadata={
            "name": "Locality_Pay_Area_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    locality_pay_area_data: Optional[LocalityPayAreaDataType] = field(
        default=None,
        metadata={
            "name": "Locality_Pay_Area_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutLocalityPayAreaResponse(PutLocalityPayAreaResponseType):
    class Meta:
        name = "Put_Locality_Pay_Area_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPeriodActivityTaskRequest(PutPeriodActivityTaskRequestType):
    class Meta:
        name = "Put_Period_Activity_Task_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStockParticipationRateTableRequestType:
    """
    Request element to put Stock Participation Rate Table.

    Attributes:
        stock_participation_rate_table_data
        delete: If True is entered, the Stock Participation Rate Table will be deleted.
        version
    """

    class Meta:
        name = "Put_Stock_Participation_Rate_Table_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    stock_participation_rate_table_data: Optional[StockParticipationRateTableData20Type] = field(
        default=None,
        metadata={
            "name": "Stock_Participation_Rate_Table_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestBonusPaymentRequestType:
    """This web service operation loads the approved bonus for an employee assigned to a bonus plan
    using the Request Bonus Payment business process."""

    class Meta:
        name = "Request_Bonus_Payment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_bonus_payment_data: Optional[RequestBonusPaymentDataType] = field(
        default=None,
        metadata={
            "name": "Request_Bonus_Payment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestEmployeeMeritAdjustmentRequestType:
    """Web service operation to request a merit adjustment for an employee."""

    class Meta:
        name = "Request_Employee_Merit_Adjustment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_merit_adjustment_data: Optional[RequestEmployeeMeritAdjustmentDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Merit_Adjustment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestOneTimePaymentRequestType:
    """This web service operation is designed to pay an employee a one-time payment such as a
    signing bonus using the Request One-Time Payment  business process."""

    class Meta:
        name = "Request_One-Time_Payment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_data: Optional[RequestOneTimePaymentDataType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestOneTimePaymentRequestHvtype:
    """
    Web service operation to request one time payments for employee(s).

    This operation is asynchronous and specifically designed to support very large documents.
    """

    class Meta:
        name = "Request_One-Time_Payment_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_data: Optional[RequestOneTimePaymentDataType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RequestOneTimePaymentResponse(RequestOneTimePaymentResponseType):
    class Meta:
        name = "Request_One-Time_Payment_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequisitionCompensationDataType:
    """
    Data element that contains the requisition compensation information.

    Attributes:
        primary_compensation_basis: Sum of the employee's plan assignments as defined by their
            primary compensation basis.
        primary_compensation_basis_amount_change: Amount you can change the primary compensation
            basis for employees managed by basis total. Mutually exclusive from the percent.
        primary_compensation_basis_percent_change: Percent you can change the primary compensation
            basis for employees managed by a compensation basis. Mutually exclusive from the amount.
        compensatable_guidelines_data: Data element containing the compensation guidelines for a
            compensation change.
        pay_plan_data: Encapsulating element containing all Salary or Hourly Plan Compensation data.
        unit_salary_plan_data: Encapsulating element containing all Unit Salary Plan Compensation
            data.
        allowance_plan_non_unit_based_data: Encapsulating element containing all Allowance Plan
            Compensation data.
        allowance_plan_unit_based_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        bonus_plan_data: Encapsulating element containing all Bonus Plan Compensation data.
        merit_plan_data: Encapsulating element containing all Merit Plan Compensation data.
        commission_plan_data: Encapsulating element containing all Commission Plan Compensation
            data.
        stock_plan_data: Encapsulating element containing all Stock Plan Compensation data.
        period_salary_plan_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        calculated_plan_data: Encapsulating element containing all Calculated Plan Compensation
            data.
    """

    class Meta:
        name = "Requisition_Compensation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    compensatable_guidelines_data: Optional[CompensatableDefaultGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Compensatable_Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_non_unit_based_data: Optional[
        ProposedAllowancePlanAssignmentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Non-Unit_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_unit_based_data: Optional[
        ProposedAllowanceUnitPlanAssignmentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Unit_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetrieveSeveranceWorksheetsRequest(RetrieveSeveranceWorksheetsRequestType):
    class Meta:
        name = "Retrieve_Severance_Worksheets_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class StockParticipationRateTableSubResponseDataType:
    """
    Stock Participation Rate Table Data.

    Attributes:
        stock_participation_rate_table_reference: Stock Participation Rate Table Reference
        stock_participation_rate_table_data
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Sub_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_participation_rate_table_reference: Optional[StockParticipationRateTableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Stock_Participation_Rate_Table_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    stock_participation_rate_table_data: list[StockParticipationRateTableData20Type] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Participation_Rate_Table_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanAmountProfileReplacementDataType:
    """
    Profile data for Stock Amount Plan.

    Attributes:
        eligibility_rule_reference: Eligibility Rule for the Stock Plan Profile.
        delete_profile: If you enter Y, Workday removes the stock plan profile from the stock plan.
            Workday uses eligibility rule to determine the profile to remove.
        stock_plan_amount_profile_replacement_data_details
    """

    class Meta:
        name = "Stock_Plan_Amount_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_amount_profile_replacement_data_details: list[
        StockPlanAmountProfileReplacementDataDetailsType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Amount_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanPercentProfileReplacementDataType:
    """
    Data for Stock Percent Plan.

    Attributes:
        eligibility_rule_reference: Eligibility Rule for Plan Profile.
        delete_profile: If you enter Y, Workday removes the stock plan profile from the stock plan.
            Workday uses eligibility rule to determine the profile to remove.
        stock_plan_percent_profile_replacement_data_details
    """

    class Meta:
        name = "Stock_Plan_Percent_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_percent_profile_replacement_data_details: list[
        StockPlanPercentProfileReplacementDataDetailsType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Percent_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanUnitProfileReplacementDataType:
    """
    Profile data for Stock Unit Plan.

    Attributes:
        eligibility_rule_reference: Eligibility Rule to establish who is eligible for this
            compensation component.
        delete_profile: If you enter Y, Workday removes the stock plan profile from the stock plan.
            Workday uses eligibility rule to determine the profile to remove.
        stock_plan_unit_profile_replacement_data_details
    """

    class Meta:
        name = "Stock_Plan_Unit_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_unit_profile_replacement_data_details: list[
        StockPlanUnitProfileReplacementDataDetailsType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Unit_Profile_Replacement_Data_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UpdateStockGrantRequest(UpdateStockGrantRequestType):
    class Meta:
        name = "Update_Stock_Grant_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetBenchmarkJobsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetBenchmarkJobsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetBenchmarkJobsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_benchmark_jobs_request: Optional[GetBenchmarkJobsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Benchmark_Jobs_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationChangeTemplatesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationChangeTemplatesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationChangeTemplatesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_change_templates_request: Optional[
            GetCompensationChangeTemplatesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Change_Templates_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_eligibility_rules_request: Optional[
            GetCompensationEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationEligibilityRulesWithoutDependenciesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationEligibilityRulesWithoutDependenciesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationEligibilityRulesWithoutDependenciesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_eligibility_rules_without_dependencies_request: Optional[
            GetCompensationEligibilityRulesWithoutDependenciesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Eligibility_Rules_without_Dependencies_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationGradesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationGradesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationGradesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_grades_request: Optional[GetCompensationGradesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Grades_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationMatricesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationMatricesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationMatricesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_matrices_request: Optional[GetCompensationMatricesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Matrices_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationPlansInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationPlansInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationPlansInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_plans_request: Optional[GetCompensationPlansRequest] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Plans_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationScorecardResultsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationScorecardResultsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationScorecardResultsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_scorecard_results_request: Optional[
            GetCompensationScorecardResultsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Scorecard_Results_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationScorecardsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationScorecardsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationScorecardsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_scorecards_request: Optional[GetCompensationScorecardsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Scorecards_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationSurveyJobDetailsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationSurveyJobDetailsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationSurveyJobDetailsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_survey_job_details_request: Optional[
            GetCompensationSurveyJobDetailsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Survey_Job_Details_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationSurveyJobMatchesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationSurveyJobMatchesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetCompensationSurveyJobMatchesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_survey_job_matches_request: Optional[
            GetCompensationSurveyJobMatchesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Survey_Job_Matches_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetConfigurableCompensationBasisInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetConfigurableCompensationBasisInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetConfigurableCompensationBasisInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_configurable_compensation_basis_request: Optional[
            GetConfigurableCompensationBasisRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Configurable_Compensation_Basis_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetEligibleEarningsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetEligibleEarningsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetEligibleEarningsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_eligible_earnings_request: Optional[GetEligibleEarningsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Eligible_Earnings_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetEnhancedSeveranceMatricesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetEnhancedSeveranceMatricesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetEnhancedSeveranceMatricesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_enhanced_severance_matrices_request: Optional[GetEnhancedSeveranceMatricesRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Enhanced_Severance_Matrices_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetFuturePaymentPlanAssignmentsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetFuturePaymentPlanAssignmentsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetFuturePaymentPlanAssignmentsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_future_payment_plan_assignments_request: Optional[
            GetFuturePaymentPlanAssignmentsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Future_Payment_Plan_Assignments_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetLocalityPayAreasInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetLocalityPayAreasInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetLocalityPayAreasInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_locality_pay_areas_request: Optional[GetLocalityPayAreasRequest] = field(
            default=None,
            metadata={
                "name": "Get_Locality_Pay_Areas_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetOneTimePaymentPlanConfigurableCategoriesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetOneTimePaymentPlanConfigurableCategoriesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetOneTimePaymentPlanConfigurableCategoriesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_one_time_payment_plan_configurable_categories_request: Optional[
            GetOneTimePaymentPlanConfigurableCategoriesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_One-Time_Payment_Plan_Configurable_Categories_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetOneTimePaymentPlansInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetOneTimePaymentPlansInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetOneTimePaymentPlansInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_one_time_payment_plans_request: Optional[GetOneTimePaymentPlansRequest] = field(
            default=None,
            metadata={
                "name": "Get_One-Time_Payment_Plans_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetPeriodActivityRateMatricesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetPeriodActivityRateMatricesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetPeriodActivityRateMatricesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_period_activity_rate_matrices_request: Optional[
            GetPeriodActivityRateMatricesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Period_Activity_Rate_Matrices_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetPeriodActivityTasksInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetPeriodActivityTasksInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetPeriodActivityTasksInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_period_activity_tasks_request: Optional[GetPeriodActivityTasksRequest] = field(
            default=None,
            metadata={
                "name": "Get_Period_Activity_Tasks_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetPreviousSystemCompensationHistoryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetPreviousSystemCompensationHistoryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetPreviousSystemCompensationHistoryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_previous_system_compensation_history_request: Optional[
            GetPreviousSystemCompensationHistoryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Previous_System_Compensation_History_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetStockParticipationRateTablesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetStockParticipationRateTablesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["GetStockParticipationRateTablesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_stock_participation_rate_tables_request: Optional[
            GetStockParticipationRateTablesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Stock_Participation_Rate_Tables_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationChangeTemplatesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationChangeTemplatesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_change_templates_response: Optional[
            PutCompensationChangeTemplatesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Change_Templates_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutCompensationChangeTemplatesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutCompensationChangeTemplatesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutConfigurableCompensationBasisInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutConfigurableCompensationBasisInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutConfigurableCompensationBasisInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_configurable_compensation_basis_request: Optional[
            PutConfigurableCompensationBasisRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Configurable_Compensation_Basis_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutLocalityPayAreaOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutLocalityPayAreaOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_locality_pay_area_response: Optional[PutLocalityPayAreaResponse] = field(
            default=None,
            metadata={
                "name": "Put_Locality_Pay_Area_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["PutLocalityPayAreaOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["PutLocalityPayAreaOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class PutOneTimePaymentPlanConfigurableCategory:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutOneTimePaymentPlanConfigurableCategoryInput
    output = PutOneTimePaymentPlanConfigurableCategoryOutput


@dataclass
class PutPeriodActivityTaskInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutPeriodActivityTaskInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutPeriodActivityTaskInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_period_activity_task_request: Optional[PutPeriodActivityTaskRequest] = field(
            default=None,
            metadata={
                "name": "Put_Period_Activity_Task_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RequestOneTimePaymentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestOneTimePaymentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_one_time_payment_response: Optional[RequestOneTimePaymentResponse] = field(
            default=None,
            metadata={
                "name": "Request_One-Time_Payment_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["RequestOneTimePaymentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RequestOneTimePaymentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class RetrieveSeveranceWorksheetInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RetrieveSeveranceWorksheetInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RetrieveSeveranceWorksheetInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        retrieve_severance_worksheets_request: Optional[RetrieveSeveranceWorksheetsRequest] = field(
            default=None,
            metadata={
                "name": "Retrieve_Severance_Worksheets_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class UpdateStockGrantInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["UpdateStockGrantInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["UpdateStockGrantInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        update_stock_grant_request: Optional[UpdateStockGrantRequest] = field(
            default=None,
            metadata={
                "name": "Update_Stock_Grant_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class AddStockGrantRequestType:
    """This web service operation is designed to grant a stock grant to an employee using the
    Request Stock Grant business process."""

    class Meta:
        name = "Add_Stock_Grant_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_stock_grant_data: Optional[AddStockGrantDataType] = field(
        default=None,
        metadata={
            "name": "Add_Stock_Grant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowancePlanDataType:
    """
    Allowance Plan Data consists of common information from the following Allowance Plans: Amount,
    Percent, and Unit.  It also must contain specific Amount, Percent, or Unit data information.

    Attributes:
        compensation_element_reference: Compensation Plan Default Compensation Element for an
            Allowance Plan. This is required for non-reimbursable allowance plans. It must be empty
            for reimbursable allowance plans.
        currency_reference: The compensation plan currency.  If none is provided, the tenant default
            is used.
        frequency_reference: The compensation plan frequency.  If none is provided, the tenant
            default is used.
        no_individual_override: No Individual Override indicator prevents default values from being
            overridden for specific employees assigned to an Allowance Plan; if the value is True,
            then Amount, Percent, or Unit Data is required for Amount, Percent, and Unit Allowance
            Plans respectively.
        apply_full_time_equivalent: Assignment amounts are to be entered in full-time equivalent
            amounts. Workday prorates compensation for employees assigned to this plan based on the
            full-time equivalent hours percentage. If not selected, assignment amounts are to be
            entered as the flat amount to be paid to the employee. Workday will divide the assigned
            amount by the ~employee’s~ FTE for 100% FTE calculations.
        use_assigned_value_in_100_percent_calculation: Assignment amounts are to be entered as the
            flat amount to be paid to the employee. Workday will use the assigned amount in 100% FTE
            calculations. The amount assigned to each employee will serve as a fixed value for the
            calculation. If not selected, Workday will divide the assigned amount by the
            ~employee’s~ FTE for 100% FTE calculations.
        exclude_from_merit: Indicates if the allowance plan is eligible for the merit process.
        amount_data: Amount Data is part of an Allowance Plan and is mutually exclusive with Percent
            and Unit Data.
        percent_data: Percent Data is part of an Allowance Plan and is mutually exclusive with
            Amount and Unit Data.
        unit_data: Unit Data is part of an Allowance Plan and is mutually exclusive with Amount and
            Percent Data.
        reimbursable_data: Reimbursable Data is part of an Allowance Plan and applies only to
            Reimbursable Allowance Plans.
    """

    class Meta:
        name = "Allowance_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    no_individual_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "No_Individual_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_full_time_equivalent: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_Full_Time_Equivalent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_assigned_value_in_100_percent_calculation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Assigned_Value_in_100_Percent_Calculation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_from_merit: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_from_Merit",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_data: Optional[AllowancePlanAmountDataType] = field(
        default=None,
        metadata={
            "name": "Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_data: Optional[AllowancePlanPercentDataType] = field(
        default=None,
        metadata={
            "name": "Percent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_data: Optional[AllowancePlanUnitDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reimbursable_data: Optional[AllowancePlanReimbursableDataType] = field(
        default=None,
        metadata={
            "name": "Reimbursable_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeRequest(
    AssignEligiblePeriodActivitiesForEmployeeRequestType
):
    class Meta:
        name = "Assign_Eligible_Period_Activities_for_Employee_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class BenchmarkJobDataType:
    """
    Benchmark Job Data.

    Attributes:
        benchmark_job_id: Benchmark Job ID
        effective_date: Use this field to effective date your composite market data.  If you "age"
            your survey data you will use this date to load in the new effective date with the
            updated amounts.
        inactive: Inactive status indicator for Benchmark Job.
        name: The name of the benchmark job.
        survey_date: This field is for informational purposes and represents the date specified by
            the provider for submitting data.  This date is often displayed as the effective date of
            the report. For example, you may load market data as of 1/1/2010 but the survey data is
            based on 11/1/2009.
        description: Enter a description of the Benchmark Job. You can define a summary of the
            skills required for the Benchmark Job.
        job_profile_reference: Map Workday Job Profiles to the Benchmark Job. The system will
            present an error message when the spreadsheet is loaded if one or more Job Profiles is
            mapped to another Benchmark Job.
        currency_reference: This value will be applied to the Base Pay Composite and Total Cash
            Composite categories.
        frequency_reference: This value will be applied to the Base Pay Composite and Total Cash
            Composite categories.
        benchmark_job_composite_replacement_data: Benchmark Job Composite Data
        benchmark_profile_data: Benchmark Job Profile Data
    """

    class Meta:
        name = "Benchmark_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Benchmark_Job_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    survey_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Survey_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_job_composite_replacement_data: list[BenchmarkJobCompositeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Job_Composite_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_profile_data: list[CompensationBenchmarkProfileDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanDataType:
    """
    Bonus Plan Data consists of common information from the following Bonus Plans: Amount and
    Percent.

    Attributes:
        compensation_element_reference: Compensation Plan Default Compensation Element for a Bonus
            Plan.
        currency_reference: The compensation plan currency.  If none is provided, the tenant default
            is used.
        frequency_reference: The compensation plan frequency.  If none is provided, the tenant
            default is used.
        allow_individual_targets: Defines whether an employee can have an individual target or if
            the target is defined by the bonus plan. 1 or true = Individual Target.
        apply_full_time_equivalent: Assignment amounts are to be entered in full-time equivalent
            amounts. Workday prorates compensation for employees assigned to this plan based on the
            full-time equivalent hours percentage. If not selected, assignment amounts are to be
            entered as the flat amount to be paid to the employee. Workday will divide the assigned
            amount by the ~employee’s~ FTE for 100% FTE calculations.
        use_assigned_value_in_100_percent_calculation: Assignment amounts are to be entered as the
            flat amount to be paid to the employee. Workday will use the assigned amount in 100% FTE
            calculations. The amount assigned to each employee will serve as a fixed value for the
            calculation. If not selected, Workday will divide the assigned amount by the
            ~employee’s~ FTE for 100% FTE calculations.
        waiting_period_reference: Waiting Period is used to restrict employee eligibility for the
            bonus plan until after the employee has satisfied the waiting period criteria.  By using
            waiting periods, you can assign the bonus plan to employees at any time, relying on the
            waiting period to control plan eligibility.
        time_proration_rule_reference: Select a rule to prorate employees' target compensation in a
            compensation event for this plan according to time-based criteria such as leave of
            absence or time since hire.
        include_active_employees_in_waiting_period: When this box is checked, employees in a waiting
            period will be included in a process and will appear with a default target of zero.
        rounding_rule_reference: Rounding Rule for Bonus Amount or Percent Plan
        company_performance_scorecard_reference: Company Performance Scorecard is used to determine
            the funding of the target bonus pool.  The bonus process factors company performance
            into the bonus pool only if you add the scorecard to the bonus plan and you have a
            qualifying performance results set.
        bonus_modifier_reference: This is the Bonus Modifier defined at the plan level. This impacts
            the bonus amount awarded.
        include_active_employees_assigned_plan_during_process_period: If selected, employees
            assigned this plan at any time during the process period are included in the process.
        coverage_date_eligibility_reference: Eligibility Rules to establish who is eligible for
            coverage dates for this compensation component. If you select multiple eligibility
            rules, Workday evaluates each rule independently to determine employee eligibility for
            the compensation component. Employees are eligible if they meet the qualifications of
            any one rule.
        individual_performance_factor_data: This is a wrapper for the Bonus Plan Individual
            Performance Factor and is mutually exclusive with Performance Factors Data
        performance_factors_data: This is a wrapper for Bonus Plan Performance Factors.
        compensation_tranche_replacement_data: This is a wrapper for the Compensation Tranche
            Replacement Data which is used to display and replace Compensation Tranche Data within
            Bonus Plan; it is optional.
        amount_data: This is a wrapper for the Bonus Plan Amount; this is required and is mutually
            exclusive with Bonus Plan Percentage.
        percent_data: This is a wrapper for the Bonus Plan Percentage; this is required and is
            mutually exclusive with Bonus Plan Amount.
        hide_target_from_tenanted_security_groups_reference: Indicates which security groups
            individual targets should be hidden from.
        hide_target_from_workday_security_groups_reference: Indicates which security groups
            individual targets should be hidden from.
        deferred_compensation: Deferred Compensation
    """

    class Meta:
        name = "Bonus_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allow_individual_targets: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Individual_Targets",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    apply_full_time_equivalent: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Apply_Full_Time_Equivalent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_assigned_value_in_100_percent_calculation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Assigned_Value_in_100_Percent_Calculation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    waiting_period_reference: Optional[EligibilityWaitingPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Waiting_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_proration_rule_reference: Optional[TimeProrationRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Proration_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_active_employees_in_waiting_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Active_Employees_in_Waiting_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_performance_scorecard_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Company_Performance_Scorecard_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_modifier_reference: Optional[DefaultScorecardObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Modifier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_active_employees_assigned_plan_during_process_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Active_Employees_Assigned_Plan_During_Process_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_date_eligibility_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Coverage_Date_Eligibility_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_performance_factor_data: Optional[PerformanceMatrixDataType] = field(
        default=None,
        metadata={
            "name": "Individual_Performance_Factor_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    performance_factors_data: Optional[PerformanceFactorsDataType] = field(
        default=None,
        metadata={
            "name": "Performance_Factors_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_tranche_replacement_data: list[CompensationTrancheReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Tranche_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_data: Optional[BonusPlanAmountDataType] = field(
        default=None,
        metadata={
            "name": "Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_data: Optional[BonusPlanPercentDataType] = field(
        default=None,
        metadata={
            "name": "Percent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hide_target_from_tenanted_security_groups_reference: list[TenantedSecurityGroupObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hide_Target_from_Tenanted_Security_Groups_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    hide_target_from_workday_security_groups_reference: list[MetadataSecurityGroupObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hide_Target_from_Workday_Security_Groups_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    deferred_compensation: Optional[DeferredCompensationDataType] = field(
        default=None,
        metadata={
            "name": "Deferred_Compensation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkConfigurableDataType:
    """
    Weight and Adjustment Configuration Data.

    Attributes:
        benchmark_profile_selector: Selects the benchmark profile.
        benchmark_profile_component_data: Weight and Adjustment Component Configuration Data
    """

    class Meta:
        name = "Compensation_Benchmark_Configurable_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_profile_selector: Optional[CompensationBenchmarkProfileSelectorType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Profile_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benchmark_profile_component_data: list[
        CompensationBenchmarkCalculationConfigurationContainerDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Profile_Component_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationBenchmarkHvDataType:
    """
    Request containing Benchmark and Profiles/Default To be updated.

    Attributes:
        compensation_benchmark_job_input_parameters
        compensation_benchmark_reference: Reference ID for compensation benchmark of a job profile.
        compensation_benchmark_data: Compensation Benchmark
    """

    class Meta:
        name = "Compensation_Benchmark__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_benchmark_job_input_parameters: Optional[
        CompensationBenchmarkJobInputParametersType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Benchmark_Job_Input_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_benchmark_reference: Optional[CompensationBenchmarkForJobStoredObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Benchmark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_benchmark_data: Optional[CompensationBenchmarkForJobHvDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Benchmark_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationChangeTemplatesResponseDataType:
    """Compensation change template response."""

    class Meta:
        name = "Compensation_Change_Templates_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_change_templates: list[CompensationChangeTemplatesType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Change_Templates",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationEligibilityRuleDataType:
    """
    Data for this Compensation Eligibility Rule.

    Attributes:
        effective_date: The effective date for this change.
        condition_rule_data: Data defining the Compensation Eleigibility Rule logic.
        compensation_package_reference: Compensation Packages referencing this Compensation
            Eligibility Rule.
        compensation_grade_reference: Compensation Grades referencing this Compensation Eligibility
            Rule.
        compensation_grade_profile_reference: Compensation Grade Profiles refrerencing this
            Compensation Eligibility Rule.
        compensation_plan_reference: Compensation Plans referencing this Compensation Eligibility
            Rule.
        one_time_payment_plan_reference: One-Time Payment Plans referencing this Compensation
            Eligibility Rule.
    """

    class Meta:
        name = "Compensation_Eligibility_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    condition_rule_data: Optional[ConditionRuleDataWwstype] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_package_reference: list[CompensationPackageObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_reference: list[CompensationGradeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile_reference: list[CompensationGradeProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_plan_reference: list[CompensationPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_reference: list[OneTimePaymentPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeHierarchyType:
    """Contains compensation grade hierarchy and its associated data."""

    class Meta:
        name = "Compensation_Grade_HierarchyType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_hierarchy_data: Optional[CompensationGradeHierarchyDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Hierarchy_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeProfileDataType:
    """
    Contains compensation grade profile data.

    Attributes:
        compensation_grade_profile_id: The ID for the compensation grade profile. If you don't enter
            your own ID, Workday creates one for you. Make sure that each compensation grade and
            grade profile have Reference IDs that differ from each other and are unique within your
            tenant.
        effective_date: The effective date of an update to a salary grade profile.  If an effective
            date is not provided, the effective date for the compensation grade will be used.
        name: Typically the geographic salary ranges associated with the grade.
        description: The description for the grade profile (typically geographic).
        compensation_element_reference: The compensation elements that define base bay for this
            compensation grade profile.
        eligibility_rule_reference: The compensation eligibility rules associated with this
            compensation grade profile.
        inactive: Inactive status indicator for Compensation Plans and Guideline components.
        compensation_pay_range_data: This is a wrapper for the Compensation Pay Range Data element.
        setup_security_segment_reference: The Setup Security Segment the Compensation Grade Profile
            is assigned to.
        alternative_pay_range: This is a wrapper for the Alternative Pay Range Data
    """

    class Meta:
        name = "Compensation_Grade_Profile_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_profile_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: list[CompensationPayEarningObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_pay_range_data: Optional[CompensationPayRangeDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Pay_Range_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    setup_security_segment_reference: list[CompensationSetupSecuritySegmentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Setup_Security_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    alternative_pay_range: list[AlternativePayRangeType] = field(
        default_factory=list,
        metadata={
            "name": "Alternative_Pay_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixType:
    """
    Compensation Matrix element.

    Attributes:
        compensation_matrix_reference: The compensation matrix instance.
        compensation_matrix_data
    """

    class Meta:
        name = "Compensation_MatrixType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_data: list[CompensationMatrixDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardResponseDataType:
    """
    Contains the scorecard response information.

    This includes the unique scorecard identifier and the detailed scorecard data which was added or
    updated.
    """

    class Meta:
        name = "Compensation_Scorecard_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard: list[CompensationScorecardType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Scorecard",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardResultType:
    """
    Contains the scorecard result response information.

    This includes the unique scorecard result identifier and the
    detailed scorecard result data which was added or updated.

    Attributes:
        compensation_scorecard_result_reference: A unique scorecard result identifier.
        compensation_scorecard_result_data: Contains the detailed scorecard result information.
    """

    class Meta:
        name = "Compensation_Scorecard_ResultType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_result_reference: Optional[ScoresetContainerObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_scorecard_result_data: list[CompensationScorecardResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Scorecard_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobDetailWithMatchesDataType:
    """
    Data element with survey job title, level, function, or family.

    Attributes:
        job_detail_reference: Reference ID for the survey job with job title and possibly level,
            function, or family.
        job_match: Data element for compensation survey job match.
        job_sub_detail: Survey job sub detail.
    """

    class Meta:
        name = "Compensation_Survey_Job_Detail_With_Matches_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_detail_reference: Optional[CompensationSurveyJobDetailObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Detail_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_match: list[CompensationSurveyJobMatchDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Match",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_sub_detail: list[CompensationSurveyJobSubDetailWithMatchesDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Sub-Detail",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobDetailsResponseDataType:
    """Response element for Get Compensation Survey Jobs web service."""

    class Meta:
        name = "Compensation_Survey_Job_Details_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_detail: list[CompensationSurveyJobDetailType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Detail",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateSeveranceWorksheetRequest(CreateSeveranceWorksheetRequestType):
    class Meta:
        name = "Create_Severance_Worksheet_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EmployeeSeveranceWorksheetEventResponseDataType:
    """
    Response element for Retrieve Employee Severance Worksheet Events.

    Attributes:
        employee_severance_worksheet: Data for Retrieve Employee Severance Worksheet Response
    """

    class Meta:
        name = "Employee_Severance_Worksheet_Event_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_severance_worksheet: list[EmployeeSeveranceWorksheetEventType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Severance_Worksheet",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EnhancedSeveranceMatrixType:
    """
    The Enhanced Severance Matrix element.

    Attributes:
        enhanced_severance_matrix_reference: The instance of Enhanced Severance Matrix for the data.
        enhanced_severance_matrix_data
    """

    class Meta:
        name = "Enhanced_Severance_MatrixType"
        target_namespace = "urn:com.workday/bsvc"

    enhanced_severance_matrix_reference: Optional[SeveranceMatrixAbstractObjectType] = field(
        default=None,
        metadata={
            "name": "Enhanced_Severance_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enhanced_severance_matrix_data: list[EnhancedSeveranceMatrixDataType] = field(
        default_factory=list,
        metadata={
            "name": "Enhanced_Severance_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FuturePaymentPlanAssignmentResponseDataType:
    """Contains future payment plan assignment information based on Request Criteria."""

    class Meta:
        name = "Future_Payment_Plan_Assignment_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_future_payment_plan_assignment: list[PositionFuturePaymentPlanAssignmentsType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Future_Payment_Plan_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetConfigurableCompensationBasisResponseType:
    """Response element containing instances of configurable compensation bases and their associated
    data."""

    class Meta:
        name = "Get_Configurable_Compensation_Basis_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ConfigurableCompensationBasisRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ConfigurableCompensationBasisRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ConfigurableCompensationBasisResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetEligibleEarningsResponseType:
    """Response element containing instances of Eligible Earnings and their associated data."""

    class Meta:
        name = "Get_Eligible_Earnings_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[EligibleEarningsRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: list[EligibleEarningRequestCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: list[EligibleEarningsResponseGroupType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[EligibleEarningsResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetOneTimePaymentPlanConfigurableCategoriesResponse(
    GetOneTimePaymentPlanConfigurableCategoriesResponseType
):
    class Meta:
        name = "Get_One-Time_Payment_Plan_Configurable_Categories_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPeriodActivityTasksResponseType:
    """Response element containing instances of period activity tasks and their associated data."""

    class Meta:
        name = "Get_Period_Activity_Tasks_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[PeriodActivityTaskRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[PeriodActivityTaskRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[PeriodActivityTaskResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[PeriodActivityTaskResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportCompensationSurveyJobDetailsRequestType:
    """
    Root element for Import Compensation Survey Job Details web service.

    Attributes:
        survey_job_detail_information_hv: Request element for high- volume Import Compensation
            Survey Jobs web service
        version
    """

    class Meta:
        name = "Import_Compensation_Survey_Job_Details_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    survey_job_detail_information_hv: list[CompensationSurveyJobDetailHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Survey_Job_Detail_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportCompensationSurveyJobResultsRequestType:
    """Root element for Import Compensation Survey Job Results web service."""

    class Meta:
        name = "Import_Compensation_Survey_Job_Results_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_job_results_information_hv: list[
        PutCompensationSurveyJobResultRequestHvtype
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Survey_Job_Results_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportEligibleEarningsOverrideRequest(ImportEligibleEarningsOverrideRequestType):
    class Meta:
        name = "Import_Eligible_Earnings_Override_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportRequestOneTimePaymentRequestType:
    """Root Import Request One-Time Payment Request Element."""

    class Meta:
        name = "Import_Request_One-Time_Payment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_one_time_payment_request_information_hv: list[RequestOneTimePaymentRequestHvtype] = (
        field(
            default_factory=list,
            metadata={
                "name": "Request_One-Time_Payment_Request_Information_HV",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalityPayAreaResponseDataType:
    """Locality Pay Area Response Data."""

    class Meta:
        name = "Locality_Pay_Area_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    locality_pay_area: list[LocalityPayAreaType] = field(
        default_factory=list,
        metadata={
            "name": "Locality_Pay_Area",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanType:
    """
    An instance of a One-Time Payment Plan and its associated data.

    Attributes:
        one_time_payment_plan_reference: One-Time Payment Plan Reference
        one_time_payment_plan_data: One-Time Payment Plan Data
    """

    class Meta:
        name = "One-Time_Payment_PlanType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_reference: Optional[OneTimePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_data: Optional[OneTimePaymentPlanDataType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityAssignmentEventDataType:
    """
    Contains a reference to the Manage Period Activity Pay Assignments business process event and
    the assignment details.

    Attributes:
        period_activity_assignment_event_reference: Reference to the Manage Period Activity Pay
            Assignments business process event.
        effective_date: Effective Date of the individual assignment changes.
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: Reference element representing a unique instance of Position.
        academic_period_reference: Reference element to an Academic Period to provide the bounding
            start and end dates of existing Period Activity Pay Assignments
        period_activity_rate_matrix_reference: Reference element to a Period Activity specific Rate
            Matrix used to determine rates and currency when none are provided in the individual pay
            assignment
        reason_reference: Period Activity specific reason referencing indicating the purpose of the
            assignments
        period_activity_pay_assignment: Contains each individual assignment within the given period.
            An assignment can be new, change to an existing assignment, or marked for deletion if
            allowed.
        period_activity_pay_assignment_removed: Contains assignments which have been removed from
            the employee.  An assignment can only be removed if no pay activity has occurred.
    """

    class Meta:
        name = "Period_Activity_Assignment_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_assignment_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Assignment_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_period_reference: Optional[AcademicPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_rate_matrix_reference: Optional[PeriodActivityRateMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_pay_assignment: list[PeriodActivityAssignmentVersionDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Pay_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_pay_assignment_removed: list[PeriodActivityAssignmentDeletedDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Pay_Assignment_Removed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityPayAssignmentsDataType:
    """
    Contains Period Activity Assignment information for a given Worker and Period range in a format
    suitable for constructing a Manage Period Activity Pay operation request.

    Attributes:
        effective_date: Effective Date of the individual assignment changes.
        employee_reference: Reference element representing a unique instance of Employee.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        academic_period_reference: Reference element to an Academic Period to provide the bounding
            start and end dates of existing Period Activity Pay Assignments
        period_activity_rate_matrix_reference: Reference element to a Period Activity specific Rate
            Matrix used to determine rates and currency when none are provided in the individual pay
            assignment
        reason_reference: Period Activity specific reason referencing indicating the purpose of the
            assignments
        period_activity_pay_assignment: Contains each individual assignment within the given period.
            An assignment can be new, change to an existing assignment, or marked for deletion if
            allowed.
    """

    class Meta:
        name = "Period_Activity_Pay_Assignments_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_period_reference: Optional[AcademicPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_rate_matrix_reference: Optional[PeriodActivityRateMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_pay_assignment: list[PeriodActivityPayAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Pay_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PeriodActivityRateMatrixType:
    """
    A Period Activity Rate Matrix.

    Attributes:
        period_activity_rate_matrix_reference: Period Activity Rate Matrix reference
        period_activity_rate_matrix_data
    """

    class Meta:
        name = "Period_Activity_Rate_MatrixType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_rate_matrix_reference: Optional[PeriodActivityRateMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_rate_matrix_data: list[PeriodActivityRateMatrixDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class PreviousSystemCompensationHistoryGetDataType:
    """
    Container for a worker and the previous system compensation history.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        previous_system_compensation_history_data
    """

    class Meta:
        name = "Previous_System_Compensation_History_Get_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    previous_system_compensation_history_data: list[PreviousSystemCompensationHistoryType] = field(
        default_factory=list,
        metadata={
            "name": "Previous_System_Compensation_History_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationBenchmarkDataRequestType:
    """
    Request containing Benchmark and Profiles/Default To be updated.

    Attributes:
        benchmark_job_input_parameters: Compensation Benchmark Job Input Parameters.
        benchmark_reference: Reference ID for compensation benchmark of a job profile.
        benchmark_data: Compensation Benchmark
        version
    """

    class Meta:
        name = "Put_Compensation_Benchmark_Data_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job_input_parameters: Optional[CompensationBenchmarkJobInputParametersType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Job_Input_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_reference: Optional[CompensationBenchmarkForJobStoredObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_data: Optional[CompensationBenchmarkForJobDataType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationChangeTemplatesRequest(PutCompensationChangeTemplatesRequestType):
    class Meta:
        name = "Put_Compensation_Change_Templates_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationGradeHierarchyRequestType:
    """This web service operation is designed to load compensation grade hierarchies."""

    class Meta:
        name = "Put_Compensation_Grade_Hierarchy_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_hierarchy_data: Optional[CompensationGradeHierarchyDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Hierarchy_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationMatrixRequestType:
    """
    A request object to put Compensation Matrix data.

    Attributes:
        compensation_matrix_reference: A reference to a current or new compensation matrix.
        compensation_matrix_data
        version
    """

    class Meta:
        name = "Put_Compensation_Matrix_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_data: Optional[CompensationMatrixDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationScorecardRequest(PutCompensationScorecardRequestType):
    class Meta:
        name = "Put_Compensation_Scorecard_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationScorecardResultRequestType:
    """
    Contains the scorecard result request information.

    This includes the detailed scorecard result data and an optional
    reference an existing scorecard result to update.

    Attributes:
        compensation_scorecard_result_reference: A unique scorecard result identifier.
        compensation_scorecard_result_data: Contains the detailed scorecard result information.
        add_only: When True, indicates only a new scorecard result will be added.
        version
    """

    class Meta:
        name = "Put_Compensation_Scorecard_Result_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_result_reference: Optional[ScoresetContainerObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Result_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_scorecard_result_data: Optional[CompensationScorecardResultDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Scorecard_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobDetailRequest(PutCompensationSurveyJobDetailRequestType):
    class Meta:
        name = "Put_Compensation_Survey_Job_Detail_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationSurveyJobResultRequest(PutCompensationSurveyJobResultRequestType):
    class Meta:
        name = "Put_Compensation_Survey_Job_Result_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutEnhancedSeveranceMatrixRequestType:
    """
    The element containing the Put Enhanced Severance Matrix web service sent.

    Attributes:
        enhanced_severance_matrix_reference: The instance of severance matrix that the data will be
            applied to.
        enhanced_severance_matrix_data
        version
    """

    class Meta:
        name = "Put_Enhanced_Severance_Matrix_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    enhanced_severance_matrix_reference: Optional[SeveranceMatrixAbstractObjectType] = field(
        default=None,
        metadata={
            "name": "Enhanced_Severance_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enhanced_severance_matrix_data: Optional[EnhancedSeveranceMatrixDataType] = field(
        default=None,
        metadata={
            "name": "Enhanced_Severance_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFuturePaymentPlanAssignmentRequest(PutFuturePaymentPlanAssignmentRequestType):
    class Meta:
        name = "Put_Future_Payment_Plan_Assignment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutLocalityPayAreaRequest(PutLocalityPayAreaRequestType):
    class Meta:
        name = "Put_Locality_Pay_Area_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutOneTimePaymentPlanRequestType:
    """
    Request element to put One-Time Payment Plan.

    Supports both amount based and percent based one-time payment plans.

    Attributes:
        one_time_payment_plan_reference: One-Time Payment Plan Reference
        one_time_payment_plan_data: One-Time Payment Plan Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_One-Time_Payment_Plan_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_reference: Optional[OneTimePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_plan_data: Optional[OneTimePaymentPlanDataType] = field(
        default=None,
        metadata={
            "name": "One-Time_Payment_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPeriodActivityRateMatrixRequestType:
    """
    Request to create or update a Period Activity Rate Matrix.

    Attributes:
        period_activity_rate_matrix_reference: Period Activity Rate Matrix Reference
        period_activity_rate_matrix_data: Period Activity Rate Matrix data
        add_only: Period Activity Rate Matrix will only be created and cannot already exist
        version
    """

    class Meta:
        name = "Put_Period_Activity_Rate_Matrix_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_rate_matrix_reference: Optional[PeriodActivityRateMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_activity_rate_matrix_data: Optional[PeriodActivityRateMatrixDataType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Rate_Matrix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPreviousSystemCompensationHistoryRequestType:
    """Contains the data for adding, updating or deleting a previous system compensation history
    entry for a worker."""

    class Meta:
        name = "Put_Previous_System_Compensation_History_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    previous_system_compensation_history_data: Optional[PreviousSystemCompensationHistoryType] = (
        field(
            default=None,
            metadata={
                "name": "Previous_System_Compensation_History_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStockParticipationRateTableRequest(PutStockParticipationRateTableRequestType):
    class Meta:
        name = "Put_Stock_Participation_Rate_Table_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestBonusPaymentRequest(RequestBonusPaymentRequestType):
    class Meta:
        name = "Request_Bonus_Payment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestCompensationChangeDataType:
    """
    Wrapper Element for the Request Compensation Change business process.

    Attributes:
        employee_reference: The employee whose compensation is changing.
        position_reference: Employee's current position.  Used in multiple-job scenarios.
        compensation_change_date: Date the compensation change becomes effective.  Required if
            Compensation Change On Next Pay Period is False.
        compensation_change_on_next_pay_period: False by default. If True, the compensation change
            date defaults to the start of the next payroll period.
        employee_visibility_date: Date the employee can view their compensation change.  Employee
            Visibility Date must be enabled on the Edit Tenant Setup - HCM task.
        compensation_change_data: Data element that contains the compensation change information.
        check_position_budget_sub_process: Top element used for Check Position Budget as a sub
            business process.
    """

    class Meta:
        name = "Request_Compensation_Change_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_change_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_change_on_next_pay_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_On_Next_Pay_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_visibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Employee_Visibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_change_data: Optional[CompensationChangeDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestDefaultCompensationDataType:
    """
    Element for the Request Default Compensation business process.

    Attributes:
        position_reference: Reference to the Position for the default compensation change
        effective_date: Date for the default compensation change
        compensation_default_data: Data element that contains the request default compensation
            change information
    """

    class Meta:
        name = "Request_Default_Compensation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_default_data: Optional[CompensationDefaultDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Default_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestEmployeeMeritAdjustmentRequest(RequestEmployeeMeritAdjustmentRequestType):
    class Meta:
        name = "Request_Employee_Merit_Adjustment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestOneTimePaymentRequest(RequestOneTimePaymentRequestType):
    class Meta:
        name = "Request_One-Time_Payment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequisitionCompensationChangeDataType:
    """
    Element for the Request Requisition Compensation Change business process.

    Attributes:
        requisition_reference: Reference to the Requisition for the compensation change
        compensation_change_date: Date for the requisition compensation change.
        requisition_compensation_data: Data element that contains the requisition compensation
            change information.
    """

    class Meta:
        name = "Requisition_Compensation_Change_DataType"
        target_namespace = "urn:com.workday/bsvc"

    requisition_reference: Optional[JobRequisitionEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_change_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Compensation_Change_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    requisition_compensation_data: Optional[RequisitionCompensationDataType] = field(
        default=None,
        metadata={
            "name": "Requisition_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockParticipationRateTableResponseDataType:
    """
    Stock Participation Rate Table Response Data.

    Attributes:
        stock_participation_rate_table: Stock Participation Rate Table
    """

    class Meta:
        name = "Stock_Participation_Rate_Table_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_participation_rate_table: list[StockParticipationRateTableSubResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Participation_Rate_Table",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanAmountDataType:
    """
    Data for Stock Amount Plan.

    Attributes:
        rounding_rule_reference: Rounding Rule for Stock Amount or Percent Plan.
        use_target_currency: Flag to indicate that a grant stock will be in the currency on this
            amount based stock plan
        target_amount: Target Amount for Stock Plan.
        currency_reference: Currency of Target Amount.
        grant_split_replacement_data: Grant Splits for Stock Plan.
        stock_plan_amount_profile_replacement_data: Profiles for Stock Plan.
    """

    class Meta:
        name = "Stock_Plan_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_target_currency: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Target_Currency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    grant_split_replacement_data: list[GrantTypeSplitReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Grant_Split_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    stock_plan_amount_profile_replacement_data: list[StockPlanAmountProfileReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Stock_Plan_Amount_Profile_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class StockPlanPercentDataType:
    """
    Data for Stock Percent Plan.

    Attributes:
        rounding_rule_reference: Compensation Rounding Rule to be used for Amount and Percent Stock
            Plans.
        target_percent: Target Percent for the Stock Plan.
        compensation_basis_reference: Compensation Basis to calculate target amounts for that
            employee.
        grant_split_replacement_data: Grant Type Splits for the Stock Plan.
        stock_plan_percent_profile_default_replacement_data: Profiles for Stock Plan.
    """

    class Meta:
        name = "Stock_Plan_Percent_DataType"
        target_namespace = "urn:com.workday/bsvc"

    rounding_rule_reference: Optional[CompensationRoundingRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Rounding_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 19,
            "fraction_digits": 4,
        },
    )
    compensation_basis_reference: Optional[CompensationBasisObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Basis_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_split_replacement_data: list[GrantTypeSplitReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Grant_Split_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    stock_plan_percent_profile_default_replacement_data: list[
        StockPlanPercentProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Percent_Profile_Default_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanUnitDataType:
    """
    Data for Stock Unit Plan.

    Attributes:
        target_shares: Target expressed as number of shares.
        grant_split_replacement_data: Default Grant Split for the Stock Plan.
        stock_plan_unit_profile_replacement_data: Profile Data used to override defaults in Stock
            Plan.
    """

    class Meta:
        name = "Stock_Plan_Unit_DataType"
        target_namespace = "urn:com.workday/bsvc"

    target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    grant_split_replacement_data: list[GrantTypeSplitReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Grant_Split_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    stock_plan_unit_profile_replacement_data: list[StockPlanUnitProfileReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Unit_Profile_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEligiblePeriodActivitiesForEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["AssignEligiblePeriodActivitiesForEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["AssignEligiblePeriodActivitiesForEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_eligible_period_activities_for_employee_request: Optional[
            AssignEligiblePeriodActivitiesForEmployeeRequest
        ] = field(
            default=None,
            metadata={
                "name": "Assign_Eligible_Period_Activities_for_Employee_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class CreateSeveranceWorksheetInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["CreateSeveranceWorksheetInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["CreateSeveranceWorksheetInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        create_severance_worksheet_request: Optional[CreateSeveranceWorksheetRequest] = field(
            default=None,
            metadata={
                "name": "Create_Severance_Worksheet_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetOneTimePaymentPlanConfigurableCategoriesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetOneTimePaymentPlanConfigurableCategoriesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_one_time_payment_plan_configurable_categories_response: Optional[
            GetOneTimePaymentPlanConfigurableCategoriesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_One-Time_Payment_Plan_Configurable_Categories_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetOneTimePaymentPlanConfigurableCategoriesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "GetOneTimePaymentPlanConfigurableCategoriesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportEligibleEarningsOverrideInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportEligibleEarningsOverrideInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportEligibleEarningsOverrideInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_eligible_earnings_override_request: Optional[
            ImportEligibleEarningsOverrideRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Eligible_Earnings_Override_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationChangeTemplatesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationChangeTemplatesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationChangeTemplatesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_change_templates_request: Optional[
            PutCompensationChangeTemplatesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Change_Templates_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationScorecardInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationScorecardInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationScorecardInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_scorecard_request: Optional[PutCompensationScorecardRequest] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Scorecard_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationSurveyJobDetailInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationSurveyJobDetailInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationSurveyJobDetailInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_survey_job_detail_request: Optional[
            PutCompensationSurveyJobDetailRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Survey_Job_Detail_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationSurveyJobResultInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationSurveyJobResultInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationSurveyJobResultInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_survey_job_result_request: Optional[
            PutCompensationSurveyJobResultRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Survey_Job_Result_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutConfigurableCompensationBasis:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutConfigurableCompensationBasisInput
    output = PutConfigurableCompensationBasisOutput


@dataclass
class PutFuturePaymentPlanAssignmentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutFuturePaymentPlanAssignmentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutFuturePaymentPlanAssignmentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_future_payment_plan_assignment_request: Optional[
            PutFuturePaymentPlanAssignmentRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Future_Payment_Plan_Assignment_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutLocalityPayAreaInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutLocalityPayAreaInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutLocalityPayAreaInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_locality_pay_area_request: Optional[PutLocalityPayAreaRequest] = field(
            default=None,
            metadata={
                "name": "Put_Locality_Pay_Area_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutPeriodActivityTask:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutPeriodActivityTaskInput
    output = PutPeriodActivityTaskOutput


@dataclass
class PutStockParticipationRateTableInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutStockParticipationRateTableInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutStockParticipationRateTableInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_stock_participation_rate_table_request: Optional[
            PutStockParticipationRateTableRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Stock_Participation_Rate_Table_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RequestBonusPaymentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestBonusPaymentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RequestBonusPaymentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_bonus_payment_request: Optional[RequestBonusPaymentRequest] = field(
            default=None,
            metadata={
                "name": "Request_Bonus_Payment_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RequestEmployeeMeritAdjustmentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestEmployeeMeritAdjustmentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RequestEmployeeMeritAdjustmentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_employee_merit_adjustment_request: Optional[
            RequestEmployeeMeritAdjustmentRequest
        ] = field(
            default=None,
            metadata={
                "name": "Request_Employee_Merit_Adjustment_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RequestOneTimePaymentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestOneTimePaymentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RequestOneTimePaymentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_one_time_payment_request: Optional[RequestOneTimePaymentRequest] = field(
            default=None,
            metadata={
                "name": "Request_One-Time_Payment_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class UpdateStockGrant:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = UpdateStockGrantInput
    output = UpdateStockGrantOutput


@dataclass
class AddStockGrantRequest(AddStockGrantRequestType):
    class Meta:
        name = "Add_Stock_Grant_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class BenchmarkJobType:
    """
    Benchmark Job.

    Attributes:
        benchmark_job_reference: Benchmark Job Reference
        benchmark_job_data: Benchmark Job Data
    """

    class Meta:
        name = "Benchmark_JobType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job_reference: Optional[CompensationBenchmarkDefaultObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_job_data: list[BenchmarkJobDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkCycleHvDataType:
    """
    Compensation Benchmark Cycle.

    Attributes:
        benchmark_data: Request element for Import Compensation Benchmark Cycle web service.
    """

    class Meta:
        name = "Compensation_Benchmark_Cycle__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_data: list[CompensationBenchmarkHvDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkJobDataType:
    """
    Benchmark Job Data for Weight and Adjustment Configuration.

    Attributes:
        id: Weight and Adjustment Configuration ID
        job_profile_family_selector: Weight and Adjustment Configuration Selector of All Job
            Profiles, Job Profiles, or Job Families.
        benchmark_profile_data: Weight and Adjustment Configuration Data
    """

    class Meta:
        name = "Compensation_Benchmark_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_family_selector: Optional[
        CompensationBenchmarkJobConfigurationJobProfileFamilySelectorType
    ] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Family_Selector",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benchmark_profile_data: list[CompensationBenchmarkConfigurableDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationEligibilityRuleType:
    """
    Response data element for the Compensation Eligibility Rule.

    Attributes:
        compensation_eligibility_rule_reference: Reference for this Compensation Eligibility Rule
        compensation_eligibility_rule_data
    """

    class Meta:
        name = "Compensation_Eligibility_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_eligibility_rule_data: list[CompensationEligibilityRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeHierarchyResponseDataType:
    """
    Contains compensation grade hierarchy information based on request references or request
    criteria.

    Attributes:
        compensation_grade_hierarchy: Compensation grade hierarchy.
    """

    class Meta:
        name = "Compensation_Grade_Hierarchy_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_hierarchy: list[CompensationGradeHierarchyType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Hierarchy",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeProfileSubCompensationGradeType:
    """
    Contains a compensation grade profile and its associated data.

    Attributes:
        compensation_grade_profile_reference: Compensation Grade Profile Reference
        compensation_grade_profile_data: Contains compensation grade profile data.
        delete: If True is entered, the Compensation Grade Profile will be removed from the
            Compensation Grade.
    """

    class Meta:
        name = "Compensation_Grade_Profile_Sub_Compensation_GradeType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_profile_reference: Optional[CompensationGradeProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile_data: Optional[CompensationGradeProfileDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationMatrixResponseDataType:
    """
    Response Data element.

    Attributes:
        compensation_matrix: The compensation matrix.
    """

    class Meta:
        name = "Compensation_Matrix_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_matrix: list[CompensationMatrixType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Matrix",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationScorecardResultResponseDataType:
    """
    Contains the scorecard result response information.

    This includes the unique scorecard result identifier and the detailed scorecard result data
    which was added or updated.
    """

    class Meta:
        name = "Compensation_Scorecard_Result_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_scorecard_result: list[CompensationScorecardResultType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Scorecard_Result",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyJobWithMatchesType:
    """
    Data element for survey job and job code.

    Attributes:
        job_code: Job code of a job in a compensation survey.
        job_detail: Reference of the survey job with job title and possibly level, function, or
            family.
    """

    class Meta:
        name = "Compensation_Survey_Job_With_MatchesType"
        target_namespace = "urn:com.workday/bsvc"

    job_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_detail: list[CompensationSurveyJobDetailWithMatchesDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Detail",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class EnhancedSeveranceMatrixResponseDataType:
    """
    The response for the Get Enhanced Severance Matrix web service.

    Attributes:
        enhanced_severance_matrix: The enhanced severance matrix returned.
    """

    class Meta:
        name = "Enhanced_Severance_Matrix_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enhanced_severance_matrix: list[EnhancedSeveranceMatrixType] = field(
        default_factory=list,
        metadata={
            "name": "Enhanced_Severance_Matrix",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationChangeTemplatesResponseType:
    """
    Get Compensation Change Template Response.

    Attributes:
        request_references: Compensation Change Templates Response
        response_filter
        response_results
        response_data
        version
    """

    class Meta:
        name = "Get_Compensation_Change_Templates_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationChangeTemplateRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationChangeTemplatesResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationScorecardsResponseType:
    """
    Contains the response details to retrieve one or more scorecard.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_group
        response_results
        response_data: Contains the scorecard response information. This includes the unique
            scorecard identifier and the detailed scorecard data which was added or updated.
        version
    """

    class Meta:
        name = "Get_Compensation_Scorecards_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationScorecardRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationScorecardRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationScorecardResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationScorecardResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationSurveyJobDetailsResponseType:
    """Get Compensation Survey Jobs Response element."""

    class Meta:
        name = "Get_Compensation_Survey_Job_Details_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_criteria: Optional[CompensationSurveyJobsCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationSurveyJobsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationSurveyJobDetailsResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetConfigurableCompensationBasisResponse(GetConfigurableCompensationBasisResponseType):
    class Meta:
        name = "Get_Configurable_Compensation_Basis_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetEligibleEarningsResponse(GetEligibleEarningsResponseType):
    class Meta:
        name = "Get_Eligible_Earnings_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetFuturePaymentPlanAssignmentsResponseType:
    """Get Future Payment Plan Assignments Response element containing retrieved Future Payment Plan
    Assignments and associated web service request related criteria."""

    class Meta:
        name = "Get_Future_Payment_Plan_Assignments_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_criteria: Optional[FuturePaymentPlanAssignmentRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[FuturePaymentPlanAssignmentResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetLocalityPayAreasResponseType:
    """Get Locality Pay Areas Response."""

    class Meta:
        name = "Get_Locality_Pay_Areas_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[LocalityPayAreaRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[LocalityPayAreaResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPeriodActivityTasksResponse(GetPeriodActivityTasksResponseType):
    class Meta:
        name = "Get_Period_Activity_Tasks_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStockParticipationRateTablesResponseType:
    """
    Response element containing instances of stock participation rate tables and their associated
    data.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_group
        response_results
        response_data: Response Data
        version
    """

    class Meta:
        name = "Get_Stock_Participation_Rate_Tables_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StockParticipationRateTableRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StockParticipationRateTableRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StockParticipationRateTableResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StockParticipationRateTableResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportCompensationSurveyJobDetailsRequest(ImportCompensationSurveyJobDetailsRequestType):
    class Meta:
        name = "Import_Compensation_Survey_Job_Details_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportCompensationSurveyJobResultsRequest(ImportCompensationSurveyJobResultsRequestType):
    class Meta:
        name = "Import_Compensation_Survey_Job_Results_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportRequestOneTimePaymentRequest(ImportRequestOneTimePaymentRequestType):
    class Meta:
        name = "Import_Request_One-Time_Payment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ManagePeriodActivityPayAssignmentsRequestType:
    """This operation allows the management of period activity based assignments for a given worker
    and a bounding date range or period via the Manage Period Activity Pay Assignments business
    process."""

    class Meta:
        name = "Manage_Period_Activity_Pay_Assignments_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    period_activity_pay_assignments: Optional[PeriodActivityPayAssignmentsDataType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Pay_Assignments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagePeriodActivityPayAssignmentsResponseType:
    """
    Contains the detailed business process event information resulting from a successful Manage
    Period Activity Pay Assignments request.

    Attributes:
        period_activity_pay_assigment_event: Contains a reference to the Manage Period Activity Pay
            Assignments business process event and the assignment details.
        version
    """

    class Meta:
        name = "Manage_Period_Activity_Pay_Assignments_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_pay_assigment_event: Optional[PeriodActivityAssignmentEventDataType] = field(
        default=None,
        metadata={
            "name": "Period_Activity_Pay_Assigment_Event",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanResponseDataType:
    """Response element containing instances of One-Time Payment Plan and their associated data."""

    class Meta:
        name = "One-Time_Payment_Plan_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan: list[OneTimePaymentPlanType] = field(
        default_factory=list,
        metadata={
            "name": "One-Time_Payment_Plan",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodActivityRateMatrixResponseDataType:
    """Contains Period Activity Rate Matrix information."""

    class Meta:
        name = "Period_Activity_Rate_Matrix_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_activity_rate_matrix: list[PeriodActivityRateMatrixType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Activity_Rate_Matrix",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PreviousSystemCompensationHistoryResponseDataType:
    """Contains the worker and their compensation history from a previous system."""

    class Meta:
        name = "Previous_System_Compensation_History_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    previous_system_compensation_history: list[PreviousSystemCompensationHistoryGetDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Previous_System_Compensation_History",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class PutBenchmarkJobRequestType:
    """
    Request element to put Benchmark Job.

    Attributes:
        benchmark_job_reference: Benchmark Job Reference
        benchmark_job_data: Benchmark Job Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Benchmark_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job_reference: Optional[CompensationBenchmarkDefaultObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_job_data: Optional[BenchmarkJobDataType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationBenchmarkDataRequest(PutCompensationBenchmarkDataRequestType):
    class Meta:
        name = "Put_Compensation_Benchmark_Data_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationEligibilityRuleRequestType:
    """
    Incoming Put Compensation Eligibility Rule Request.

    Attributes:
        compensation_eligibility_rule_reference: Compensation Eligibility Rule Reference
        compensation_eligibility_rule_data: Compensation Eligibility Rule Data
        add_only: Add Only
        delete: If True is entered, the Compensation Eligibility Rule will be deleted.
        version
    """

    class Meta:
        name = "Put_Compensation_Eligibility_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_eligibility_rule_data: Optional[CompensationEligibilityRuleDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationGradeHierarchyRequest(PutCompensationGradeHierarchyRequestType):
    class Meta:
        name = "Put_Compensation_Grade_Hierarchy_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationMatrixRequest(PutCompensationMatrixRequestType):
    class Meta:
        name = "Put_Compensation_Matrix_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationScorecardResultRequest(PutCompensationScorecardResultRequestType):
    class Meta:
        name = "Put_Compensation_Scorecard_Result_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutEnhancedSeveranceMatrixRequest(PutEnhancedSeveranceMatrixRequestType):
    class Meta:
        name = "Put_Enhanced_Severance_Matrix_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutOneTimePaymentPlanRequest(PutOneTimePaymentPlanRequestType):
    class Meta:
        name = "Put_One-Time_Payment_Plan_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPeriodActivityRateMatrixRequest(PutPeriodActivityRateMatrixRequestType):
    class Meta:
        name = "Put_Period_Activity_Rate_Matrix_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPreviousSystemCompensationHistoryRequest(PutPreviousSystemCompensationHistoryRequestType):
    class Meta:
        name = "Put_Previous_System_Compensation_History_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestCompensationChangeRequestType:
    """
    Web service operation to request a compensation change for an employee.

    Attributes:
        business_process_parameters: Container for the processing options for a business process. If
            no options are submitted (or the options are submitted as 'false') then the business
            process is simply initiated as if it where submitted on-line with approvals, reviews,
            notifications and to-do's in place.
        request_compensation_change_data: Wrapper Element for the Request Compensation Change
            business process.
        version
    """

    class Meta:
        name = "Request_Compensation_Change_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_compensation_change_data: Optional[RequestCompensationChangeDataType] = field(
        default=None,
        metadata={
            "name": "Request_Compensation_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestCompensationChangeRequestHvtype:
    """
    Web service operation to request a compensation change for employee(s).

    This operation is asynchronous and specifically designed to support very large documents.
    """

    class Meta:
        name = "Request_Compensation_Change_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_compensation_change_data: Optional[RequestCompensationChangeDataType] = field(
        default=None,
        metadata={
            "name": "Request_Compensation_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RequestDefaultCompensationRequestType:
    """Web service operation to request a default compensation change for a position
    compensation."""

    class Meta:
        name = "Request_Default_Compensation_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_default_compensation_data: Optional[RequestDefaultCompensationDataType] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestRequisitionCompensationChangeRequestType:
    """
    Web service operation to request a requisition compensation change for a job requisition.

    Attributes:
        business_process_parameters: Container for the processing options for a business process. If
            no options are submitted (or the options are submitted as 'false') then the business
            process is simply initiated as if it where submitted on-line with approvals, reviews,
            notifications and to-do's in place.
        requisition_compensation_change_data: Element for the Requisition Compensation Change
            business process.
        version
    """

    class Meta:
        name = "Request_Requisition_Compensation_Change_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    requisition_compensation_change_data: Optional[RequisitionCompensationChangeDataType] = field(
        default=None,
        metadata={
            "name": "Requisition_Compensation_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetrieveSeveranceWorksheetsResponseType:
    """Response element for Retrieve Employee Severance Worksheet Events."""

    class Meta:
        name = "Retrieve_Severance_Worksheets_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EmployeeSeveranceWorksheetEventRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EmployeeSeveranceWorksheetEventRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[EmployeeSeveranceWorksheetEventResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[EmployeeSeveranceWorksheetEventResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanDataType:
    """
    Data for Stock Plan.

    Attributes:
        allow_target_override: Allow target override.
        compensation_matrix_reference: Compensation Matrix used by Stock Plan.
        use_as_reference_only: Select if you do not want the stock process to use the compensation
            matrix to calculate pools, but display the ranges only for reference.
        stock_plan_unit_data: Stock Plan Unit Data - use this when the stock target is expressed in
            terms of number of shares.
        stock_plan_percent_data: Stock Plan Percent Data - use this when stock target is expressed
            in terms of percent of total base pay.
        stock_plan_amount_data: Stock Plan Amount Data - use this when stock target is expressed in
            terms of monetary amount.
        hide_target_from_tenanted_security_groups_reference: Indicates which security groups
            individual targets should be hidden from.
        hide_target_from_workday_security_groups_reference: Indicates which security groups
            individual targets should be hidden from.
    """

    class Meta:
        name = "Stock_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allow_target_override: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Target_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_as_reference_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_as_Reference_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_unit_data: Optional[StockPlanUnitDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Unit_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_percent_data: Optional[StockPlanPercentDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Percent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_amount_data: Optional[StockPlanAmountDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hide_target_from_tenanted_security_groups_reference: list[TenantedSecurityGroupObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hide_Target_from_Tenanted_Security_Groups_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    hide_target_from_workday_security_groups_reference: list[MetadataSecurityGroupObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hide_Target_from_Workday_Security_Groups_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class AddStockGrantInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["AddStockGrantInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["AddStockGrantInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        add_stock_grant_request: Optional[AddStockGrantRequest] = field(
            default=None,
            metadata={
                "name": "Add_Stock_Grant_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class AssignEligiblePeriodActivitiesForEmployee:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = AssignEligiblePeriodActivitiesForEmployeeInput
    output = AssignEligiblePeriodActivitiesForEmployeeOutput


class CreateSeveranceWorksheet:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = CreateSeveranceWorksheetInput
    output = CreateSeveranceWorksheetOutput


@dataclass
class GetConfigurableCompensationBasisOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetConfigurableCompensationBasisOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_configurable_compensation_basis_response: Optional[
            GetConfigurableCompensationBasisResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Configurable_Compensation_Basis_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetConfigurableCompensationBasisOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetConfigurableCompensationBasisOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetEligibleEarningsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetEligibleEarningsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_eligible_earnings_response: Optional[GetEligibleEarningsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Eligible_Earnings_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetEligibleEarningsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetEligibleEarningsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetOneTimePaymentPlanConfigurableCategories:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetOneTimePaymentPlanConfigurableCategoriesInput
    output = GetOneTimePaymentPlanConfigurableCategoriesOutput


@dataclass
class GetPeriodActivityTasksOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetPeriodActivityTasksOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_period_activity_tasks_response: Optional[GetPeriodActivityTasksResponse] = field(
            default=None,
            metadata={
                "name": "Get_Period_Activity_Tasks_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetPeriodActivityTasksOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetPeriodActivityTasksOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class ImportCompensationSurveyJobDetailsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationSurveyJobDetailsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportCompensationSurveyJobDetailsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_compensation_survey_job_details_request: Optional[
            ImportCompensationSurveyJobDetailsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Compensation_Survey_Job_Details_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class ImportCompensationSurveyJobResultsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationSurveyJobResultsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportCompensationSurveyJobResultsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_compensation_survey_job_results_request: Optional[
            ImportCompensationSurveyJobResultsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Compensation_Survey_Job_Results_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class ImportEligibleEarningsOverride:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportEligibleEarningsOverrideInput
    output = ImportEligibleEarningsOverrideOutput


@dataclass
class ImportRequestOneTimePaymentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportRequestOneTimePaymentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportRequestOneTimePaymentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_request_one_time_payment_request: Optional[ImportRequestOneTimePaymentRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Import_Request_One-Time_Payment_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationBenchmarkDataInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationBenchmarkDataInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationBenchmarkDataInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_benchmark_data_request: Optional[PutCompensationBenchmarkDataRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Compensation_Benchmark_Data_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutCompensationChangeTemplates:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationChangeTemplatesInput
    output = PutCompensationChangeTemplatesOutput


@dataclass
class PutCompensationGradeHierarchyInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationGradeHierarchyInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationGradeHierarchyInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_grade_hierarchy_request: Optional[PutCompensationGradeHierarchyRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Compensation_Grade_Hierarchy_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationMatrixInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationMatrixInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationMatrixInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_matrix_request: Optional[PutCompensationMatrixRequest] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Matrix_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutCompensationScorecard:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationScorecardInput
    output = PutCompensationScorecardOutput


@dataclass
class PutCompensationScorecardResultInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationScorecardResultInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationScorecardResultInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_scorecard_result_request: Optional[
            PutCompensationScorecardResultRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Scorecard_Result_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutCompensationSurveyJobDetail:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationSurveyJobDetailInput
    output = PutCompensationSurveyJobDetailOutput


class PutCompensationSurveyJobResult:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationSurveyJobResultInput
    output = PutCompensationSurveyJobResultOutput


@dataclass
class PutEnhancedSeveranceMatrixInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutEnhancedSeveranceMatrixInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutEnhancedSeveranceMatrixInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_enhanced_severance_matrix_request: Optional[PutEnhancedSeveranceMatrixRequest] = field(
            default=None,
            metadata={
                "name": "Put_Enhanced_Severance_Matrix_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutFuturePaymentPlanAssignment:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutFuturePaymentPlanAssignmentInput
    output = PutFuturePaymentPlanAssignmentOutput


class PutLocalityPayArea:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutLocalityPayAreaInput
    output = PutLocalityPayAreaOutput


@dataclass
class PutOneTimePaymentPlanInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutOneTimePaymentPlanInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutOneTimePaymentPlanInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_one_time_payment_plan_request: Optional[PutOneTimePaymentPlanRequest] = field(
            default=None,
            metadata={
                "name": "Put_One-Time_Payment_Plan_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutPeriodActivityRateMatrixInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutPeriodActivityRateMatrixInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutPeriodActivityRateMatrixInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_period_activity_rate_matrix_request: Optional[PutPeriodActivityRateMatrixRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Period_Activity_Rate_Matrix_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutPreviousSystemCompensationHistoryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutPreviousSystemCompensationHistoryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutPreviousSystemCompensationHistoryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_previous_system_compensation_history_request: Optional[
            PutPreviousSystemCompensationHistoryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Previous_System_Compensation_History_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutStockParticipationRateTable:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutStockParticipationRateTableInput
    output = PutStockParticipationRateTableOutput


class RequestBonusPayment:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RequestBonusPaymentInput
    output = RequestBonusPaymentOutput


class RequestEmployeeMeritAdjustment:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RequestEmployeeMeritAdjustmentInput
    output = RequestEmployeeMeritAdjustmentOutput


class RequestOneTimePayment:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RequestOneTimePaymentInput
    output = RequestOneTimePaymentOutput


@dataclass
class BenchmarkJobResponseDataType:
    """
    Benchmark Job Response Data.

    Attributes:
        benchmark_job: Benchmark Job
    """

    class Meta:
        name = "Benchmark_Job_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_job: list[BenchmarkJobType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationBenchmarkWeightAndAdjustmentHvDataType:
    """
    Calculated Compensation Benchmark (HV) Data.

    Attributes:
        weight_and_adjustment_configuration_reference: Weight and Adjustment Configuration Reference
        delete: Delete Weight and Adjustment Configuration
        weight_and_adjustment_configuration_data: Benchmark Job Data for Weight and Adjustment
            Configuration
    """

    class Meta:
        name = "Compensation_Benchmark_Weight_and_Adjustment__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    weight_and_adjustment_configuration_reference: Optional[CompensationBenchmarkJobObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Weight_and_Adjustment_Configuration_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    weight_and_adjustment_configuration_data: Optional[CompensationBenchmarkJobDataType] = field(
        default=None,
        metadata={
            "name": "Weight_and_Adjustment_Configuration_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationEligibilityRuleResponseDataType:
    """
    Compensation Eligibility Rule Response Data.

    Attributes:
        compensation_eligibility_rule: Data for a Compensation Eligibility Rule
    """

    class Meta:
        name = "Compensation_Eligibility_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_eligibility_rule: list[CompensationEligibilityRuleType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeDataType:
    """
    Contains compensation grade data.

    Attributes:
        compensation_grade_id: The ID for the compensation grade. If you don't enter your own ID,
            Workday creates one for you. Make sure that each compensation grade and grade profile
            have Reference IDs that differ from each other and are unique within your tenant.
        effective_date: The effective date of this salary grade.  We recommend using a date of
            1900-01-01.  If not date is supplied, today's date will be used.
        name: The unique salary grade name. Salary grades provide the guidelines for employee's base
            compensation.
        description: The description of this salary grade.
        compensation_element_reference: The compensation elements that define base bay for this
            compensation grade.
        eligibility_rule_reference: The compensation eligibility rules associated with this
            compensation grade.
        compensation_pay_range: This is a wrapper for the Compensation Pay Range Data element.
        compensation_grade_profile: This is a wrapper for the Compensation Grade Profiles
        setup_security_segment_reference: The Setup Security Segment the Compensation Grade is
            assigned to.
        assign_first_step_during_compensation_proposal: When compensation steps are included in the
            Grade or Grade Profile, this indicator will be used to assign the first step to an
            employee when proposing compensation.
        pay_level_reference: Pay Levels are not supported for Compensation Grades.  Do Not Use.
        inactive: Inactive status indicator for Compensation Plans and Guideline components.
        alternative_pay_range: This is a wrapper for the Alternative Pay Range Data
    """

    class Meta:
        name = "Compensation_Grade_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: list[CompensationPayEarningObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_pay_range: Optional[CompensationPayRangeDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Pay_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile: list[CompensationGradeProfileSubCompensationGradeType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    setup_security_segment_reference: list[CompensationSetupSecuritySegmentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Setup_Security_Segment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_first_step_during_compensation_proposal: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Assign_First_Step_During_Compensation_Proposal",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_level_reference: Optional[CompplObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    alternative_pay_range: list[AlternativePayRangeType] = field(
        default_factory=list,
        metadata={
            "name": "Alternative_Pay_Range",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanDataType:
    """
    Contains common information for the following Compensation Plans:  Future Payment, Bonus, Merit,
    Allowance, Commission, and Base Pay.  It also must contain a Future Play, Bonus, Merit,
    Allowance, Commission, or Bay Pay Plan data.

    Attributes:
        compensation_plan_id: Unique attribute name/description identifying a valid instance of
            Compensation Plan.
        effective_date: The effective date of the compensation plan. It is recommended to use
            1900-01-01.
        name: Unique attribute name/description identifying a valid instance of Compensation Plan.
        description: Unique attribute name/description identifying a valid instance of Compensation
            Plan.
        eligibility_rule_reference: Eligibility Rules to establish who is eligible for this
            compensation component.  If you select multiple eligibility rules, Workday evaluates
            each rule independently to determine employee eligibility for the compensation
            component. Employees are eligible if they meet the qualifications of any one rule.
        inactive: Inactive status indicator for Compensation Plans and Guideline components.
        future_payment_plan_data: Future Payment Plan Data
        bonus_plan_data: Bonus Plan Data consists of common information from the following Bonus
            Plans: Amount and Percent.
        merit_plan_data: Merit Plan Data
        stock_plan_data: Stock Plan Data
        allowance_plan_data: Allowance Plan Data consists of common information from the following
            Allowance Plans: Amount, Percent, and Unit.  It also must contain specific Amount,
            Percent, or Unit data information.
        commission_plan_data: Commission Plan Data
        base_pay_plan_data: Base Pay Plan Data consists of common information from the following
            Base Pay Plans: Salary, Hourly, and Unit.
        period_plan_data: Period Plan Data
        calculated_plan_data: Data for the creation of a Calculated Plan
    """

    class Meta:
        name = "Compensation_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    future_payment_plan_data: Optional[FuturePaymentPlanDataType] = field(
        default=None,
        metadata={
            "name": "Future_Payment_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plan_data: Optional[BonusPlanDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[MeritPlanDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[StockPlanDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_data: Optional[AllowancePlanDataType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[CommissionPlanDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    base_pay_plan_data: Optional[BasePayPlanDataType] = field(
        default=None,
        metadata={
            "name": "Base_Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_plan_data: Optional[PeriodPlanDataType] = field(
        default=None,
        metadata={
            "name": "Period_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[CalculatedPlanDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyWithMatchesDataType:
    """
    Element to specify the data for survey to put/update.

    Attributes:
        survey_job: Data element for survey job and job code.
    """

    class Meta:
        name = "Compensation_Survey_With_Matches_DataType"
        target_namespace = "urn:com.workday/bsvc"

    survey_job: list[CompensationSurveyJobWithMatchesType] = field(
        default_factory=list,
        metadata={
            "name": "Survey_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class GetCompensationChangeTemplatesResponse(GetCompensationChangeTemplatesResponseType):
    class Meta:
        name = "Get_Compensation_Change_Templates_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationGradeHierarchyResponseType:
    """
    Response element containing instances of compensation grade hierarchies and their associated
    data.

    Attributes:
        request_references
        response_filter
        response_results
        response_data: Contains compensation grade hierarchy information based on request references
            or request criteria.
        version
    """

    class Meta:
        name = "Get_Compensation_Grade_Hierarchy_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationGradeHierarchyRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[CompensationGradeHierarchyResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationMatricesResponseType:
    """
    Get Compensation Matrices Response element.

    Attributes:
        request_references: References to particular compensation matrices.
        request_criteria: Criteria to use to select a particular matrix.
        response_filter
        response_group: Element containing the response.
        response_results
        response_data: Element containing the compensation matrix data.
        version
    """

    class Meta:
        name = "Get_Compensation_Matrices_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[CompensationMatrixRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: list[CompensationMatrixRequestCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: list[CompensationMatrixResponseGroupType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[CompensationMatrixResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationScorecardResultsResponseType:
    """Contains the response details to retrieve one or more scorecard results."""

    class Meta:
        name = "Get_Compensation_Scorecard_Results_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationScorecardResultRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationScorecardResultRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationScorecardResultResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationScorecardResultResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationScorecardsResponse(GetCompensationScorecardsResponseType):
    class Meta:
        name = "Get_Compensation_Scorecards_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationSurveyJobDetailsResponse(GetCompensationSurveyJobDetailsResponseType):
    class Meta:
        name = "Get_Compensation_Survey_Job_Details_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetEnhancedSeveranceMatricesResponseType:
    """
    The response of the Get Enhanced Severance Matrices web service.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_group
        response_results
        response_data: The response for the Get Enhanced Severance Matrix web service.
        version
    """

    class Meta:
        name = "Get_Enhanced_Severance_Matrices_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EnhancedSeveranceMatrixRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EnhancedSeveranceMatrixRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[EnhancedSeveranceMatrixResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[EnhancedSeveranceMatrixResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFuturePaymentPlanAssignmentsResponse(GetFuturePaymentPlanAssignmentsResponseType):
    class Meta:
        name = "Get_Future_Payment_Plan_Assignments_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetLocalityPayAreasResponse(GetLocalityPayAreasResponseType):
    class Meta:
        name = "Get_Locality_Pay_Areas_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetOneTimePaymentPlansResponseType:
    """Response element containing instances of One-Time Payment Plan and their associated data."""

    class Meta:
        name = "Get_One-Time_Payment_Plans_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[OneTimePaymentPlanRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[OneTimePaymentPlanRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[OneTimePaymentPlanResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[OneTimePaymentPlanResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPeriodActivityRateMatricesResponseType:
    """Period Activity Rate Matrices response."""

    class Meta:
        name = "Get_Period_Activity_Rate_Matrices_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[PeriodActivityRateMatrixRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[PeriodActivityRateMatrixRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[PeriodActivityRateMatrixResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPreviousSystemCompensationHistoryResponseType:
    """Response element containing the instances of workers and their previous system compensation
    history."""

    class Meta:
        name = "Get_Previous_System_Compensation_History_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[WorkerRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: list[WorkerResponseGroupForReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[PreviousSystemCompensationHistoryResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStockParticipationRateTablesResponse(GetStockParticipationRateTablesResponseType):
    class Meta:
        name = "Get_Stock_Participation_Rate_Tables_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportCompensationBenchmarkCycleRequestType:
    """
    Request containing Benchmark Cycle and Benchmark Data to be updated.

    Attributes:
        benchmark_cycle_reference: Reference ID for compensation benchmark cycle.
        benchmark_cycle_data
        version
    """

    class Meta:
        name = "Import_Compensation_Benchmark_Cycle_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_cycle_reference: Optional[CompensationBenchmarkCycleObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Cycle_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benchmark_cycle_data: Optional[CompensationBenchmarkCycleHvDataType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Cycle_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportRequestCompensationChangeRequestType:
    """Root Import Request Compensation Change Request Element."""

    class Meta:
        name = "Import_Request_Compensation_Change_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_compensation_request_information_hv: list[RequestCompensationChangeRequestHvtype] = (
        field(
            default_factory=list,
            metadata={
                "name": "Request_Compensation_Request_Information_HV",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagePeriodActivityPayAssignmentsRequest(ManagePeriodActivityPayAssignmentsRequestType):
    class Meta:
        name = "Manage_Period_Activity_Pay_Assignments_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ManagePeriodActivityPayAssignmentsResponse(ManagePeriodActivityPayAssignmentsResponseType):
    class Meta:
        name = "Manage_Period_Activity_Pay_Assignments_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutBenchmarkJobRequest(PutBenchmarkJobRequestType):
    class Meta:
        name = "Put_Benchmark_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationEligibilityRuleRequest(PutCompensationEligibilityRuleRequestType):
    class Meta:
        name = "Put_Compensation_Eligibility_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestCompensationChangeRequest(RequestCompensationChangeRequestType):
    class Meta:
        name = "Request_Compensation_Change_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestDefaultCompensationRequest(RequestDefaultCompensationRequestType):
    class Meta:
        name = "Request_Default_Compensation_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestRequisitionCompensationChangeRequest(RequestRequisitionCompensationChangeRequestType):
    class Meta:
        name = "Request_Requisition_Compensation_Change_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RetrieveSeveranceWorksheetsResponse(RetrieveSeveranceWorksheetsResponseType):
    class Meta:
        name = "Retrieve_Severance_Worksheets_Response"
        namespace = "urn:com.workday/bsvc"


class AddStockGrant:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = AddStockGrantInput
    output = AddStockGrantOutput


@dataclass
class GetCompensationChangeTemplatesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationChangeTemplatesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_change_templates_response: Optional[
            GetCompensationChangeTemplatesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Change_Templates_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationChangeTemplatesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationChangeTemplatesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationScorecardsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationScorecardsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_scorecards_response: Optional[GetCompensationScorecardsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Scorecards_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationScorecardsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationScorecardsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationSurveyJobDetailsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationSurveyJobDetailsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_survey_job_details_response: Optional[
            GetCompensationSurveyJobDetailsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Survey_Job_Details_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationSurveyJobDetailsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationSurveyJobDetailsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetConfigurableCompensationBasis:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetConfigurableCompensationBasisInput
    output = GetConfigurableCompensationBasisOutput


class GetEligibleEarnings:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetEligibleEarningsInput
    output = GetEligibleEarningsOutput


@dataclass
class GetFuturePaymentPlanAssignmentsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetFuturePaymentPlanAssignmentsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_future_payment_plan_assignments_response: Optional[
            GetFuturePaymentPlanAssignmentsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Future_Payment_Plan_Assignments_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetFuturePaymentPlanAssignmentsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetFuturePaymentPlanAssignmentsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetLocalityPayAreasOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetLocalityPayAreasOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_locality_pay_areas_response: Optional[GetLocalityPayAreasResponse] = field(
            default=None,
            metadata={
                "name": "Get_Locality_Pay_Areas_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetLocalityPayAreasOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetLocalityPayAreasOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetPeriodActivityTasks:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetPeriodActivityTasksInput
    output = GetPeriodActivityTasksOutput


@dataclass
class GetStockParticipationRateTablesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetStockParticipationRateTablesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_stock_participation_rate_tables_response: Optional[
            GetStockParticipationRateTablesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Stock_Participation_Rate_Tables_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetStockParticipationRateTablesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetStockParticipationRateTablesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class ImportCompensationSurveyJobDetails:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportCompensationSurveyJobDetailsInput
    output = ImportCompensationSurveyJobDetailsOutput


class ImportCompensationSurveyJobResults:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportCompensationSurveyJobResultsInput
    output = ImportCompensationSurveyJobResultsOutput


class ImportRequestOneTimePayment:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportRequestOneTimePaymentInput
    output = ImportRequestOneTimePaymentOutput


@dataclass
class ManagePeriodActivityPayAssignmentsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ManagePeriodActivityPayAssignmentsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ManagePeriodActivityPayAssignmentsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        manage_period_activity_pay_assignments_request: Optional[
            ManagePeriodActivityPayAssignmentsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Manage_Period_Activity_Pay_Assignments_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class ManagePeriodActivityPayAssignmentsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ManagePeriodActivityPayAssignmentsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        manage_period_activity_pay_assignments_response: Optional[
            ManagePeriodActivityPayAssignmentsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Manage_Period_Activity_Pay_Assignments_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["ManagePeriodActivityPayAssignmentsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["ManagePeriodActivityPayAssignmentsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class PutBenchmarkJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutBenchmarkJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutBenchmarkJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_benchmark_job_request: Optional[PutBenchmarkJobRequest] = field(
            default=None,
            metadata={
                "name": "Put_Benchmark_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutCompensationBenchmarkData:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationBenchmarkDataInput
    output = PutCompensationBenchmarkDataOutput


@dataclass
class PutCompensationEligibilityRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationEligibilityRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationEligibilityRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_eligibility_rule_request: Optional[
            PutCompensationEligibilityRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Eligibility_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutCompensationGradeHierarchy:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationGradeHierarchyInput
    output = PutCompensationGradeHierarchyOutput


class PutCompensationMatrix:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationMatrixInput
    output = PutCompensationMatrixOutput


class PutCompensationScorecardResult:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationScorecardResultInput
    output = PutCompensationScorecardResultOutput


class PutEnhancedSeveranceMatrix:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutEnhancedSeveranceMatrixInput
    output = PutEnhancedSeveranceMatrixOutput


class PutOneTimePaymentPlan:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutOneTimePaymentPlanInput
    output = PutOneTimePaymentPlanOutput


class PutPeriodActivityRateMatrix:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutPeriodActivityRateMatrixInput
    output = PutPeriodActivityRateMatrixOutput


class PutPreviousSystemCompensationHistory:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutPreviousSystemCompensationHistoryInput
    output = PutPreviousSystemCompensationHistoryOutput


@dataclass
class RequestCompensationChangeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestCompensationChangeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RequestCompensationChangeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_compensation_change_request: Optional[RequestCompensationChangeRequest] = field(
            default=None,
            metadata={
                "name": "Request_Compensation_Change_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RequestDefaultCompensationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestDefaultCompensationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RequestDefaultCompensationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_default_compensation_request: Optional[RequestDefaultCompensationRequest] = field(
            default=None,
            metadata={
                "name": "Request_Default_Compensation_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RequestRequisitionCompensationChangeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RequestRequisitionCompensationChangeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["RequestRequisitionCompensationChangeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        request_requisition_compensation_change_request: Optional[
            RequestRequisitionCompensationChangeRequest
        ] = field(
            default=None,
            metadata={
                "name": "Request_Requisition_Compensation_Change_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class RetrieveSeveranceWorksheetOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["RetrieveSeveranceWorksheetOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        retrieve_severance_worksheets_response: Optional[RetrieveSeveranceWorksheetsResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Retrieve_Severance_Worksheets_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["RetrieveSeveranceWorksheetOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["RetrieveSeveranceWorksheetOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class CompensationBenchmarkConfigurationHvDataType:
    """
    Calculated Compensation Benchmark Cycle (HV) Data.

    Attributes:
        weight_and_adjustment_data: Benchmark Weight and Adjustment Data for Calculated Cycle
        aging_data: Benchmark Aging Configuration Data for Calculated Cycle
    """

    class Meta:
        name = "Compensation_Benchmark_Configuration__HV__DataType"
        target_namespace = "urn:com.workday/bsvc"

    weight_and_adjustment_data: Optional[CompensationBenchmarkWeightAndAdjustmentHvDataType] = (
        field(
            default=None,
            metadata={
                "name": "Weight_and_Adjustment_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    aging_data: Optional[CompensationBenchmarkAgingHvDataType] = field(
        default=None,
        metadata={
            "name": "Aging_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeType:
    """
    Contains a compensation grade and its associated data.

    Attributes:
        compensation_grade_reference: Compensation Grade Reference
        compensation_grade_data: Compensation Grade Data
    """

    class Meta:
        name = "Compensation_GradeType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_data: Optional[CompensationGradeDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanType:
    """
    An instance of a compensation plan and associated data.

    Attributes:
        compensation_plan_reference: Compensation Plan Reference
        compensation_plan_data: Compensation Plan Data
    """

    class Meta:
        name = "Compensation_PlanType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[CompensationAssignablePlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_plan_data: Optional[CompensationPlanDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationSurveyWithMatchesType:
    """
    Compensation survey element.

    Attributes:
        compensation_survey_reference: The instance of compensation survey that the data will be
            applied to.
        compensation_survey_job_matches_data: Element to specify the data for survey to put/update.
    """

    class Meta:
        name = "Compensation_Survey_With_MatchesType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: Optional[CompensationSurveyObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_survey_job_matches_data: Optional[CompensationSurveyWithMatchesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Job_Matches_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetBenchmarkJobsResponseType:
    """
    Get Benchmark Jobs Response.

    Attributes:
        request_references: Benchmark Job Request References
        request_criteria: Benchmark Job Request Criteria
        response_filter: Response Filter
        response_group: Benchmark Job Response Group
        response_results: Response Results
        response_data: Benchmark Job Response Data
        version
    """

    class Meta:
        name = "Get_Benchmark_Jobs_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[BenchmarkJobRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[BenchmarkJobRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[BenchmarkJobResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[BenchmarkJobResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationEligibilityRulesResponseType:
    """
    Get Compensation Eligibility Rules Response element.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_results
        response_data: Compensation Eligibility Rule Response Data
        version
    """

    class Meta:
        name = "Get_Compensation_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationEligibilityRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationGradeHierarchyResponse(GetCompensationGradeHierarchyResponseType):
    class Meta:
        name = "Get_Compensation_Grade_Hierarchy_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationMatricesResponse(GetCompensationMatricesResponseType):
    class Meta:
        name = "Get_Compensation_Matrices_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationScorecardResultsResponse(GetCompensationScorecardResultsResponseType):
    class Meta:
        name = "Get_Compensation_Scorecard_Results_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetEnhancedSeveranceMatricesResponse(GetEnhancedSeveranceMatricesResponseType):
    class Meta:
        name = "Get_Enhanced_Severance_Matrices_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetOneTimePaymentPlansResponse(GetOneTimePaymentPlansResponseType):
    class Meta:
        name = "Get_One-Time_Payment_Plans_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPeriodActivityRateMatricesResponse(GetPeriodActivityRateMatricesResponseType):
    class Meta:
        name = "Get_Period_Activity_Rate_Matrices_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPreviousSystemCompensationHistoryResponse(
    GetPreviousSystemCompensationHistoryResponseType
):
    class Meta:
        name = "Get_Previous_System_Compensation_History_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportCompensationBenchmarkCycleRequest(ImportCompensationBenchmarkCycleRequestType):
    class Meta:
        name = "Import_Compensation_Benchmark_Cycle_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportRequestCompensationChangeRequest(ImportRequestCompensationChangeRequestType):
    class Meta:
        name = "Import_Request_Compensation_Change_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationGradeRequestType:
    """
    This web service operation is designed to load compensation grades and the associated
    compensation grade profiles.

    A complete set of compensation grade profiles should be passed in
    with the compensation grade.  Any profiles not found in the set will
    be deleted, new profiles will be added, and the existing profiles
    will be updated.

    Attributes:
        compensation_grade_reference: Compensation Grade Reference
        compensation_grade_data: Compensation Grade Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Compensation_Grade_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_data: Optional[CompensationGradeDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationPlanRequestType:
    """
    Request element to put Compensation Plan (Bonus, Merit, Allowance, Future Payment, Commission,
    and Base Pay Plans).

    Attributes:
        compensation_plan_reference: Compensation Plan Reference
        compensation_plan_data: Compensation Plan Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Compensation_Plan_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[CompensationAssignablePlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_plan_data: Optional[CompensationPlanDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationSurveyJobMatchesRequestType:
    """
    Request element for Put Compensation Survey Job Matches web service.

    Attributes:
        compensation_survey_reference: Compensation Survey Reference
        compensation_survey_job_matches_data
        version
    """

    class Meta:
        name = "Put_Compensation_Survey_Job_Matches_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_reference: Optional[CompensationSurveyObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_survey_job_matches_data: Optional[CompensationSurveyWithMatchesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Survey_Job_Matches_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


class GetCompensationChangeTemplates:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationChangeTemplatesInput
    output = GetCompensationChangeTemplatesOutput


@dataclass
class GetCompensationGradeHierarchyOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationGradeHierarchyOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_grade_hierarchy_response: Optional[
            GetCompensationGradeHierarchyResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Grade_Hierarchy_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationGradeHierarchyOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationGradeHierarchyOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationMatricesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationMatricesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_matrices_response: Optional[GetCompensationMatricesResponse] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Matrices_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationMatricesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationMatricesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationScorecardResultsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationScorecardResultsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_scorecard_results_response: Optional[
            GetCompensationScorecardResultsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Scorecard_Results_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationScorecardResultsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationScorecardResultsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetCompensationScorecards:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationScorecardsInput
    output = GetCompensationScorecardsOutput


class GetCompensationSurveyJobDetails:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationSurveyJobDetailsInput
    output = GetCompensationSurveyJobDetailsOutput


@dataclass
class GetEnhancedSeveranceMatricesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetEnhancedSeveranceMatricesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_enhanced_severance_matrices_response: Optional[GetEnhancedSeveranceMatricesResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Enhanced_Severance_Matrices_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["GetEnhancedSeveranceMatricesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetEnhancedSeveranceMatricesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetFuturePaymentPlanAssignments:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetFuturePaymentPlanAssignmentsInput
    output = GetFuturePaymentPlanAssignmentsOutput


class GetLocalityPayAreas:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetLocalityPayAreasInput
    output = GetLocalityPayAreasOutput


@dataclass
class GetOneTimePaymentPlansOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetOneTimePaymentPlansOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_one_time_payment_plans_response: Optional[GetOneTimePaymentPlansResponse] = field(
            default=None,
            metadata={
                "name": "Get_One-Time_Payment_Plans_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetOneTimePaymentPlansOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetOneTimePaymentPlansOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetPeriodActivityRateMatricesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetPeriodActivityRateMatricesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_period_activity_rate_matrices_response: Optional[
            GetPeriodActivityRateMatricesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Period_Activity_Rate_Matrices_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetPeriodActivityRateMatricesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetPeriodActivityRateMatricesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetPreviousSystemCompensationHistoryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetPreviousSystemCompensationHistoryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_previous_system_compensation_history_response: Optional[
            GetPreviousSystemCompensationHistoryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Previous_System_Compensation_History_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetPreviousSystemCompensationHistoryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetPreviousSystemCompensationHistoryOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetStockParticipationRateTables:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetStockParticipationRateTablesInput
    output = GetStockParticipationRateTablesOutput


@dataclass
class ImportCompensationBenchmarkDataInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationBenchmarkDataInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportCompensationBenchmarkDataInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_compensation_benchmark_cycle_request: Optional[
            ImportCompensationBenchmarkCycleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Compensation_Benchmark_Cycle_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class ImportRequestCompensationChangeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportRequestCompensationChangeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportRequestCompensationChangeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_request_compensation_change_request: Optional[
            ImportRequestCompensationChangeRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Request_Compensation_Change_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class ManagePeriodActivityPayAssignments:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ManagePeriodActivityPayAssignmentsInput
    output = ManagePeriodActivityPayAssignmentsOutput


class PutBenchmarkJob:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutBenchmarkJobInput
    output = PutBenchmarkJobOutput


class PutCompensationEligibilityRule:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationEligibilityRuleInput
    output = PutCompensationEligibilityRuleOutput


class RequestCompensationChange:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RequestCompensationChangeInput
    output = RequestCompensationChangeOutput


class RequestDefaultCompensation:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RequestDefaultCompensationInput
    output = RequestDefaultCompensationOutput


class RequestRequisitionCompensationChange:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RequestRequisitionCompensationChangeInput
    output = RequestRequisitionCompensationChangeOutput


class RetrieveSeveranceWorksheet:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = RetrieveSeveranceWorksheetInput
    output = RetrieveSeveranceWorksheetOutput


@dataclass
class CompensationGradeResponseDataType:
    """
    Contains compensation grade information based on Request References or Request Criteria.

    Attributes:
        compensation_grade: Compensation Grade
    """

    class Meta:
        name = "Compensation_Grade_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade: list[CompensationGradeType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Grade",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanResponseDataType:
    """
    Response element containing instances of compensation plans and the associated data.

    Attributes:
        compensation_plan: Compensation Plan
    """

    class Meta:
        name = "Compensation_Plan_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan: list[CompensationPlanType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Plan",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CompensationSurveyJobMatchesResponseDataType:
    """
    Response data element for Get Compensation Survey Job Matches web service.

    Attributes:
        compensation_survey_job_matches: Compensation survey element.
    """

    class Meta:
        name = "Compensation_Survey_Job_Matches_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_survey_job_matches: list[CompensationSurveyWithMatchesType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Survey_Job_Matches",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetBenchmarkJobsResponse(GetBenchmarkJobsResponseType):
    class Meta:
        name = "Get_Benchmark_Jobs_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationEligibilityRulesResponse(GetCompensationEligibilityRulesResponseType):
    class Meta:
        name = "Get_Compensation_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportCompensationBenchmarkConfigurationRequestType:
    """
    Import Calculated Compensation Benchmark Cycle Request Element.

    Attributes:
        benchmark_cycle_reference: Reference ID for compensation benchmark cycle.
        benchmark_cycle_header: Header Data for New or Existing Cycle
        compensation_benchmark_configuration_data: Configuration Element for Import Compensation
            Benchmark Web Service
        version
    """

    class Meta:
        name = "Import_Compensation_Benchmark_Configuration_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    benchmark_cycle_reference: Optional[CompensationBenchmarkCycleObjectType] = field(
        default=None,
        metadata={
            "name": "Benchmark_Cycle_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benchmark_cycle_header: list[CompensationBenchmarkCycleHeaderDataType] = field(
        default_factory=list,
        metadata={
            "name": "Benchmark_Cycle_Header",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_benchmark_configuration_data: list[
        CompensationBenchmarkConfigurationHvDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Benchmark_Configuration_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCompensationGradeRequest(PutCompensationGradeRequestType):
    class Meta:
        name = "Put_Compensation_Grade_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationPlanRequest(PutCompensationPlanRequestType):
    class Meta:
        name = "Put_Compensation_Plan_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCompensationSurveyJobMatchesRequest(PutCompensationSurveyJobMatchesRequestType):
    class Meta:
        name = "Put_Compensation_Survey_Job_Matches_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetBenchmarkJobsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetBenchmarkJobsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_benchmark_jobs_response: Optional[GetBenchmarkJobsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Benchmark_Jobs_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetBenchmarkJobsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetBenchmarkJobsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_eligibility_rules_response: Optional[
            GetCompensationEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationEligibilityRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationEligibilityRulesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationEligibilityRulesWithoutDependenciesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationEligibilityRulesWithoutDependenciesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_eligibility_rules_response: Optional[
            GetCompensationEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationEligibilityRulesWithoutDependenciesOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "GetCompensationEligibilityRulesWithoutDependenciesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class GetCompensationGradeHierarchy:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationGradeHierarchyInput
    output = GetCompensationGradeHierarchyOutput


class GetCompensationMatrices:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationMatricesInput
    output = GetCompensationMatricesOutput


class GetCompensationScorecardResults:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationScorecardResultsInput
    output = GetCompensationScorecardResultsOutput


class GetEnhancedSeveranceMatrices:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetEnhancedSeveranceMatricesInput
    output = GetEnhancedSeveranceMatricesOutput


class GetOneTimePaymentPlans:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetOneTimePaymentPlansInput
    output = GetOneTimePaymentPlansOutput


class GetPeriodActivityRateMatrices:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetPeriodActivityRateMatricesInput
    output = GetPeriodActivityRateMatricesOutput


class GetPreviousSystemCompensationHistory:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetPreviousSystemCompensationHistoryInput
    output = GetPreviousSystemCompensationHistoryOutput


class ImportCompensationBenchmarkData:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportCompensationBenchmarkDataInput
    output = ImportCompensationBenchmarkDataOutput


class ImportRequestCompensationChange:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportRequestCompensationChangeInput
    output = ImportRequestCompensationChangeOutput


@dataclass
class PutCompensationGradeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationGradeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationGradeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_grade_request: Optional[PutCompensationGradeRequest] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Grade_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationPlansInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationPlansInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationPlansInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_plan_request: Optional[PutCompensationPlanRequest] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Plan_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class PutCompensationSurveyJobMatchesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["PutCompensationSurveyJobMatchesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["PutCompensationSurveyJobMatchesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_compensation_survey_job_matches_request: Optional[
            PutCompensationSurveyJobMatchesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Compensation_Survey_Job_Matches_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class GetCompensationGradesResponseType:
    """
    Response element containing instances of compensation grades and their associated data.

    Attributes:
        request_references: Request References
        response_filter: Response Filter
        response_group: Response Results
        response_results: Response Results
        response_data: Response Data
        version
    """

    class Meta:
        name = "Get_Compensation_Grades_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[CompensationGradeRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: list[CompensationGradeResponseGroupType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[CompensationGradeResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationPlansResponseType:
    """
    Response element containing instances of compensation plans and the associated data.

    Attributes:
        request_references: Request References
        request_criteria: Request Criteria
        response_filter: Response Filter
        response_group: Response Group
        response_results: Response Results
        response_data: Response Data
        version
    """

    class Meta:
        name = "Get_Compensation_Plans_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationPlanRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CompensationPlanRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationPlanResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationPlanResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCompensationSurveyJobMatchesResponseType:
    """
    Response element for Get Compensation Survey Job Matches web service.

    Attributes:
        request_references: Compensation survey reference element.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Allows grouping results for Get Compensation Survey Job Matches web service.
        response_results: The "Response_Results" element contains summary information about the data
            that has been returned from your request including "Total_Results", "Total_Pages", and
            the current "Page" returned.
        response_data: Response data element for Get Compensation Survey Job Matches web service.
        version
    """

    class Meta:
        name = "Get_Compensation_Survey_Job_Matches_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CompensationSurveyJobsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CompensationSurveyJobMatchesResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CompensationSurveyJobMatchesResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportCompensationBenchmarkConfigurationRequest(
    ImportCompensationBenchmarkConfigurationRequestType
):
    class Meta:
        name = "Import_Compensation_Benchmark_Configuration_Request"
        namespace = "urn:com.workday/bsvc"


class GetBenchmarkJobs:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetBenchmarkJobsInput
    output = GetBenchmarkJobsOutput


class GetCompensationEligibilityRules:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationEligibilityRulesInput
    output = GetCompensationEligibilityRulesOutput


class GetCompensationEligibilityRulesWithoutDependencies:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationEligibilityRulesWithoutDependenciesInput
    output = GetCompensationEligibilityRulesWithoutDependenciesOutput


@dataclass
class ImportCompensationBenchmarkConfigurationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["ImportCompensationBenchmarkConfigurationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["ImportCompensationBenchmarkConfigurationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_compensation_benchmark_configuration_request: Optional[
            ImportCompensationBenchmarkConfigurationRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Compensation_Benchmark_Configuration_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class PutCompensationGrade:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationGradeInput
    output = PutCompensationGradeOutput


class PutCompensationPlans:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationPlansInput
    output = PutCompensationPlansOutput


class PutCompensationSurveyJobMatches:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = PutCompensationSurveyJobMatchesInput
    output = PutCompensationSurveyJobMatchesOutput


@dataclass
class GetCompensationGradesResponse(GetCompensationGradesResponseType):
    class Meta:
        name = "Get_Compensation_Grades_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationPlansResponse(GetCompensationPlansResponseType):
    class Meta:
        name = "Get_Compensation_Plans_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationSurveyJobMatchesResponse(GetCompensationSurveyJobMatchesResponseType):
    class Meta:
        name = "Get_Compensation_Survey_Job_Matches_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCompensationGradesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationGradesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_grades_response: Optional[GetCompensationGradesResponse] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Grades_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationGradesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationGradesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationPlansOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationPlansOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_plans_response: Optional[GetCompensationPlansResponse] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Plans_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationPlansOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationPlansOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class GetCompensationSurveyJobMatchesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Compensation"

    body: Optional["GetCompensationSurveyJobMatchesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_compensation_survey_job_matches_response: Optional[
            GetCompensationSurveyJobMatchesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Compensation_Survey_Job_Matches_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["GetCompensationSurveyJobMatchesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["GetCompensationSurveyJobMatchesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class ImportCompensationBenchmarkConfiguration:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = ImportCompensationBenchmarkConfigurationInput
    output = ImportCompensationBenchmarkConfigurationOutput


class GetCompensationGrades:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationGradesInput
    output = GetCompensationGradesOutput


class GetCompensationPlans:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationPlansInput
    output = GetCompensationPlansOutput


class GetCompensationSurveyJobMatches:
    style = "document"
    location = "Compensation"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = GetCompensationSurveyJobMatchesInput
    output = GetCompensationSurveyJobMatchesOutput
