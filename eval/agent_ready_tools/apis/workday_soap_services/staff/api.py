from dataclasses import dataclass, field
from decimal import Decimal
from typing import Optional

from xsdata.models.datatype import XmlDate, XmlDateTime, XmlTime


@dataclass
class AboriginalIndigenousDetailsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Aboriginal_Indigenous_DetailsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AboriginalIndigenousIdentificationSelectionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Aboriginal_Indigenous_Identification_SelectionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicAffiliateObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_AffiliateObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicAppointeeEnabledObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Appointee_EnabledObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicAppointmentIdentifierObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Appointment_IdentifierObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicAppointmentTrackObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Appointment_TrackObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicCurricularDivisionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Curricular_DivisionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicPayPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Pay_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicPaySetupDataType:
    """
    Wrapper element that contains position's academic pay setup related data.

    Attributes:
        annual_work_period_work_percent_of_year: Work period percent of year from the annual work
            period assigned to position.
        annual_work_period_start_date: Start date for annual work period assigned to the position
            based on the effective moment from the request.
        annual_work_period_end_date: End date for annual work period assigned to the position based
            on the effective moment from the request.
        disbursement_plan_period_start_date: Start date for disbursement plan period assigned to the
            position based on the effective moment from the request.
        disbursement_plan_period_end_date: End date for disbursement plan period assigned to the
            position based on the effective moment from the request.
    """

    class Meta:
        name = "Academic_Pay_Setup_DataType"
        target_namespace = "urn:com.workday/bsvc"

    annual_work_period_work_percent_of_year: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Annual_Work_Period_Work_Percent_of_Year",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 9,
            "fraction_digits": 6,
        },
    )
    annual_work_period_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Annual_Work_Period_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annual_work_period_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Annual_Work_Period_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disbursement_plan_period_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disbursement_Plan_Period_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disbursement_plan_period_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disbursement_Plan_Period_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicPeriodTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Period_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicRankObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_RankObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicTenureStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Tenure_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicTrackTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_Track_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AcademicUnitObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Academic_UnitObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AchievableLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Achievable_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ActionEventObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Action_EventObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AdditionalBenefitsCoverageTargetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Additional_Benefits_Coverage_TargetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AdditionalNameTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Additional_Name_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AddressLineInformationDataType:
    """
    The address line for the address.

    This typically contains Street name, street number, apartment, suite
    number.

    Attributes:
        value
        descriptor: The descriptor is an optional serialized attribute that shows the text Override
            Label (such as Apartment Number or Building Number)  that helps describe the usage of
            the type (such as ADDRESS_LINE_5 and ADDRESS_LINE_6) for each country.
        type_value: Enter the address line type, such as ADDRESS_LINE_1, or ADDRESS_LINE_2.
    """

    class Meta:
        name = "Address_Line_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddressReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Address_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AgencyDataDataType:
    """
    Container element for the Agency Data Data.

    Attributes:
        agency_use: Agency Use text field
        agency_data_1: Agency 1 text field
        agency_data_2: Agency 2 text field
        agency_data_3: Agency 3 text field
        agency_data_4: Agency 4 text field
        agency_data_5: Agency Use 5 field
    """

    class Meta:
        name = "Agency_Data_DataType"
        target_namespace = "urn:com.workday/bsvc"

    agency_use: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agency_Use",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agency_data_1: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agency_Data_1",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agency_data_2: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agency_Data_2",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agency_data_3: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agency_Data_3",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agency_data_4: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agency_Data_4",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agency_data_5: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agency_Data_5",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowanceUnitPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Allowance_Unit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowanceValuePlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Allowance_Value_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AllowedForTaxDeductionDataType:
    """
    If the dependent is allowed for tax deduction.

    Attributes:
        effective_date: The Effective date for if dependent is allowed for tax deduction
        allowed_for_tax_deduction: Boolean attribute identifying if the dependent is allowed for tax
            deduction
    """

    class Meta:
        name = "Allowed_for_Tax_Deduction_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowed_for_tax_deduction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allowed_for_Tax_Deduction",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AndOrOperatorsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "And_Or_OperatorsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AnnualContributionDataType:
    """
    The annual contribution for the spending account election.

    Attributes:
        annual_contribution_amount: The annual contribution amount for the spending account
            election.
        prior_contribution_amount: The prior annual contribution amount if any was previously made.
        remaining_periods: The remaining pay periods after the prior contribution amount.
    """

    class Meta:
        name = "Annual_Contribution_DataType"
        target_namespace = "urn:com.workday/bsvc"

    annual_contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Annual_Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    prior_contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Prior_Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    remaining_periods: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Remaining_Periods",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 0,
        },
    )


@dataclass
class AnnuitantIndicatorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Annuitant_IndicatorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ApplicantObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "ApplicantObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ApplicantResponseGroupType:
    """
    Wrapper element containing the list of applicant information to be included in the response.

    Attributes:
        include_reference: Indicates if the Reference element for the applicant is included in the
            response.
        include_personal_information: Indicates if the Personal Data element is included in the
            response.
        show_all_personal_information: Show All Personal Information by Country
        include_recruiting_information: Indicates if the Recruiting Data element is included in the
            response.
        include_qualification_profile: Indicates if the Qualification Data element (Accomplishment,
            External Employment, Competency, Certification, Training, Award,  Organization
            Membership, Education,, Work Experience ) is included in the response.
        include_resume: Indicates if the Resume Data element is included in the response.
        include_background_check: Indicates if the Background Check Data element is included in the
            response.
        include_external_integration_id_data: A flag to indicate if external integration id should
            be included.
    """

    class Meta:
        name = "Applicant_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_personal_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Personal_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    show_all_personal_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Show_All_Personal_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_recruiting_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Recruiting_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_qualification_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Qualification_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_resume: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Resume",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_background_check: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Background_Check",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_external_integration_id_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_External_Integration_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantResumeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Applicant_ResumeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ApplicantSourceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Applicant_SourceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AppointmentSpecialtyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Appointment_SpecialtyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AppointmentTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Appointment_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AssignableRoleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Assignable_RoleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AssignmentTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Assignment_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AttachmentDataWwstype:
    """
    The details of a resume (resume, name, comments).

    Attributes:
        file_id: The Reference ID for the resume.
        file: A comment about the resume.
        file_name: The name of the resume.
        comments: The resume that was attached for the applicant.
    """

    class Meta:
        name = "Attachment_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    file_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "FileName",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 255,
        },
    )
    comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AuditedAccountingWorktagObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Audited_Accounting_WorktagObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AuthenticationFaultType:
    class Meta:
        name = "Authentication_FaultType"
        target_namespace = "urn:com.workday/bsvc"

    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AuthorityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "AuthorityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AwardObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "AwardObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AwardAndActivityTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Award_and_Activity_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BackgroundCheckStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Background_Check_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BeneficiaryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "BeneficiaryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BenefitCoverageTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Benefit_Coverage_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BenefitLifeEventTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Benefit_Life_Event_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BenefitPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Benefit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BenefitProviderObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Benefit_ProviderObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BenefitProviderIdentifierTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Benefit_Provider_Identifier_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BloodTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Blood_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BonusPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Bonus_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BusinessProcessTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Business_Process_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BusinessUnitObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Business_UnitObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CobraEligibilityReasonObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "COBRA_Eligibility_ReasonObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CobraParticipantObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "COBRA_ParticipantObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CalculatedPlanInterfaceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Calculated_Plan_InterfaceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CareerPreferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Career_PreferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CertificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CertificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CertificationQualificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Certification_QualificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangeJobSubcategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Change_Job_SubcategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CitizenshipStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Citizenship_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ClassStandingDefinitionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Class_Standing_DefinitionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CollectiveAgreementObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Collective_AgreementObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CollectiveAgreementClassificationParameterObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Collective_Agreement_Classification_ParameterObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CollectiveAgreementFactorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Collective_Agreement_FactorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CollectiveAgreementFactorOptionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Collective_Agreement_Factor_OptionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CollectiveAgreementRequestCriteriaType:
    """Collective Agreement Request Criteria Element."""

    class Meta:
        name = "Collective_Agreement_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class CollectiveAgreementResponseGroupType:
    """
    Collective Agreement Response Group Element.

    Attributes:
        include_reference: Included Reference boolean element
    """

    class Meta:
        name = "Collective_Agreement_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommissionPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Commission_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommonBooleanEnumerationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Common_Boolean_EnumerationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommonYesNoObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Common_Yes_NoObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommunicationUsageBehaviorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Communication_Usage_BehaviorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommunicationUsageBehaviorTenantedObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Communication_Usage_Behavior_TenantedObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CommunicationUsageTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Communication_Usage_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompanyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CompanyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompanyInsiderTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Company_Insider_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationElementReferenceType:
    """
    Reference element representing a unique instance of Compensation Element.

    Attributes:
        compensation_element_name: Unique attribute name/description identifying a valid instance of
            Compensation Element.
    """

    class Meta:
        name = "Compensation_Element_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_GradeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeProfileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Grade_ProfileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationGradeReferenceType:
    """
    Compensation grade to assign.

    Required if you select a compensation package. Doesn't default for
    Request Compensation Change.

    Attributes:
        compensation_grade_name: Unique attribute name/description identifying a valid instance of
            Compensation Grade.
    """

    class Meta:
        name = "Compensation_Grade_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_grade_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationMatrixObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_MatrixObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPackageObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_PackageObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPackageReferenceType:
    """
    Compensation Package to assign.

    Attributes:
        compensation_package_name: Unique attribute name/description identifying a valid instance of
            Compensation Package.
    """

    class Meta:
        name = "Compensation_Package_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_package_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Package_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPayEarningObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_Pay_EarningObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationStepObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Compensation_StepObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationStepReferenceDataType:
    """
    Compensation Step within the Compensation Grade Profile.

    Attributes:
        compensation_step_name: Unique attribute name/description identifying a valid instance of
            Compensation Step.
        progression_start_date: Start date for the Compensation Step.
    """

    class Meta:
        name = "Compensation_Step_Reference_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_step_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    progression_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Progression_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CompetencyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ComponentCompletionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Component_CompletionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConditionEntryOptionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Condition_Entry_OptionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConditionRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Condition_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ConditionRuleCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Condition_Rule_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ContingentWorkerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Contingent_WorkerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ContingentWorkerTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Contingent_Worker_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CorrectContractContingentWorkerDataType:
    """
    The element containing the proposed corrections to the contract contingent worker business
    process.

    Attributes:
        event_effective_date: The new contract start date.
        conversion_position_start_date: The worker's start date for the current position. Must be
            later than the Hire Date. Use only for loading existing workers during implementation.
            Used for Manager History and Time in Position calculations.
    """

    class Meta:
        name = "Correct_Contract_Contingent_Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    event_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Event_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    conversion_position_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Conversion_Position_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CorrectHireEmployeeDataType:
    """
    The element containing the proposed corrections to the hire employee business process.

    Attributes:
        event_effective_date: The new hire start date.
        conversion_position_start_date: The worker's start date for the current position. Must be
            later than the Hire Date. Use only for loading existing workers during implementation.
            Used for Manager History and Time in Position calculations.
        conversion_job_profile_start_date: The conversion job profile start date.
    """

    class Meta:
        name = "Correct_Hire_Employee_DataType"
        target_namespace = "urn:com.workday/bsvc"

    event_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Event_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    conversion_position_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Conversion_Position_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    conversion_job_profile_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Conversion_Job_Profile_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CostCenterObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Cost_CenterObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CostingAllocationLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Costing_Allocation_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CostingIntervalUpdateKeyType:
    """
    Submit only when updating or deleting an existing Costing Allocation Interval.

    One key (Costing Override ID or Start Date) is required.

    Attributes:
        costing_override_id_update_key: The existing Costing Allocation Interval to be updated may
            be identified using either its Costing Override ID or its Start Date.
        start_date_update_key: The existing Costing Allocation Interval to be updated may be
            identified using either its Costing Override ID or its Start Date.
        delete: Select Yes (Y) to delete the existing Costing Allocation Interval identified by the
            submitted key value.
    """

    class Meta:
        name = "Costing_Interval_Update_KeyType"
        target_namespace = "urn:com.workday/bsvc"

    costing_override_id_update_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Costing_Override_ID_Update_Key",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date_update_key: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date_Update_Key",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CountryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CountryCityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Country_CityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryPredefinedPersonNameComponentValueObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Country_Predefined_Person_Name_Component_ValueObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CountryRegionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Country_RegionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CountrySubregionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Country_SubregionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CountryAndNationalityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Country_and_NationalityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CourseDefinitionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Course_DefinitionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CourseSubjectObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Course_SubjectObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CreditableServiceRequestCriteriaType:
    """Creditable Service Change Request Criteria."""

    class Meta:
        name = "Creditable_Service_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class CreditableServiceTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Creditable_Service_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CurrencyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "CurrencyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CurrencyReferenceDataType:
    """
    This element references a unique type of Currency.

    Attributes:
        currency_code: The preferred Currency for the contract pay rate.
    """

    class Meta:
        name = "Currency_Reference_DataType"
        target_namespace = "urn:com.workday/bsvc"

    currency_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Currency_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CustomIdTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Custom_ID_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CustomIdentifierReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Custom_Identifier_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CustomOrganizationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Custom_OrganizationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CybersecurityAreaObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Cybersecurity_AreaObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DateAndTimeUnitObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Date_And_Time_UnitObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DayOfTheWeekObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Day_of_the_WeekObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DegreeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "DegreeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DegreeCompletedObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Degree_CompletedObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DeliveryModeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Delivery_ModeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DependentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "DependentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DevelopmentItemObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Development_ItemObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DevelopmentItemCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Development_Item_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DevelopmentItemStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Development_Item_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DevelopmentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Development_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DifficultyToFillObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Difficulty_to_FillObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisabilityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "DisabilityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisabilityCertificationAuthorityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Disability_Certification_AuthorityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisabilityCertificationBasisObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Disability_Certification_BasisObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisabilityGradeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Disability_GradeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisabilityStatusReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Disability_Status_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisciplinaryActionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Disciplinary_ActionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DisciplinaryActionReasonObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Disciplinary_Action_ReasonObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DocumentCategoryAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Document_Category__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DrawFrequencyReferenceType:
    """
    Reference element representing a unique instance of Frequency.

    Attributes:
        frequency_name: Unique attribute name/description identifying a valid instance of Frequency.
    """

    class Meta:
        name = "Draw_Frequency_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    frequency_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Frequency_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EarningAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Earning__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EditServiceDatesEventDataType:
    """
    Wrapper element for the Edit Service Dates details.

    Attributes:
        original_hire_date: The Original Hire Date in the worker's service dates. If empty, Workday
            will use the existing date.
        continuous_service_date: Date that service calculations will use as the start of service. If
            empty, Workday will use the existing date. When rehiring workers, if you run the Hire
            Employee and Edit Service Dates EIBs concurrently, you must enter the same Continuous
            Service Date in both EIBs for each worker.
        expected_retirement_date: The Expected Retirement Date in the employee's service dates. If
            empty, Workday will use the existing date.
        retirement_eligibility_date: The Retirement Eligibility Date in the employee's service
            dates. If empty, Workday will use the existing date.
        end_employment_date: The End Employment Date for the position of fixed term or temporary
            employees. Only applies to an employee's primary position. If the value is given as the
            sub- process of a main event, it is ignored. If empty, Workday will use the existing
            date.
        seniority_date: The Seniority Date in the employee's service dates. If empty, Workday will
            use the existing date.
        severance_date: The Severance Date in the employee's service dates. If empty, Workday will
            use the existing date.
        contract_end_date: The Contract End Date for the contingent worker's position. Only applies
            to the worker's primary position. If the value is given in the main process, it is
            ignored in sub-processes. If empty, Workday will use the existing date.
        benefits_service_date: The Benefits Service Date in the employee's service dates. If empty,
            Workday will use the existing date. When rehiring workers, if you run the Hire Employee
            and Edit Service Dates EIBs concurrently, you must enter the same Benefit Service Date
            in both EIBs for each worker.
        company_service_date: The Company Service Date in the employee's service dates. If empty,
            Workday will use the existing date. When rehiring workers, if you run the Hire Employee
            and Edit Service Dates EIBs concurrently, you must enter the same Company Service Date
            in both EIBs for each worker.
        time_off_service_date: The Time Off Service Date in the worker's service dates. If empty,
            Workday will use the existing date.
        vesting_date: The Vesting Date in the employee's service dates. If empty, Workday will use
            the existing date.
        date_entered_workforce: The Date Entered Workforce in the employee's service dates. If
            empty, Workday will use the existing date.
        days_unemployed: Number of days unemployed since the employee first joined the work force.
            Used only for China.
        months_continuous_prior_employment: Number of months of continuous prior employment at the
            employee's most recent job. Used only for China.
    """

    class Meta:
        name = "Edit_Service_Dates_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    original_hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    continuous_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Continuous_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_retirement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Retirement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_eligibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Retirement_Eligibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    seniority_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Seniority_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    severance_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Severance_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefits_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Benefits_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Company_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_off_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Time_Off_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vesting_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vesting_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_entered_workforce: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Entered_Workforce",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    days_unemployed: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Days_Unemployed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    months_continuous_prior_employment: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Months_Continuous_Prior_Employment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )


@dataclass
class EducationQualificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Education_QualificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EducationalTaxonomyCodeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Educational_Taxonomy_CodeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EffectiveAndUpdatedDateTimeDataType:
    """
    Element contains effective and updated date/time data.

    Attributes:
        updated_from: Defines the earliest moment (e.g. datetime) data was entered into the Workday
            system.
        updated_through: Defines the latest moment (e.g. datetime) data was entered into the Workday
            system.
        effective_from: Defines the earliest Effective Date (e.g. As Of Date) data is marked within
            the Workday system.
        effective_through: Defines the latest Effective Date (e.g. As Of Date) data is marked within
            the Workday system.
    """

    class Meta:
        name = "Effective_And_Updated_DateTime_DataType"
        target_namespace = "urn:com.workday/bsvc"

    updated_from: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Updated_From",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    updated_through: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Updated_Through",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_from: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Effective_From",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_through: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Effective_Through",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EffectiveDatedWebServiceAdditionalDataType:
    """Web Service Additional Data."""

    class Meta:
        name = "Effective_Dated_Web_Service_Additional_DataType"
        target_namespace = "urn:com.workday/bsvc"

    any_element: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class EmailReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Email_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmergencyContactObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Emergency_ContactObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmergencyContactPriorityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Emergency_Contact_PriorityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "EmployeeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationMeritPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all values for Merit Plan Assignment data.

    Attributes:
        individual_target: Percent for Compensation Element.
        guaranteed_minimum: Guaranteed Minimum for Compensation Element.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Merit_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    individual_target: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_ContractObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContractReasonObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Contract_ReasonObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContractReviewDataType:
    """
    Details for the employee contract review.

    Attributes:
        contract_review_date: The date that the review of the employee contract automatically
            initiates. You must specify an end date for the contract to specify a Contract Review
            Date.
    """

    class Meta:
        name = "Employee_Contract_Review_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contract_review_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_Review_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractRulesTableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Contract_Rules_TableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContractStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Contract_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContractTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Contract_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContributionPercentageDataType:
    """
    This section holds the employee's election and the maximum the employee can elect when the
    benefit plan uses percentages as elections.

    Attributes:
        election_percentage: The employee's election.  This is the percent that should be taken as a
            deduction.
        contribution_percentage_maximum: The maximum amount the employee can elect.
    """

    class Meta:
        name = "Employee_Contribution_Percentage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    election_percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Election_Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    contribution_percentage_maximum: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contribution_Percentage_Maximum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )


@dataclass
class EmployeeImageDataType:
    """
    Encapsulating element containing all Employee Image data.

    Attributes:
        filename: Text attribute identifying Filename of the Attachment.
        image: File content in binary format.
    """

    class Meta:
        name = "Employee_Image_DataType"
        target_namespace = "urn:com.workday/bsvc"

    filename: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filename",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    image: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "Image",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )


@dataclass
class EmployeeProbationPeriodObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Probation_PeriodObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeProbationPeriodReasonObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Probation_Period_ReasonObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeProbationPeriodTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Probation_Period_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeReviewTemplateObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_Review_TemplateObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeTenureObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_TenureObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employee_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployerContributionPercentageDataType:
    """
    This section holds the employer contribution if the plan includes employer contributions and the
    contributions are stated in percentages.

    Attributes:
        election_percentage: The employer's contribution.
    """

    class Meta:
        name = "Employer_Contribution_Percentage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    election_percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Election_Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )


@dataclass
class EmploymentSystemObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Employment_SystemObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EndAdditionalJobSubcategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "End_Additional_Job_SubcategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EndCollectiveAgreementAssignmentDataType:
    """
    End Collective Agreement Assignment element that has the Event Effective Date.

    Attributes:
        effective_date: Effective Date
    """

    class Meta:
        name = "End_Collective_Agreement_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EnrollmentPeriodDataType:
    """
    Contains the benefit plan year information.

    Attributes:
        benefit_program_name: A reference to the benefit program.
        plan_year: The year of the plan year definition.
        begin_date: The start date of the plan year.
        end_date: The end date of the plan year.
    """

    class Meta:
        name = "Enrollment_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_program_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Benefit_Program_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    plan_year: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Plan_Year",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EstablishmentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "EstablishmentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EthnicityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "EthnicityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EthnicityDetailsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Ethnicity_DetailsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EventObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "EventObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EventAttachmentCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Event_Attachment_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EventClassificationCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Event_Classification_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EventClassificationSubcategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Event_Classification_SubcategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EventDrivenIntegrationSetupDataType:
    """
    Enable Event-Driven Integration.

    Attributes:
        enable_event_driven_integration_for_third_party_payroll: Enable Event-Driven Integration
    """

    class Meta:
        name = "Event_Driven_Integration_Setup_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enable_event_driven_integration_for_third_party_payroll: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Enable_Event_Driven_Integration_for_Third_Party_Payroll",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventTargetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Event_TargetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EvergreenJobRequisitionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Evergreen_Job_RequisitionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExceptionDataType:
    """
    Exception (Errors and Warning) associated with the transaction.

    Attributes:
        classification: Exception Classification (Error or Warning)
        message: Exception Detail
    """

    class Meta:
        name = "Exception_DataType"
        target_namespace = "urn:com.workday/bsvc"

    classification: Optional[str] = field(
        default=None,
        metadata={
            "name": "Classification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalFieldObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "External_FieldObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExternalFieldAndParameterInitializationProviderObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "External_Field_and_Parameter_Initialization_ProviderObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExternalIdtype:
    """
    External ID that uniquely identifies the integratable object within the context of the
    integration system identified by the System ID attribute.

    Attributes:
        external_id: External ID that uniquely identifies the integratable object within the context
            of the integration system identified by the System ID attribute.
        system_id: Integration system identifier, part of a two part key (including the text value
            of the ID element) that uniquely identify integratable object.
    """

    class Meta:
        name = "External_IDType"
        target_namespace = "urn:com.workday/bsvc"

    external_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "External_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    system_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "System_ID",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalPayGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "External_Pay_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalPayrollEmployeeTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "External_Payroll_Employee_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExternalPayrollEntityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "External_Payroll_EntityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ExternalUrlobjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "External_URLObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FseWorkerCategoryCriteriaObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "FSE_Worker_Category_CriteriaObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FeedbackResponseType:
    """
    Element for Feedback Comments and Questions.

    There can be multiple questions per request, thus multiple comments
    per feedback given.

    Attributes:
        feedback_question: The feedback question
        feedback_comment: The feedback comment
    """

    class Meta:
        name = "Feedback_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    feedback_question: Optional[str] = field(
        default=None,
        metadata={
            "name": "Feedback_Question",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    feedback_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Feedback_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FieldOfStudyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Field_of_StudyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FlexibleWorkArrangementSubtypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Flexible_Work_Arrangement_SubtypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ForkableConditionItemObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Forkable_Condition_ItemObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FormerWorkerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Former_WorkerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FrequencyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "FrequencyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FrequencyReferenceDataType:
    """
    Reference element representing a unique instance of Frequency.

    Attributes:
        frequency_name: Unique attribute name/description identifying a valid instance of Frequency.
    """

    class Meta:
        name = "Frequency_Reference_DataType"
        target_namespace = "urn:com.workday/bsvc"

    frequency_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Frequency_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FunctionalAreaConfigurableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Functional_Area_ConfigurableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FunctionalAreaConfigurationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Functional_Area_ConfigurationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FunctionalityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "FunctionalityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FunctionalityForStaffingTransactionsResponseGroupType:
    """
    Contains data for Functionality for Staffing Transactions Response Groups.

    Attributes:
        include_reference: Contains a reference that identifies the Response Group that controls
            whether the Functionality for Staffing Transactions Configuration Reference is included
            in the web service response.
    """

    class Meta:
        name = "Functionality_for_Staffing_Transactions_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FundObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "FundObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class FuturePaymentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Future_Payment_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GenderObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "GenderObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GenderIdentityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Gender_IdentityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GeneralEventSubcategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "General_Event_SubcategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GiftObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "GiftObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GlobalSetupDataMappingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Global_Setup_Data_MappingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GoalObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "GoalObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GovernmentIdTypeAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Government_ID_Type__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GovernmentIdentifierReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Government_Identifier_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GrantObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "GrantObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HasHealthInsuranceDataType:
    """
    If the dependent has health insurance.

    Attributes:
        effective_date: The Effective date for if dependent has health insurance
        has_health_insurance: Boolean attribute identifying if the dependent has health insurance
    """

    class Meta:
        name = "Has_Health_Insurance_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    has_health_insurance: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Has_Health_Insurance",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HeadcountOptionsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Headcount_OptionsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HeadcountRestrictionsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Headcount_RestrictionsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HealthCareClassificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Health_Care_ClassificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HealthCareCoverageTargetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Health_Care_Coverage_TargetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HierarchicAssignerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Hierarchic_AssignerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HourClockObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Hour_ClockObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class HukouTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Hukou_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class Idtype:
    """
    External ID that uniquely identifies the integratable object within the context of the
    integration system identified by the System ID attribute.

    Attributes:
        value
        system_id: Integration system identifier, part of a two part key (including the text value
            of the ID element) that uniquely identify integratable object.
    """

    class Meta:
        name = "IDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    system_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "System_ID",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstanceIdtype:
    class Meta:
        name = "Instance_IDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstantMessengerReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Instant_Messenger_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class InstantMessengerTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Instant_Messenger_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class InsuranceCoverageTargetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Insurance_Coverage_TargetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class IntegrationDocumentFieldObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Integration_Document_FieldObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class IntegrationSystemAuditedObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Integration_System__Audited_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class InternalProjectExperienceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Internal_Project_ExperienceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class InternalProjectExperienceDataType:
    """
    Wrapper element for the Internal Project Experience information.

    Attributes:
        internal_project_experience_id: Internal Project Experience ID. If no value is provided, a
            new internal project experience will be created. If a value is passed in an a
            corresponding internal project experience is not found, a new internal project
            experience will be created with the provided id.
        remove_internal_project_experience: Used for inbound operations to indicate that the
            internal project experience should be removed for the person.  Will always return false
            for outbound operations.
        internal_project: The name of the project.  Required unless the project is being removed.
        description: The project description.
        start_date: The date the project started.
        end_date: The date the project ended.
        project_leader: The project leader.  This field is free entry and is not tied in any way to
            any employee or other person in the system.
    """

    class Meta:
        name = "Internal_Project_Experience_DataType"
        target_namespace = "urn:com.workday/bsvc"

    internal_project_experience_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Internal_Project_Experience_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_internal_project_experience: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Internal_Project_Experience",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    internal_project: Optional[str] = field(
        default=None,
        metadata={
            "name": "Internal_Project",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    project_leader: Optional[str] = field(
        default=None,
        metadata={
            "name": "Project_Leader",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InvalidReferenceIdDataType:
    """
    Represents a reference ID that was submitted with data not found in Workday.

    Attributes:
        invalid_reference_id: Invalid Reference ID
        invalid_reference_id_type: Invalid Reference ID Type
    """

    class Meta:
        name = "Invalid_Reference_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    invalid_reference_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Invalid_Reference_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    invalid_reference_id_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Invalid_Reference_ID_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 128,
        },
    )


@dataclass
class JobApplicationTemplateObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Application_TemplateObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobClassificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_ClassificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobClassificationGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Classification_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobClassificationGroupReferenceDataType:
    """
    A unique identifier used to reference a Job Classification Group.

    Attributes:
        job_classification_group_name: The name of a Job Classification Group.
    """

    class Meta:
        name = "Job_Classification_Group_Reference_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_group_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Group_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobClassificationGroupResponseGroupType:
    """
    Get Job Classification Group Response Group.

    Attributes:
        include_reference: Include Reference
        include_job_classifications: A boolean attribute to indicate whether to include Job
            Classifications within a Job Classification Group in the WS response. When the boolean
            is set to 0 or false none of the Job Classifications will be returned. The default value
            is 1 or true.
        exclude_job_classification_data: If True, it returns Job Classification reference and no Job
            Classification data. If False, it returns Job Classification data and no Job
            Classification reference. By default, the boolean is set False.
    """

    class Meta:
        name = "Job_Classification_Group_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_job_classifications: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Job_Classifications",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_job_classification_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Job_Classification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_FamilyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobFamilyBaseObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Family_BaseObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobFamilyGroupResponseGroupType:
    """
    Get Job Family Group Response Group.

    Attributes:
        include_reference: Flag indicating if the reference to the Job Family Group should be
            included.  If omitted, the default is to return the references.
        include_job_profile_info_data: Flag indicating whether or not to include the basic data
            about Job Profiles that are used by the Job Families associated with the group.  Default
            is to not return this additional information.
    """

    class Meta:
        name = "Job_Family_Group_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_job_profile_info_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Job_Profile_Info_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyResponseGroupType:
    """
    Job Family Response Group.

    Attributes:
        include_reference: Flag indicating if the reference to the Job Family should be included.
            If omitted, the default is to return the references.
        include_job_profile_info_data: Flag indicating whether or not to include the basic data
            about Job Profiles that are used by the Job Families associated with the group.  Default
            is to not return this additional information.
    """

    class Meta:
        name = "Job_Family_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_job_profile_info_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Job_Profile_Info_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobHistoryCompanyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_History_CompanyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobHistoryQualificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_History_QualificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobOverlapConditionRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Overlap_Condition_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobOverlapRoutingExclusionRuleRequestCriteriaType:
    """
    Contains additional criteria for identifying specific Job Overlap Routing Exclusion Rule
    instances.

    Attributes:
        rule_description: Contains additional criteria for identifying specific Job Overlap Routing
            Exclusion Rule instances.
    """

    class Meta:
        name = "Job_Overlap_Routing_Exclusion_Rule_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    rule_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Rule_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobOverlapRoutingExclusionRuleResponseGroupType:
    """
    Defines the data to include in the response.

    By default, the response includes Job Overlap Routing Exclusion Rule
    Instances.

    Attributes:
        include_reference: If true, includes the Job Overlap Routing Exclusion Rule Reference ID.
    """

    class Meta:
        name = "Job_Overlap_Routing_Exclusion_Rule_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobProfileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_ProfileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobRequisitionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_RequisitionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobRequisitionAttachmentDataType:
    """
    Wrapper element for a signle file attachment.

    Attributes:
        file_name: Specify a file name.
        comment: Enter a comment.
        file: Add a file.
    """

    class Meta:
        name = "Job_Requisition_Attachment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )


@dataclass
class JobRequisitionRemoteTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Requisition_Remote_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobRequisitionStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Job_Requisition_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LgbtIdentificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "LGBT_IdentificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LanguageObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "LanguageObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LanguageAbilityTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Language_Ability_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LanguageProficiencyObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Language_ProficiencyObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LeaveRequestAdditionalFieldsType:
    """
    Leave Request Additional Fields.

    Attributes:
        last_date_for_which_paid: Last Date for which paid (Canada)
        expected_due_date: Expected due date
        child_s_birth_date: Child's birth date
        stillbirth_baby_deceased: Still birth or baby deceased
        date_baby_arrived_home_from_hospital: Date baby arrived home from hospital
        adoption_placement_date: Adoption placement date
        adoption_notification_date: Adoption notification date
        date_child_entered_country: Date child entered country
        multiple_child_indicator: Multiple child indicator
        number_of_babies_adopted_children: Number of babies or adopted children
        number_of_previous_births: Number of previous births
        number_of_previous_maternity_leaves: Number of previous maternity leaves
        number_of_child_dependents: Number of child dependents
        single_parent_indicator: Boolean to indicate single parent
        age_of_dependent: Age of dependent
        work_related: Work related
        stop_payment_date: Date when paid leave ends.
        social_security_disability_code: IMSS Folio Code.
        location_during_leave: Location for a worker on leave at another academic institution.
        caesarean_section_birth: Indicates Caesarean Section Birth.
        leave_percentage: Used to record the percentage of working time for which the employee is on
            leave. Used when a worker is on partial leaves.
        week_of_confinement: Used to record the date of the Sunday prior to the expected due date.
        leave_entitlement_override: Used to record the value of an override to entitlement.
        date_of_recall: Used to record date of recall used in Canada ROE report.
        child_s_date_of_death: Child's Date of Death
        child_disability_indicator: Child Disability Indicator
    """

    class Meta:
        name = "Leave_Request_Additional_FieldsType"
        target_namespace = "urn:com.workday/bsvc"

    last_date_for_which_paid: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Date_for_Which_Paid",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_due_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Due_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    child_s_birth_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Child_s_Birth_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stillbirth_baby_deceased: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Stillbirth_Baby_Deceased",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_baby_arrived_home_from_hospital: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Baby_Arrived_Home_From_Hospital",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    adoption_placement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Adoption_Placement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    adoption_notification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Adoption_Notification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_child_entered_country: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Child_Entered_Country",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    multiple_child_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Multiple_Child_Indicator",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_babies_adopted_children: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Babies_Adopted_Children",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 2,
            "fraction_digits": 0,
        },
    )
    number_of_previous_births: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Previous_Births",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 2,
            "fraction_digits": 0,
        },
    )
    number_of_previous_maternity_leaves: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Previous_Maternity_Leaves",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 2,
            "fraction_digits": 0,
        },
    )
    number_of_child_dependents: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Child_Dependents",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 2,
            "fraction_digits": 0,
        },
    )
    single_parent_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Single_Parent_Indicator",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    age_of_dependent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Age_of_Dependent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 3,
            "fraction_digits": 0,
        },
    )
    work_related: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Work_Related",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stop_payment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Stop_Payment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    social_security_disability_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Social_Security_Disability_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 8,
        },
    )
    location_during_leave: Optional[str] = field(
        default=None,
        metadata={
            "name": "Location_During_Leave",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    caesarean_section_birth: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Caesarean_Section_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Leave_Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    week_of_confinement: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Week_of_Confinement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_entitlement_override: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Leave_Entitlement_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 5,
            "fraction_digits": 0,
        },
    )
    date_of_recall: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Recall",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    child_s_date_of_death: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Child_s_Date_of_Death",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    child_disability_indicator: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Child_Disability_Indicator",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LeaveRequestEventObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Leave_Request_EventObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LeaveTypeReasonObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Leave_Type_ReasonObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LeaveOfAbsenceTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Leave_of_Absence_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LegalAuthorityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Legal_AuthorityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LicenseIdTypeAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "License_ID_Type__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LicenseIdentifierObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "License_IdentifierObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LicenseIdentifierReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "License_Identifier_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LivesWithWorkerDataType:
    """
    If the dependent lives with worker.

    Attributes:
        effective_date: The Effective date for if dependent lives with worker
        lives_with_worker: Boolean attribute identifying if the dependent lives with worker
    """

    class Meta:
        name = "Lives_With_Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    lives_with_worker: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Lives_With_Worker",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalPersonNameDetailDataType:
    """
    Contains the components of a name in local script, such as the First Name and Last Name, for
    supporting countries.

    Attributes:
        first_name: Contains First Name in local script, which is generally configured to as Given
            Name, for supporting Countries.
        middle_name: Contains Middle Name in local script for supporting Countries.
        last_name: Contains Last Name in local script, which is generally configured as Family Name,
            for supporting Countries.
        secondary_last_name: Contains Secondary Last Name in local script, which is generally
            configured as Maternal Family Name, for supporting Countries.
        first_name_2: Contains First Name in second local script, which is generally configured as
            Given Name, for supporting Countries.
        middle_name_2: Contains Middle Name in second local script for supporting Countries.
        last_name_2: Contains Last Name in second local script, which is generally configured as
            Given Name, for supporting Countries.
        secondary_last_name_2: Contains Secondary Last Name in second local script, which is
            generally configured as Maternal Family Name, for supporting Countries.
        local_name: Contains the formatted Local Name in local script as configured for the Country
        local_script: Contains the formatted Local Script Name which contains the ISO code and name.
    """

    class Meta:
        name = "Local_Person_Name_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "First_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    middle_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Middle_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Last_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    secondary_last_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Secondary_Last_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_name_2: Optional[str] = field(
        default=None,
        metadata={
            "name": "First_Name_2",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    middle_name_2: Optional[str] = field(
        default=None,
        metadata={
            "name": "Middle_Name_2",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_name_2: Optional[str] = field(
        default=None,
        metadata={
            "name": "Last_Name_2",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    secondary_last_name_2: Optional[str] = field(
        default=None,
        metadata={
            "name": "Secondary_Last_Name_2",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Local_Name",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_script: Optional[str] = field(
        default=None,
        metadata={
            "name": "Local_Script",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalSkillObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Local_SkillObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocalTerminationReasonObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Local_Termination_ReasonObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocaleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "LocaleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "LocationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LocationContextObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Location_ContextObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocationTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Location_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LossImpactObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Loss_ImpactObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MaintainJobOverlapRoutingExclusionRuleRequestCriteriaType:
    """Contains additional placeholder criteria for the Job Overlap Routing Exclusion Rule
    configuration instance."""

    class Meta:
        name = "Maintain_Job_Overlap_Routing_Exclusion_Rule_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class MaintainJobOverlapRoutingExclusionRuleResponseGroupType:
    """
    Defines the data to include in the response.

    By default, the response includes: Maintain Job Overlap Routing
    Exclusion Rules Configuration Reference, Rules Reference, and Rules
    Data.

    Attributes:
        include_reference: Specifies the Maintain Job Overlap Routing Exclusion Rules Configuration
            reference to include in the response.
    """

    class Meta:
        name = "Maintain_Job_Overlap_Routing_Exclusion_Rule_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagementLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Management_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MaritalStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Marital_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MatrixOrganizationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Matrix_OrganizationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MeritPercentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Merit_Percent_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MeritPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Merit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MilitaryDischargeTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Military_Discharge_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MilitaryRankObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Military_RankObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MilitaryServiceReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Military_Service_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MilitaryServiceTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Military_Service_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MilitaryStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Military_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MobilityChoiceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Mobility_ChoiceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NamedProfessorshipObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Named_ProfessorshipObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NationalIdTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "National_ID_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NationalIdentifierReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "National_Identifier_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NatureOfActionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Nature_of_ActionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NatureOfActionSeriesObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Nature_of_Action_SeriesObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NatureOfActionAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Nature_of_Action__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NoticePeriodTargetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Notice_Period_TargetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NoticePeriodsSetupTableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Notice_Periods_Setup_TableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NotificationCategorizableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Notification_CategorizableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OccupationDataType:
    """
    Occupation of the Dependent.

    Attributes:
        effective_date: The Effective date for Dependent's Occupation
        occupation: Text attribute describing Dependent's Occupation
    """

    class Meta:
        name = "Occupation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    occupation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Occupation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OnboardingSetupTemplateObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Onboarding_Setup_TemplateObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OneTimePaymentPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "One-Time_Payment_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "OrganizationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationGoalObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Organization_GoalObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationOwnerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Organization_OwnerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationResponseGroupType:
    """
    The response group allows for the response data to be tailored to only included elements that
    the user is looking for.

    If no response group is provided in the request, then only the
    following elements will be returned:  Reference, Organization Data,
    Hierarchy Data and if a Supervisory Organization Type the
    Supervisory Data.

    Attributes:
        include_roles_data: Indicates whether the Roles Data element is included in the response.
        include_hierarchy_data: Indicates whether the Hierarchy Data element is included in the
            response.
        include_supervisory_data: Indicates whether the Supervisory Data element is included in the
            response (ONLY APPLIES TO SUPERVISORY TYPE ORGS).
        include_staffing_restrictions_data: Indicates whether the Staffing Restrictions Data element
            is included in the response (ONLY APPLIES TO SUPERVISORY ORGS).
    """

    class Meta:
        name = "Organization_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_roles_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Roles_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_hierarchy_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Hierarchy_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_supervisory_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Supervisory_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_staffing_restrictions_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Staffing_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationSubtypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Organization_SubtypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Organization_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OtherUnitTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Other_Unit_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ParMassActionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PAR_Mass_ActionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ParMassActionDataType:
    """
    All data for this PAR Mass Action.

    Attributes:
        id: Values in this column are delivered by Workday. Updates will not be saved.
        mass_action_initiating_task: Values in this column are delivered by Workday. Updates will
            not be saved.
        select: If True is entered, PAR will be enabled on PAR Mass Action.
    """

    class Meta:
        name = "PAR_Mass_Action_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    mass_action_initiating_task: Optional[str] = field(
        default=None,
        metadata={
            "name": "Mass_Action_Initiating_Task",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    select: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Select",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ParVariableTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PAR_Variable_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ParVariableValueDataType:
    """
    Container element for the parameter values for any associated variables in the Remark, Legal
    Authority, or Nature of Action.

    Attributes:
        parameter_name: The name of the associated parameter that will be populated with a value
            from the Date Value or Text Value fields.
        parameter_text_value: Text Value to be assigned to the parameter specified by the Name field
            provided that it is of Text type
        parameter_date_value: Date Value to be assigned to the date type parameter specified by the
            Name field.
    """

    class Meta:
        name = "PAR_Variable_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    parameter_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Parameter_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_text_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Parameter_Text_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parameter_date_value: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Parameter_Date_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PassportIdTypeAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Passport_ID_Type__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PassportIdentifierReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Passport_Identifier_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayComponentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Pay_ComponentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Pay_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayRateTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Pay_Rate_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayWithWorkStudyOptionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Pay_With_Work-Study_OptionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PaymentTermsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Payment_TermsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayrollReportingCodeAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Payroll_Reporting_Code__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayrollReportingTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Payroll_Reporting_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PerformanceImprovementPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Performance_Improvement_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PerformanceReviewObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Performance_ReviewObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PeriodSalaryPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Period_Salary_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PersonPhotoDataType:
    """
    Person's Photo Information.

    Attributes:
        filename: Name of file uploaded
        file: Data of file uploaded
    """

    class Meta:
        name = "Person_Photo_DataType"
        target_namespace = "urn:com.workday/bsvc"

    filename: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filename",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 255,
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "format": "base64",
        },
    )


@dataclass
class PersonQualificationSourceCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Person_Qualification_Source_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PersonTypeCriteriaType:
    """
    Provides selection for filtering the response.

    Attributes:
        include_academic_affiliates: Include Academic Affiliates
        include_external_committee_members: Include External Committee Members
        include_external_student_records: Include External Student Records
        include_student_prospect_records: Include Student Prospect Records
        include_student_records: Include Student Records
        include_workers: Include Workers
    """

    class Meta:
        name = "Person_Type_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    include_academic_affiliates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Academic_Affiliates",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_external_committee_members: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_External_Committee_Members",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_external_student_records: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_External_Student_Records",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_student_prospect_records: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Student_Prospect_Records",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_student_records: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Student_Records",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_workers: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Workers",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PhoneDeviceTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Phone_Device_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PhoneReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Phone_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PoliticalAffiliationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Political_AffiliationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PositionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionElementObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_ElementObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionResponseGroupType:
    """
    The response group allows for the response data to be tailored to only included elements that
    the user is looking for.

    If no response group is provided in the request the only the following elements will be returned:  Reference and Position Definition Data

    Attributes:
        include_reference: Indicates if the Reference for the Position is included in the response.
        include_position_definition_data: Indicates if the details of the  Position is included in
            the response.
        include_position_restrictions_data: Indicates if the Hiring Restrictions is included in the
            response.
        include_position_restriction_working_hours_details_data: If true, the response includes
            Position Restriction Working Hours Details Data.
        include_default_compensation_data: Indicates if the Default Compensation is included in the
            response.
        include_default_position_organization_assignment_data: Indicates if the Default Position
            Organization Assignment Data is included in the response.
        include_worker_for_filled_positions_data: Indicates if the Worker for Filled Positions is
            included in the response.
        include_qualifications: Indicates if the Position's Qualifications (Competencies, Education,
            Responsibilities, etc.) are included in the response.
        include_job_requisition_data: Indicates if the Position's Open Job Requisition (if there is
            one) is included in the response.
        include_job_requisition_attachments: Indicates if the Position's Open Job Requisition
            Attachments (if they exist) are included in the response.
    """

    class Meta:
        name = "Position_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_position_definition_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Position_Definition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_position_restrictions_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Position_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_position_restriction_working_hours_details_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Position_Restriction_Working_Hours_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_default_compensation_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Default_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_default_position_organization_assignment_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Default_Position_Organization_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_worker_for_filled_positions_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Worker_For_Filled_Positions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_qualifications: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Qualifications",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_job_requisition_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Job_Requisition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_job_requisition_attachments: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Job_Requisition_Attachments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionRestrictionsObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_RestrictionsObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionSetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_SetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionTimeTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_Time_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionWorkerTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Position_Worker_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PotentialObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PotentialObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodActionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Probation_Period_ActionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodOutcomeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Probation_Period_OutcomeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodOutcomeRequestCriteriaType:
    """Probation Period Outcome Request Criteria Element."""

    class Meta:
        name = "Probation_Period_Outcome_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class ProbationPeriodOutcomesSetupTableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Probation_Period_Outcomes_Setup_TableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodRuleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Probation_Period_RuleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodRulesTableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Probation_Period_Rules_TableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProcessingFaultType:
    class Meta:
        name = "Processing_FaultType"
        target_namespace = "urn:com.workday/bsvc"

    detail_message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Detail_Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfessionalAffiliationQualificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Professional_Affiliation_QualificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProfessionalAffiliationReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Professional_Affiliation_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProfessionalAffiliationRelationshipTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Professional_Affiliation_Relationship_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProfessionalAffiliationTypeAllObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Professional_Affiliation_Type__All_ObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProficiencyRatingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Proficiency_RatingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProficiencyRatingBehaviorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Proficiency_Rating_BehaviorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProgramObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "ProgramObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PronounObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "PronounObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProvisioningGroupAssignmentForPersonDataType:
    """
    This element contains all data defining the assignment of the person to a specific provisioning
    group at the current moment.

    It does not include the assignment's history.

    Attributes:
        provisioning_group: Name of the provisioning group
        status: Latest status of the provisioning group assignment, possible values are Assigned,
            Activated, Unassigned, Disabled
        last_changed: Date/time when the status of the assignment was last changed
    """

    class Meta:
        name = "Provisioning_Group_Assignment_for_Person_DataType"
        target_namespace = "urn:com.workday/bsvc"

    provisioning_group: Optional[str] = field(
        default=None,
        metadata={
            "name": "Provisioning_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_changed: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Last_Changed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class QuestionnaireObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "QuestionnaireObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RecruitingAssessmentTestObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Recruiting_Assessment_TestObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RecruitingInstructionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Recruiting_InstructionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RegionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "RegionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RelatedPersonRelationshipObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Related_Person_RelationshipObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RelatedPersonForWorkerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Related_Person_for_WorkerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RelationalOperatorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Relational_OperatorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RelativeNameReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Relative_Name_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RelativeTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Relative_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ReligionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "ReligionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RelocationAreaObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Relocation_AreaObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RemarkObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "RemarkObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ResponseFilterType:
    """
    Parameters that let you filter the data returned in the response.

    You can filter returned data by dates and page attributes.

    Attributes:
        as_of_effective_date: Indicates the date when application data, such as benefits and
            compensation, become effective (Also referred to as the Effective Moment). If you don't
            specify a date, this date defaults to today.{+4}
        as_of_entry_date_time: The date and time the data was entered into the system. (This field
            is also referred to as the Entry Moment). If the date isn't specified, the default date
            is the current date and time.
        page: The numbered page of data Workday returns in the response. The default page is the
            first page(Page = 1). For responses that contain more than one page of data, use this
            parameter to retrieve the additional pages of data. For example, set Page = 2 to
            retrieve the second page of data. Note: If you set the page parameter, you must also
            specify the "As_Of_Entry_Date" to ensure that the result set remains the same between
            your requests.
        count: Sets the number of objects to return within each response page. Set a value between 1
            and 999. The default value is 100.
    """

    class Meta:
        name = "Response_FilterType"
        target_namespace = "urn:com.workday/bsvc"

    as_of_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "As_Of_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_entry_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "As_Of_Entry_DateTime",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    page: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Page",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    count: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 3,
            "fraction_digits": 0,
        },
    )


@dataclass
class ResponseResultsType:
    """
    The "Response_Results" element contains summary information about the data that has been
    returned from your request including "Total_Results", "Total_Pages", and the current "Page"
    returned.

    Attributes:
        total_results: The total number of results that your request returned.
        total_pages: The total number of pages requested. A page of data in a WWS has a 100 entry
            maximum.
        page_results: The number of results in the current page.
        page: The page number of the data the WWS returned for your request.
    """

    class Meta:
        name = "Response_ResultsType"
        target_namespace = "urn:com.workday/bsvc"

    total_results: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    total_pages: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Pages",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    page_results: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Page_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    page: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Page",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class ResponsibilityQualificationProfileReplacementDataType:
    """
    Replacement Element containing Responsibility Qualifications for the Job Profile.

    When updating a Job Profile, all Responsibilities for the Job
    Profile will be replaced by the data in being submitted. If no data
    is submitted, then the existing Responsibilities are not changed.

    Attributes:
        responsibility_description: The description of the Responsibility.
        required: If Y, Responsibility is required.
    """

    class Meta:
        name = "Responsibility_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    responsibility_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Responsibility_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetentionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "RetentionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RetireeOrganizationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Retiree_OrganizationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RetirementSpecialPopulationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Retirement_Special_PopulationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ReviewRatingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Review_RatingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ReviewTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Review_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RoleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "RoleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RoleAssignerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Role_AssignerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "RoleeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RoleeSelectorObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Rolee_SelectorObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SalaryPayPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Salary_Pay_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SalaryUnitPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Salary_Unit_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SchoolObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "SchoolObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SchoolTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "School_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SecurityClearanceLevelObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Security_Clearance_LevelObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SecurityGroupObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Security_GroupObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SensitivityAndRiskObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Sensitivity_and_RiskObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SexualOrientationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Sexual_OrientationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SkillObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "SkillObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SkillCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Skill_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SocialBenefitsLocalityObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Social_Benefits_LocalityObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SpecialtyChildObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Specialty_ChildObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SpecialtyParentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Specialty_ParentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SpendCategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Spend_CategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StaffObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "StaffObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StaffingDefaultingFieldConfigurationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Staffing_Defaulting_Field_ConfigurationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StaffingFieldDefaultsConditionRuleRequestCriteriaType:
    """
    Contains additional criteria for identifying specific Staffing Field Defaults Condition Rule
    instances.

    Attributes:
        rule_description: Contains the description for the Staffing Field Defaults Condition Rule.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Condition_Rule_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    rule_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Rule_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsConditionRuleResponseGroupType:
    """
    Defines the data to include in the response.

    By default, the response includes: Response.

    Attributes:
        include_reference: Specifies whether to include the Condition Rule reference ID for Staffing
            Field Defaults.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Condition_Rule_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsRequestCriteriaType:
    """Contains additional criteria for identifying specific Staffing Field Defaults instances."""

    class Meta:
        name = "Staffing_Field_Defaults_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class StaffingFieldDefaultsResponseGroupType:
    """
    Defines the data to include in the response.

    By default, the response includes: Response.

    Attributes:
        include_reference: If true, includes the instance reference in the response.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsSectionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Staffing_Field_Defaults_SectionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StaffingInterfaceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Staffing_InterfaceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockGrantTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Grant_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockPlanObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_PlanObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StockVestingScheduleObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Stock_Vesting_ScheduleObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "StudentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentAcademicStandingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Student_Academic_StandingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentCourseTagObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Student_Course_TagObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentEmploymentEligibilityEventObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Student_Employment_Eligibility_EventObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentEmploymentEligibilityEventRequestCriteriaType:
    """Additional data to be included with response."""

    class Meta:
        name = "Student_Employment_Eligibility_Event_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"


@dataclass
class StudentEmploymentEligibilityEventResponseGroupType:
    """
    Container for response behavior.

    Attributes:
        include_reference: Determines whether or not Student Employment Eligibility Reference will
            be in the Response
    """

    class Meta:
        name = "Student_Employment_Eligibility_Event_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityReasonDataType:
    """
    Reason and description of why event is ineligible.

    Attributes:
        reason_for_ineligibility: Description on why event is ineligible
        critical: Determines whether Admin/Role holder can approve an ineligible event
    """

    class Meta:
        name = "Student_Employment_Eligibility_Reason_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_for_ineligibility: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reason_for_Ineligibility",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    critical: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Critical",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleResponseGroupType:
    """
    Container for determining what is included in the Response.

    Attributes:
        include_reference: Indicates whether or not the reference will return in the Response
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSetObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_SetObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSetResponseGroupType:
    """
    Container for Student Employment Eligibility Rule Set Response Group.

    Attributes:
        include_reference: Include Reference
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Set_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentLoadStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Student_Load_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentPhotoDataType:
    """
    Element containing the photo data for the student.

    Attributes:
        filename: Text attribute identifying Filename of the Attachment.
        file: File content in binary format.
    """

    class Meta:
        name = "Student_Photo_DataType"
        target_namespace = "urn:com.workday/bsvc"

    filename: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filename",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "format": "base64",
        },
    )


@dataclass
class SubmunicipalityInformationDataType:
    """
    The submunicipality of the address.

    Attributes:
        value
        address_component_name: The descriptor is an optional serialized attribute that shows the
            text Override Label (such as Municipality or District)  that helps describe the usage of
            the type (such as CITY_SUBDIVISION_1 or CITY_SUBDIVISION_2) for each country.
        type_value: The city subdivision part of the address.
    """

    class Meta:
        name = "Submunicipality_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    address_component_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address_Component_Name",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SubregionInformationDataType:
    """
    The subregion part of the address.

    Attributes:
        value
        descriptor: The descriptor is an optional serialized attribute that shows the text Override
            Label (such as Municipality or District)  that helps describe the usage of the type
            (such as REGION_SUBDIVISION_1 or REGION_SUBDIVISION_2) for each country.
        type_value: Enter the region subdivision type, such as REGION_SUBDIVISION_1, or
            REGION_SUBDIVISION_2.
    """

    class Meta:
        name = "Subregion_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SubscriberObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "SubscriberObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SuccessionReadinessObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Succession_ReadinessObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SupervisoryOrganizationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Supervisory_OrganizationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SupplierObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "SupplierObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TalentQualificationEnabledObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Talent_Qualification_EnabledObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TalentTagObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Talent_TagObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TaxAuthorityFormTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Tax_Authority_Form_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TenantedPayrollWorktagObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
        parent_id: For types that require a parent reference, contains a unique identifier for an
            instance of a parent object.
        parent_type: For types that require a parent reference, the unique identifier type of a
            parent object.
    """

    class Meta:
        name = "Tenanted_Payroll_WorktagObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parent_id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_type: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TerminationSubcategoryObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Termination_SubcategoryObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TimeProfileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Time_ProfileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TimeTypeSubtypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Time_Type_SubtypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TimeZoneObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Time_ZoneObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TrainingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "TrainingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TrainingTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Training_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TransactionLogObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Transaction_LogObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TransactionLogTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Transaction_Log_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TravelAmountObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Travel_AmountObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UniformServiceReserveStatusObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Uniform_Service_Reserve_StatusObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UnionObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "UnionObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UnionMembershipTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Union_Membership_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UniqueIdentifierObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Unique_IdentifierObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UnitOfMeasureObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Unit_of_MeasureObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UnitOfMeasureReferenceType:
    """
    Reference element representing a unique instance of Unit of Measure.

    Attributes:
        unit_of_measure_name: Unique attribute name/description identifying a valid instance of Unit
            of Measure.
    """

    class Meta:
        name = "Unit_of_Measure_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    unit_of_measure_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Unit_of_Measure_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UniversalIdentifierObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Universal_IdentifierObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class UserLanguageObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "User_LanguageObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ValidationErrorType:
    class Meta:
        name = "Validation_ErrorType"
        target_namespace = "urn:com.workday/bsvc"

    message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    detail_message: Optional[str] = field(
        default=None,
        metadata={
            "name": "Detail_Message",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    xpath: Optional[str] = field(
        default=None,
        metadata={
            "name": "Xpath",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class VeteransPreferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Veterans_PreferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class VisaIdTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Visa_ID_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class VisaIdentifierReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Visa_Identifier_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WebAddressReferenceObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Web_Address_ReferenceObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WebServiceBackgroundProcessRuntimeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Web_Service_Background_Process_RuntimeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkExperienceQualificationObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Work_Experience_QualificationObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkExperienceRatingObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Work_Experience_RatingObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkHoursProfileObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Work_Hours_ProfileObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkShiftObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Work_ShiftObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkdayCommonHeaderType:
    class Meta:
        name = "Workday_Common_HeaderType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference_descriptors_in_response: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference_Descriptors_In_Response",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "WorkerObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerDocumentObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Worker_DocumentObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerDocumentResponseGroupType:
    """
    Worker Document Response Group which controls the type and amount of data returned.

    Attributes:
        include_reference: Flag indicating if the reference to the Worker Document should be
            included.  If omitted, the default is to return the references.
        include_worker_document_data: Flag indicating if the Worker Document Data should be
            included.  If omitted, the default is to return the data.
    """

    class Meta:
        name = "Worker_Document_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_worker_document_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerEventObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Worker_EventObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerResponseGroupType:
    """
    Use the response group to limit the response to the data you are interested in.

    If the request does not set any values for the response group, then
    the response by default returns the following elements: Reference,
    Personal Data, Employment Data, Compensation Data, Organization
    Data, and Role Data.

    Attributes:
        include_reference: Indicates if the Reference element for the worker is included in the
            response.
        include_personal_information: Indicates if the Personal Data element is included in the
            response.
        show_all_personal_information: Show All Personal Information by Country
        include_additional_jobs: This flag indicates that data for Additional Jobs and International
            Assignments should be included in the response.
        include_employment_information: Indicates if the Employment Data element is included in the
            response.
        include_compensation: Indicates if the Compensation Data element is included in the
            response.
        include_organizations: Indicates if the Organization Data element is included in the
            response.
        exclude_organization_support_role_data: Excludes the supporting role information from the
            Organization Data element response.  This can only be selected when the Include
            Organization Data boolean is also selected.
        exclude_location_hierarchies: Excludes the location hierarchies from the Organization Data
            element response.  This can only be selected when the Include Organization Data boolean
            is also selected.
        exclude_cost_centers: Excludes the cost centers from the Organization Data element response.
            This can only be selected when the Include Organization Data boolean is also selected.
        exclude_cost_center_hierarchies: Excludes the cost center hierarchies from the Organization
            Data element response.  This can only be selected when the Include Organization Data
            boolean is also selected.
        exclude_companies: Excludes the company organizations from the Organization Data element
            response.  This can only be selected when the Include Organization Data boolean is also
            selected.
        exclude_company_hierarchies: Excludes the company hierarchies from the Organization Data
            element response.  This can only be selected when the Include Organization Data boolean
            is also selected.
        exclude_matrix_organizations: Excludes the matrix organizations from the Organization Data
            element response.  This can only be selected when the Include Organization Data boolean
            is also selected.
        exclude_pay_groups: Excludes the pay groups from the Organization Data element response.
            This can only be selected when the Include Organization Data boolean is also selected.
        exclude_regions: Excludes the regions from the Organization Data element response.  This can
            only be selected when the Include Organization Data boolean is also selected.
        exclude_region_hierarchies: Excludes the region hierarchies from the Organization Data
            element response.  This can only be selected when the Include Organization Data boolean
            is also selected.
        exclude_supervisory_organizations: Excludes the supervisory organizations from the
            Organization Data element response.  This can only be selected when the Include
            Organization Data boolean is also selected.
        exclude_teams: Excludes the teams from the Organization Data element response.  This can
            only be selected when the Include Organization Data boolean is also selected.
        exclude_custom_organizations: Excludes the custom organizations from the Organization Data
            element response.  This can only be selected when the Include Organization Data boolean
            is also selected.
        include_roles: Indicates if the Role Data element is included in the response.
        include_management_chain_data: Indicates if the Management Chain Data element is included in
            the response.
        include_multiple_managers_in_management_chain_data: Set to true to return multiple managers
            in the management chain data section. Default selection is to return a single manager.
        include_benefit_enrollments: Indicates if the Benefit Enrollment Data element is included in
            the response.
        include_benefit_eligibility: Includes Benefit Eligibility Data
        include_related_persons: Indicates if the Related Person Data element is included in the
            response.
        include_qualifications: Indicates if the Qualification Data element is included in the
            response.
        include_employee_review: Indicates if the Employee Review Data element is included in the
            response.
        include_goals: Indicates that Goal Details will be included in the web service response.
        include_development_items: Indicates that Development Item Details will be included in the
            web service response.
        include_skills: Indicates that Skill Details will be included in the web service response.
        include_photo: Indicates if the Photo Data element is included in the response.
        include_worker_documents: Indicates if the Worker Document Data element is included in the
            response.
        include_transaction_log_data: Indicates if the Transaction Log Data element is included in
            the response.
        include_subevents_for_corrected_transaction: Include sub- events of corrected events in the
            response.
        include_subevents_for_rescinded_transaction: Include sub- events of rescinded event in the
            response.
        include_succession_profile: Indicates if the Succession Profile element is included in the
            response.
        include_talent_assessment: Indicates if the Talent Assessment element is included in the
            response.
        include_employee_contract_data: Indicates if the Employee Contract element is included in
            the response.
        include_contracts_for_terminated_workers: Include Contracts for Terminated Workers
        include_collective_agreement_data: Include Collective Agreement data. This also requires
            Include Employment Information to be true.
        include_probation_period_data: Include Probation Period data. This also requires the Inlcude
            Employment Information to be true
        include_extended_employee_contract_details: Indicates if the Extended Employee Contracts
            Data element is included in the response.
        include_feedback_received: Indicates that Feedback Received will be included in the web
            service response.
        include_user_account: Indicates that User Account Data will be included in the web service
            response.
        include_career: Indicates that Career Data will be included in the web service response.
        include_account_provisioning: Indicates that Account Provisioning Data will be included in
            the web service response.
        include_background_check_data: Indicates if the Background Check Data element is included in
            the response.
        include_contingent_worker_tax_authority_form_information: Indicates if the Contingent Worker
            Tax Authority Form Information Data element is included in the response.
        exclude_funds: Excludes the Funds from the Organization Data element response. This can only
            be selected when the Include Organization Data boolean is also selected
        exclude_fund_hierarchies: Excludes the fund hierarchies from the Organization Data element
            response. This can only be selected when the Include Organization Data boolean is also
            selected.
        exclude_grants: Excludes the Grants from the Organization Data element response. This can
            only be selected when the Include Organization Data boolean is also selected
        exclude_grant_hierarchies: Excludes the grant hierarchies from the Organization Data element
            response. This can only be selected when the Include Organization Data boolean is also
            selected.
        exclude_business_units: Excludes the Business Units from the Organization Data element
            response. This can only be selected when the Include Organization Data boolean is also
            selected
        exclude_business_unit_hierarchies: Excludes the business unit hierarchies from the
            Organization Data element response. This can only be selected when the Include
            Organization Data boolean is also selected.
        exclude_programs: Excludes the Programs from the Organization Data element response. This
            can only be selected when the Include Organization Data boolean is also selected
        exclude_program_hierarchies: Excludes the program hierarchies from the Organization Data
            element response. This can only be selected when the Include Organization Data boolean
            is also selected.
        exclude_gifts: Excludes the Gifts from the Organization Data element response. This can only
            be selected when the Include Organization Data boolean is also selected
        exclude_gift_hierarchies: Excludes the gift hierarchies from the Organization Data element
            response. This can only be selected when the Include Organization Data boolean is also
            selected.
    """

    class Meta:
        name = "Worker_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_personal_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Personal_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    show_all_personal_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Show_All_Personal_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_additional_jobs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Additional_Jobs",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_employment_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Employment_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_compensation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Compensation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_organization_support_role_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Organization_Support_Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_location_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Location_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_cost_centers: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Cost_Centers",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_cost_center_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Cost_Center_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_companies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Companies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_company_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Company_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_matrix_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Matrix_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_pay_groups: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Pay_Groups",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_regions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Regions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_region_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Region_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_supervisory_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Supervisory_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_teams: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Teams",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_custom_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Custom_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_roles: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Roles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_management_chain_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_multiple_managers_in_management_chain_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Multiple_Managers_in_Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_benefit_enrollments: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Benefit_Enrollments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_benefit_eligibility: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Benefit_Eligibility",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_related_persons: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Related_Persons",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_qualifications: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Qualifications",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_employee_review: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Employee_Review",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_goals: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Goals",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_development_items: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Development_Items",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_skills: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Skills",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_photo: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Photo",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_worker_documents: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Worker_Documents",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_transaction_log_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Transaction_Log_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_subevents_for_corrected_transaction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Subevents_for_Corrected_Transaction",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_subevents_for_rescinded_transaction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Subevents_for_Rescinded_Transaction",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_succession_profile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Succession_Profile",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_talent_assessment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Talent_Assessment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_employee_contract_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Employee_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_contracts_for_terminated_workers: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Contracts_for_Terminated_Workers",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_collective_agreement_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Collective_Agreement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_probation_period_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Probation_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_extended_employee_contract_details: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Extended_Employee_Contract_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_feedback_received: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Feedback_Received",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_user_account: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_User_Account",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_career: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Career",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_account_provisioning: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Account_Provisioning",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_background_check_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Background_Check_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_contingent_worker_tax_authority_form_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Contingent_Worker_Tax_Authority_Form_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_funds: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Funds",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_fund_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Fund_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_grants: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Grants",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_grant_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Grant_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_business_units: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Business_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_business_unit_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Business_Unit_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_programs: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Programs",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_program_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Program_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_gifts: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Gifts",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_gift_hierarchies: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Gift_Hierarchies",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerTypeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Worker_TypeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkersCompensationCodeObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Workers_Compensation_CodeObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkingHoursDetailsDataType:
    """
    Contains working hours data for the position restriction.

    Attributes:
        default_hours: The default weekly hours for the position restriction.
        scheduled_hours: The scheduled weekly hours for the position restriction.
    """

    class Meta:
        name = "Working_Hours_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    default_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    scheduled_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )


@dataclass
class WorkingTimeDefaultDetailsDataType:
    """
    Working Time Default Details Data.

    Attributes:
        id: Reference ID
        working_time_default_value: Working Time Default Value
        working_time_scheduled_value: Working Time Scheduled Value
    """

    class Meta:
        name = "Working_Time_Default_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_default_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_Time_Default_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    working_time_scheduled_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_Time_Scheduled_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )


@dataclass
class WorkingTimeDefaultingEligibilityTableObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Working_Time_Defaulting_Eligibility_TableObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkingTimeUnitObjectIdtype:
    """
    Contains a unique identifier for an instance of an object.

    Attributes:
        value
        type_value: The unique identifier type. Each "ID" for an instance of an object contains a
            type and a value. A single instance of an object can have multiple "ID" but only a
            single "ID" per "type".  Some "types" require a reference to a parent instance.
    """

    class Meta:
        name = "Working_Time_UnitObjectIDType"
        target_namespace = "urn:com.workday/bsvc"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AboriginalIndigenousDetailsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Aboriginal_Indigenous_DetailsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AboriginalIndigenousDetailsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AboriginalIndigenousIdentificationSelectionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Aboriginal_Indigenous_Identification_SelectionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AboriginalIndigenousIdentificationSelectionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicAffiliateObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_AffiliateObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicAffiliateObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicAppointeeEnabledObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Appointee_EnabledObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicAppointeeEnabledObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicAppointmentIdentifierObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Appointment_IdentifierObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicAppointmentIdentifierObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicAppointmentTrackObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Appointment_TrackObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicAppointmentTrackObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicCurricularDivisionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Curricular_DivisionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicCurricularDivisionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicPayPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Pay_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicPayPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicPeriodTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Period_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicPeriodTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicRankObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_RankObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicRankObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicTenureStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Tenure_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicTenureStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicTrackTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_Track_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicTrackTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicUnitObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Academic_UnitObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AcademicUnitObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AchievableLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Achievable_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AchievableLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ActionEventObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Action_EventObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ActionEventObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AdditionalBenefitsCoverageTargetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Additional_Benefits_Coverage_TargetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AdditionalBenefitsCoverageTargetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AdditionalNameTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Additional_Name_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AdditionalNameTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddressReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Address_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AddressReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowanceUnitPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Allowance_Unit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AllowanceUnitPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AllowanceValuePlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Allowance_Value_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AllowanceValuePlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AndOrOperatorsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "And_Or_OperatorsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AndOrOperatorsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AnnuitantIndicatorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Annuitant_IndicatorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AnnuitantIndicatorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[ApplicantObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantResumeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Applicant_ResumeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ApplicantResumeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantSourceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Applicant_SourceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ApplicantSourceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicationInstanceExceptionsDataType:
    """
    Element containing application related exceptions data.

    Attributes:
        exception_data: Exception Data
    """

    class Meta:
        name = "Application_Instance_Exceptions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    exception_data: list[ExceptionDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exception_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AppointmentSpecialtyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Appointment_SpecialtyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AppointmentSpecialtyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AppointmentTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Appointment_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AppointmentTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignableRoleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Assignable_RoleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AssignableRoleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignmentTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Assignment_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AssignmentTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AuditedAccountingWorktagObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Audited_Accounting_WorktagObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AuditedAccountingWorktagObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AuthenticationFault(AuthenticationFaultType):
    class Meta:
        name = "Authentication_Fault"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AuthorityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[AuthorityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AwardObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[AwardObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AwardAndActivityTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Award_and_Activity_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[AwardAndActivityTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BackgroundCheckStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Background_Check_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BackgroundCheckStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BeneficiaryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[BeneficiaryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitCoverageTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Benefit_Coverage_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BenefitCoverageTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitLifeEventTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Benefit_Life_Event_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BenefitLifeEventTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Benefit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BenefitPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitProviderObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Benefit_ProviderObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BenefitProviderObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitProviderIdentifierTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Benefit_Provider_Identifier_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BenefitProviderIdentifierTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BloodTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Blood_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BloodTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BonusPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Bonus_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BonusPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessProcessTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Business_Process_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BusinessProcessTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessUnitObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Business_UnitObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[BusinessUnitObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CobraEligibilityReasonObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "COBRA_Eligibility_ReasonObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CobraEligibilityReasonObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CobraParticipantObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "COBRA_ParticipantObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CobraParticipantObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CalculatedPlanInterfaceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Calculated_Plan_InterfaceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CalculatedPlanInterfaceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CareerPreferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Career_PreferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CareerPreferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CertificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationQualificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Certification_QualificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CertificationQualificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeGovernmentIdRequestCriteriaType:
    """
    Allows retrieving government IDs based on request criteria.

    Request Criteria is only used when government ID reference is not provided
    """

    class Meta:
        name = "Change_Government_ID_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobSubcategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Change_Job_SubcategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ChangeJobSubcategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeLegalNameRequestCriteriaType:
    """Allows retrieving Legal Name based on request criteria."""

    class Meta:
        name = "Change_Legal_Name_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeLicenseIdRequestCriteriaType:
    """Allows retrieving License IDs based on request criteria."""

    class Meta:
        name = "Change_License_ID_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeOtherIdRequestCriteriaType:
    """Allows retrieving Passport and Visa IDs based on request criteria."""

    class Meta:
        name = "Change_Other_ID_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePassportAndVisaRequestCriteriaType:
    """Allows retrieving Passport and Visa IDs based on request criteria."""

    class Meta:
        name = "Change_Passport_and_Visa_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePreferredNameRequestCriteriaType:
    """Allows retrieving Preferred Name based on request criteria."""

    class Meta:
        name = "Change_Preferred_Name_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CitizenshipStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Citizenship_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CitizenshipStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ClassStandingDefinitionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Class_Standing_DefinitionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ClassStandingDefinitionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Collective_AgreementObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CollectiveAgreementObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementClassificationParameterObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Collective_Agreement_Classification_ParameterObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CollectiveAgreementClassificationParameterObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Collective_Agreement_FactorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CollectiveAgreementFactorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactorOptionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Collective_Agreement_Factor_OptionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CollectiveAgreementFactorOptionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommissionPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Commission_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommissionPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommonBooleanEnumerationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Common_Boolean_EnumerationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommonBooleanEnumerationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommonYesNoObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Common_Yes_NoObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommonYesNoObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommunicationUsageBehaviorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Communication_Usage_BehaviorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommunicationUsageBehaviorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommunicationUsageBehaviorTenantedObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Communication_Usage_Behavior_TenantedObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommunicationUsageBehaviorTenantedObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommunicationUsageTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Communication_Usage_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CommunicationUsageTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompanyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompanyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompanyInsiderTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Company_Insider_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompanyInsiderTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_GradeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationGradeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeProfileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Grade_ProfileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationGradeProfileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationGradeProfileReferenceType:
    """
    Profile within the Compensation Grade to assign.

    Does not default for Request Compensation Change.

    Attributes:
        compensation_profile_name: Along with Compensation Grade Reference, unique attribute
            name/description identifying a valid instance of Compensation Grade Profile.
        compensation_grade_reference
    """

    class Meta:
        name = "Compensation_Grade_Profile_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_profile_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Compensation_Profile_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_grade_reference: Optional[CompensationGradeReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CompensationMatrixObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_MatrixObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationMatrixObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPackageObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_PackageObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPackageObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPayEarningObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_Pay_EarningObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPayEarningObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationStepObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Compensation_StepObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompensationStepObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CompetencyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ComponentCompletionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Component_CompletionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ComponentCompletionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionEntryOptionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Condition_Entry_OptionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ConditionEntryOptionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Condition_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ConditionRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionRuleCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Condition_Rule_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ConditionRuleCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContingentWorkerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Contingent_WorkerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ContingentWorkerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContingentWorkerTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Contingent_Worker_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ContingentWorkerTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CostCenterObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Cost_CenterObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CostCenterObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CostingAllocationLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Costing_Allocation_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CostingAllocationLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryCityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Country_CityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountryCityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryPredefinedPersonNameComponentValueObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Country_Predefined_Person_Name_Component_ValueObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountryPredefinedPersonNameComponentValueObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryRegionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Country_RegionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountryRegionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountrySubregionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Country_SubregionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountrySubregionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryAndNationalityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Country_and_NationalityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CountryAndNationalityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CourseDefinitionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Course_DefinitionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CourseDefinitionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CourseSubjectObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Course_SubjectObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CourseSubjectObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreditableServiceTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Creditable_Service_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CreditableServiceTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CurrencyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[CurrencyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CustomIdTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Custom_ID_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CustomIdTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CustomIdentifierReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Custom_Identifier_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CustomIdentifierReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CustomOrganizationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Custom_OrganizationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CustomOrganizationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CybersecurityAreaObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Cybersecurity_AreaObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[CybersecurityAreaObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DateAndTimeUnitObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Date_And_Time_UnitObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DateAndTimeUnitObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DayOfTheWeekObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Day_of_the_WeekObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DayOfTheWeekObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DegreeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[DegreeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DegreeCompletedObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Degree_CompletedObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DegreeCompletedObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeliveryModeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Delivery_ModeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DeliveryModeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DependentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[DependentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DevelopmentItemObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Development_ItemObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DevelopmentItemObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DevelopmentItemCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Development_Item_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DevelopmentItemCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DevelopmentItemStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Development_Item_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DevelopmentItemStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DevelopmentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Development_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DevelopmentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DifficultyToFillObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Difficulty_to_FillObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DifficultyToFillObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisabilityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityCertificationAuthorityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Disability_Certification_AuthorityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisabilityCertificationAuthorityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityCertificationBasisObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Disability_Certification_BasisObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisabilityCertificationBasisObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityGradeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Disability_GradeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisabilityGradeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityStatusReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Disability_Status_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisabilityStatusReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisciplinaryActionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Disciplinary_ActionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisciplinaryActionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisciplinaryActionReasonObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Disciplinary_Action_ReasonObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DisciplinaryActionReasonObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DocumentCategoryAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Document_Category__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[DocumentCategoryAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EarningAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Earning__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EarningAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationQualificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Education_QualificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EducationQualificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationalTaxonomyCodeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Educational_Taxonomy_CodeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EducationalTaxonomyCodeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmailReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Email_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmailReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmergencyContactObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Emergency_ContactObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmergencyContactObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmergencyContactPriorityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Emergency_Contact_PriorityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmergencyContactPriorityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationAllowancePlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Compensation Element Values for Allowance Plan data.

    Attributes:
        compensation_element_reference: The expected end date of the plan assignment.
        percent: Percent for Compensation Element.
        amount: Amount for Compensation Element.
        currency_reference
        frequency_reference
        expected_end_date: Expected End Date
        reimbursement_start_date: Reimbursement Start Date.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Allowance_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 10,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reimbursement_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Reimbursement_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationAllowanceUnitPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Compensation Element Values for Unit Allowance Plan data.

    Attributes:
        compensation_element_reference
        number_of_units: Number of units to assign.
        unit_reference
        frequency_reference
        per_unit_amount: Amount per unit (based on Frequency).
        currency_reference
        reimbursement_start_date: Reimbursement Start Date.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Allowance_Unit_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    unit_reference: Optional[UnitOfMeasureReferenceType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reimbursement_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Reimbursement_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationBonusPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Compensation Element Values for Bonus Plan data.

    Attributes:
        compensation_element_reference
        amount: Amount for Compensation Element.
        percentage: Percent for Compensation Element.
        guaranteed_minimum: Guaranteed Minimum for Compensation Element.
        currency_reference
        frequency_reference
        percentage_assigned: Percentage Assigned for Compensation Element.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Bonus_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percentage_assigned: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage_Assigned",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 6,
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationCommissionPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Compensation Element Values for Commission Plan data.

    Attributes:
        compensation_element_reference
        target_amount: Target Amount for Compensation Element.
        currency_reference
        frequency_reference
        draw_amount: Draw Amount for Compensation Element.
        draw_frequency_reference
        draw_duration: Description of the duration of the draw amount. For informational purposes.
        recoverable: If true, the compensation element is recoverable.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Commission_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Draw_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    draw_frequency_reference: Optional[DrawFrequencyReferenceType] = field(
        default=None,
        metadata={
            "name": "Draw_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_duration: Optional[str] = field(
        default=None,
        metadata={
            "name": "Draw_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recoverable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Recoverable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationMeritPlanAssignmentDataType:
    """
    Reference element representing a unique instance of Merit Plan.

    Attributes:
        merit_plan_name: Unique attribute name/description identifying a valid instance of Merit
            Plan.
        compensation_element_values_for_merit_plan_data
    """

    class Meta:
        name = "Employee_Compensation_Merit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    merit_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_merit_plan_data: Optional[
        EmployeeCompensationMeritPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationSalaryPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Compensation Element Values for Base Pay data.

    Attributes:
        compensation_element_reference
        compensation_element_amount: Amount of Compensation Element.
        currency_reference
        frequency_reference
        expected_end_date: The expected end date of the plan assignment.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Salary_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationSalaryUnitPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Compensation Element Values for Unit Salary Plan data.

    Attributes:
        compensation_element_reference
        unit_reference
        per_unit_amount: Amount per unit (based on Frequency).
        currency_reference
        number_of_units: Number of units to assign.
        frequency_reference
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Salary_Unit_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_reference: Optional[UnitOfMeasureReferenceType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_ContractObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeContractObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractReasonObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Contract_ReasonObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeContractReasonObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractRulesTableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Contract_Rules_TableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeContractRulesTableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Contract_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeContractStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Contract_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeContractTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeProbationPeriodObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Probation_PeriodObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeProbationPeriodObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeProbationPeriodReasonObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Probation_Period_ReasonObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeProbationPeriodReasonObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeProbationPeriodTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Probation_Period_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeProbationPeriodTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeReviewTemplateObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_Review_TemplateObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeReviewTemplateObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeTenureObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_TenureObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeTenureObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employee_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmployeeTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmploymentSystemObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Employment_SystemObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EmploymentSystemObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndAdditionalJobSubcategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "End_Additional_Job_SubcategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EndAdditionalJobSubcategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EstablishmentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[EstablishmentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EthnicityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[EthnicityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EthnicityDetailsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Ethnicity_DetailsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EthnicityDetailsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventAttachmentCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Event_Attachment_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventAttachmentCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventClassificationCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Event_Classification_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventClassificationCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventClassificationSubcategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Event_Classification_SubcategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventClassificationSubcategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventTargetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Event_TargetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EventTargetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EvergreenJobRequisitionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Evergreen_Job_RequisitionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[EvergreenJobRequisitionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalFieldObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_FieldObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalFieldObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalFieldAndParameterInitializationProviderObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_Field_and_Parameter_Initialization_ProviderObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalFieldAndParameterInitializationProviderObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalIdDataType:
    """Integration ID Help Text."""

    class Meta:
        name = "External_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    external_id: list[ExternalIdtype] = field(
        default_factory=list,
        metadata={
            "name": "External_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalIntegrationIdDataType:
    """Integration ID Help Text."""

    class Meta:
        name = "External_Integration_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[Idtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ExternalPayGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_Pay_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalPayGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalPayrollEmployeeTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_Payroll_Employee_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalPayrollEmployeeTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalPayrollEntityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_Payroll_EntityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalPayrollEntityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalUrlobjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "External_URLObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ExternalUrlobjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FseWorkerCategoryCriteriaObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "FSE_Worker_Category_CriteriaObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FseWorkerCategoryCriteriaObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FieldOfStudyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Field_of_StudyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FieldOfStudyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FlexibleWorkArrangementSubtypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Flexible_Work_Arrangement_SubtypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FlexibleWorkArrangementSubtypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ForkableConditionItemObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Forkable_Condition_ItemObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ForkableConditionItemObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FormerWorkerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Former_WorkerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FormerWorkerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FrequencyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[FrequencyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalAreaConfigurableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Functional_Area_ConfigurableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FunctionalAreaConfigurableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalAreaConfigurationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Functional_Area_ConfigurationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FunctionalAreaConfigurationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[FunctionalityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FundObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[FundObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FuturePaymentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Future_Payment_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[FuturePaymentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenderObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[GenderObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenderIdentityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Gender_IdentityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[GenderIdentityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GeneralEventSubcategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "General_Event_SubcategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[GeneralEventSubcategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GiftObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[GiftObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GlobalSetupDataMappingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Global_Setup_Data_MappingObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[GlobalSetupDataMappingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GoalObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[GoalObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GovernmentIdTypeAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Government_ID_Type__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[GovernmentIdTypeAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GovernmentIdentifierReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Government_Identifier_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[GovernmentIdentifierReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GrantObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[GrantObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HeadcountOptionsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Headcount_OptionsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HeadcountOptionsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HeadcountRestrictionsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Headcount_RestrictionsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HeadcountRestrictionsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HealthCareClassificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Health_Care_ClassificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HealthCareClassificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HealthCareCoverageTargetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Health_Care_Coverage_TargetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HealthCareCoverageTargetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HierarchicAssignerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Hierarchic_AssignerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HierarchicAssignerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HourClockObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Hour_ClockObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HourClockObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HukouTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Hukou_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[HukouTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstanceObjectType:
    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[InstanceIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstantMessengerReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Instant_Messenger_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[InstantMessengerReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstantMessengerTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Instant_Messenger_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[InstantMessengerTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InsuranceCoverageTargetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Insurance_Coverage_TargetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[InsuranceCoverageTargetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class IntegrationDocumentFieldObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Integration_Document_FieldObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[IntegrationDocumentFieldObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class IntegrationSystemAuditedObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Integration_System__Audited_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[IntegrationSystemAuditedObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InternalProjectExperienceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Internal_Project_ExperienceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[InternalProjectExperienceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InvalidReferenceIdResponseType:
    """
    Invalid Reference ID Response.

    Attributes:
        invalid_reference: Invalid Reference ID Data
    """

    class Meta:
        name = "Invalid_Reference_ID_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    invalid_reference: list[InvalidReferenceIdDataType] = field(
        default_factory=list,
        metadata={
            "name": "Invalid_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobApplicationTemplateObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Application_TemplateObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobApplicationTemplateObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobClassificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_ClassificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobClassificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobClassificationGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Classification_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobClassificationGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_FamilyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobFamilyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyBaseObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Family_BaseObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobFamilyBaseObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobHistoryCompanyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_History_CompanyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobHistoryCompanyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobHistoryQualificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_History_QualificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobHistoryQualificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobOverlapConditionRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Overlap_Condition_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobOverlapConditionRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobProfileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_ProfileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobProfileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_RequisitionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobRequisitionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionAttachmentsType:
    """
    Wrapper element for file Attachments for Job Requisition.

    Attributes:
        job_requisition_attachment_data: Wrapper element for a single file attachment
    """

    class Meta:
        name = "Job_Requisition_AttachmentsType"
        target_namespace = "urn:com.workday/bsvc"

    job_requisition_attachment_data: list[JobRequisitionAttachmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Requisition_Attachment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionRemoteTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Requisition_Remote_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobRequisitionRemoteTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Job_Requisition_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[JobRequisitionStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LgbtIdentificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "LGBT_IdentificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LgbtIdentificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[LanguageObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageAbilityTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Language_Ability_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LanguageAbilityTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageProficiencyObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Language_ProficiencyObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LanguageProficiencyObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LeaveRequestEventObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Leave_Request_EventObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LeaveRequestEventObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LeaveTypeReasonObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Leave_Type_ReasonObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LeaveTypeReasonObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LeaveOfAbsenceTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Leave_of_Absence_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LeaveOfAbsenceTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LegalAuthorityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Legal_AuthorityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LegalAuthorityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LicenseIdTypeAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "License_ID_Type__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LicenseIdTypeAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LicenseIdentifierObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "License_IdentifierObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LicenseIdentifierObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LicenseIdentifierReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "License_Identifier_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LicenseIdentifierReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalSkillObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Local_SkillObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocalSkillObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocalTerminationReasonObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Local_Termination_ReasonObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocalTerminationReasonObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocaleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocaleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocationContextObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Location_ContextObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocationContextObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocationTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Location_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LocationTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LossImpactObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Loss_ImpactObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[LossImpactObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagementLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Management_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ManagementLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaritalStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Marital_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MaritalStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MatrixOrganizationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Matrix_OrganizationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MatrixOrganizationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPercentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Merit_Percent_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MeritPercentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MeritPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Merit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MeritPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryDischargeTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Military_Discharge_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MilitaryDischargeTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryRankObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Military_RankObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MilitaryRankObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryServiceReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Military_Service_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MilitaryServiceReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryServiceTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Military_Service_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MilitaryServiceTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Military_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MilitaryStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MobilityChoiceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Mobility_ChoiceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[MobilityChoiceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NamedProfessorshipObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Named_ProfessorshipObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NamedProfessorshipObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NationalIdTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "National_ID_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NationalIdTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NationalIdentifierReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "National_Identifier_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NationalIdentifierReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NatureOfActionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Nature_of_ActionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NatureOfActionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NatureOfActionSeriesObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Nature_of_Action_SeriesObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NatureOfActionSeriesObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NatureOfActionAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Nature_of_Action__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NatureOfActionAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodTargetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Notice_Period_TargetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NoticePeriodTargetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodsSetupTableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Notice_Periods_Setup_TableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NoticePeriodsSetupTableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NotificationCategorizableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Notification_CategorizableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[NotificationCategorizableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OnboardingSetupTemplateObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Onboarding_Setup_TemplateObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OnboardingSetupTemplateObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "One-Time_Payment_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OneTimePaymentPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[OrganizationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationGoalObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Organization_GoalObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OrganizationGoalObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationOwnerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Organization_OwnerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OrganizationOwnerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationSubtypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Organization_SubtypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OrganizationSubtypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Organization_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OrganizationTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OtherUnitTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Other_Unit_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[OtherUnitTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ParMassActionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "PAR_Mass_ActionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ParMassActionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ParVariableTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "PAR_Variable_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ParVariableTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PassportIdTypeAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Passport_ID_Type__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PassportIdTypeAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PassportIdentifierReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Passport_Identifier_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PassportIdentifierReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayComponentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Pay_ComponentObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayComponentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Pay_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayRateTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Pay_Rate_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayRateTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayWithWorkStudyOptionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Pay_With_Work-Study_OptionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayWithWorkStudyOptionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PaymentTermsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Payment_TermsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PaymentTermsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayrollReportingCodeAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Payroll_Reporting_Code__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayrollReportingCodeAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayrollReportingTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Payroll_Reporting_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PayrollReportingTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceImprovementPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Performance_Improvement_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PerformanceImprovementPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceReviewObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Performance_ReviewObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PerformanceReviewObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PeriodSalaryPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Period_Salary_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PeriodSalaryPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonAccountProvisioningDataType:
    """This element contains all provisioning group assignments for a person."""

    class Meta:
        name = "Person_Account_Provisioning_DataType"
        target_namespace = "urn:com.workday/bsvc"

    provisioning_group_assignment_data: list[ProvisioningGroupAssignmentForPersonDataType] = field(
        default_factory=list,
        metadata={
            "name": "Provisioning_Group_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonQualificationSourceCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Person_Qualification_Source_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PersonQualificationSourceCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PhoneDeviceTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Phone_Device_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PhoneDeviceTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PhoneReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Phone_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PhoneReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PoliticalAffiliationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Political_AffiliationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PoliticalAffiliationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionElementObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_ElementObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionElementObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionRestrictionsObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_RestrictionsObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionRestrictionsObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionSetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_SetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionSetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionTimeTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_Time_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionTimeTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionWorkerTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Position_Worker_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[PositionWorkerTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PotentialObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[PotentialObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodActionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Probation_Period_ActionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProbationPeriodActionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Probation_Period_OutcomeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProbationPeriodOutcomeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomesSetupTableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Probation_Period_Outcomes_Setup_TableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProbationPeriodOutcomesSetupTableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodRuleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Probation_Period_RuleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProbationPeriodRuleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodRulesTableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Probation_Period_Rules_TableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProbationPeriodRulesTableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProcessingFault(ProcessingFaultType):
    class Meta:
        name = "Processing_Fault"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ProfessionalAffiliationQualificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Professional_Affiliation_QualificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProfessionalAffiliationQualificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfessionalAffiliationReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Professional_Affiliation_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProfessionalAffiliationReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfessionalAffiliationRelationshipTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Professional_Affiliation_Relationship_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProfessionalAffiliationRelationshipTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfessionalAffiliationTypeAllObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Professional_Affiliation_Type__All_ObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProfessionalAffiliationTypeAllObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProficiencyRatingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Proficiency_RatingObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProficiencyRatingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProficiencyRatingBehaviorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Proficiency_Rating_BehaviorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProficiencyRatingBehaviorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProgramObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[ProgramObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PronounObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[PronounObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class QuestionnaireObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[QuestionnaireObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RecruitingAssessmentTestObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Recruiting_Assessment_TestObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RecruitingAssessmentTestObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RecruitingInstructionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Recruiting_InstructionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RecruitingInstructionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RegionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[RegionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelatedPersonRelationshipObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Related_Person_RelationshipObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelatedPersonRelationshipObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelatedPersonForWorkerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Related_Person_for_WorkerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelatedPersonForWorkerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelationalOperatorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Relational_OperatorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelationalOperatorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelativeNameReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Relative_Name_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelativeNameReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelativeTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Relative_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelativeTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReligionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[ReligionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelocationAreaObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Relocation_AreaObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RelocationAreaObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemarkObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[RemarkObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ResponsibilityQualificationReplacementType:
    """
    Wrapper element for Responsibility Qualifications.

    Allows all responsibility qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing qualifications with those sent in the web service.

    Attributes:
        responsibility_qualification_replacement_data
        delete: If Y, deletes all responsibility qualifications for the position restriction or job
            profile, and doesn't send any additional responsibility qualifications.
    """

    class Meta:
        name = "Responsibility_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    responsibility_qualification_replacement_data: list[
        ResponsibilityQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Responsibility_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetentionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[RetentionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetireeOrganizationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Retiree_OrganizationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RetireeOrganizationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RetirementSpecialPopulationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Retirement_Special_PopulationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RetirementSpecialPopulationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewRatingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Review_RatingObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ReviewRatingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Review_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[ReviewTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[RoleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Role_AssignerObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RoleAssignerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[RoleeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleeSelectorObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Rolee_SelectorObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[RoleeSelectorObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryPayPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Salary_Pay_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SalaryPayPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryUnitPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Salary_Unit_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SalaryUnitPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SchoolObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[SchoolObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SchoolTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "School_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SchoolTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecurityClearanceLevelObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Security_Clearance_LevelObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SecurityClearanceLevelObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecurityGroupObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Security_GroupObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SecurityGroupObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SensitivityAndRiskObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Sensitivity_and_RiskObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SensitivityAndRiskObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SexualOrientationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Sexual_OrientationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SexualOrientationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[SkillObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Skill_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SkillCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SocialBenefitsLocalityObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Social_Benefits_LocalityObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SocialBenefitsLocalityObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SpecialtyChildObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Specialty_ChildObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SpecialtyChildObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SpecialtyParentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Specialty_ParentObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SpecialtyParentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SpendCategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Spend_CategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SpendCategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[StaffObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingDefaultingFieldConfigurationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Staffing_Defaulting_Field_ConfigurationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StaffingDefaultingFieldConfigurationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsSectionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Staffing_Field_Defaults_SectionObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StaffingFieldDefaultsSectionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingInterfaceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Staffing_InterfaceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StaffingInterfaceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockGrantTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Grant_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockGrantTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockPlanObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_PlanObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockPlanObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StockVestingScheduleObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Stock_Vesting_ScheduleObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StockVestingScheduleObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[StudentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentAcademicStandingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Student_Academic_StandingObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StudentAcademicStandingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentCourseTagObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Student_Course_TagObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StudentCourseTagObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityEventObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Student_Employment_Eligibility_EventObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StudentEmploymentEligibilityEventObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityEventDataType:
    """
    Request element to update Student Employment Eligibility Event.

    Attributes:
        eligible: Eligibility of the whole Evaluation
        student_employment_eligibility_reason_data: Reasons whenever returns as not eligibile
    """

    class Meta:
        name = "Student_Employment_Eligibility_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    eligible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Eligible",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_reason_data: list[StudentEmploymentEligibilityReasonDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Student_Employment_Eligibility_Reason_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class StudentEmploymentEligibilityRuleSetObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_SetObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StudentEmploymentEligibilityRuleSetObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentLoadStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Student_Load_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[StudentLoadStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SubscriberObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[SubscriberObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SuccessionReadinessObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Succession_ReadinessObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SuccessionReadinessObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SupervisoryOrganizationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Supervisory_OrganizationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[SupervisoryOrganizationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SupplierObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[SupplierObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TalentQualificationEnabledObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Talent_Qualification_EnabledObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TalentQualificationEnabledObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TalentTagObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Talent_TagObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TalentTagObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TaxAuthorityFormTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Tax_Authority_Form_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TaxAuthorityFormTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TenantedPayrollWorktagObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Tenanted_Payroll_WorktagObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TenantedPayrollWorktagObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TerminationSubcategoryObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Termination_SubcategoryObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TerminationSubcategoryObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TimeProfileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Time_ProfileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TimeProfileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TimeTypeSubtypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Time_Type_SubtypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TimeTypeSubtypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TimeZoneObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Time_ZoneObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TimeZoneObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[TrainingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Training_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TrainingTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionLogObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Transaction_LogObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TransactionLogObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionLogTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Transaction_Log_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TransactionLogTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TravelAmountObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Travel_AmountObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[TravelAmountObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UniformServiceReserveStatusObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Uniform_Service_Reserve_StatusObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UniformServiceReserveStatusObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnionObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[UnionObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnionMembershipTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Union_Membership_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UnionMembershipTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UniqueIdentifierObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Unique_IdentifierObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UniqueIdentifierObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnitOfMeasureObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Unit_of_MeasureObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UnitOfMeasureObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UniversalIdentifierObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Universal_IdentifierObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UniversalIdentifierObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UserLanguageObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "User_LanguageObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[UserLanguageObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ValidationFaultType:
    class Meta:
        name = "Validation_FaultType"
        target_namespace = "urn:com.workday/bsvc"

    validation_error: list[ValidationErrorType] = field(
        default_factory=list,
        metadata={
            "name": "Validation_Error",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class VeteransPreferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Veterans_PreferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[VeteransPreferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class VisaIdTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Visa_ID_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[VisaIdTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class VisaIdentifierReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Visa_Identifier_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[VisaIdentifierReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WebAddressReferenceObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Web_Address_ReferenceObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WebAddressReferenceObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WebServiceBackgroundProcessRuntimeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Web_Service_Background_Process_RuntimeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WebServiceBackgroundProcessRuntimeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkExperienceQualificationObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Work_Experience_QualificationObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkExperienceQualificationObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkExperienceRatingObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Work_Experience_RatingObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkExperienceRatingObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkHoursProfileObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Work_Hours_ProfileObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkHoursProfileObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkShiftObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Work_ShiftObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkShiftObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkdayCommonHeader(WorkdayCommonHeaderType):
    class Meta:
        name = "Workday_Common_Header"
        namespace = "urn:com.workday/bsvc"


@dataclass
class WorkerObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkerObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDocumentObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Worker_DocumentObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkerDocumentObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerEventObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Worker_EventObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkerEventObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerTypeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Worker_TypeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkerTypeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkersCompensationCodeObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Workers_Compensation_CodeObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkersCompensationCodeObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeDefaultingEligibilityTableObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Working_Time_Defaulting_Eligibility_TableObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkingTimeDefaultingEligibilityTableObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeUnitObjectType:
    """
    Attributes:
        id
        descriptor: Display information used to describe an instance of an object. This 'optional'
            information is for outbound descriptive purposes only and is not processed on inbound
            Workday Web Services requests.
    """

    class Meta:
        name = "Working_Time_UnitObjectType"
        target_namespace = "urn:com.workday/bsvc"

    id: list[WorkingTimeUnitObjectIdtype] = field(
        default_factory=list,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Descriptor",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AcademicAppointmentSnapshotDataType:
    """
    Element containing the specifics for the academic appointment being  added or updated.

    An academic appointment tracks an academic worker’s time at a
    university or college.

    Attributes:
        academic_appointment_track_reference: Reference ID for the academic appointment thread being
            updated. Required on Update Academic Appointment events. Leave blank on Add Academic
            Appointment events.
        appointment_track_id: Unique identifier for academic appointment track.
        appointment_track_inactive: Boolean indicating whether or not the appointment track is
            active
        track_type_reference: Reference ID for the academic track type.
        appointment_identifier_reference: Indicates the type of appointment, such as primary, joint,
            or dual. Workday recommends only 1 primary active academic appointment.
        position_reference: Appointee's filled position that's associated with an academic
            appointment. Can't use on the Hire subprocess, because the position isn't filled yet.
        academic_unit_reference: Reference ID for the academic unit.
        roster_percent: Percent of the academic appointee's total time on an academic appointment.
            Between 0.00 and 1.00. May be blank or zero for things like centers and institutes.
        appointment_start_date: Date when the appointment becomes effective or takes effect.
        appointment_end_date: Date when the academic appointment is intended to end. To end academic
            appointments, you must complete an End Academic Appointment Track event.
        track_start_date_override: Override for academic appointment track start date.
        rank_reference: Reference ID for the academic rank.
        named_professorship_reference: Reference ID for the named professorship.
        appointment_specialty_reference: Reference ID for the appointment specialty.
        constructed_title: Do not enter, Constructed Title will be defaulted and used if all fields
            pertaining to rule set for track is supplied.
        appointment_title: Title for the academic appointment.
        adjusted_title_start_date: Date when the academic appointment title was designated.
        academic_review_date: Manually maintained date that acts as a reminder to review the
            academic for promotion.  Only applies when the Appointment’s Track includes a Promotion
            program. On an update, the existing value will be retained if not sent.
        related_academic_unit_reference: Reference ID for the related academic unit.
        tenure_home_reference: Reference ID for the academic unit for the tenure track appointment.
        tenure_status_reference: Reference ID for the tenure status.
        probationary_end_date: Date when the tenure probationary period ends.
        tenure_award_date: Date when the academic appointee was awarded tenure.
    """

    class Meta:
        name = "Academic_Appointment_Snapshot_DataType"
        target_namespace = "urn:com.workday/bsvc"

    academic_appointment_track_reference: Optional[AcademicAppointmentTrackObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointment_Track_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    appointment_track_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Appointment_Track_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    appointment_track_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Appointment_Track_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    track_type_reference: Optional[AcademicTrackTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Track_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    appointment_identifier_reference: Optional[AcademicAppointmentIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Appointment_Identifier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_unit_reference: Optional[AcademicUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    roster_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Roster_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 7,
            "fraction_digits": 4,
        },
    )
    appointment_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Appointment_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    appointment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Appointment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    track_start_date_override: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Track_Start_Date_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rank_reference: Optional[AcademicRankObjectType] = field(
        default=None,
        metadata={
            "name": "Rank_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    named_professorship_reference: Optional[NamedProfessorshipObjectType] = field(
        default=None,
        metadata={
            "name": "Named_Professorship_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    appointment_specialty_reference: Optional[AppointmentSpecialtyObjectType] = field(
        default=None,
        metadata={
            "name": "Appointment_Specialty_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    constructed_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Constructed_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    appointment_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Appointment_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    adjusted_title_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Adjusted_Title_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_review_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Academic_Review_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    related_academic_unit_reference: Optional[AcademicUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Related_Academic_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    tenure_home_reference: Optional[AcademicUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Tenure_Home_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    tenure_status_reference: Optional[AcademicTenureStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Tenure_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probationary_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probationary_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    tenure_award_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Tenure_Award_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddAdditionalJobEventResponseType:
    """
    Responds with the Event ID for the Add Additional Employee Job Event and the job reference.

    Attributes:
        event_reference: Event ID of the Add Additional Job Event
        employee_reference: Reference to Employee.
        job_reference: Reference to position if web service was automatically completed.
        version
    """

    class Meta:
        name = "Add_Additional_Job_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddFlexibleWorkArrangementTypeDetailsDataType:
    """
    Contains details about the type of flexible work arrangement.

    Attributes:
        flexible_work_arrangement_type_reference: Contains a reference that identifies a specific
            flexible work arrangement type.
        hours_per_week: Contains the hours per week for the flexible work arrangement.
        days_per_week: Contains the number of days per week for the flexible work arrangement.
        days_of_week_reference: Contains references that identify the days of the week on which the
            worker will work.
    """

    class Meta:
        name = "Add_Flexible_Work_Arrangement_Type_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    flexible_work_arrangement_type_reference: Optional[FlexibleWorkArrangementSubtypeObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Flexible_Work_Arrangement_Type_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    hours_per_week: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Hours_Per_Week",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    days_per_week: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Days_Per_Week",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 1,
            "fraction_digits": 0,
        },
    )
    days_of_week_reference: list[DayOfTheWeekObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Days_Of_Week_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddRetireeStatusEventDataType:
    """
    Contains retirement reason and retiree organization references for Add Retiree Status.

    Attributes:
        reason_reference: Contains reason for retirement.
        retiree_organization_reference: Contains reference for Retiree Organization.
    """

    class Meta:
        name = "Add_Retiree_Status_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    retiree_organization_reference: Optional[RetireeOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Retiree_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AddRetireeStatusResponseType:
    """
    This element contains information in Add Retiree Status event.

    Attributes:
        event_reference: Contains information on Add Retiree Status event.
        version
    """

    class Meta:
        name = "Add_Retiree_Status_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddRetireeStatusSubProcessDetailsType:
    """
    Contains details for Add Retiree Status as sub process.

    Attributes:
        retirement_date: Contains retirement date.
        retirement_reason_reference: Contains reason for retirement.
        retiree_organization_reference: Contains reference for Retiree Organization.
    """

    class Meta:
        name = "Add_Retiree_Status_Sub_Process_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    retirement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Retirement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    retirement_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Retirement_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    retiree_organization_reference: Optional[RetireeOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Retiree_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AnnualIncomeDataType:
    """
    Dependent's annual income.

    Attributes:
        effective_date: The Effective date for dependent's annual income
        currency_reference: Currency of dependent's income
        annual_income: Currency attribute specifying the dependent's annual income
    """

    class Meta:
        name = "Annual_Income_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    annual_income: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Annual_Income",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 11,
            "fraction_digits": 2,
        },
    )


@dataclass
class ApplicantRequestReferencesType:
    """
    Wrapper element  containing the list of applicants for which data is requested.

    Attributes:
        applicant_reference: The Applicants being requested. The values are  either the Applicant
            IDs or the Workday IDs.
    """

    class Meta:
        name = "Applicant_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: list[ApplicantObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ApplicationInstanceRelatedExceptionsDataType:
    """
    Element containing Exceptions Data.

    Attributes:
        exceptions_data: Exceptions Data
    """

    class Meta:
        name = "Application_Instance_Related_Exceptions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    exceptions_data: list[ApplicationInstanceExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEstablishmentSubProcessEventDataType:
    """
    The element containing all necessary information to assign an establishment to a worker
    position.

    Attributes:
        establishment_reference: The proposed establishment.
    """

    class Meta:
        name = "Assign_Establishment_Sub_Process_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    establishment_reference: Optional[EstablishmentObjectType] = field(
        default=None,
        metadata={
            "name": "Establishment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignMatrixOrganizationDataType:
    """
    Wrapper for Assign Matrix Organizations event data which is usable for the standalone business
    process web service and when it is used as a sub business process.

    Attributes:
        matrix_organization_reference: Matrix organization to assign to the worker.
    """

    class Meta:
        name = "Assign_Matrix_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    matrix_organization_reference: list[MatrixOrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Matrix_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationResponseType:
    """
    Responds with the Event ID for the Assign Organization Event.

    Attributes:
        event_reference: Responds with the Event ID for the Assign Organization Event.
        version
    """

    class Meta:
        name = "Assign_Organization_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationRolesResponseType:
    """
    Responds with the Event ID for the Assign Organization Roles business process event.

    Attributes:
        assign_roles_event_reference: The Event ID for the Assign Organization Roles business
            process event.
        version
    """

    class Meta:
        name = "Assign_Organization_Roles_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    assign_roles_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignPayGroupDataType:
    """
    Wrapper element for Assign Pay Group business process.

    The Pay Group cannot be removed from a worker once it is set. It can
    only be changed to another pay group.

    Attributes:
        pay_group_reference: Reference to the pay group to assign to this employee.
        additional_positions_for_pay_group_assignment_reference: Optional, additional positions that
            the employee holds that should also have the pay group assignment. Default is primary
            position.
    """

    class Meta:
        name = "Assign_Pay_Group_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_group_reference: Optional[PayGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_positions_for_pay_group_assignment_reference: list[PositionElementObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Additional_Positions_for_Pay_Group_Assignment_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class AssignPayGroupForPositionRestrictionDataType:
    """
    Wrapper element for Assign Pay Group for Position Restriction when it is a sub business process
    to Create Position.

    Attributes:
        pay_group_reference: Reference to the pay group to assign to this Position.  Currently this
            is only required when doing Commitment Accounting.
    """

    class Meta:
        name = "Assign_Pay_Group_for_Position_Restriction_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_group_reference: Optional[PayGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AssignRolesResponseType:
    """
    Responds with the Event ID for the Assign Organization Roles business process event.

    Attributes:
        assign_roles_event_reference: Responds with the Event ID for the Assign Organization Roles
            business process event.
        version
    """

    class Meta:
        name = "Assign_Roles_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    assign_roles_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignRolesRoleAssignmentDataType:
    """
    Encapsulating Element for all Organization Role Assignment data.

    Attributes:
        role_assigner_reference: The Role Assigner (Organization or Project) for this role
            assignment. Order_Type_Reference is required for Role Assigner of type
            External_PO_Number.
        assignable_role_reference: The Organization Role being assigned.
        update_later_dated_assignments: When true, updates later dated assignments.
        assignees_to_add_reference: If a worker is specified, position to which role is to be
            assigned as of specified effective date is determined when event is submitted, not when
            it is completed. If worker has multiple jobs as of specified effective date, role will
            be assigned to international assignment (IA) position with earliest start date,
            otherwise to worker's primary position. Specify a position if this behavior for worker
            is not desired.
        assignees_to_remove_reference: If a worker is specified and they have multiple jobs as of
            specified effective date, role is removed from all the worker's positions.
        supervisory_organization_single_assignment_manager_reference: Position explicitly assigned
            as 'Single Assignment Manager' for a Supervisory org.
        remove_supervisory_organization_single_assignment_manager: Removes existing Single
            Assignment Manager for a Supervisory org.
    :ivar
        remove_existing_assignees_for_assignable_role_on_role_assigner:
        If true, all assignees for the specified assignable role and
        role assigner are removed by the specified effective date and
        later. Use this option with extreme caution. When you want to
        remove each role assignee individually, set this boolean to
        false for all rows. For any combination of assignable role and
        role assigner, ensure that your EIB only contains 1 row with
        this boolean set to True or 1. When you want to remove each role
        assignee individually, set this boolean to False, 0 or leave
        empty for all rows.
    """

    class Meta:
        name = "Assign_Roles_Role_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    role_assigner_reference: Optional[RoleAssignerObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assigner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    assignable_role_reference: Optional[AssignableRoleObjectType] = field(
        default=None,
        metadata={
            "name": "Assignable_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_existing_assignees_for_assignable_role_on_role_assigner: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Existing_Assignees_for_Assignable_Role_on_Role_Assigner",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_later_dated_assignments: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Update_Later_Dated_Assignments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignees_to_add_reference: list[RoleeSelectorObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Assignees_to_Add_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignees_to_remove_reference: list[RoleeSelectorObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Assignees_to_Remove_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supervisory_organization_single_assignment_manager_reference: Optional[
        RoleeSelectorObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Single_Assignment_Manager_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_supervisory_organization_single_assignment_manager: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Supervisory_Organization_Single_Assignment_Manager",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignSuperiorOrganizationDataType:
    """
    Assign Superior Organization Sub Process.

    Attributes:
        proposed_supervisory_organization_reference: Proposed Supervisory Organization will be
            assigned as the superior organization for the existing subordinate organizations that
            are movable when the event is completed.
        subordinate_supervisory_organizations_reference: Proposed Supervisory Organization will be
            assigned as the superior organization for the Subordinate Supervisory Organizations when
            the event is completed.
    """

    class Meta:
        name = "Assign_Superior_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    proposed_supervisory_organization_reference: Optional[HierarchicAssignerObjectType] = field(
        default=None,
        metadata={
            "name": "Proposed_Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    subordinate_supervisory_organizations_reference: list[SupervisoryOrganizationObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Subordinate_Supervisory_Organizations_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )


@dataclass
class AwardAndActivityAchievementDataType:
    """
    Wrapper element for Award and Activity information.

    Attributes:
        award_and_activity_id: Award and Activity ID. If no value is provided, a new award and
            activity will be created. If a value is passed in and a corresponding award and activity
            is not found, a new award and activity will be created with the provided id.
        remove_award_and_activity: Used for inbound operations to indicate that the award and
            activity should be removed for the role. Will always return false for outbound
            operations.
        award_and_activity_type_reference: Award and Activity type.
        title: Award and Activity Title
        sponsor_issuer: The authority granting the award and activity. Required unless the award is
            being removed.
        start_date: Start Date for the Award and Activity.
        end_date: End date for the Award and Activity
        description: Award and Activity description.
        url: Award and Activity URL
        related_position_reference: Related position reference.
    """

    class Meta:
        name = "Award_and_Activity_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    award_and_activity_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Award_and_Activity_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_award_and_activity: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Award_and_Activity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    award_and_activity_type_reference: Optional[AwardAndActivityTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Award_and_Activity_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sponsor_issuer: Optional[str] = field(
        default=None,
        metadata={
            "name": "Sponsor_Issuer",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "URL",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    related_position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Related_Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BackgroundCheckOverallStatusDataType:
    """
    Wrapper element for Background Check data.

    Attributes:
        status_date: Background check status date.
        status_reference: Background check status.
        status_comment: Background check status comment.
    """

    class Meta:
        name = "Background_Check_Overall_Status_DataType"
        target_namespace = "urn:com.workday/bsvc"

    status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    status_reference: Optional[BackgroundCheckStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    status_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BeneficiaryAllocationDataType:
    """
    Contains the detailed allocation amounts for the beneficiaries of the elected coverage.

    Attributes:
        allocation_type: The type of allocation (primary or secondary).
        amount: The percentage allocated to the beneficiary.
        amount_type: The amount type for percentage.
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Beneficiary_Allocation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allocation_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Allocation_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    amount_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Amount_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BenefitProviderSummaryDataType:
    """
    Contains the summary information about the benefit provider of the benefit plan.

    Attributes:
        benefit_provider_reference: A reference to the benefit provider.
        benefit_provider_name: The name of the benefit provider.
        benefit_provider_identifier_type_reference: The name of the benefit provider.
    """

    class Meta:
        name = "Benefit_Provider_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_provider_reference: Optional[BenefitProviderObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Provider_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_provider_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Benefit_Provider_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_provider_identifier_type_reference: Optional[
        BenefitProviderIdentifierTypeObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Benefit_Provider_Identifier_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessProcessAttachmentDataType:
    """
    Element for the attachments pertaining to a Event entered through a web service.

    Attributes:
        file_name: Filename for the attachment.
        event_attachment_description: Free form text comment about the attachment.
        event_attachment_category_reference: Category of attachment.
        file: Binary file contents.
        content_type: Text attribute identifying Content Type of the Attachment.
    """

    class Meta:
        name = "Business_Process_Attachment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    event_attachment_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Event_Attachment_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_attachment_category_reference: Optional[EventAttachmentCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Attachment_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Content_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 80,
        },
    )


@dataclass
class BusinessProcessCommentDataType:
    """
    Captures a comment for the Business Process.

    Attributes:
        comment: Free form comment regarding the business process.
        worker_reference: Default the Person making the comment to the processing person if not
            submitted via the web service.
    """

    class Meta:
        name = "Business_Process_Comment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CobraEligibilityDataType:
    """
    Contains COBRA Eligibility detail for a participant.

    If this element is not populated then the participant is assumed to
    not be COBRA eligible.

    Attributes:
        cobra_eligibility_reason_reference: The reason why the participant is eligible for COBRA.
            The reason is required if the participant is eligible for COBRA..
        eligible_date: The COBRA Eligible Date is the day the worker is eligible for COBRA coverage.
            It represents the worker's Last day of Coverage + 1 day. For example, if an employee
            terminated on June 28th and was covered to the end of the month (June 30th), you would
            enter the COBRA Eligible Date as July 1st.
        loss_of_coverage_date: The Qualifying Event Date is the date of the event that caused the
            worker to be eligible for COBRA. For example, in the case of a dependent that is now
            over age, you would enter the birth date. If an employee has a reduction in hours and is
            now eligible for COBRA, you would enter the date they went from full-time to part-time.
        coverage_end_date: The date COBRA coverage ends for an employee or dependent.  This is only
            required when the COBRA coverage ends on a different date than the COBRA provider would
            normally determine.
        benefit_plan_reference: The Benefit Plan whose coverage was lost.
    """

    class Meta:
        name = "COBRA_Eligibility_DataType"
        target_namespace = "urn:com.workday/bsvc"

    cobra_eligibility_reason_reference: Optional[CobraEligibilityReasonObjectType] = field(
        default=None,
        metadata={
            "name": "COBRA_Eligibility_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Eligible_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    loss_of_coverage_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Loss_of_Coverage_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_plan_reference: Optional[BenefitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CareerPreferencesDataType:
    """
    Employees Career Interest Data.

    Attributes:
        career_interest_reference: Indicates if an employee has career preference.
        career_interests: Indicates Employee's career preference.
    """

    class Meta:
        name = "Career_Preferences_DataType"
        target_namespace = "urn:com.workday/bsvc"

    career_interest_reference: list[CareerPreferenceObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Career_Interest_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    career_interests: Optional[str] = field(
        default=None,
        metadata={
            "name": "Career_Interests",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationAttachmentDataType:
    """
    Attachments for Certification.

    Attributes:
        file_name: Filename for the attachment.
        comment: Free form text comment about the attachment.
        file: Binary file contents.
        document_category_reference: Category of attachment.
        content_type: Text attribute identifying Content Type of the Attachment.
    """

    class Meta:
        name = "Certification_Attachment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    document_category_reference: Optional[DocumentCategoryAllObjectType] = field(
        default=None,
        metadata={
            "name": "Document_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Content_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 80,
        },
    )


@dataclass
class ChangeOrganizationAssignmentsResponseType:
    """
    Responds with the Event ID for the Change Organization Assignments Event.

    Attributes:
        change_organization_assignments_event_reference: The Event ID of the Assign Organization
            Event.
        version
    """

    class Meta:
        name = "Change_Organization_Assignments_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    change_organization_assignments_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Change_Organization_Assignments_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePersonalInformationRequestCriteriaType:
    """
    Allows retrieving Personal Information based on request criteria.

    Attributes:
        person_type_criteria_data
        country_reference: Country Reference for the Country the Personal Information will be tied
            to. If none is passed, the primary position location will be used.
    """

    class Meta:
        name = "Change_Personal_Information_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    person_type_criteria_data: Optional[PersonTypeCriteriaType] = field(
        default=None,
        metadata={
            "name": "Person_Type_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeWorkSpaceResponseType:
    """
    Responds with Event ID for the Change Work Space event.

    Attributes:
        work_space_change_event_reference: The Work Space Change event from the Change Work Space
            web service.
        version
    """

    class Meta:
        name = "Change_Work_Space_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    work_space_change_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Space_Change_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CitizenshipStatusDataType:
    """
    Citizenship Status Details.

    Attributes:
        citizenship_status_id: Citizenship Status ID
        citizenship_status_name: Citizenship Status Name
        citizenship_status_description: Citizenship Status Description.
        country_reference: The Country reference for the Citizenship Status
        citizenship_status_mapping_reference: The Citizenship Status metadata value the tenanted
            instance maps to
        citizen: Indicates if  the citizenship status indicates citizenship for the country.
        inactive: Inactive Flag.
    """

    class Meta:
        name = "Citizenship_Status_DataType"
        target_namespace = "urn:com.workday/bsvc"

    citizenship_status_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_mapping_reference: Optional[GlobalSetupDataMappingObjectType] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Mapping_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizen: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Citizen",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CitizenshipStatusRequestReferencesType:
    """
    Element containing the references of the Citizenship Statuses requested.

    Attributes:
        citizenship_status_reference: The reference of the Citizenship Status requested.
    """

    class Meta:
        name = "Citizenship_Status_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    citizenship_status_reference: list[CitizenshipStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ClosePositionEventDataType:
    """
    Contains the detailed data for the closure.

    Attributes:
        reason_reference: Reference to the reason for the Closure.
        close_date: Date the Closure takes effect.
    """

    class Meta:
        name = "Close_Position_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Close_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ClosePositionResponseType:
    """
    Responds with the id of the Event and the reference of the Position Restriction being closed.

    Attributes:
        event_reference: Reference to the Position Close Event
        position_or_headcount_reference: Reference of the Position being Closed
        version
    """

    class Meta:
        name = "Close_Position_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_or_headcount_reference: Optional[PositionGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Position_or_Headcount_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementClassificationParametersType:
    """
    Collective Agreement Classification Parameters Element.

    Attributes:
        collective_agreement_classification_parameter_reference: Collective Agreement Classification
            Parameter Reference
        id: ID Text
        factor_option1_reference: Factor Option 1
        factor_option2_reference: Factor Option 2
        factor_option3_reference: Factor Option 3
        factor_option4_reference: Factor Option 4
        factor_option5_reference: Factor Option 5
        inactive: Inactive Boolean
    """

    class Meta:
        name = "Collective_Agreement_Classification_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_classification_parameter_reference: Optional[
        CollectiveAgreementClassificationParameterObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Classification_Parameter_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor_option1_reference: Optional[CollectiveAgreementFactorOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Factor_Option1_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor_option2_reference: Optional[CollectiveAgreementFactorOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Factor_Option2_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor_option3_reference: Optional[CollectiveAgreementFactorOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Factor_Option3_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor_option4_reference: Optional[CollectiveAgreementFactorOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Factor_Option4_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor_option5_reference: Optional[CollectiveAgreementFactorOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Factor_Option5_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactor1DataType:
    """
    Container for the collective agreement factor 1 and factor option 1 data.

    Attributes:
        collective_agreement_factor_1_reference: The collective agreement factor 1.
        collective_agreement_factor_option_1_reference: The collective agreement factor option 1.
    """

    class Meta:
        name = "Collective_Agreement_Factor_1_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_factor_1_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_1_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_option_1_reference: Optional[
        CollectiveAgreementFactorOptionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_Option_1_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactor2DataType:
    """
    Container for the collective agreement factor 2 and factor option 2 data.

    Attributes:
        collective_agreement_factor_2_reference: The collective agreement factor 2.
        collective_agreement_factor_option_2_reference: The collective agreement factor option 2.
    """

    class Meta:
        name = "Collective_Agreement_Factor_2_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_factor_2_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_2_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_option_2_reference: Optional[
        CollectiveAgreementFactorOptionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_Option_2_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactor3DataType:
    """
    Container for the collective agreement factor 3 and factor option 3 data.

    Attributes:
        collective_agreement_factor_3_reference: The collective agreement factor 3.
        collective_agreement_factor_option_3_reference: The collective agreement factor option 3.
    """

    class Meta:
        name = "Collective_Agreement_Factor_3_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_factor_3_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_3_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_option_3_reference: Optional[
        CollectiveAgreementFactorOptionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_Option_3_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactor4DataType:
    """
    Container for the collective agreement factor 4 and factor option 4 data.

    Attributes:
        collective_agreement_factor_4_reference: The collective agreement factor 4.
        collective_agreement_factor_option_4_reference: The collective agreement factor option 4.
    """

    class Meta:
        name = "Collective_Agreement_Factor_4_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_factor_4_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_4_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_option_4_reference: Optional[
        CollectiveAgreementFactorOptionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_Option_4_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactor5DataType:
    """
    Container for the collective agreement factor 5 and factor option 5 data.

    Attributes:
        collective_agreement_factor_5_reference: The collective agreement factor 5.
        collective_agreement_factor_option_5_reference: The collective agreement factor option 5.
    """

    class Meta:
        name = "Collective_Agreement_Factor_5_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_factor_5_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_5_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_option_5_reference: Optional[
        CollectiveAgreementFactorOptionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_Option_5_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactorParameterDataType:
    """
    Encapsulating Element for the Collective Agreement Snapshot Data.

    Attributes:
        order: The Order of the Collective Agreement Factor Parameter.
        collective_agreement_factor_reference: The Collective Agreement Factor for this Collective
            Agreement Factor Parameter.
        collective_agreement_factor_option_reference: The Collective Agreement Factor Option for
            this Collective Agreement Factor Parameter.
    """

    class Meta:
        name = "Collective_Agreement_Factor_Parameter_DataType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 6,
        },
    )
    collective_agreement_factor_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_option_reference: list[
        CollectiveAgreementFactorOptionObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Factor_Option_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactorsMappingType:
    """
    Collective Agreement Factors Mapping Element.

    Attributes:
        factor1_reference: Factor 1
        factor2_reference: Factor 2
        factor3_reference: Factor 3
        factor4_reference: Factor 4
        factor5_reference: Factor 5
    """

    class Meta:
        name = "Collective_Agreement_Factors_MappingType"
        target_namespace = "urn:com.workday/bsvc"

    factor1_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Factor1_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor2_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Factor2_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor3_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Factor3_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor4_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Factor4_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor5_reference: Optional[CollectiveAgreementFactorObjectType] = field(
        default=None,
        metadata={
            "name": "Factor5_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementRequestReferencesType:
    """
    Collective Agreement Request References Element.

    Attributes:
        collective_agreement_reference: Collective Agreement Request References Workset
    """

    class Meta:
        name = "Collective_Agreement_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_reference: list[CollectiveAgreementObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CollectiveAgreementRuleDataType:
    """
    Collective Agreement Eligibility Rule.

    Attributes:
        collective_agreement_eligibility_rule_reference: Collective Agreement Eligibility Rule
    """

    class Meta:
        name = "Collective_Agreement_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommunicationUsageTypeDataType:
    """
    Reference ID for the communication usage type.

    Attributes:
        type_reference: Reference ID for the communication usage type.
        primary: Indicates if the communication method is primary.
    """

    class Meta:
        name = "Communication_Usage_Type_DataType"
        target_namespace = "urn:com.workday/bsvc"

    type_reference: Optional[CommunicationUsageTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    primary: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Primary",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableDefaultGuidelinesDataType:
    """
    Data element containing the compensation guidelines for a compensation change.

    Attributes:
        compensation_package_reference: Compensation Package to assign.
        compensation_grade_reference: Compensation grade to assign. Required if you select a
            compensation package. Doesn't default for Request Compensation Change.
        compensation_grade_profile_reference: Profile within the Compensation Grade to assign.
            Does not default for Request Compensation Change.
        compensation_step_reference: Compensation Step within the Compensation Grade Profile.
    """

    class Meta:
        name = "Compensatable_Default_Guidelines_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_package_reference: Optional[CompensationPackageObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile_reference: Optional[CompensationGradeProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step_reference: Optional[CompensationStepObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableGuidelinesDataType:
    """
    Data element containing the compensation guidelines for a compensation change.

    Attributes:
        compensation_package_reference: Compensation Package to assign.
        compensation_grade_reference: Compensation grade to assign. Required if you select a
            compensation package. Doesn't default for Request Compensation Change.
        compensation_grade_profile_reference: Profile within the Compensation Grade to assign.
            Does not default for Request Compensation Change.
        compensation_step_reference: Compensation Step within the Compensation Grade Profile.
        progression_start_date: Start date for the Compensation Step.
    """

    class Meta:
        name = "Compensatable_Guidelines_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_package_reference: Optional[CompensationPackageObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_reference: Optional[CompensationGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_grade_profile_reference: Optional[CompensationGradeProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step_reference: Optional[CompensationStepObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    progression_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Progression_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableSummaryAmountAnnualizedDataType:
    """
    Data element containing annualized summary compensation information for a worker.

    Attributes:
        total_base_pay: Amount representing the total base pay for the worker in the currency and
            frequency specified.
        total_salary_and_allowances: Amount representing the total salary and allowances for the
            worker in the currency and frequency specified.
        primary_compensation_basis: Amount representing the primary compensation basis for the
            worker in the currency and frequency specified.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
    """

    class Meta:
        name = "Compensatable_Summary_Amount_Annualized_DataType"
        target_namespace = "urn:com.workday/bsvc"

    total_base_pay: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Base_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    total_salary_and_allowances: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Salary_and_Allowances",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableSummaryAmountAnnualizedInReportingCurrencyDataType:
    """
    Data element containing annualized summary compensation information for a worker in the default
    currency.

    Attributes:
        total_base_pay: Amount representing the total base pay for the worker in the currency and
            frequency specified.
        total_salary_and_allowances: Amount representing the total salary and allowances for the
            worker in the currency and frequency specified.
        primary_compensation_basis: Amount representing the primary compensation basis for the
            worker in the currency and frequency specified.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
    """

    class Meta:
        name = "Compensatable_Summary_Amount_Annualized_In_Reporting_Currency_DataType"
        target_namespace = "urn:com.workday/bsvc"

    total_base_pay: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Base_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    total_salary_and_allowances: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Salary_and_Allowances",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableSummaryAmountDataType:
    """
    Data element containing summary compensation information for the worker.

    Attributes:
        total_base_pay: Amount representing the total base pay for the worker in the currency and
            frequency specified.
        total_salary_and_allowances: Amount representing the total salary and allowances for the
            worker in the currency and frequency specified.
        primary_compensation_basis: Amount representing the primary compensation basis for the
            worker in the currency and frequency specified.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
    """

    class Meta:
        name = "Compensatable_Summary_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    total_base_pay: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Base_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    total_salary_and_allowances: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Salary_and_Allowances",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableSummaryAmountHourlyDataType:
    """
    Data element containing summary compensation information for the worker in an hourly frequency
    when the worker has at least one hourly pay plan assigned.

    Attributes:
        total_base_pay: Amount representing the total base pay for the worker in the currency and
            frequency specified.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
    """

    class Meta:
        name = "Compensatable_Summary_Amount_Hourly_DataType"
        target_namespace = "urn:com.workday/bsvc"

    total_base_pay: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Base_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableSummaryAmountInTargetFrequencyDataType:
    """
    Data element containing summary compensation information for a worker converted to their pay
    group frequency.

    Attributes:
        total_base_pay: Amount representing the total base pay for the worker in the currency and
            frequency specified.
        total_salary_and_allowances: Amount representing the total salary and allowances for the
            worker in the currency and frequency specified.
        primary_compensation_basis: Amount representing the primary compensation basis for the
            worker in the currency and frequency specified.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
    """

    class Meta:
        name = "Compensatable_Summary_Amount_In_Target_Frequency_DataType"
        target_namespace = "urn:com.workday/bsvc"

    total_base_pay: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Base_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    total_salary_and_allowances: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Salary_and_Allowances",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyAchievementDataV10Type:
    """
    Wrapper element for Competency Data.

    Attributes:
        competency_level_behavior_reference: Statement about the Competency.
        competency_level_behavior_descriptor: Statement about the Competency.
        assessment_comment: Comments about the competency assessment.
        assessed_on: Date the competency assessment was carried out.
        assessed_by_person_reference: Worker carrying out the competency assessment.
        assessed_by_worker_descriptor: Worker carrying out the competency assessment.
        competency_reference: Reference for the Competency.
        competency_descriptor: Reference for the Competency.
    """

    class Meta:
        name = "Competency_Achievement_Data__v10_Type"
        target_namespace = "urn:com.workday/bsvc"

    competency_level_behavior_reference: Optional[ProficiencyRatingBehaviorObjectType] = field(
        default=None,
        metadata={
            "name": "Competency_Level_Behavior_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    competency_level_behavior_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Competency_Level_Behavior_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessment_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Assessment_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessed_on: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assessed_On",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessed_by_person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Assessed_By_Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessed_by_worker_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Assessed_By_Worker_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    competency_reference: Optional[CompetencyObjectType] = field(
        default=None,
        metadata={
            "name": "Competency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    competency_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Competency_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyProfileForJobDataType:
    """
    Contains the competency profile's information for a position.

    Attributes:
        competency_reference: Reference for the Competency.
        proficiency_rating_reference: A unique identifier for the proficiency rating.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Competency_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    competency_reference: Optional[CompetencyObjectType] = field(
        default=None,
        metadata={
            "name": "Competency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    proficiency_rating_reference: Optional[ProficiencyRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Proficiency_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyQualificationProfileReplacementDataType:
    """
    Replacement element containing Competency Qualifications for the Job Profile When updating a Job
    Profile, all Competencies for the Job Profile will be replaced by the submitted data.

    If no data is submitted, then the existing Competencies are not
    changed.

    Attributes:
        competency_reference: The Competency ID in the Competencies report.
        proficiency_rating_reference: The Proficiency Rating Behavior ID in the Proficiency Rating
            Behavior report.
        required: If Y, Competency is required.
    """

    class Meta:
        name = "Competency_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    competency_reference: Optional[CompetencyObjectType] = field(
        default=None,
        metadata={
            "name": "Competency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    proficiency_rating_reference: Optional[ProficiencyRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Proficiency_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContextuallySecuredOrganizationRequestReferencesType:
    """
    References to specific Organizations to return.

    Attributes:
        organization_reference: References to specific Organizations to return
        skip_non_existing_instances
    """

    class Meta:
        name = "Contextually_Secured_Organization_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    organization_reference: list[OrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    skip_non_existing_instances: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip_Non_Existing_Instances",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContingentWorkerCostInformationDataType:
    """
    This element contains all information related to hiring/contracting a contingent worker.

    This information only needs to be filled in if the worker type is
    for an employee.

    Attributes:
        requester_reference: The worker requesting the new position.
        company_for_purchase_order_reference: The Company ID used on purchase orders.
        supplier_reference: The supplier where the worker comes from.
        currency_reference: The Currency ID to pay the worker.
        spend_category_reference: The Spend Category for this job requisition.
        pay_rate: The suggested pay rate for contract worker.
        frequency_reference: The frequency the worker will be paid.
        maximum_amount: The maximum amount of time that the worker will be paid during the contract.
        worktags_reference: The worktag to help identify this worker in accounting.
    """

    class Meta:
        name = "Contingent_Worker_Cost_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    requester_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Requester_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_for_purchase_order_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Company_for_Purchase_Order_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supplier_reference: Optional[SupplierObjectType] = field(
        default=None,
        metadata={
            "name": "Supplier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    spend_category_reference: Optional[SpendCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Spend_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Pay_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maximum_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    worktags_reference: list[AuditedAccountingWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContingentWorkerTaxAuthorityFormInformationDataType:
    """
    Contingent Worker Tax Authority Form Information.

    Attributes:
        tax_authority_form_type_reference: This is the Tax Authority Form Type for the Contingent
            Worker
    """

    class Meta:
        name = "Contingent_Worker_Tax_Authority_Form_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    tax_authority_form_type_reference: Optional[TaxAuthorityFormTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Tax_Authority_Form_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContractDetailsSubDataType:
    """
    Wrapper element for contingent worker contract details for a filled position.

    Only use for contingent workers. If the element is not sent, the
    existing contract detail data will be kept.

    Attributes:
        contract_pay_rate: The Contract Pay Rate for the position. Automatically calculated based on
            the Compensation and Frequency values.
        currency_reference: The preferred Currency for the contract pay rate.
        frequency_reference: The frequency with which the worker is paid. Workday ignores values
            specified for employees. If empty, Workday will use the existing frequency.
        contract_assignment_details: The Contract Assignment description. If empty, Workday will use
            the existing value.
    """

    class Meta:
        name = "Contract_Details_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contract_pay_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contract_Pay_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_assignment_details: Optional[str] = field(
        default=None,
        metadata={
            "name": "Contract_Assignment_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContributionAmountDataType:
    """
    Contains the contribution amount for the retirement savings election.

    Attributes:
        contribution_amount: The amount of the contribution.
        frequency_reference: A unique identifier for the frequency.
    """

    class Meta:
        name = "Contribution_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ContributionDataType:
    """
    Contains the contribtion information for the spending account election.

    Attributes:
        contribution_amount: The amount of the contribution.
        frequency_reference: A unique identifier for the frequency.
    """

    class Meta:
        name = "Contribution_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CorrectContractContingentWorkerRequestType:
    """
    The top level request element to perform a business process correction on a contract contingent
    worker event.

    Attributes:
        event_reference: The reference for the Contract Contingent Worker event to be corrected.
        comment: The comment about the correction. If left blank, a comment like the following will
            be inserted: "Correcting date from 12/31/2000 to 12/30/2000."
        correct_contract_contingent_worker_data
        version
    """

    class Meta:
        name = "Correct_Contract_Contingent_Worker_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    correct_contract_contingent_worker_data: Optional[CorrectContractContingentWorkerDataType] = (
        field(
            default=None,
            metadata={
                "name": "Correct_Contract_Contingent_Worker_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CorrectContractContingentWorkerResponseType:
    """
    Contains the response for the Correct Contract Contingent Worker operation.

    Attributes:
        event_reference: The reference for the Contract Contingent Worker event that was corrected.
        version
    """

    class Meta:
        name = "Correct_Contract_Contingent_Worker_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CorrectHireEmployeeRequestType:
    """
    The top level request element to perform a business process correction on hire employee.

    Attributes:
        event_reference: The reference for the hire employee event to be corrected.
        comment: The comment about the correction. If left blank, a comment like the following will
            be inserted: "Correcting date from 12/31/2000 to 12/30/2000."
        correct_hire_employee_data
        version
    """

    class Meta:
        name = "Correct_Hire_Employee_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    correct_hire_employee_data: Optional[CorrectHireEmployeeDataType] = field(
        default=None,
        metadata={
            "name": "Correct_Hire_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CorrectHireEmployeeResponseType:
    """
    Contains the response for the Correct Hire Employee Operation.

    Attributes:
        event_reference: The reference for the corrected hire employee event.
        version
    """

    class Meta:
        name = "Correct_Hire_Employee_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CoverageLevelValueDataType:
    """
    Contains the detailed insurance coverage level information for an election.

    Attributes:
        coverage_level_value: The coverage amount selected for the election.
        buy_up_amount: The buy up amount selected for the election.
        guarantee_issue_amount: The guarantee issue amount for the election.
        coverage_level_multiplier: The coverage level multiplier (1x, 2x, etc.) selected for the
            election.
        coverage_level_type: The type of coverage level selected.
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Coverage_Level_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    coverage_level_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Coverage_Level_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    buy_up_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Buy_Up_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    guarantee_issue_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Guarantee_Issue_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    coverage_level_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Coverage_Level_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    coverage_level_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Coverage_Level_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CreateBenefitLifeEventDataType:
    """
    Container for the data in the Create Benefit Life Event sub business process.

    Attributes:
        life_event_type_reference: Reference to the type of Benefit life event.
        life_event_date: Date this life event occurs.
        submit_elections_by: Date that elections need to be submitted by.
    """

    class Meta:
        name = "Create_Benefit_Life_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    life_event_type_reference: Optional[BenefitLifeEventTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Life_Event_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    life_event_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Life_Event_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    submit_elections_by: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Submit_Elections_By",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreatePositionResponseType:
    """
    Responds with the event id for the Position Request Event and the Position Opening Reference (if
    the event was completed).

    Attributes:
        event_reference: Reference to the Request Position event
        position_reference: Reference to the new position (if created automatically from web
            service).
        version
    """

    class Meta:
        name = "Create_Position_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateSubordinateEventDataType:
    """
    Contains information for the subordinate organization.

    Attributes:
        availability_date: The availability date of the subordinate organization
        organization_name: The name of the subordinate organization
        include_organization_id_in_name: When set, the organization ID will be included in the name
            of the subordinate organization
        organization_code: The code of the subordinate organization
        include_organization_code_in_name: When set, the organization's code will be included in the
            name of the subordinate organization
        include_manager_leader_in_name: When set, the manager's name(s) will be included in the name
            of the subordinate organization
        organization_subtype_reference: The subtype of the subordinate organization
        external_url_reference: The external URL of the subordinate organization
        primary_location_reference: The primary location the subordinate organization. When omitted,
            the primary location is inherited from superior organization.
    """

    class Meta:
        name = "Create_Subordinate_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    availability_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Availability_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Organization_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_organization_id_in_name: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Organization_ID_in_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Organization_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_organization_code_in_name: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Organization_Code_in_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_manager_leader_in_name: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Manager_Leader_in_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_subtype_reference: Optional[OrganizationSubtypeObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Subtype_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    external_url_reference: Optional[ExternalUrlobjectType] = field(
        default=None,
        metadata={
            "name": "External_URL_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreditableServiceDataType:
    """
    Wrapper element for the Creditable Service details.

    Attributes:
        creditable_service_type_reference: The Creditable Service's type.
        years: The number of years contributing to the total length of time served for the
            Creditable Service.
        months: The number of months contributing to the total length of time served for the
            Creditable Service.
        days: The number of days contributing to the total length of time served for the Creditable
            Service.
        details: Details providing context for the Creditable Service.
    """

    class Meta:
        name = "Creditable_Service_DataType"
        target_namespace = "urn:com.workday/bsvc"

    creditable_service_type_reference: Optional[CreditableServiceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Creditable_Service_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    years: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Years",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 0,
        },
    )
    months: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Months",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 0,
        },
    )
    days: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Days",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 0,
        },
    )
    details: Optional[str] = field(
        default=None,
        metadata={
            "name": "Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreditableServiceRequestReferencesType:
    """
    Creditable Service Request References.

    Attributes:
        employee_reference: Employee Reference
    """

    class Meta:
        name = "Creditable_Service_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: list[EmployeeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CustomIdDataType:
    """
    Wrapper for Custom Identifier Data.

    Attributes:
        id: Custom Identifier.
        id_type_reference: Custom Identifier Type.
        issued_date: Date the Custom Identifier was issued.
        expiration_date: Expiration Date of the Custom Identifier.
        organization_id_reference: Organization issuing the Custom Identifier.
        custom_description: Description of the Custom Identifier.
    """

    class Meta:
        name = "Custom_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id_type_reference: Optional[CustomIdTypeObjectType] = field(
        default=None,
        metadata={
            "name": "ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_id_reference: Optional[OrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Custom_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CustomOrganizationAssignmentDataType:
    """
    Allows user to add new or delete existing custom organizations.

    If a new Unique custom organization is added - the prior org of that type will be deleted. (The old organization does not have to be submitted with delete flag true).
    If a new non-Unique custom organization is added - the existing org(s) of that type will be retained (unless they are sent with the delete flag true).
    Custom Organizations that are not being modified do not need to be submitted.
    In version v24.2 and earlier, the behavior is "replace": existing custom organizations are removed and the new custom organizations will be added.

    Attributes:
        custom_organization_assignment_reference: The unique identifier for the Custom Organization
            Assignment. When Delete equals Y, this custom organization assignment will be deleted.
            When Delete equals Y and no Custom Organization Assignment value is entered, the field
            will be left empty.
        delete: If Y, the existing custom organization listed in the Custom Organization Assignment
            column is deleted.
    """

    class Meta:
        name = "Custom_Organization_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    custom_organization_assignment_reference: Optional[CustomOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Custom_Organization_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DefaultPositionOrganizationAssignmentsDataType:
    """
    Wrapper element for  the default organization assignments for the Position.

    Attributes:
        company_assignments_reference: Unique identifiers for the default company assignments for
            the Position.
        cost_center_assignments_reference: Unique identifiers for the default cost center
            assignments for the Position.
        region_assignments_reference: Unique identifiers for the default region assignments for the
            Position.
        custom_organization_assignments_reference: Unique identifiers for the default custom
            organization assignments for the Position.
    """

    class Meta:
        name = "Default_Position_Organization_Assignments_DataType"
        target_namespace = "urn:com.workday/bsvc"

    company_assignments_reference: list[CompanyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Company_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cost_center_assignments_reference: list[CostCenterObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Cost_Center_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_assignments_reference: list[RegionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Region_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_organization_assignments_reference: list[CustomOrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Custom_Organization_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeleteWorkerDocumentDataType:
    """
    Documentation Request element for Delete Worker Document.

    Attributes:
        worker_document_reference: The reference IDs for the worker documents.
    """

    class Meta:
        name = "Delete_Worker_Document_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document_reference: Optional[WorkerDocumentObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DeleteWorkerDocumentResponseType:
    """
    Element that contains the worker whose documents are deleted.

    Attributes:
        worker_reference: The reference ID for the worker whose documents you’re deleting.
        version
    """

    class Meta:
        name = "Delete_Worker_Document_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DevelopmentItemVersionDataType:
    """
    Contains detailed data for the referenced Development Item.

    Attributes:
        id: A unique identifier for the Development Item.
        development_item: Title field of the referenced Development Item
        additional_information: Additional Information field for the referenced Development Item
        category_reference: Category field for the referenced Development Item
        development_item_start_date: Start Date field for the referenced Development Item
        development_item_completion_date: Completion Date field for the referenced Development Item
        status_reference: The status of the Development Item.  The status is required and must be an
            active Development Item Status.
        status_note: Status Note field for the referenced Development Item
        updated_by_worker_reference: Updated by Worker Reference is the worker updating the
            Development Item. If left empty, the processing worker will be used.
        relates_to_reference: Tag Reference for Development Items based on Competency, Job Profile,
            and Work Experience Skill.
    """

    class Meta:
        name = "Development_Item_Version_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    development_item: Optional[str] = field(
        default=None,
        metadata={
            "name": "Development_Item",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 140,
        },
    )
    additional_information: Optional[str] = field(
        default=None,
        metadata={
            "name": "Additional_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    category_reference: list[DevelopmentItemCategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    development_item_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Development_Item_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    development_item_completion_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Development_Item_Completion_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    status_reference: Optional[DevelopmentItemStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    status_note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status_Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    updated_by_worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Updated_by_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    relates_to_reference: list[TalentTagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Relates_To_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityStatusSubDataType:
    """
    Container for disability status data for the Personal Information Change business process.

    Attributes:
        disability_reference: The person's Disability.
        disability_status_date: The person's Disability Status Date.
        disability_date_known: The date the Employer first learned about the Disability.
        disability_end_date: The date through which the worker is considered disabled. In some
            countries, this is the date through which the certification for the current level of
            Disability is effective.
        disability_grade_reference: A code or number that identifies the level of Disability.
        disability_degree: A percentage that identifies the worker's level of Disability as of the
            Disability date.
        disability_remaining_capacity: The percentage of labor that the person may work per
            Physician or other Authority.
        disability_certification_authority_reference: The name of the person or agency that
            certified the Disability.
        disability_certification_authority: The name of the person or agency that certified the
            Disability.
        disability_certified_at: The place where the person or agency certified the Disability.
        disability_certification_id: The ID provided to the worker, if any.
        disability_certification_basis_reference: How the worker qualified for the Disability
            Certification.
        disability_severity_recognition_date: The date the Disability was recognized as severe by
            the recognizing Authority.
        disability_fte_toward_quota: The FTE that counts towards the Employer's quota for hiring the
            Disabled.
        disability_work_restrictions: List any work restrictions that apply to the worker.
        disability_accommodations_requested: Describe any accommodations requested by the worker or
            their Care Provider.
        disability_accommodations_provided: Describe any accommodations provided by the Employer.
        disability_rehabilitation_requested: Describe any rehabilitation measures requested by the
            worker or their Care Provider.
        disability_rehabilitation_provided: Describe any rehabilitation measures provided by the
            Employer.
        note: Enter any additional information related to this Disability.
        worker_document_reference: Attach a copy of the certification or other documents related to
            this instance of Disability.
    """

    class Meta:
        name = "Disability_Status_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_reference: Optional[DisabilityObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    disability_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_date_known: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Date_Known",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_grade_reference: Optional[DisabilityGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_degree: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Degree",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )
    disability_remaining_capacity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Remaining_Capacity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )
    disability_certification_authority_reference: Optional[
        DisabilityCertificationAuthorityObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certified_at: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certified_At",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_basis_reference: Optional[DisabilityCertificationBasisObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Disability_Certification_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    disability_severity_recognition_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Severity_Recognition_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_fte_toward_quota: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_FTE_Toward_Quota",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 13,
            "fraction_digits": 1,
        },
    )
    disability_work_restrictions: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Work_Restrictions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_accommodations_requested: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Accommodations_Requested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_accommodations_provided: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Accommodations_Provided",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_rehabilitation_requested: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Rehabilitation_Requested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_rehabilitation_provided: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Rehabilitation_Provided",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_reference: list[WorkerDocumentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityStatusSubDataForRelatedPersonType:
    """
    Container for disability status data for the Personal Information Change business process.

    Attributes:
        disability_reference: The person's disability
        disability_status_date: This person's disability status date
        date_known: The date you (the employer) first learned about the disability.
        disability_end_date: The date through which the Person is considered disabled. In some
            countries, this is the date through which the certification for the current level of
            disability is effective.
        disability_grade_reference: A code or number that identifies the level of disability.
        disability_degree: A percentage that identifies the dependent's level of Disability as of
            the Disability date.
    """

    class Meta:
        name = "Disability_Status_Sub_Data_for_Related_PersonType"
        target_namespace = "urn:com.workday/bsvc"

    disability_reference: Optional[DisabilityObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    disability_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_known: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Known",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_grade_reference: Optional[DisabilityGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_degree: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Degree",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )


@dataclass
class DocumentFieldResultDataType:
    """
    Result of the evaluation of an External Field based on a contextual instance.

    Attributes:
        field_reference: Integration Document Field Reference. Eligibility Criteria element is used
            in conjunction with Workday delivered integrations.
        value: Value
    """

    class Meta:
        name = "Document_Field_Result_DataType"
        target_namespace = "urn:com.workday/bsvc"

    field_reference: Optional[IntegrationDocumentFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditBackgroundCheckDataType:
    """
    Container for the data changed in the Edit Background Check business process.

    Attributes:
        status_date: Background check status date.
        status_reference: Background check status.
        status_comment: Background check status comment.
    """

    class Meta:
        name = "Edit_Background_Check_DataType"
        target_namespace = "urn:com.workday/bsvc"

    status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    status_reference: Optional[BackgroundCheckStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    status_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditEmployeeContractAdditionalDataResponseType:
    """
    Employee Contract effective-dated custom object data.

    Attributes:
        event_reference: Edit additional data event reference.
        employee_contract_reference: Edit additional data employee contract reference.
        effective_date: Edit additional data effective date.
        additional_data
        version
    """

    class Meta:
        name = "Edit_Employee_Contract_Additional_Data_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_reference: Optional[EmployeeContractObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Contract_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_data: list[EffectiveDatedWebServiceAdditionalDataType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditHiringRestrictionsResponseType:
    """
    Responds with the event ID for the Job Restrictions Edit Event, and the Supervisory Organization
    reference.

    Attributes:
        event_reference: Reference to the Job Restrictions Edit Event
        supervisory_organization_reference: Reference to the Supervisory Organization
        version
    """

    class Meta:
        name = "Edit_Hiring_Restrictions_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRestrictionsAdditionalDataResponseType:
    """
    The additional data for the position restriction.

    Attributes:
        event_reference: Edit additional data event reference.
        position_restrictions_reference: Edit additional data position restrictions reference.
        effective_date: Edit additional data effective date.
        additional_data
        version
    """

    class Meta:
        name = "Edit_Position_Restrictions_Additional_Data_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restrictions_reference: Optional[PositionGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Restrictions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_data: list[EffectiveDatedWebServiceAdditionalDataType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositonRestrictionResponseType:
    """
    Responds with the event ID of the Position Restrictions Edit Event, the Position Restriction
    being edited and the workflow state of the event.

    Attributes:
        event_reference: Reference to the Position Restrictions Edit Event.
        position_reference: Reference to Position Restriction edited in this event.
        version
    """

    class Meta:
        name = "Edit_Positon_Restriction_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditServiceDatesBusinessProcessDataType:
    """
    Wrapper element for the Edit Service Dates business process web service.

    Attributes:
        worker_reference: Reference to the Worker.  The service dates specified must be appropriate
            to the worker type (regular, fixed term, contingent).
        edit_service_dates_event_data
    """

    class Meta:
        name = "Edit_Service_Dates_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    edit_service_dates_event_data: Optional[EditServiceDatesEventDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EditServiceDatesResponseType:
    """
    Responds with the Event ID for the Service Dates Change Event.

    Attributes:
        edit_service_dates_event_reference: Event ID of the Service Dates Change Event.
        version
    """

    class Meta:
        name = "Edit_Service_Dates_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    edit_service_dates_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditWorkerAdditionalDataResponseType:
    """
    Woker effective-dated custom object data.

    Attributes:
        event_reference: Edit additional data event reference.
        worker_reference: Edit additional data worker reference.
        effective_date: Edit additional data effective date.
        additional_data
        version
    """

    class Meta:
        name = "Edit_Worker_Additional_Data_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_data: list[EffectiveDatedWebServiceAdditionalDataType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationAttachmentDataType:
    """
    Specify attachments for this educational achievement.

    Attributes:
        file_name: Filename for the attachment.
        comment: Free form text comment about the attachment.
        file: Binary file contents.
        document_category_reference: Category of attachment.
    """

    class Meta:
        name = "Education_Attachment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    document_category_reference: Optional[DocumentCategoryAllObjectType] = field(
        default=None,
        metadata={
            "name": "Document_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EducationProfileForJobDataType:
    """
    Contains the education profile's information for a position.

    Attributes:
        degree_reference: The reference to the degree completed.
        field_of_study_reference: The reference to the field of study for the degree.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Education_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    degree_reference: Optional[DegreeObjectType] = field(
        default=None,
        metadata={
            "name": "Degree_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    field_of_study_reference: Optional[FieldOfStudyObjectType] = field(
        default=None,
        metadata={
            "name": "Field_Of_Study_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationQualificationProfileReplacementDataType:
    """
    Replacement element containing Education Qualifications for the Job Profile When updating a Job
    Profile, all Education Qualifications for the Job Profile will be replaced by the submitted
    data.

    If no data is submitted, then the existing Education Qualifications
    are not changed.

    Attributes:
        degree_reference: The unique identifier of the Degree.
        field_of_study_reference: The Field of Study ID specified in the Fields of Study report.
        required: If Y, Education Qualification Profile is required.
    """

    class Meta:
        name = "Education_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    degree_reference: Optional[DegreeObjectType] = field(
        default=None,
        metadata={
            "name": "Degree_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    field_of_study_reference: Optional[FieldOfStudyObjectType] = field(
        default=None,
        metadata={
            "name": "Field_Of_Study_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EligibilityCriteriaDataType:
    """
    Eligibility Criteria Data.

    Eligibility Criteria element is used in conjunction with Workday
    delivered integrations.

    Attributes:
        field_reference: Integration Document Field Reference. Eligibility Criteria element is used
            in conjunction with Workday delivered integrations.
        as_of_effective_date: Indicates the date when application data, such as benefits and
            compensation, become effective (Also referred to as the Effective Moment). If you don't
            specify a date, this date defaults to today.{+4}
        as_of_entry_date_time: The date and time the data was entered into the system. (This field
            is also referred to as the Entry Moment). If the date isn't specified, the default date
            is the current date and time.
    """

    class Meta:
        name = "Eligibility_Criteria_DataType"
        target_namespace = "urn:com.workday/bsvc"

    field_reference: Optional[IntegrationDocumentFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    as_of_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "As_Of_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_entry_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "As_Of_Entry_DateTime",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmergencyContactDataType:
    """
    Contains the details about an emergency contact.

    Attributes:
        emergency_contact_id: The ID for the emergency contact.
        language_reference: The preferred language for the emergency contact.
        emergency_contact_priority_reference: The order of priority for the emergency contact.
        primary: Flag to specify the emergency contact is primary or not.
        priority: The order of the priority of the emergency contact
    """

    class Meta:
        name = "Emergency_Contact_DataType"
        target_namespace = "urn:com.workday/bsvc"

    emergency_contact_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_reference: list[LanguageObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    emergency_contact_priority_reference: Optional[EmergencyContactPriorityObjectType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_Priority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Primary",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    priority: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Priority",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )


@dataclass
class EmployeeAllowancePlanAssignmentDataType:
    """
    Encapsulating element containing all Allowance Plan Compensation data.

    Attributes:
        compensation_plan_reference: Allowance Plan to update or assign. Does not default for
            Request Compensation Change.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        percent: Percent for the allowance plan. Required if percent allowance plan is entered and
            there is no default percent for the plan. The amount will be calculated using this
            percent. Mutually exclusive from the amount.
        amount: Amount for the allowance plan. Decimal precision of the amount must match the
            currency. Required if amount allowance plan is entered and there is no default amount
            for the plan. Mutually exclusive from the percent.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Allowance_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[AllowanceValuePlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeAllowanceUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Allowance Plan Compensation data.

    Attributes:
        compensation_plan_reference: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        number_of_units: Number of units to assign.
        unit_reference: Reference element representing a unique instance of Unit of Measure.
        frequency_reference: Reference element representing a unique instance of Frequency.
        per_unit_amount: Amount per unit (based on Frequency).
        currency_reference: Reference element representing a unique instance of Currency.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Allowance_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[AllowanceUnitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    unit_reference: Optional[UnitOfMeasureObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeBasePayPlanAssignmentDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        compensation_plan_reference: Salary or hourly plan to update or assign. Doesn't default for
            Request Compensation Change.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        amount: Amount for the salary or hourly plan assignment. Required if the plan has no default
            amount. Decimal precision of the amount must match the currency.  Mutually exclusive
            from the percent.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Base_Pay_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[SalaryPayPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeBonusPlanAssignmentDataType:
    """
    Encapsulating element containing all Bonus Plan Compensation data.

    Attributes:
        compensation_plan_reference: Bonus Plan to update or assign. Does not default for Request
            Compensation Change.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        individual_target_amount: Individual target amount that overrides the default target percent
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        default_target_amount: Target  amount  for this bonus plan.
        individual_target_percent: Individual target percent that overrides the default target
            percent on the plan, provided Allow Target Override is enabled on the plan. Mutually
            exclusive from Individual Target Amount.
        default_target_percent: Target  percentage for this bonus plan.
        guaranteed_minimum: If true, employee is guaranteed the minimum for the bonus plan.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
        percent_assigned: Percent of the bonus assigned. If none entered, default is 100%.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Bonus_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[BonusPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    default_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    default_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_assigned: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_Assigned",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCommissionPlanAssignmentDataType:
    """
    Encapsulating element containing all Commission Plan Compensation data.

    Attributes:
        compensation_plan_reference: Commission plan to update or assign. Does not default for
            Request Compensation Change.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        target_amount: Target amount for the Commission Plan.
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
        draw_amount: Draw amount for the Commission Plan.
        draw_frequency_reference: Reference element representing a unique instance of Frequency for
            the Draw Amount.
        draw_duration: Description of the duration of the draw amount. For informational purposes.
        recoverable: If true, the compensation element is recoverable.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Commission_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[CommissionPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Draw_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    draw_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Draw_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_duration: Optional[str] = field(
        default=None,
        metadata={
            "name": "Draw_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recoverable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Recoverable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationAllowancePlanAssignmentDataType:
    """
    Encapsulating element containing all Allowance Plan Compensation data.

    Attributes:
        allowance_plan_name: Text attribute identifying name of Allowance Plan.
        compensation_element_values_for_allowance_plan_data
    """

    class Meta:
        name = "Employee_Compensation_Allowance_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allowance_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_allowance_plan_data: Optional[
        EmployeeCompensationAllowancePlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationAllowanceUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Allowance Plan Compensation data.

    Attributes:
        allowance_plan_name: Text attribute identifying name of Allowance Plan.
        compensation_element_values_for_unit_allowance_plan_data
    """

    class Meta:
        name = "Employee_Compensation_Allowance_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allowance_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_unit_allowance_plan_data: Optional[
        EmployeeCompensationAllowanceUnitPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Unit_Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationBonusPlanAssignmentDataType:
    """
    Encapsulating element containing all Bonus Plan Compensation data.

    Attributes:
        bonus_plan_name: Text attribute identifying name of Bonus Plan.
        compensation_element_values_for_bonus_plan_data
    """

    class Meta:
        name = "Employee_Compensation_Bonus_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_bonus_plan_data: Optional[
        EmployeeCompensationBonusPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationCalculatedPlanAssignmentDetailDataType:
    """
    Compensation Calculated Plan.

    Attributes:
        currency_reference: Reference element representing a unique instance of Currency.
        frequency_reference: Reference element representing a unique instance of Frequency.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Calculated_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationCommissionPlanAssignmentDataType:
    """
    Encapsulating element containing all Commission Plan Compensation data.

    Attributes:
        commission_plan_name: Text attribute identifying name of Commission Plan.
        compensation_element_values_for_commission_plan_data
    """

    class Meta:
        name = "Employee_Compensation_Commission_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    commission_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_commission_plan_data: Optional[
        EmployeeCompensationCommissionPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationHourlyPlanAssignmentDataType:
    """
    Encapsulating element containing all Hourly Plan Compensation data.

    Attributes:
        hourly_plan_name: Text attribute identifying name of Hourly Plan.
        compensation_element_values_for_base_pay_data
    """

    class Meta:
        name = "Employee_Compensation_Hourly_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    hourly_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hourly_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_base_pay_data: Optional[
        EmployeeCompensationSalaryPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Base_Pay_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationPeriodSalaryPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        compensation_element_reference: Compensation Plan Default Compensation Element for a Period
            Salary Plan.
        compensation_period_reference: Compensation period of time measure.
        currency_reference: A unique identifier for the currency.
        compensation_multiplier: The multiplier for a Period Salary Plan.
        frequency_reference: Reference element representing a unique instance of Frequency.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Period_Salary_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_element_reference: Optional[CompensationElementReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Compensation_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationSalaryPlanAssignmentDataType:
    """
    Encapsulating element containing all Salary  Plan Compensation data.

    Attributes:
        salary_plan_name: Text attribute identifying name of Salary Plan.
        compensation_element_values_for_base_pay_data
    """

    class Meta:
        name = "Employee_Compensation_Salary_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    salary_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Salary_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_base_pay_data: Optional[
        EmployeeCompensationSalaryPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Base_Pay_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationSalaryUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Salary Plan Compensation data.

    Attributes:
        unit_salary_plan_name: Text attribute identifying name of Unit Salary Plan
        compensation_element_values_for_unit_salary_plan_data
    """

    class Meta:
        name = "Employee_Compensation_Salary_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_salary_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_unit_salary_plan_data: Optional[
        EmployeeCompensationSalaryUnitPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationStockPlanAssignmentDetailDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        stock_plan_reference: Stock plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_shares: Stock plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_percent: Individual target percent that overrides the default target
            amount on the plan, provided Allow Target Override is enabled on the plan.
        individual_target_amount: Individual target amount that overrides the default target amount
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        currency_reference: Workday ignores any currency specified for the stock plan and assigns a
            currency based on worker eligibility for stock plans.
        frequency_reference: Calculation Frequency
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Employee_Compensation_Stock_Plan_Assignment_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_reference: Optional[StockPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    individual_target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractCustomObjectDataType:
    """
    Effective dated additional data for a employee contract.

    When updating custom objects that allow multiple instances, data for
    existing instances must appear in the request, otherwise it will be
    removed.

    Attributes:
        effective_date: Effective date of the edit additional data request.
        employee_contract_reference: Employee Contract for edit additional data request.
        business_object_additional_data
    """

    class Meta:
        name = "Employee_Contract_Custom_Object_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_contract_reference: Optional[EmployeeContractObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Contract_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    business_object_additional_data: Optional[EffectiveDatedWebServiceAdditionalDataType] = field(
        default=None,
        metadata={
            "name": "Business_Object_Additional_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContractDataType:
    """
    Contains data for a Pre-Hire Contract.

    Attributes:
        employee_contract_reason_reference: The contract reason defined in the Maintain Employee
            Contract Reasons task.
        employee_contract_id: The employee contract ID for the contract that you're adding or the
            new employee contract ID for an existing contract. When no value is specified in the
            employee contract, Workday creates a new contract with the Employee Contract ID.
        effective_date: The date when the contract takes effect.
        contract_id: The user-defined identifier for the employee contract. This value isn't always
            unique. If empty, Workday automatically populates the existing value.
        contract_type_reference: The contract types defined in the Maintain Employee Contract Types
            task. If empty, Workday automatically populates the existing value.
        contract_start_date: The start date of the contract. Must be on or after the start date of
            hire or additional job staffing event.
        contract_end_date: The end date of the worker contract. When there is a pending change job
            or transfer contract, the end date should be before or the same as the effective date of
            the Change Job event. If empty, Workday automatically populates the existing value.
        employee_contract_collective_agreement_reference: The collective agreements for this
            employee contract.
        maximum_weekly_hours: The Maximum Weekly Hours for the employee contract.
        minimum_weekly_hours: The Minimum Weekly Hours for the employee contract.
        contract_status_reference: The status of the contract, based on the status types defined
            within your organization. The status values will be those defined for the location of
            the employee's primary position.
        position_reference: The Position ID associated with the contract. If empty, Workday
            automatically populates the existing value.
        contract_description: The Contract Description for the employee contract. If empty, Workday
            automatically populates the existing value.
        date_employee_signed: The date the employee signed the contract. Must be within 1 month of
            the Contract Start Date and not later than the Contract End Date.
        date_employer_signed: The date the employer signed the contract. Must be within 1 month of
            the Contract Start Date and not later than the Contract End Date.
        worker_document_reference: You can attach scanned contract images, addendums, or other file
            attachments.
        employee_contract_review_data: Details for the employee contract review.
    """

    class Meta:
        name = "Employee_Contract_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_contract_reason_reference: list[EmployeeContractReasonObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Employee_Contract_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    contract_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Contract_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_type_reference: Optional[EmployeeContractTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Contract_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_collective_agreement_reference: list[CollectiveAgreementObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maximum_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    minimum_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Minimum_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    contract_status_reference: Optional[EmployeeContractStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Contract_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Contract_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_employee_signed: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Employee_Signed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_employer_signed: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Employer_Signed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_reference: list[WorkerDocumentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_review_data: Optional[EmployeeContractReviewDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Contract_Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractRuleDataType:
    """
    Employee Contract Rules Details.

    Attributes:
        order: Order on Maintain Employee Contract Rules by Country Table
        global_staffing_eligibility_rule_reference: Global Staffing Eligibility Rule Reference
        maximum_contract_renewals_allowed: Maximum Contract Renewals Allowed
        allow_unlimited_renewals: Allow Unlimited Renewals
        count_extensions_as_renewals: Count Extensions as Renewals
        maximum_combined_contract_duration: Maximum Combined Contract Duration
        maximum_combined_contract_unit_reference: Maximum Combined Contract Unit Reference
        schedule_review_duration: Schedule Renewal Duration
        schedule_review_unit_reference: Schedule Renewal Unit Reference
        inactive: Inactive
    """

    class Meta:
        name = "Employee_Contract_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 6,
        },
    )
    global_staffing_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    maximum_contract_renewals_allowed: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Contract_Renewals_Allowed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 10,
            "fraction_digits": 0,
        },
    )
    allow_unlimited_renewals: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Unlimited_Renewals",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    count_extensions_as_renewals: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Count_Extensions_as_Renewals",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maximum_combined_contract_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Combined_Contract_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    maximum_combined_contract_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Maximum_Combined_Contract_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    schedule_review_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Schedule_Review_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    schedule_review_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Schedule_Review_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractRulesForCountryRequestCriteriaType:
    """
    Country/Countries Request Criteria.

    Attributes:
        country_reference: Single or Multiple Countries
    """

    class Meta:
        name = "Employee_Contract_Rules_For_Country_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractRulesForCountryRequestReferencesType:
    """
    Employee Contract Rules Table References.

    Attributes:
        employee_contracts_for_country_reference: Employee Contract Rules Table References
    """

    class Meta:
        name = "Employee_Contract_Rules_For_Country_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    employee_contracts_for_country_reference: list[EmployeeContractRulesTableObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contracts_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class EmployeeMeritPlanAssignmentDataType:
    """
    Encapsulating element containing all Merit Plan Compensation data.

    Attributes:
        compensation_plan_reference: Reference element representing a unique instance of Merit
            (Percent) Plan.
        individual_target_percent: Individual target percent that overrides the default target
            percent on the plan, provided Allow Target Override is enabled on the plan. Mutually
            exclusive from Individual Target Amount.
        default_target_percent: Default target percent for the merit plan.
        merit_increase_matrix_reference: Reference element representing a unique instance of Merit
            Increase Matrix.
        guaranteed_minimum: If true, employee is guaranteed the minimum for the merit plan.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Merit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[MeritPercentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    default_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    merit_increase_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Merit_Increase_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeePeriodSalaryPlanAssignmentDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        compensation_plan_reference: Period salary plan to update or assign.  Does not default for
            Request Compensation Change.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        compensation_period_reference: Compensation period of time measure.
        currency_reference: Reference element representing a unique instance of Currency.
        compensation_period_multiplier: The multiplier for a Period Salary Plan.
        frequency_reference: Reference element representing a unique instance of Frequency.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Period_Salary_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[PeriodSalaryPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeProbationPeriodDetailDataType:
    """
    Encapsulating element containing all Probation Period data.

    Including Corrected data.

    Attributes:
        employee_probation_period_event_reference: Probation Period Event Reference for the Worker's
            effective Position
        employee_probation_period_reference: The Probation Period reference.
        effective_date: Effective Date of the Probation Period Event
        start_date: Probation Start Date of the Probation Period belonging to the effective Position
        end_date: Probation End  Date of the Probation Period belonging to the effective Position
        probation_type_reference: Probation Type of the Probation Period belonging to the effective
            Position
        probation_reason_reference: Probation Reason of the Probation Period belonging to the
            effective Position
        extended_end_date: Probation Extended End Date of the Probation Period belonging to the
            effective Position
        note: Note / Comments of the Probation Period belonging to the effective Position
    """

    class Meta:
        name = "Employee_Probation_Period_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_probation_period_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Probation_Period_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_probation_period_reference: Optional[EmployeeProbationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Probation_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_type_reference: Optional[EmployeeProbationPeriodTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_reason_reference: Optional[EmployeeProbationPeriodReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    extended_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Extended_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeSalaryUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Salary Plan Compensation data.

    Attributes:
        compensation_plan_reference: Unit salary plan to update or assign. Doesn't default for
            Request Compensation Change.
        compensation_element_reference: Reference element representing a unique instance of
            Compensation Element.
        unit_reference: Reference element representing a unique instance of Unit of Measure.
        per_unit_amount: Amount per unit (based on Frequency).
        currency_reference: Reference element representing a unique instance of Currency.
        number_of_units: Number of units to assign.
        frequency_reference: Reference element representing a unique instance of Frequency.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Salary_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[SalaryUnitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_element_reference: Optional[CompensationPayEarningObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_reference: Optional[UnitOfMeasureObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeStockPlanAssignmentDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        compensation_plan_reference: Reference element representing a unique instance of Stock Plan.
        percent_of_target_as_option: Percent of target that are options.
        percent_of_target_as_stock: Percent of target that are stocks.
        target_shares: Default target shares for the stock plan.
        individual_target_shares: Individual target share which overrides the default target share
            for the plan.
        target_percent: Default target percent for the stock plan.
        individual_target_amount: Individual target amount which overrides the default target share
            for the plan.
        target_amount: Default target amount for the stock plan.
        individual_target_percent: Individual target percent which overrides the default target
            share for the plan.
        currency_reference: Currency of amount.
        vesting_schedule_reference: Reference element representing a unique instance of Stock
            Vesting Schedule.
        compensation_matrix_reference: Compensation Matrix of plan.
        assignment_effective_date: The more recent of the effective date of this assignment or the
            FTE Change Date (if using).
    """

    class Meta:
        name = "Employee_Stock_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[StockPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_of_target_as_option: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_of_Target_as_Option",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 7,
            "fraction_digits": 4,
        },
    )
    percent_of_target_as_stock: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_of_Target_as_Stock",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 7,
            "fraction_digits": 4,
        },
    )
    target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    individual_target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vesting_schedule_reference: Optional[StockVestingScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Vesting_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_matrix_reference: Optional[CompensationMatrixObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Matrix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assignment_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeTalentAssessmentDataType:
    """
    Contains the information about the employee's potential.

    Attributes:
        potential_reference: The Potential for this Employee.
        achievable_level_reference: The Achievable Level for this Employee.
        retention_risk_reference: The Retention status for this Employee.
        loss_impact_risk_reference: The Loss Impact Status for this Employee
        notes: Notes for this Talent Assessment.
    """

    class Meta:
        name = "Employee_Talent_Assessment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    potential_reference: Optional[PotentialObjectType] = field(
        default=None,
        metadata={
            "name": "Potential_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    achievable_level_reference: Optional[AchievableLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Achievable_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retention_risk_reference: Optional[RetentionObjectType] = field(
        default=None,
        metadata={
            "name": "Retention_Risk_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    loss_impact_risk_reference: Optional[LossImpactObjectType] = field(
        default=None,
        metadata={
            "name": "Loss_Impact_Risk_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndAcademicAppointmentDataType:
    """
    Wrapper element for the End Academic Appointment business process.

    Attributes:
        academic_appointee_reference: Academic Appointee Reference with and Appointment Track to be
            updated
        academic_appointment_track_reference: Reference to the Academic Appointment Track that is
            being ended.
        reason_reference: Reference to the Reason for the End Academic Appointment business process.
        track_end_date: Date that the Academic Appointment Track is being ended.
    """

    class Meta:
        name = "End_Academic_Appointment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    academic_appointee_reference: Optional[AcademicAppointeeEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_appointment_track_reference: Optional[AcademicAppointmentTrackObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointment_Track_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    track_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Track_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EndAdditionalEmployeeJobEventResponseType:
    """
    Responds with the Event ID for the End Additional Job Event.

    Attributes:
        event_reference: Event ID for the End Additional Employee Job Event.
        version
    """

    class Meta:
        name = "End_Additional_Employee_Job_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndAdditionalJobEventDataType:
    """
    Data Element that contains the basic information to end an additional job for an employee.

    All required information must be included. The End Additional Job
    business process (for the employee) will be initiated from this
    information.

    Attributes:
        last_day_of_work: Date for the last day the worker will work on the additional job.  Will
            default to the End Additional Job date if not set.
        reason_reference: Reason that the additional job is ended.
        pay_through_date: Date the worker will be paid through for the additional job. It will
            default to the End Additional Job date if it is not set.
        notify_employee_by_date: Date the worker needs to be notified by.  If it is not set, it will
            be defaulted. When the reason is voluntary , it will default to the end additional job
            date. When the reason is involuntary, it will be default based on the minimum number of
            days required for notification from the position.
        close_position: Boolean to indicate whether the worker's position should be closed. Default
            is no.
        job_overlap_allowed: If Y, allows multiple workers to be placed in a position
            simultaneously. Only applies to position management positions.
    """

    class Meta:
        name = "End_Additional_Job_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[EndAdditionalJobSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    pay_through_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Pay_Through_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notify_employee_by_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notify_Employee_By_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_position: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Close_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Allowed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndContingentWorkerContractEventDataType:
    """
    Data Element that contains the basic information to end the contract of a contingent worker.

    All required information must be included. The End Contingent Worker
    Contract business process will be initiated from this information.

    Attributes:
        last_day_of_work: Date for the last day the worker will work. Will default to the End
            Contract date if not set.
        primary_reason_reference: Primary reason why the worker is being terminated.  This attribute
            is required.
        secondary_reason_reference: Secondary reason for the worker's termination.
        local_termination_reason_reference: Local specific reason for the worker's termination.
        notify_worker_by_date: Date the worker needs to be notified by.  If it is not set, it will
            be defaulted. When the primary termination reason is voluntary , it will default to the
            termination date. When the primary termination reason is involuntary, it will be default
            based on the minimum number of days required for notification from the position.
        regrettable_reference: Enter Yes if the ~worker’s~ departure is regrettable for your
            organization. Enter No if the ~worker’s~ departure isn’t regrettable for your
            organization. If empty, Workday uses an empty value.
        close_position: Boolean to indicate whether the worker's position should be closed. Default
            is no.
        job_overlap_allowed: If Y, allows multiple workers to be placed in a position
            simultaneously. Only applies to position management positions.
    """

    class Meta:
        name = "End_Contingent_Worker_Contract_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_reason_reference: Optional[TerminationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    secondary_reason_reference: list[TerminationSubcategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Secondary_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_termination_reason_reference: Optional[LocalTerminationReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Local_Termination_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notify_worker_by_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notify_Worker_By_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    regrettable_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Regrettable_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_position: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Close_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Allowed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndContingentWorkerContractResponseType:
    """
    Reponds with the event id for the End Contract Event.

    Attributes:
        event_reference: Event id for the End Contingent Worker Contract Event.
        version
    """

    class Meta:
        name = "End_Contingent_Worker_Contract_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndInternationalAssignmentEventDataType:
    """
    Data Element that contains the basic information to end an international assignment job for an
    employee.

    All required information must be included. The End International
    Assignment business process (for the employee) will be initiated
    from this information.

    Attributes:
        last_day_of_work: Date for the last day the worker will work on the additional job.  Will
            default to the End International Assignment date if not set.
        reason_reference: Reason that the international assignment is ended.
        pay_through_date: Date the worker will be paid through for the international assignment. It
            will default to the End International Assignment date if it is not set.
        notify_employee_by_date: Date the worker needs to be notified by.  If it is not set, it will
            be defaulted. When the reason is voluntary , it will default to the end international
            assignment date. When the reason is involuntary, it will be default based on the minimum
            number of days required for notification from the position.
        close_position: Boolean to indicate whether the worker's position should be closed. Default
            is no.
        job_overlap_allowed: If Y, allows multiple workers to be placed in a position
            simultaneously. Only applies to position management positions.
    """

    class Meta:
        name = "End_International_Assignment_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[EndAdditionalJobSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    pay_through_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Pay_Through_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notify_employee_by_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notify_Employee_By_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_position: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Close_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Allowed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndInternationalAssignmentForEmployeeEventResponseType:
    """
    Responds with a reference to the End International Assignment Employee Event.

    Attributes:
        end_international_assignment_for_employee_event_reference: Reference to specific
            international assignment event
        version
    """

    class Meta:
        name = "End_International_Assignment_for_Employee_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    end_international_assignment_for_employee_event_reference: Optional[
        UniqueIdentifierObjectType
    ] = field(
        default=None,
        metadata={
            "name": "End_International_Assignment_for_Employee_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FseWorkerCategoryCriteriaDataType:
    """
    The element containing all necessary information to add, update, or retrieve FSE Worker Category
    Criteria for Worker Category Definition.

    Attributes:
        fse_worker_category_criteria_id: Unique Reference ID for FSE Worker Category Criteria.
        fse_worker_type_grouping_reference: The FSE Non-Standard Worker Category Definition for the
            FSE Worker Category Criteria.
        job_profile_reference: Job Profiles for the FSE Worker Category Criteria.
        job_family_reference: Job Families for the FSE Worker Category Criteria.
    """

    class Meta:
        name = "FSE_Worker_Category_Criteria_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fse_worker_category_criteria_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "FSE_Worker_Category_Criteria_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fse_worker_type_grouping_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "FSE_Worker_Type_Grouping_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyBaseObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FseWorkerCategoryCriteriaRequestReferencesType:
    """
    The FSE Worker Category Criteria References to extract.

    Attributes:
        fse_worker_category_criteria_reference: The FSE Worker Category Criteria References to
            extract
    """

    class Meta:
        name = "FSE_Worker_Category_Criteria_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    fse_worker_category_criteria_reference: list[FseWorkerCategoryCriteriaObjectType] = field(
        default_factory=list,
        metadata={
            "name": "FSE_Worker_Category_Criteria_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class FeedbackReceivedType:
    """
    Contains the informational components of a feedback (comment, date, question asked, sender,
    requester, and type).

    Attributes:
        from_value: The worker who sent the feedback or displayed as anonymous
        requested_by_worker_reference: The worker who requested the feedback
        feedback_type: The feedback type
        date: The date when feedback was submitted
        feedback_response_data: Element for Feedback Comments and Questions.  There can be multiple
            questions per request, thus multiple comments per feedback given.
    """

    class Meta:
        name = "Feedback_ReceivedType"
        target_namespace = "urn:com.workday/bsvc"

    from_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "From",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    requested_by_worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Requested_By_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    feedback_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Feedback_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    feedback_response_data: list[FeedbackResponseType] = field(
        default_factory=list,
        metadata={
            "name": "Feedback_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FieldAndParameterCriteriaDataType:
    """
    Field Result Request Criteria.

    Attributes:
        provider_reference: Field And Parameter Initialization Provider Reference
    """

    class Meta:
        name = "Field_And_Parameter_Criteria_DataType"
        target_namespace = "urn:com.workday/bsvc"

    provider_reference: list[ExternalFieldAndParameterInitializationProviderObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Provider_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class FilterDateTimeZoneDataType:
    """
    DateTimeZone value for filter.

    Attributes:
        filter_date_time: DateTime value for DateTimeZone Filter.
        filter_time_zone_reference: Reference to TimeZone for DateTimeZone Filter.
    """

    class Meta:
        name = "Filter_DateTimeZone_DataType"
        target_namespace = "urn:com.workday/bsvc"

    filter_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Filter_DateTime",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_time_zone_reference: Optional[TimeZoneObjectType] = field(
        default=None,
        metadata={
            "name": "Filter_TimeZone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FirstPersonnelActionFirstLegalAuthorityValueDataType:
    """
    Container Element for the First Legal Authority Value for the First Personnel Action data.

    Attributes:
        first_action_5_c_and_5_d_legal_authority_reference: The Legal Authority associated with 5-C
            and 5-D Legal Authority Value for the First Action.
        parameter_value_5_c_and_5_d_legal_authority
    """

    class Meta:
        name = "First_Personnel_Action_First_Legal_Authority_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_action_5_c_and_5_d_legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "First_Action_5-C_and_5-D_Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_value_5_c_and_5_d_legal_authority: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_5-C_and_5-D_Legal_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FirstPersonnelActionNatureOfActionValueDataType:
    """
    Container Element for the Nature of Action Value for the First Personnel Action data.

    Attributes:
        first_action_5_a_and_5_b_nature_of_action_reference: The Nature of Action associated with
            the 5-A and 5-B Nature of Action Value for the First Action.
        parameter_value_5_a_and_5_b_nature_of_action
    """

    class Meta:
        name = "First_Personnel_Action_Nature_of_Action_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_action_5_a_and_5_b_nature_of_action_reference: Optional[NatureOfActionAllObjectType] = (
        field(
            default=None,
            metadata={
                "name": "First_Action_5-A_and_5-B_Nature_of_Action_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    parameter_value_5_a_and_5_b_nature_of_action: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_5-A_and_5-B_Nature_of_Action",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FirstPersonnelActionSecondLegalAuthorityValueDataType:
    """
    Container Element for the Second Legal Authority Value for the First Personnel Action data.

    Attributes:
        first_action_5_e_and_5_f_legal_authority_reference: The Legal Authority associated with 5-E
            and 5-F Legal Authority Value for the First Action.
        parameter_value_5_e_and_5_f_legal_authority
    """

    class Meta:
        name = "First_Personnel_Action_Second_Legal_Authority_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_action_5_e_and_5_f_legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "First_Action_5-E_and_5-F_Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_value_5_e_and_5_f_legal_authority: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_5-E_and_5-F_Legal_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FreezePositionResponseType:
    """
    Responds with the reference of the Position Restriction being frozen.

    Attributes:
        position_group_freeze_event_reference: Reference to the Position Freeze Event
        version
    """

    class Meta:
        name = "Freeze_Position_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    position_group_freeze_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Group_Freeze_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalityForStaffingTransactionsDataType:
    """
    Contains data for Functionality for Staffing Transactions.

    Attributes:
        id: Contains a reference that identifies a specific Functionality for Staffing Transactions
            configuration.
        business_process_type_reference: Contains the Business Process Type that the Functionality
            for Staffing Transactions configuration applies to.
        functionality_reference: Contains a reference that identifies a specific Functionality
            instance.
        enabled_for_all_security_groups: Specifies if a Functionality for a Business Process Type is
            enabled for all Security Groups.
        security_group_reference: Contains references that identifies specific Security Groups
            allowed for a given Functionality for Staffing Transactions configuration.
    """

    class Meta:
        name = "Functionality_for_Staffing_Transactions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_type_reference: Optional[FunctionalAreaConfigurableObjectType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    functionality_reference: Optional[FunctionalityObjectType] = field(
        default=None,
        metadata={
            "name": "Functionality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    enabled_for_all_security_groups: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Enabled_for_all_Security_Groups",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    security_group_reference: list[SecurityGroupObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Security_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalityForStaffingTransactionsRequestCriteriaType:
    """
    Contains additional criteria for identifying specific Functionality for Staffing Transactions
    configuration instances.

    Attributes:
        business_process_type_reference: Contains a reference that identifies a Business Process
            Type on a Functionality for Staffing Transactions configuration.
        functionality_reference: Contains a reference that identifies the Functionality that's
            enables for a Business Process Type.
    """

    class Meta:
        name = "Functionality_for_Staffing_Transactions_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_type_reference: list[FunctionalAreaConfigurableObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Process_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    functionality_reference: list[FunctionalityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Functionality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalityForStaffingTransactionsRequestReferencesType:
    """
    Contains references that identify specific Functionality for Staffing Transaction configurations
    to retrieve.

    Attributes:
        functionality_for_staffing_transactions_reference: Contains a reference that identifies a
            specific Functionality for Staffing Transactions configuration.
    """

    class Meta:
        name = "Functionality_for_Staffing_Transactions_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    functionality_for_staffing_transactions_reference: list[
        FunctionalAreaConfigurationObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Functionality_for_Staffing_Transactions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class FuturePaymentPlanAssignmentDataType:
    """
    Future payment plan assignment data submitted by the put future payment plan assignment request.

    Attributes:
        compensation_plan_reference: Compensation Plan Reference
        individual_target_amount: Individual Target Amount
        individual_target_currency_reference: Individual Target Currency Reference
        individual_target_payment_date: Individual Target Payment Date
        comment: Comment
    """

    class Meta:
        name = "Future_Payment_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: Optional[FuturePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_payment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Payment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenericDisabilityStatusSubDataType:
    """
    Container for disability status data.

    Attributes:
        disability_reference: The person's Disability.
        disability_status_date: The person's Disability Status Date.
        disability_date_known: The date the Employer first learned about the Disability.
        disability_end_date: The date through which the ~person~ is considered disabled. In some
            countries, this is the date through which the certification for the current level of
            disability is effective.
        disability_grade_reference: A code or number that identifies the level of Disability.
        disability_degree: A percentage that identifies the ~person's~ level of disability as of the
            disability date.
        disability_remaining_capacity: The percentage of labor that the person may work per
            Physician or other Authority.
        disability_certification_authority_reference: The name of the person or agency that
            certified the Disability.
        disability_authority: The name of the person or agency that certified the Disability.
        disability_certified_at: The place where the person or agency certified the Disability.
        disability_certification_id: The ID provided to the ~person~, if any.
        disability_certification_basis_reference: How the ~person~ qualified for the certification.
        disability_severity_recognition_date: The date the Disability was recognized as severe by
            the recognizing Authority.
        disability_fte_toward_quota: The FTE that counts towards the Employer's quota for hiring the
            Disabled.
        disability_work_restrictions: List any work restrictions that apply to the ~person~.
        disability_accommodations_requested: Describe any recommendation requested by the ~person~
            or their care provider.
        disability_accommodations_provided: Describe any accommodations provided by the Employer.
        disability_rehabilitation_requested: Describe any rehabilitation measures requested by the
            ~person~ or their care provider.
        disability_rehabilitation_provided: Describe any rehabilitation measures provided by the
            Employer.
        note: Enter any additional information related to this Disability.
        worker_document_reference: Attach a copy of the certification or other documents related to
            this instance of Disability.
    """

    class Meta:
        name = "Generic_Disability_Status_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_reference: Optional[DisabilityObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    disability_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_date_known: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Date_Known",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_grade_reference: Optional[DisabilityGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_degree: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Degree",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )
    disability_remaining_capacity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Remaining_Capacity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )
    disability_certification_authority_reference: Optional[
        DisabilityCertificationAuthorityObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certified_at: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certified_At",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_basis_reference: Optional[DisabilityCertificationBasisObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Disability_Certification_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    disability_severity_recognition_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Severity_Recognition_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_fte_toward_quota: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_FTE_Toward_Quota",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 13,
            "fraction_digits": 1,
        },
    )
    disability_work_restrictions: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Work_Restrictions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_accommodations_requested: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Accommodations_Requested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_accommodations_provided: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Accommodations_Provided",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_rehabilitation_requested: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Rehabilitation_Requested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_rehabilitation_provided: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Rehabilitation_Provided",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_reference: list[WorkerDocumentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenericMilitaryServiceSubDataType:
    """
    Container for military service data for the Person.

    Attributes:
        military_status_reference: Reference for the person's Military status.
        military_discharge_date: Date the person was discharged from the Military.
        military_status_begin_date: Begin Date for Military Service status.
        military_service_type_reference: Service type for Military Service.
        military_rank_reference: Military Rank for Military Service type.
        notes: Notes for Military Service.
    """

    class Meta:
        name = "Generic_Military_Service_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    military_status_reference: Optional[MilitaryStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    military_discharge_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Military_Discharge_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_status_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Military_Status_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_type_reference: Optional[MilitaryServiceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_rank_reference: Optional[MilitaryRankObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Rank_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeGovernmentIdsRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific  instance or instances of Worker
    and its associated IDs.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Government_IDs_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeLegalNameRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Worker and its
    associated data.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Legal_Name_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeLicensesRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific  instance or instances of Worker
    and its associated IDs.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Licenses_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeOtherIdsRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific  instance or instances of Worker
    and its associated IDs.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Other_IDs_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePassportsAndVisasRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific  instance or instances of Worker
    and its associated IDs.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Passports_and_Visas_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePersonalInformationRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Worker and its
    associated data.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Personal_Information_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePreferredNameRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Worker and its
    associated data.

    Attributes:
        person_reference: A reference to the ID of a role associated with a person. Roles are like
            worker, student, external student etc.  The ID consists of a type attribute which should
            be set to 'Employee_ID' or "Contingent_Worker_ID", for worker or 'Academic_Person_ID'
            for a student
        universal_id_reference: A reference to the Universal ID for a person
    """

    class Meta:
        name = "Get_Change_Preferred_Name_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: list[RoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodsRequestReferencesType:
    """
    Contains a single reference to a Notice Period Target.

    Attributes:
        notice_period_target_reference: Reference to a Notice Period Target.
    """

    class Meta:
        name = "Get_Notice_Periods_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_target_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Target_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GlobalStaffingEligibilityRulesRequestReferencesType:
    """
    Global Staffing Eligibility Rule Request References Element.

    Attributes:
        global_staffing_eligibility_rule_reference: Global Staffing Eligibility Rule Request
            References Workset
    """

    class Meta:
        name = "Global_Staffing_Eligibility_Rules_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    global_staffing_eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GoalDataType:
    """
    Contains the target contribution amount for the spending account election.

    Attributes:
        goal_amount: The amount of the contribution.
        frequency_reference: A unique identifier for the frequency.
    """

    class Meta:
        name = "Goal_DataType"
        target_namespace = "urn:com.workday/bsvc"

    goal_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Goal_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GoalDetailDataType:
    """
    Contains a single Goal Detail (Review Goal or Worker Goal Detail) and the Notes and History.

    Attributes:
        goal_reference_id: Contains the Reference ID for the shared Goal for which this Goal Detail
            provides a new snapshot.
        goal: Contains the Name of the Goal that is the primary way the Goal is identified to the
            User.
        description: Contains an optional Description to expand on the Goal Name and which can
            contain rich text formatting online but the rich text formatting is removed for this
            response.
        organization_goal_reference: Contains an optional reference to an Organization Goal which
            this Goal Detail supports.
        due_date: Contains the Date that the Goal is Due to be completed.
        completion_status_reference: Contains an optional reference to a Completion Status that
            indicates progress of the goal.
        completion_date: Contains the date the Goal was completed.
    """

    class Meta:
        name = "Goal_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    goal_reference_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Goal_Reference_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    goal: Optional[str] = field(
        default=None,
        metadata={
            "name": "Goal",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_goal_reference: Optional[OrganizationGoalObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Goal_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    due_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Due_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    completion_status_reference: Optional[ComponentCompletionObjectType] = field(
        default=None,
        metadata={
            "name": "Completion_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    completion_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Completion_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GovernmentIdDataType:
    """
    Wrapper for the Government Identifier Data.

    Attributes:
        id: Government ID.
        id_type_reference: Government ID Type.
        country_reference: Country issuing the Government Identifier.
        issued_date: Date the Government Identifier was issued.
        expiration_date: Expiration Date of the Government Identifier.
        verification_date: Date the Government Identifier was verified.
        verified_by_reference: Worker who verified the ID.
    """

    class Meta:
        name = "Government_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id_type_reference: Optional[GovernmentIdTypeAllObjectType] = field(
        default=None,
        metadata={
            "name": "ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Verification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verified_by_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Verified_by_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HealthSavingsAccountElectionInfoDataType:
    """
    Benefit Plan Earnings Deduction Details Data.

    Attributes:
        coverage_target_name: Whether Family or Employee is the target of the Health Savings
            Account.
        maximum_annual_contribution_amount: The annual maximum amount total for employee and
            employer contribution in the Health Savings Account.
        currency_reference: The currency of the annual maximum amount for Health Savings Account.
    """

    class Meta:
        name = "Health_Savings_Account_Election_Info_DataType"
        target_namespace = "urn:com.workday/bsvc"

    coverage_target_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Coverage_Target_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maximum_annual_contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Annual_Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class IndividualStockGrantDataType:
    """
    Data element for the Request Stock Grant business process.

    Attributes:
        shares_granted: Number of shares granted for the stock grant.
        grant_percent: Percent of compensation basis allotted to stock grant for a percent stock
            plan. Cannot exceed 10,000% of employee base pay.
        grant_amount: Amount allotted for stock grant for an amount stock plan. Cannot exceed
            10,000% of employee base pay.
        grant_type_reference: Type of stock grant: ISO, RSU, etc. Must correspond to a grant type in
            the stock plan.
        grant_amount_currency_reference: Currency of the Grant Price. Required if Grant Price is
            entered.
        option_pricing_factor: Options pricing factor for stock grant.
        comments: Comments of the stock grant.
        vesting_schedule_reference: Vesting schedule for the stock plan.
        grant_id: Stock grant ID.
        grant_date: Grant date.
        vest_from_date: From Date of the vesting schedule.
        expiration_date: Expiration date of the stock grant.
        grant_price: Grant price for the stock grant.
        currency_reference: Currency of the Grant Price.  Required if Grant Price is entered.
        board_approved: If true, the stock grant has been board approved.
    """

    class Meta:
        name = "Individual_Stock_Grant_DataType"
        target_namespace = "urn:com.workday/bsvc"

    shares_granted: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Shares_Granted",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 15,
            "fraction_digits": 0,
        },
    )
    grant_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    grant_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    grant_type_reference: Optional[StockGrantTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    grant_amount_currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Amount_Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    option_pricing_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Option_Pricing_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 4,
        },
    )
    comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vesting_schedule_reference: Optional[StockVestingScheduleObjectType] = field(
        default=None,
        metadata={
            "name": "Vesting_Schedule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Grant_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Grant_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vest_from_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vest_From_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_price: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Grant_Price",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    board_approved: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Board_Approved",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InstructorEligibilityLineDataType:
    """
    Contains Instructor Eligibility Line Data.

    Attributes:
        assignable_role_reference: Assignable roles for which the instructor is eligible.
        academic_unit_reference: Academic unit where the instructor is eligible to teach.
        academic_level_reference: Academic levels that the instructor is eligible to teach.
        course_subject_reference: Course subjects that the instructor is eligible to teach.
        course_reference: Courses that the instructor is eligible to teach.
        delivery_mode_reference: Delivery modes for which the instructor is eligible.
        course_tag_reference: Course tags for the courses that the instructor is eligible to teach.
        location_reference: Locations where the instructor is eligible to teach.
        educational_taxonomy_code_reference: Educational taxonomy codes for the courses that the
            instructor is eligible to teach.
    """

    class Meta:
        name = "Instructor_Eligibility_Line_DataType"
        target_namespace = "urn:com.workday/bsvc"

    assignable_role_reference: list[AssignableRoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Assignable_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_unit_reference: Optional[AcademicUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_level_reference: list[AcademicLevelObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Academic_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    course_subject_reference: list[CourseSubjectObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Course_Subject_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    course_reference: list[CourseDefinitionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Course_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delivery_mode_reference: list[DeliveryModeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Delivery_Mode_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    course_tag_reference: list[StudentCourseTagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Course_Tag_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    educational_taxonomy_code_reference: list[EducationalTaxonomyCodeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Educational_Taxonomy_Code_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InternalProjectExperienceType:
    """
    Wrapper element for Internal Project Experience information.

    Attributes:
        internal_project_experience_reference: Reference to the Internal Project Experience.
        internal_project_experience_data: Wrapper element for the Internal Project Experience
            information.
    """

    class Meta:
        name = "Internal_Project_ExperienceType"
        target_namespace = "urn:com.workday/bsvc"

    internal_project_experience_reference: Optional[InternalProjectExperienceObjectType] = field(
        default=None,
        metadata={
            "name": "Internal_Project_Experience_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    internal_project_experience_data: list[InternalProjectExperienceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Internal_Project_Experience_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InternationalAssignmentDataType:
    """
    Wrapper element that contains position's international assignment information.

    Attributes:
        international_assignment_type_reference: The International Assignment Type for the
            international assignment position.
        start_international_assignment_reason_reference: Contains the reason from this position's
            Start International Assignment business process.
        expected_assignment_end_date: The End Date for the International Assignment. If empty,
            Workday will use the existing date. This field is informational only. The value is
            effective immediately on update.
        host_country_reference: Contains the host country for worker's international assignment
        home_country_reference: Contains the home country for worker.
    """

    class Meta:
        name = "International_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    international_assignment_type_reference: Optional[AssignmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "International_Assignment_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_international_assignment_reason_reference: Optional[
        EventClassificationSubcategoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Start_International_Assignment_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_assignment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Assignment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    host_country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Host_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    home_country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Home_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InternationalAssignmentSummaryDataType:
    """
    Wrapper element that contains basic information of worker's international assignment if any.

    Attributes:
        has_international_assignment: If the value is yes, it indicates that worker has
            internaitonal assignment
        host_countries_reference: Contains the host countries for worker's international assignment
            job(s)
        home_country_reference: Contains the home country for worker's primary job
    """

    class Meta:
        name = "International_Assignment_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    has_international_assignment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Has_International_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    host_countries_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Host_Countries_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    home_country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Home_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobClassificationDataType:
    """
    Job Classification Data Element.

    Attributes:
        id: Unique Identifier for a Job Classification. On a new entry, this will become the
            Reference ID. When updating an existing Job Classification, you can enter a new value
            here to change the Reference ID.
        job_classification_id: A text value for the Job Classification ID. This is usually defined
            by the outside agency that sets the Job Classification in the group. It does not need to
            be unique.
        description: Job Classification Description
        job_classification_mapping_id_reference: The Workday Owned metadata value the job
            classification maps to
        inactive: Inactive Flag.
    """

    class Meta:
        name = "Job_Classification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Classification_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_mapping_id_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Mapping_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobClassificationGroupRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Job Classification
    Group and its associated data.

    Attributes:
        job_classification_group_reference: A unique identifier used to reference a Job
            Classification Group.
    """

    class Meta:
        name = "Job_Classification_Group_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_group_reference: list[JobClassificationGroupObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class JobClassificationSummaryDataType:
    """
    Contains the job classifications from the job profile for the position and the additional job
    classifications specified for the position.

    Attributes:
        job_classification_reference: A unique identifier for the job classification.
        job_group_reference: A unique identifier for the job group.
        additional: Indicates if the job classification is an additional job classification for the
            position.
    """

    class Meta:
        name = "Job_Classification_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_reference: Optional[JobClassificationObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_group_reference: Optional[JobClassificationGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Additional",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyGroupRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Job Family Group
    and its associated data.

    Attributes:
        job_family_group_reference: A unique identifier used to reference a Job Family Group.
        skip_non_existing_instances
    """

    class Meta:
        name = "Job_Family_Group_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_group_reference: list[JobFamilyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    skip_non_existing_instances: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip_Non_Existing_Instances",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyRequestReferencesType:
    """
    The Job Family reference(s) to be retrieved.

    Does not support job family groups.

    Attributes:
        job_family_reference: Reference element representing a unique instance of Job Family. Does
            not support job family groups.
        skip_non_existing_instances
    """

    class Meta:
        name = "Job_Family_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_reference: list[JobFamilyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    skip_non_existing_instances: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip_Non_Existing_Instances",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobHistoryAchievementDataType:
    """
    Wrapper element for the job history information.

    Attributes:
        job_history_id: External Employment ID. If no value is provided, a new external employment
            will be created. If a value is passed in an a corresponding external employment is not
            found, a new external employment will be created with the provided id.
        remove_job_history: Used for inbound operations to indicate that the Job History should be
            removed for the person.  Will always return false for outbound operations.
        job_title: The Business Title for the job.  Required unless the Job History is being
            removed.
        company: The name of the company.  Either this field or Job History Company Reference is
            required unless the Job History is being removed.
        job_history_company_reference: A reference to an existing Job History Company.  Either this
            field or Company is required unless the Job History is being removed.
        start_date: The start date of employment.  Required unless the Job History is being removed.
        end_date: The end date of employment.
        responsibilities_and_achievements: Description of responsibilities and achievements during
            the tenure of the job.
        location: The location of the job.
        job_reference: References from colleagues, subordinates,managers, associates during the job
            tenure.
        contact: Contact information for the job.
    """

    class Meta:
        name = "Job_History_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_history_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_History_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_job_history: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Job_History",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company: Optional[str] = field(
        default=None,
        metadata={
            "name": "Company",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_history_company_reference: Optional[JobHistoryCompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_History_Company_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    responsibilities_and_achievements: Optional[str] = field(
        default=None,
        metadata={
            "name": "Responsibilities_and_Achievements",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location: Optional[str] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact: Optional[str] = field(
        default=None,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobInterestsDataType:
    """
    Contains the information about the employee's  job interests.

    Attributes:
        job_profile_reference: Indicates an employee's job interest.
    """

    class Meta:
        name = "Job_Interests_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobOverlapRoutingExclusionRuleRequestReferencesType:
    """
    Contains references that identify specific Job Overlap Routing Exclusion Rule instances to
    retrieve.

    Attributes:
        job_overlap_routing_exclusion_rule_reference: Contains a reference that identifies a
            specific Job Overlap Routing Exclusion Rule instance.
    """

    class Meta:
        name = "Job_Overlap_Routing_Exclusion_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    job_overlap_routing_exclusion_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class JobProfileExemptDataType:
    """
    Element containing the Job Profile Exempt data for a Job Profile.

    Attributes:
        location_context_reference: Contains the reference to the Country Reference or Country
            Region Reference for this Job Exempt value. Leave ISO 3166 1 Alpha 2 Code blank when
            there’s a value on Location Context.
        job_exempt: Returns True if the Job Profile is Exempt for the given Country or Country
            Region.
        delete: If True is entered, the Job Exempt for the supplied Country/Country Region reference
            will be deleted.
    """

    class Meta:
        name = "Job_Profile_Exempt_DataType"
        target_namespace = "urn:com.workday/bsvc"

    location_context_reference: Optional[LocationContextObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Context_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_exempt: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Exempt",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobProfileForJobFamilyDataType:
    """
    Element containing the Job Profile reference for a Job Family.

    Attributes:
        job_profile_reference: A unique identifier for the job profile.
        delete: If True is entered, the job profile reference will be deleted.
    """

    class Meta:
        name = "Job_Profile_for_Job_Family_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobProfileInPositionSummaryDataType:
    """
    Contains the job profile for the position.

    Attributes:
        job_profile_reference: A unique identifier for the job profile.
        job_exempt: A boolean attribute that returns true if the job profile is exempt for this
            position. Exempt job profiles are typically for positions that are salaried and not
            eligible for overtime pay.
        management_level_reference: A unique identifier for the management level.
        job_category_reference: A unique identifier for the job category.
        job_family_reference: A unique identifier for the job family.
        job_profile_name: The name of the job profile.
        work_shift_required: A boolean attribute that returns true if a work shift is required on
            the position where this job profile is used.
        critical_job: Boolean attribute indicating whether the job profile is considered a critical
            job.
        difficulty_to_fill_reference: A unique identifier for the difficulty to fill.
    """

    class Meta:
        name = "Job_Profile_in_Position_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_exempt: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Exempt",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    management_level_reference: Optional[ManagementLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Management_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_category_reference: Optional[JobCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyBaseObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_shift_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    critical_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Critical_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    difficulty_to_fill_reference: Optional[DifficultyToFillObjectType] = field(
        default=None,
        metadata={
            "name": "Difficulty_to_Fill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionAssessmentDataType:
    """
    Assessments to be used at the beginning or during the Job Application process.

    For use by Recruiting customers only.

    Attributes:
        inline_assessment_test_reference: The inline assessment associated with the job posting on
            external career sites.
        default_assessment_tests_reference: The default assessments used for ad hoc candidate
            assessments in the job application process.
    """

    class Meta:
        name = "Job_Requisition_Assessment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    inline_assessment_test_reference: Optional[RecruitingAssessmentTestObjectType] = field(
        default=None,
        metadata={
            "name": "Inline_Assessment_Test_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_assessment_tests_reference: list[RecruitingAssessmentTestObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Default_Assessment_Tests_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionQuestionnaireDataType:
    """
    Questionnaires to be used by Job Requisition for Internal and External Career Site Job Postings.

    For use by Recruiting customers only.

    Attributes:
        questionnaire_for_internal_career_site_reference: The primary questionnaire associated with
            the job posting on the internal career site.
        secondary_questionnaire_for_internal_career_site_reference: The secondary questionnaire
            associated with the job posting on the internal career site.
        questionnaire_for_external_career_site_reference: The primary questionnaire associated with
            the job posting on external career sites.
        secondary_questionnaire_for_external_career_site_reference: The secondary questionnaire
            associated with the job posting on external career sites.
    """

    class Meta:
        name = "Job_Requisition_Questionnaire_DataType"
        target_namespace = "urn:com.workday/bsvc"

    questionnaire_for_internal_career_site_reference: Optional[QuestionnaireObjectType] = field(
        default=None,
        metadata={
            "name": "Questionnaire_for_Internal_Career_Site_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    secondary_questionnaire_for_internal_career_site_reference: Optional[
        QuestionnaireObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Secondary_Questionnaire_for_Internal_Career_Site_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    questionnaire_for_external_career_site_reference: Optional[QuestionnaireObjectType] = field(
        default=None,
        metadata={
            "name": "Questionnaire_for_External_Career_Site_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    secondary_questionnaire_for_external_career_site_reference: Optional[
        QuestionnaireObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Secondary_Questionnaire_for_External_Career_Site_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageAbilityDataType:
    """
    Contains the language ability information.

    Attributes:
        language_proficiency_reference: Reference element representing a unique instance of Language
            Proficiency.
        language_ability_type_reference: Reference element representing a unique instance of
            Language Ability Type.
    """

    class Meta:
        name = "Language_Ability_DataType"
        target_namespace = "urn:com.workday/bsvc"

    language_proficiency_reference: Optional[LanguageProficiencyObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Proficiency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_ability_type_reference: Optional[LanguageAbilityTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Ability_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LanguageAbilityProfileDataType:
    """
    Element containing the language ability type and proficiency for a Job Profile Language
    Qualfication language.

    Attributes:
        language_ability_type_reference: The identifier of Language Ability Type.
        language_proficiency_reference: The Language Proficiency ID specified in Language
            Proficiency Levels report.
    """

    class Meta:
        name = "Language_Ability_Profile_DataType"
        target_namespace = "urn:com.workday/bsvc"

    language_ability_type_reference: Optional[LanguageAbilityTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Ability_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    language_proficiency_reference: Optional[LanguageProficiencyObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Proficiency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LeaveRequestsCorrectedDetailDataType:
    """
    Encapsulating element containing all Leave Requests that have corrected data.

    Attributes:
        leave_request_event_reference: Worker Leave Event
        leave_request_description: The description of Leave Request Event.
        leave_return_event_reference: Leave Return reference
        on_leave: Boolean attribute identifying whether the Worker is On Leave (as of As Of Date).
        leave_start_date: Current leave event Start Date.
        estimated_leave_end_date: Current leave event Estimated End Date.
        leave_end_date: Most recent leave event Actual End Date.
        first_day_of_work: First Day of Work.
        leave_last_day_of_work: Last day of work for the worker's leave event.
        leave_of_absence_type_reference: The type of leave.
        links_back_to_prior_event_reference: The leave request that provides entitlement for this
            event
        benefits_effect: Boolean attribute identifying whether the leave event has a Benefits
            Effect.
        payroll_effect: Boolean attribute identifying whether the leave event has a Payroll Effect.
        paid_time_off_accrual_effect: Boolean attribute identifying whether the leave event has a
            Time Off.
        continuous_service_accrual_effect: Boolean attribute identifying whether the leave event has
            a Continuous
        stock_vesting_effect: Boolean attribute identifying whether the leave event has a Stock
            Vesting
        leave_type_reason_reference: Leave Type Reason
        leave_request_additional_fields
    """

    class Meta:
        name = "Leave_Requests_Corrected_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    leave_request_event_reference: Optional[LeaveRequestEventObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_Request_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_request_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Leave_Request_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_return_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_Return_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    on_leave: Optional[bool] = field(
        default=None,
        metadata={
            "name": "On_Leave",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Leave_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    estimated_leave_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Estimated_Leave_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Leave_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Leave_Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_of_absence_type_reference: Optional[LeaveOfAbsenceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_of_Absence_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    links_back_to_prior_event_reference: Optional[LeaveRequestEventObjectType] = field(
        default=None,
        metadata={
            "name": "Links_Back_to_Prior_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefits_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Benefits_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Payroll_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    paid_time_off_accrual_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Paid_Time_Off_Accrual_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    continuous_service_accrual_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Continuous_Service_Accrual_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_vesting_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Stock_Vesting_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_type_reason_reference: Optional[LeaveTypeReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_Type_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_request_additional_fields: Optional[LeaveRequestAdditionalFieldsType] = field(
        default=None,
        metadata={
            "name": "Leave_Request_Additional_Fields",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LeaveStatusDetailDataType:
    """
    Encapsulating element containg all Leave Status data.

    Attributes:
        leave_request_event_reference: Worker Leave Event
        leave_request_description: The description of Leave Request Event.
        leave_return_event_reference: The leave request return event. Contains information to the
            reference of leave return only when the leave has been returned.
        on_leave: Boolean attribute identifying whether the Worker is On Leave (as of As Of Date).
        leave_start_date: Current leave event Start Date.
        estimated_leave_end_date: Current leave event Estimated End Date.
        leave_end_date: Most recent leave event Actual End Date.
        first_day_of_work: First Day of Work.
        leave_last_day_of_work: Last day of work for the worker's leave event.
        leave_of_absence_type_reference: The type of leave.
        benefits_effect: Boolean attribute identifying whether the leave event has a Benefits
            Effect.
        payroll_effect: Boolean attribute identifying whether the leave event has a Payroll Effect.
        paid_time_off_accrual_effect: Boolean attribute identifying whether the leave event has a
            Absence Accrual Effect.
        continuous_service_accrual_effect: Boolean attribute identifying whether the leave event has
            a Continuous Service Accrual Effect.
        stock_vesting_effect: Boolean attribute identifying whether the leave event has a Stock
            Vesting Effect.
        leave_type_reason_reference: Leave Type Reason
        leave_request_additional_fields: Element to capture all the leave request additional fields
    """

    class Meta:
        name = "Leave_Status_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    leave_request_event_reference: Optional[LeaveRequestEventObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_Request_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_request_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Leave_Request_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_return_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_Return_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    on_leave: Optional[bool] = field(
        default=None,
        metadata={
            "name": "On_Leave",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Leave_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    estimated_leave_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Estimated_Leave_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Leave_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_Of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Leave_Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_of_absence_type_reference: Optional[LeaveOfAbsenceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_of_Absence_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefits_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Benefits_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Payroll_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    paid_time_off_accrual_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Paid_Time_Off_Accrual_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    continuous_service_accrual_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Continuous_Service_Accrual_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_vesting_effect: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Stock_Vesting_Effect",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_type_reason_reference: Optional[LeaveTypeReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Leave_Type_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_request_additional_fields: Optional[LeaveRequestAdditionalFieldsType] = field(
        default=None,
        metadata={
            "name": "Leave_Request_Additional_Fields",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LegalAuthorityRequestReferencesType:
    """
    Specify a Legal Authority to retrieve Legal Authority instances and their associated data.

    Attributes:
        legal_authority_reference: A unique identifier used to reference a Legal Authority.
    """

    class Meta:
        name = "Legal_Authority_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    legal_authority_reference: list[LegalAuthorityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class LicenseIdDataType:
    """
    Wrapper for License Identifier Data.

    Attributes:
        id: License Identifier.
        id_type_reference: License Identifier Type.
        country_reference: Country issuing the License Identifier. No more than one Country
            Reference, Country Region Reference, or Authority Reference can be specified.
        country_region_reference: Country Region issuing the License Identifier.  No more than one
            Country Reference, Country Region Reference, or Authority Reference can be specified.
        country_region_descriptor: Country Region issuing the License Identifier.  No more than one
            Country Reference, Country Region Reference, or Authority Reference can be specified.
        authority_reference: Authority issuing the License Identifier. No more than one Country
            Reference, Country Region Reference, or Authority Reference can be specified.
        license_class: License Class.
        issued_date: Date the License Identifier was issued.
        expiration_date: Expiration Date of the License Identifier.
        verification_date: Verification Date of the License Identifier.
        verified_by_reference: Worker who verified the ID.
    """

    class Meta:
        name = "License_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id_type_reference: Optional[LicenseIdTypeAllObjectType] = field(
        default=None,
        metadata={
            "name": "ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_region_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Country_Region_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    authority_reference: Optional[AuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    license_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "License_Class",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Verification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verified_by_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Verified_By_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainEmployeeContractsResponseType:
    """
    Responds with the Employee Contract that was added or updated.

    Attributes:
        employee_contract_event_reference: Event ID of the Employee Contract Event.
        employee_contract_reference: Employee Contract that was added or modified.
        version
    """

    class Meta:
        name = "Maintain_Employee_Contracts_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    employee_contract_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Contract_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_reference: list[EmployeeContractObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainJobOverlapRoutingExclusionRuleRequestReferencesType:
    """
    Contains a reference to the Job Overlap Routing Exclusion Rules configuration.

    Attributes:
        maintain_job_overlap_routing_exclusion_rule_reference: Contains a reference to the Job
            Overlap Routing Exclusion Rules configuration.
    """

    class Meta:
        name = "Maintain_Job_Overlap_Routing_Exclusion_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_job_overlap_routing_exclusion_rule_reference: list[
        JobOverlapConditionRuleObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainJobOverlapRoutingExclusionRulesItemDataType:
    """
    Contains a reference that identifies a specific Condition Rule that you configured for Job
    Overlap Routing Exclusion.

    Attributes:
        id: Contains a reference to the Job Overlap Condition Rule instance.
        order: The order that you configured for the Job Overlap Routing Exclusion Rule.
        job_overlap_routing_condition_rule_reference: Contains a reference that identifies a
            specific Condition Rule that you configured for Job Overlap Routing Exclusion.
    """

    class Meta:
        name = "Maintain_Job_Overlap_Routing_Exclusion_Rules_Item_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 6,
        },
    )
    job_overlap_routing_condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Routing_Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MaximumProbationPeriodDataType:
    """
    Maximum Probation Period Data.

    Attributes:
        maximum_probation_duration: Probation Period Duration
        maximum_probation_unit_reference: Probation Period Unit
    """

    class Meta:
        name = "Maximum_Probation_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maximum_probation_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Maximum_Probation_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    maximum_probation_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Maximum_Probation_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryServiceSubDataType:
    """
    Container for military service data for the Change Personal Information business process.

    Attributes:
        military_status_reference: Reference for the person's Military status.
        military_discharge_date: Date the person was discharged from the Military.
        military_status_begin_date: Begin Date for Military Service status.
        military_service_type_reference: Service type for Military Service.
        military_rank_reference: Military Rank for Military Service type.
        notes: Notes for Military Service.
        military_discharge_type_reference: Reference for the person's Military Discharge Type.
    """

    class Meta:
        name = "Military_Service_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    military_status_reference: Optional[MilitaryStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    military_discharge_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Military_Discharge_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_status_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Military_Status_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_type_reference: Optional[MilitaryServiceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_rank_reference: Optional[MilitaryRankObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Rank_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_discharge_type_reference: Optional[MilitaryDischargeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Discharge_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MoveWorkersByOrganizationPositionDataType:
    """
    Contains the Move Workers (By Organization) position and worker reference.

    Attributes:
        position_to_move_reference: If Staff Out is Supervisory: Contains the Position Restriction
            or filled Position Management or Job Management Position to move out of this
            organization If Staff Out is non Supervisory: Contains the unfilled Position
            Restriction, Headcount Restriction, or Position Management, Headcount Management, or Job
            Management Position to move out of this organization. The instances are not valid if
            they have later transactions that would conflict with this change. For instance, - the
            sup org cannot be changed if there is a later dated completed vacate event for the
            filled position (since the current sup org is saved on the event). - the sup org cannot
            be changed (on a Position Restriction) if there is a later dated fill event (since the
            proposed sup org is saved on that event) - the non sup org cannot be changed if there is
            a later dated event that changes or vacates that org on the instance
        worker_for_position_reference: Contains the worker for the position to be moved. This
            reference will be ignored except in the case of overlapped positions for non-supervisory
            orgs. If the position ID in the position reference has more than one filled position (as
            of the effective date), this worker reference must be supplied to indicate which filled
            position to actually move.
    """

    class Meta:
        name = "Move_Workers_By_Organization_Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_to_move_reference: Optional[StaffingInterfaceObjectType] = field(
        default=None,
        metadata={
            "name": "Position_to_Move_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_for_position_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_for_Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MoveWorkersByOrganizationResponseType:
    """
    Responds with the Event ID of the Move Workers (By Organization) event.

    Attributes:
        move_workers_by_organization_reference: Event ID of the Move Workers (By Organization)
            event.
        version
    """

    class Meta:
        name = "Move_Workers_By_Organization_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    move_workers_by_organization_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Move_Workers_By_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NationalIdDataType:
    """
    Wrapper for National Identifier Data.

    Attributes:
        id: National Identifier ID.
        id_type_reference: National Identifier Type.
        country_reference: Country issuing National Identifier.
        issued_date: Date the National Identifier was issued.
        expiration_date: Expiration Date of the National Identifier.
        verification_date: Date the National Identifier was verified.
        series: Series is only used for a select group of countries. Brazil, Romania, Russian
            Federation, Ukraine, Belarus
        issuing_agency: Issuing Agency is only used for a select group of countries. Colombia,
            Brazil, Poland, Indonesia, Romania, Vietnam, Russian Federation, Ukraine, Belarus,
            France and Greece
        verified_by_reference: Worker who verified the ID.
    """

    class Meta:
        name = "National_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id_type_reference: Optional[NationalIdTypeObjectType] = field(
        default=None,
        metadata={
            "name": "ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Verification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    series: Optional[str] = field(
        default=None,
        metadata={
            "name": "Series",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issuing_agency: Optional[str] = field(
        default=None,
        metadata={
            "name": "Issuing_Agency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verified_by_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Verified_By_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NatureOfActionsSecondaryRequestReferenceType:
    """
    Nature of Actions Secondary Request Reference Element.

    Attributes:
        nature_of_action_series_reference: Unique identifier for Nature of Action Series reference
    """

    class Meta:
        name = "Nature_of_Actions_Secondary_Request_ReferenceType"
        target_namespace = "urn:com.workday/bsvc"

    nature_of_action_series_reference: list[NatureOfActionSeriesObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Nature_of_Action_Series_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoShowEmployeeDataType:
    """
    Web service for a No Show Employee.

    This web service will run the No Show Business Process.

    Attributes:
        employee_reference: Employee to No Show
        mark_no_show_reference: Mark as No Show field
        eligible_rehire_reference: Eligible for Rehire field
        reason_reference: The reason a new employee is a no show.
    """

    class Meta:
        name = "No_Show_Employee_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    mark_no_show_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Mark_No_Show_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_rehire_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_Rehire_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoShowEventResponseType:
    """
    Responds with the Event ID for the No Show Event.

    Attributes:
        event_reference: The Event ID for the No Show
        version
    """

    class Meta:
        name = "No_Show_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodDataType:
    """
    Detail notice period data for employer and employee.

    Attributes:
        notice_period_reference: Notice Period From
        notice_period_duration: Notice Period Duration
        notice_period_unit_reference: Notice Period Unit
        date_and_time_adjustment_reference: Notice Period Adjustment
        notice_period_is_custom: The notice period presented is a custom notice period.
        overridden_notice_period_reference: Reference to the Notice Period that was overridden by a
            custom Notice Period.
    """

    class Meta:
        name = "Notice_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notice_period_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    notice_period_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_and_time_adjustment_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Date_And_Time_Adjustment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notice_period_is_custom: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Is_Custom",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    overridden_notice_period_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Overridden_Notice_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodEligibilityRuleRequestReferencesType:
    """
    Notice Period Eligibility Rules Request References.

    Attributes:
        notice_period_eligibility_rule_reference: Notice Period Eligibility Rules Request References
            Work Set
    """

    class Meta:
        name = "Notice_Period_Eligibility_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Notice_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class NoticePeriodLineDataType:
    """
    Adds a row to the table.

    Attributes:
        order: Order
        eligibility_rule_reference: Notice Period Eligibility Rule Reference
        has_notice_period: Has Notice Period
        for_employer: For Employer
        for_employee: For Employee
        duration: Duration
        unit_reference: Date and Time Unit Reference
        adjustment_reference: Date And Time Adjustment
        inactive: Inactive
    """

    class Meta:
        name = "Notice_Period_Line_DataType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 6,
        },
    )
    eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    has_notice_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Has_Notice_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    for_employer: Optional[bool] = field(
        default=None,
        metadata={
            "name": "For_Employer",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    for_employee: Optional[bool] = field(
        default=None,
        metadata={
            "name": "For_Employee",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    adjustment_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Adjustment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodsForCountryRequestCriteriaType:
    """
    Request Criteria.

    Attributes:
        country_reference: Single or Multiple Countries
    """

    class Meta:
        name = "Notice_Periods_For_Country_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodsForCountryRequestReferencesType:
    """
    Use this element to request specific notice periods setup tables given reference ID values.

    Attributes:
        maintain_notice_periods_for_country_reference: Notice Periods For Country Reference
    """

    class Meta:
        name = "Notice_Periods_For_Country_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_notice_periods_for_country_reference: list[NoticePeriodsSetupTableObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Notice_Periods_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class OnboardingSetupDataType:
    """
    Container for data used in Onboarding Setup sub business process.

    Attributes:
        onboarding_setup_template_reference: The onboarding setup template used to default the
            onboarding setup event. If this field is left empty, an onboarding setup template will
            be chosen via condition rule.
    """

    class Meta:
        name = "Onboarding_Setup_DataType"
        target_namespace = "urn:com.workday/bsvc"

    onboarding_setup_template_reference: Optional[OnboardingSetupTemplateObjectType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Template_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentDataType:
    """
    Data Element that contains the one-time payment information.

    Attributes:
        one_time_payment_plan_reference: One-time payment plan for the one-time payment. If Multiple
            One-Time Payments is enabled on the Edit Tenant Setup - HCM task, there can be multiple
            plans.
        scheduled_payment_date: Date the employee will receive the one-time payment. Workday
            defaults the effective date if a Scheduled Payment Date is not provided. Multiple One-
            Time Payments must be enabled on the Edit Tenant Setup - HCM task.
        clawback_date: Enter a clawback date for this one-time payment. Payment is no longer
            eligible for recovery after this date.
        coverage_start_date: Start date of the period a FLSA-eligible wage increase applies.
        coverage_end_date: End date of the period a FLSA-eligible wage increase applies.
        amount: Amount of the one time payment.  Decimal precision of the amount must match the
            currency.  This is mutually exclusive with the percent.
        percent: Percent of the calculation basis defined on the one- time payment plan. Workday
            calculates the amount based on this percent. This is mutually exclusive with the amount.
        currency_reference: Currency for the one-time payment. Defaults to the one-time payment plan
            currency default if not provided.
        comment: Comment for the one-time payment.
        do_not_pay: If True, Workday Payroll doesn't process this one- time payment.
        costing_company_reference: Optional: Specify a costing company to charge this one-time
            payment to.  Intercompany Accounting must be enabled in Edit Tenant Setup - Payroll.
        one_time_payment_worktags_reference: The worktags associated with this one-time payment. If
            provided, the worktag type must match that of the Worktag Balancing Configuration unless
            the employee has that organizational assignment.
    """

    class Meta:
        name = "One-Time_Payment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    one_time_payment_plan_reference: Optional[OneTimePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "One_Time_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    scheduled_payment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Scheduled_Payment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    clawback_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Clawback_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_pay: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Pay",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_company_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Costing_Company_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    one_time_payment_worktags_reference: list[TenantedPayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "One_Time_Payment_Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationAssignmentsDataType:
    """
    Wrapper element for the default organization assignments for this organization.

    Attributes:
        organization_type_reference: A unique identifier for the type of organization.
        organization_reference: A unique identifier for the organization.
    """

    class Meta:
        name = "Organization_Assignments_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_type_reference: Optional[OrganizationTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    organization_reference: Optional[OrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationAssignmentsForJobRequisitionDataType:
    """
    Wrapper element for the default organization assignments for this job requisition.

    Attributes:
        company_assignment_reference: The identifier for Company.
        cost_center_assignment_reference: The identifier for Cost Center.
        region_assignment_reference: The identifier for Region.
        business_unit_assignment_reference: The identifier for Business Unit.
        grant_assignment_reference: The identifier for Grant.
        program_assignment_reference: The identifier for Program.
        fund_assignment_reference: The identifier for Fund.
        gift_assignment_reference: The identifier for Gift.
        custom_organization_assignment_reference: The identifier for Custom Organization.
    """

    class Meta:
        name = "Organization_Assignments_for_Job_Requisition_DataType"
        target_namespace = "urn:com.workday/bsvc"

    company_assignment_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Company_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cost_center_assignment_reference: Optional[CostCenterObjectType] = field(
        default=None,
        metadata={
            "name": "Cost_Center_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_assignment_reference: Optional[RegionObjectType] = field(
        default=None,
        metadata={
            "name": "Region_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_unit_assignment_reference: Optional[BusinessUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Business_Unit_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_assignment_reference: Optional[GrantObjectType] = field(
        default=None,
        metadata={
            "name": "Grant_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    program_assignment_reference: Optional[ProgramObjectType] = field(
        default=None,
        metadata={
            "name": "Program_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fund_assignment_reference: Optional[FundObjectType] = field(
        default=None,
        metadata={
            "name": "Fund_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gift_assignment_reference: Optional[GiftObjectType] = field(
        default=None,
        metadata={
            "name": "Gift_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_organization_assignment_reference: list[CustomOrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Custom_Organization_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationHierarchyDataType:
    """
    Contains information regarding organizations just adjacent in the hierarchy.

    Attributes:
        top_level_organization_reference: Reference information for the top-level node.
        superior_organization_reference: Reference information for immediately superior Organization
            to the current Organization. Will only appear for Hierarchical Organizations.
        subordinate_organization_reference: Reference information for all Organizations immediately
            subordinate to the current Organization.  Will only appear for Hierarchical
            Organizations.
        included_organization_reference: Reference information for all included Organizations.  Will
            only appear for Hierarchical Organizations that include other organizations as members.
        included_in_organization_reference: Reference information for Organizations that include
            this Organization in their Organization hierarchy
    """

    class Meta:
        name = "Organization_Hierarchy_DataType"
        target_namespace = "urn:com.workday/bsvc"

    top_level_organization_reference: Optional[OrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Top-Level_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    superior_organization_reference: Optional[OrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Superior_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    subordinate_organization_reference: list[OrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Subordinate_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    included_organization_reference: list[OrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Included_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    included_in_organization_reference: list[OrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Included_In_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationRoleAssignmentDataType:
    """
    Wrapper element for a Organization Role Assignment.

    Attributes:
        role_assigner_reference: The Role Assigner (e.g., Organization or Project) this role
            assignment is for.
        organization_role_reference: The Organization Role being assigned.
        role_assignee_reference: The positions to assign to this role assignment.
        single_assignment_manager_reference: Position explicitly assigned as 'Single Assignment
            Manager' for a Supervisory org. Must be a position assigned to the Manager role and in
            'Maintain Assignable Roles' for the Manager role, the 'Restricted to Single Assignment'
            option must be turned off. If this field is left blank, the position specified for
            'Single Assignment Manager' will be removed.
    """

    class Meta:
        name = "Organization_Role_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    role_assigner_reference: Optional[RoleAssignerObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assigner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_role_reference: Optional[AssignableRoleObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    role_assignee_reference: list[RoleeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Role_Assignee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    single_assignment_manager_reference: Optional[RoleeObjectType] = field(
        default=None,
        metadata={
            "name": "Single_Assignment_Manager_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationRoleAssignmentWwsDataType:
    """
    Contains information about organization role assignments.

    Attributes:
        role_reference: A unique identifier for the organization role.
        worker_reference: A unique identifier that can be used to reference a worker(s) that fills
            the organization role.
    """

    class Meta:
        name = "Organization_Role_Assignment_WWS_DataType"
        target_namespace = "urn:com.workday/bsvc"

    role_reference: Optional[AssignableRoleObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationRoleAssignmentForWorkerDataType:
    """
    Contains the organzation role information.

    Attributes:
        role_assigner_reference: A unique identifier for the organization.
        effective_date: The Effective Date of the Assigned, Defaulted, or Inherited Role Assignment
        assignment_from: The way the role was assigned to the worker. Valid values are:  Assigned,
            Default, Inherited
    """

    class Meta:
        name = "Organization_Role_Assignment_for_Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    role_assigner_reference: Optional[RoleAssignerObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assigner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_from: Optional[str] = field(
        default=None,
        metadata={
            "name": "Assignment_From",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OverallEvaluationDetailDataType:
    """
    The overall section evaluation information (rating, comments) for the evaluator.

    Attributes:
        rating_reference: The overall rating assigned to the review.
        comment: The overall comment assigned to the review.
    """

    class Meta:
        name = "Overall_Evaluation_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    rating_reference: Optional[ReviewRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OverrideNoticePeriodDataType:
    """
    Adds or updates the unit and duration for a custom notice period.

    Attributes:
        duration: The duration for Employer Notice Period. Example: Number of Days, Weeks, or
            Months.
        unit_reference: The Date and Time Unit.  Example: Days, Weeks, or Months.
        adjustment_reference: The notice period adjustment. Example: 15th or end of month, or end of
            month.
    """

    class Meta:
        name = "Override_Notice_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    adjustment_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Adjustment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ParMassActionType:
    """
    PAR Mass Action Element.

    Attributes:
        par_mass_action_reference: A unique identifier for the PAR Mass Action requested.
        par_mass_action_data
    """

    class Meta:
        name = "PAR_Mass_ActionType"
        target_namespace = "urn:com.workday/bsvc"

    par_mass_action_reference: Optional[ParMassActionObjectType] = field(
        default=None,
        metadata={
            "name": "PAR_Mass_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    par_mass_action_data: list[ParMassActionDataType] = field(
        default_factory=list,
        metadata={
            "name": "PAR_Mass_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ParMassActionRequestReferencesType:
    """
    Utilize the Request References element to retrieve specific instance(s) of PAR Mass Action and
    its associated data.

    Attributes:
        par_mass_action_reference: A unique identifier for the PAR Mass Action requested.
    """

    class Meta:
        name = "PAR_Mass_Action_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    par_mass_action_reference: list[ParMassActionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "PAR_Mass_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ParVariableDataType:
    """
    PAR Variable Data element.

    Attributes:
        parameter_name: The name of the PAR Variable
        parameter_type_reference: Unique identifier for the PAR Variable Type reference
    """

    class Meta:
        name = "PAR_Variable_DataType"
        target_namespace = "urn:com.workday/bsvc"

    parameter_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Parameter_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_type_reference: Optional[ParVariableTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Parameter_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PassportIdDataType:
    """
    Wrapper for Passport Identifier data.

    Attributes:
        id: Passport Identifier.
        id_type_reference: Passport Identifier Type.
        country_reference: Country issuing the Passport Identifier.
        issued_date: Date the Passport Identifier was issued.
        expiration_date: Expiration Date of the Passport Identifier.
        verification_date: Verification Date of the Passport Identifier.
        verified_by_reference: Worker who verified the ID.
    """

    class Meta:
        name = "Passport_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id_type_reference: Optional[PassportIdTypeAllObjectType] = field(
        default=None,
        metadata={
            "name": "ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Verification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verified_by_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Verified_By_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayGroupAssignmentCorrectOrRescindedOrganizationDataType:
    """
    This element reports Pay Group Assignment rescind events.

    Attributes:
        effective_date: Effective Date of the original Assign Pay Group Event
        completed_on: Completed Date
        event_corrected: Pay Group Assignment Corrected?
        event_rescinded: Pay Group Assignment Rescinded?
        original_pay_group_reference: The original Pay Group that the Employee belonged to prior the
            Pay Group Assignment.
        proposed_pay_group_reference: The Pay Group to which the Employee was to be assigned.
    """

    class Meta:
        name = "Pay_Group_Assignment_Correct_or_Rescinded_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    completed_on: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Completed_On",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_corrected: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Event_Corrected",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_rescinded: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Event_Rescinded",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_pay_group_reference: Optional[PayGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Original_Pay_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    proposed_pay_group_reference: Optional[PayGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Proposed_Pay_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PayrollInterfaceContributionAmountDataType:
    """
    Contains the payroll interface contribution amount for the retirement savings election.

    Attributes:
        contribution_amount: The amount of the contribution.
        frequency_reference: A unique identifier for the frequency.
    """

    class Meta:
        name = "Payroll_Interface_Contribution_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PayrollInterfaceContributionDataType:
    """
    Contains the payroll interface contribution information for the spending account election.

    Attributes:
        contribution_amount: The amount of the contribution.
        frequency_reference: A unique identifier for the frequency.
    """

    class Meta:
        name = "Payroll_Interface_Contribution_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonDisabilityStatusDataType:
    """
    Wrapper element for the disability status information for the person.

    Attributes:
        disability_reference: The person's Disability.
        disability_status_date: The person's Disability Status Date.
        disability_date_known: The date the Employer first learned about the Disability.
        disability_end_date: The date through which the worker is considered disabled. In some
            countries, this is the date through which the certification for the current level of
            Disability is effective.
        disability_grade_reference: A code or number that identifies the level of Disability.
        disability_degree: A percentage that identifies the worker's level of Disability as of the
            Disability date.
        disability_remaining_capacity: The percentage of labor that the person may work per
            Physician or other Authority.
        disability_certification_authority_reference: The name of the person or agency that
            certified the Disability.
        disability_certification_authority: The name of the person or agency that certified the
            Disability.
        disability_certified_at: The place where the person or agency certified the Disability.
        disability_certification_id: The ID provided to the worker, if any.
        disability_certification_basis_reference: How the worker qualified for the Disability
            Certification.
        disability_severity_recognition_date: The date the Disability was recognized as severe by
            the recognizing Authority.
        disability_fte_toward_quota: The FTE that counts towards the Employer's quota for hiring the
            Disabled.
        disability_work_restrictions: List any work restrictions that apply to the worker.
        disability_accommodations_requested: Describe any accommodations requested by the worker or
            their Care Provider.
        disability_accommodations_provided: Describe any accommodations provided by the Employer.
        disability_rehabilitation_requested: Describe any rehabilitation measures requested by the
            worker or their Care Provider.
        disability_rehabilitation_provided: Describe any rehabilitation measures provided by the
            Employer.
        note: Enter any additional information related to this Disability.
        worker_document_reference: Attach a copy of the certification or other documents related to
            this instance of Disability.
        disability_status_reference: Reference ID for the Disability Status.
    """

    class Meta:
        name = "Person_Disability_Status_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_reference: Optional[DisabilityObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    disability_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_date_known: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Date_Known",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_grade_reference: Optional[DisabilityGradeObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_degree: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Degree",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )
    disability_remaining_capacity: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_Remaining_Capacity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 8,
            "fraction_digits": 2,
        },
    )
    disability_certification_authority_reference: Optional[
        DisabilityCertificationAuthorityObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_authority: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certified_at: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certified_At",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Certification_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_certification_basis_reference: Optional[DisabilityCertificationBasisObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Disability_Certification_Basis_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    disability_severity_recognition_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disability_Severity_Recognition_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_fte_toward_quota: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Disability_FTE_Toward_Quota",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 13,
            "fraction_digits": 1,
        },
    )
    disability_work_restrictions: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Work_Restrictions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_accommodations_requested: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Accommodations_Requested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_accommodations_provided: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Accommodations_Provided",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_rehabilitation_requested: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Rehabilitation_Requested",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_rehabilitation_provided: Optional[str] = field(
        default=None,
        metadata={
            "name": "Disability_Rehabilitation_Provided",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_reference: list[WorkerDocumentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_status_reference: Optional[DisabilityStatusReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonMilitaryServiceDataType:
    """
    Wrapper element for the military service information for the person.

    Attributes:
        status_reference: Person's Military Status.
        discharge_date: Date the person was discharged from the Military.
        status_begin_date: Begin Date for Military Service status.
        military_service_type_reference: Military Service Type.
        military_rank_reference: Military Rank for Military Service Type.
        notes: Notes for Military Service.
        military_service_reference: Reference ID for Military Service.
        military_discharge_type_reference: Military Discharge Type
    """

    class Meta:
        name = "Person_Military_Service_DataType"
        target_namespace = "urn:com.workday/bsvc"

    status_reference: Optional[MilitaryStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    discharge_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Discharge_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    status_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Status_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_type_reference: Optional[MilitaryServiceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_rank_reference: Optional[MilitaryRankObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Rank_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_reference: Optional[MilitaryServiceReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_discharge_type_reference: Optional[MilitaryDischargeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Discharge_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonNamePrefixDataType:
    """
    Contains the prefixes for a name.

    Attributes:
        title_reference: The description of the reference to the Title of a person.
        title_descriptor: The description of the reference to the Title of a person.
        salutation_reference: A reference to the Form of Address for a person. This is only valid
            for the country of Germany.
    """

    class Meta:
        name = "Person_Name_Prefix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    title_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = field(
        default=None,
        metadata={
            "name": "Title_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    title_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Title_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salutation_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = field(
        default=None,
        metadata={
            "name": "Salutation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonNameSuffixDataType:
    """
    Contains the suffixes for a name.

    Attributes:
        social_suffix_reference: A reference to the description of Social Suffix for a person.
        social_suffix_descriptor: A reference to the description of Social Suffix for a person.
        academic_suffix_reference: A reference to the Academic Suffix for a person. This is only
            valid for the country of Australia.
        hereditary_suffix_reference: A reference to the Hereditary Suffix for a person. This is only
            valid for the country of Australia.
        honorary_suffix_reference: A reference to the Honorary Suffix for a person. This is only
            valid for the country of Australia.
        professional_suffix_reference: A reference to the Professional Suffix for a person. This is
            only valid for the country of Australia.
        religious_suffix_reference: A reference to the Religious Suffix for a person. This is only
            valid for the country of Australia.
        royal_suffix_reference: A reference to the Royal Suffix for a person. This is only valid for
            the country of Australia.
    """

    class Meta:
        name = "Person_Name_Suffix_DataType"
        target_namespace = "urn:com.workday/bsvc"

    social_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = field(
        default=None,
        metadata={
            "name": "Social_Suffix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    social_suffix_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Social_Suffix_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Academic_Suffix_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    hereditary_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Hereditary_Suffix_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    honorary_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Honorary_Suffix_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    professional_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Professional_Suffix_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    religious_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Religious_Suffix_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    royal_suffix_reference: Optional[CountryPredefinedPersonNameComponentValueObjectType] = field(
        default=None,
        metadata={
            "name": "Royal_Suffix_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PlanEligiblityDatesDataType:
    """
    Information about the Earliest and Earliest Contiguous Eligiblility Dates for Retirement Plans
    which are Part of a Plan Year.

    Attributes:
        benefit_plan_reference: The Benefit Plan for these Dates
        earliest_eligibility_date: The earliest date that the worker was ever eligible for this
            plan, ignoring gaps in coverage.
        earliest_contiguous_eligibility_date: The earliest date that the worker was contiguously
            eligible for this plan (accounting for gaps in coverage).
    """

    class Meta:
        name = "Plan_Eligiblity_Dates_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_plan_reference: Optional[BenefitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    earliest_eligibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Earliest_Eligibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    earliest_contiguous_eligibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Earliest_Contiguous_Eligibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionDefinitionDataType:
    """
    Wrapper element for general data pertaining to a position opening.

    Attributes:
        position_id: The value that will be used for the position opening's reference ID. On a
            create, if left blank or not entered, a value will be generated. On an edit, if left
            blank or not entered, the existing value will be retained.
        job_posting_title: Value that will be used in the job posting for this position opening.
            This value is required on the initial creation. During an edit, leaving the field blank
            or not submitted will cause the existing value to be retained.
        job_description_summary: Job Description Summary (plain text) for the Position. On an edit,
            not submitting the field will cause the existing value to be retained. To clear the
            value, submit a null value ([empty] in the EIB).
        job_description: Job Description (rich text) for the Position.
        critical_job: Boolean attribute which is set to yes if the Position Restriction is
            considered a critical job.  If the Position Restriction has a single Job Profile the
            default value for this field will be taken from the Job Profile
        difficulty_to_fill_reference: Reference to the Difficulty to Fill for this Position
            Restriction.  If the Position Restriction has a single Job Profile the default reference
            will be taken from the Job Profile
        available_for_overlap: Indicates whether a position is available for overlap. Configure the
            setting on the Edit Tenant Setup - HCM task.
    """

    class Meta:
        name = "Position_Definition_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_posting_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Posting_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description_summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description_Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    critical_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Critical_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    difficulty_to_fill_reference: Optional[DifficultyToFillObjectType] = field(
        default=None,
        metadata={
            "name": "Difficulty_to_Fill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    available_for_overlap: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Available_for_Overlap",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionDetailsDataType:
    """
    Wrapper element for general data pertaining to a position opening.

    Attributes:
        position_id: Unique identifier for the Position
        job_posting_title: Job Posting Title for the Position.
        academic_tenure_eligible: Value that represents if the position is eligible for academic
            tenure.
        job_description_summary: Job Description Summary (plain text) for the Position.
        job_description: Job Description (rich text) for the Position.
        position_status_reference: The status history for the position. Doesn't respect the As of
            Effective Date filter. To filter by effective date, use the Get Worker Event History web
            service.
        available_for_hire: Returns a true if this is able to be filled by a worker.
        available_for_recruiting: Returns true if this is available for recruiting.  If Enable Job
            Requisitons is turned off in the tenant, this is the same as Available for Hire.
        hiring_freeze: Boolean attribute identifying whether a Hiring Freeze is currently in affect.
        work_shift_required: Returns true if the position is restricted to only one job profile and
            that job profile requires a work shift.
        available_for_overlap: Returns true if the Position Restriction is available to be
            overlapped.
        earliest_overlap_date: Returns the earliest date this Position Restriction can be filled
            with an overlapping worker. This will only have a value if the position restriction is
            available to be overlapped.
        critical_job: Boolean attribute which is set to yes if the Position Restriction is
            considered a critical job.
        difficulty_to_fill_reference: Reference to the Difficulty to Fill for this Position
            Restriction.
    """

    class Meta:
        name = "Position_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_posting_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Posting_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_tenure_eligible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Academic_Tenure_Eligible",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description_summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description_Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_status_reference: list[WorkerEventObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    available_for_hire: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Available_For_Hire",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    available_for_recruiting: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Available_for_Recruiting",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hiring_freeze: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hiring_Freeze",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_shift_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    available_for_overlap: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Available_for_Overlap",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    earliest_overlap_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Earliest_Overlap_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    critical_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Critical_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    difficulty_to_fill_reference: Optional[DifficultyToFillObjectType] = field(
        default=None,
        metadata={
            "name": "Difficulty_to_Fill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionDetailsSubDataType:
    """
    Wrapper element for filled position data.

    Attributes:
        job_profile_reference: The Job Profile for the filled position. Edit Position: If empty,
            Workday will use the Job Profile in the position restriction. Change Job when empty: If
            Headcount is equal to Backfill or Close, or when changing staffing model type with
            multiple job profiles available on the position restriction, enter 1 job profile.
            Otherwise, Workday will use the job profile in the position restriction. Hire: If empty
            and the position restriction has 1 job profile, Workday will use the job profile in the
            position restriction. Otherwise, the Job Profile is required.
        position_title: The Position Title of the position. If empty, Workday will use the worker's
            existing Position Title.
        business_title: The Business Title of the position. If empty, Workday will use the worker's
            existing Business Title.
        location_reference: The Location for the filled position. Edit Position: If empty, Workday
            will use the Location in the position restriction. Change Job when empty: If Headcount
            is equal to Backfill or Close, or when changing staffing model type with multiple
            locations available on the position restriction, enter 1 location. Otherwise, Workday
            will use the location in the position restriction. Hire: If empty and the position
            restriction has 1 location, Workday will use the location in the position restriction.
            Otherwise, Location is required.
        work_space_reference: The physical location of the worker's position.
        position_time_type_reference: The time type for the position. Example: part time or full
            time. If empty, Workday will use the existing time type.
        time_type_subtype_for_worker_event_reference: Reference(s) to the Time Type Subtype for a
            worker
        work_shift_reference: The Work Shift of the position. If empty, Workday will use the
            existing Work Shift.
        work_hours_profile_reference: The Work Hours Profile of the position. Only available in
            tenants where work hours profiles are enabled. If empty, the Work Hours Profile is not
            changed.
        default_hours: The default weekly hours of the position. Required for filled positions. When
            the Default Hours value has never been entered: If Work Hours Profile is enabled,
            Workday will use the hours in the Work Hours Profile. Otherwise, Workday will use the
            scheduled weekly hours for the business site. If the Default Hours value has previously
            been entered and is left empty, Workday will use the existing Default Hours.
        scheduled_hours: The scheduled weekly hours of the position. Required for filled positions.
            If a value is never entered, Workday will use the Default Hours. If empty, Workday will
            use the existing Scheduled Hours. Changing this field will affect FTE calculations.
        working_time_frequency_reference: You can record details about a worker's expected schedule
            using the Working Time section. Enable Working Time in the Maintain Localization
            Settings task. Set the Working Time Frequency values in the Maintain Frequencies task.
        working_time_unit_reference: The Working Time Unit can be in hours or days. Enable Working
            Time in the Maintain Localization Settings task. Enable units in the Maintain Unit of
            Time task.
        working_time_value: The numeric value of the Working Time Unit. Enable Working Time in the
            Maintain Localization Settings task.
        specify_paid_fte: True if Paid FTE Percentage is specified on the position.
        paid_fte: The paid full time equivalent percentage for the position, entered as a decimal
            value. This overrides the calculated full time equivalent.
        specify_working_fte: True if Working FTE Percentage is specified on the position.
        working_fte: The working full time equivalent percentage for the position, entered as a
            decimal value. This overrides the calculated full time equivalent.
        pay_rate_type_reference: Contains a reference that identifies a specific instance of Pay
            Rate Type to retrieve for the position. Workday doesn't retrieve values specified for
            contingent workers.
        additional_job_classifications_reference: The Job Classifications that can be used for the
            position. If empty, Workday will use the existing classifications.
        company_insider_type_reference: The Company Insider Type values for the position. If empty,
            Workday uses the existing Company Insider Type.
        annual_work_period_reference: The period of time during which an academic member earns an
            annual salary, equal to the Academic Work Period. Used for the Academic Pay Period.
        disbursement_plan_period_reference: The period of time during which an academic member
            receives annual compensation, equal to the Disbursement Plan Period. Used for the
            Academic Pay Period.
        work_study_reference: The Pay With Work-Study Award Option. Example: 'Don't pay with Work-
            Study award' or 'Pay with Work- Study award'
        workers_compensation_code_override_reference: The worker's Compensation Code Override. The
            Compensation Code Override replaces the worker's compensation code. If a value is never
            entered, Workday will use the value from the Job Profile. If empty, Workday will use the
            existing compensation.
        appointment_type_for_worker_event_reference: Reference(s) to the Appointment Type for a
            worker
        employee_tenure_for_worker_event_reference: Reference(s) to the Employee Tenure type for a
            worker
        annuitant_indicator_for_worker_event_reference: Reference(s) to the Annuitant Indicator type
            for a worker
        position_external_id_data
    """

    class Meta:
        name = "Position_Details_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Business_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_space_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Space_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_type_subtype_for_worker_event_reference: Optional[TimeTypeSubtypeObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Type_Subtype_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_shift_reference: Optional[WorkShiftObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_hours_profile_reference: Optional[WorkHoursProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    scheduled_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    working_time_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_unit_reference: Optional[WorkingTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_Time_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 6,
            "fraction_digits": 2,
        },
    )
    specify_paid_fte: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Specify_Paid_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    paid_fte: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Paid_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 12,
        },
    )
    specify_working_fte: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Specify_Working_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_fte: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 12,
        },
    )
    pay_rate_type_reference: Optional[PayRateTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Rate_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_job_classifications_reference: list[JobClassificationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Job_Classifications_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_insider_type_reference: list[CompanyInsiderTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Company_Insider_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annual_work_period_reference: Optional[AcademicPayPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Annual_Work_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disbursement_plan_period_reference: Optional[AcademicPayPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Disbursement_Plan_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_study_reference: Optional[PayWithWorkStudyOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Study_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    workers_compensation_code_override_reference: Optional[WorkersCompensationCodeObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Workers__Compensation_Code_Override_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    appointment_type_for_worker_event_reference: Optional[AppointmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Appointment_Type_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_tenure_for_worker_event_reference: Optional[EmployeeTenureObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Tenure_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annuitant_indicator_for_worker_event_reference: Optional[AnnuitantIndicatorObjectType] = field(
        default=None,
        metadata={
            "name": "Annuitant_Indicator_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_external_id_data: Optional[ExternalIdDataType] = field(
        default=None,
        metadata={
            "name": "Position_External_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionGroupFreezeEventDataType:
    """
    Contains the detailed data for the freeze.

    Attributes:
        reason_reference: Reference to the reason for the Freeze.
        freeze_date: Date the Freeze takes effect.
        frozen_position: Boolean which indicates if the position was Frozen or Unfrozen by the
            Event.
    """

    class Meta:
        name = "Position_Group_Freeze_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    freeze_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Freeze_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frozen_position: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Frozen_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionGroupRestrictionDataType:
    """
    Wrapper for restriction data for openings for all staffing models.

    Attributes:
        availability_date: Date the opening is available. On a create, this will default to current
            date if no date is provided.
        earliest_hire_date: Earliest date that a worker can be hired/contracted into this opening.
            This field is required to have a value. On creation it will default to the current date.
            On an edit, if not submitted the existing value will be retained. This date cannot be
            earlier than the Availability date.
        job_family_reference: Reference(s) to the job families that a worker being hired/contracted
            using this opening can use. On an edit, if not submitted the existing value(s) will be
            retained. If submitted with an empty value, the existing value(s) will be removed.
        job_profile_reference: Reference(s) to the job profiles that a worker being hired/contracted
            using this opening can use. On an edit, if not submitted the existing value(s) will be
            retained. If submitted with an empty value, the existing value(s) will be removed.
        location_reference: Reference(s) to the location that a worker being hired/contracted using
            this opening can use. On an edit, if not submitted the existing value(s) will be
            retained. If submitted with an empty value, the existing value(s) will be removed.
        worker_type_reference: Reference to the worker type that a worker being hired/contracted
            using this opening can use. On an edit, if not submitted the existing value will be
            retained. If submitted with an empty value, the existing value will be removed.
        time_type_reference: Reference to the time type that a worker being hired/contracted using
            this opening can use. On an edit, if not submitted the existing value will be retained.
            If submitted with an empty value, the existing value will be removed.
        position_worker_type_reference: Reference(s) to the Employee or Contingent Worker types that
            a worker being hired/contracted using this opening can use.  Employee Type values are
            only valid if the Worker Type is Employee. Contingent Worker Types are only valid if
            Worker Type is Contingent Worker. On an edit, if not submitted the existing value(s)
            will be retained. If submitted with an empty value, the existing value(s) will be
            removed.
        employment_system_reference: Reference(s) to the Employment System types that a worker being
            hired/contracted using this opening can use. On an edit, if not submitted the existing
            value(s) will be retained. If submitted with an empty value, the existing value(s) will
            be removed.
        retirement_special_population_reference: Reference(s) to the Retirement Special Population
            types that a worker being hired/contracted using this opening.
        sensitivity_and_risk_reference: Reference(s) to the Sensitivity and Risk types that a worker
            being hired/contracted using this opening
        cybersecurity_area_reference: Reference(s) to the Cybersecurity Area types that a worker
            being hired/contracted using this opening.
        security_clearance_level_reference: Reference(s) to the Security Clearance Level types that
            a worker being hired/contracted using this opening can use. On an edit, if not submitted
            the existing value(s) will be retained. If submitted with an empty value, the existing
            value(s) will be removed.
        time_type_subtype_reference: Reference(s) to the Time Type Subtype types that a worker being
            hired/contracted using this opening.
    """

    class Meta:
        name = "Position_Group_Restriction_DataType"
        target_namespace = "urn:com.workday/bsvc"

    availability_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Availability_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    earliest_hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Earliest_Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyBaseObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_type_reference: Optional[WorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_worker_type_reference: list[PositionWorkerTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employment_system_reference: Optional[EmploymentSystemObjectType] = field(
        default=None,
        metadata={
            "name": "Employment_System_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_special_population_reference: Optional[RetirementSpecialPopulationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Retirement_Special_Population_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    sensitivity_and_risk_reference: Optional[SensitivityAndRiskObjectType] = field(
        default=None,
        metadata={
            "name": "Sensitivity_and_Risk_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cybersecurity_area_reference: Optional[CybersecurityAreaObjectType] = field(
        default=None,
        metadata={
            "name": "Cybersecurity_Area_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    security_clearance_level_reference: Optional[SecurityClearanceLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Security_Clearance_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_type_subtype_reference: Optional[TimeTypeSubtypeObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Type_Subtype_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionMatrixOrganizationDetailDataType:
    """
    Effective date and Matrix Organization for Matrix Organization Assignment.

    Attributes:
        effective_date: The effective date of this event.
        matrix_organization_reference: An indirect reporting relationship. Workers can belong to
            multiple matrix organizations.
    """

    class Meta:
        name = "Position_Matrix_Organization_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    matrix_organization_reference: Optional[MatrixOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Matrix_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionOrganizationAssignmentsDataType:
    """
    Wrapper for Position Organization Assignment Information.

    Attributes:
        company_assignments_reference: Reference to the Company Assignment(s). If not submitted, the
            current values will be retained.
        cost_center_assignments_reference: Reference to the Cost Center Assignment(s). If not
            submitted, the current values will be retained.
        region_assignments_reference: Reference to the Region Assignment(s). If not submitted, the
            current values will be retained.
        custom_organization_assignments_reference: Reference to the Custom Organization
            Assignment(s). If not submitted, the current values will be retained.
        fund_assignments_reference: Fund Assignments for Position or Position Group
        grant_assignments_reference: Grant Assignments for Position or Position Group
        program_assignments_reference: Program Assignments for Position and Position Group
        business_unit_assignments_reference: Business Unit Assignments for Position or Position
            Group
        gift_assignments_reference: Gift Assignments for Position or Position Group
    """

    class Meta:
        name = "Position_Organization_Assignments_DataType"
        target_namespace = "urn:com.workday/bsvc"

    company_assignments_reference: list[CompanyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Company_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cost_center_assignments_reference: list[CostCenterObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Cost_Center_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_assignments_reference: list[RegionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Region_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_organization_assignments_reference: list[CustomOrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Custom_Organization_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fund_assignments_reference: list[FundObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Fund_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_assignments_reference: list[GrantObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Grant_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    program_assignments_reference: list[ProgramObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Program_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_unit_assignments_reference: list[BusinessUnitObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Unit_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gift_assignments_reference: list[GiftObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Gift_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionPayrollInterfaceDetailDataType:
    """
    Encapsulating element containg all Payroll Interface Processing data.

    Attributes:
        effective_date: Effective Date for Payroll Interface Processing.
        pay_rate_type_reference: Reference to the pay rate type for the position.
        frequency_reference: Reference to a Frequency.
        pay_group_reference: The external pay group for the position.
        payroll_entity_reference: The external payroll entity for the position.
        external_employee_type_reference: A unique identifier for the external employee type.
        payroll_file_number: The external payroll file number for the position.
    """

    class Meta:
        name = "Position_Payroll_Interface_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_rate_type_reference: Optional[PayRateTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Rate_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_group_reference: Optional[ExternalPayGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_entity_reference: Optional[ExternalPayrollEntityObjectType] = field(
        default=None,
        metadata={
            "name": "Payroll_Entity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_employee_type_reference: Optional[ExternalPayrollEmployeeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "External_Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_file_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Payroll_File_Number",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionPayrollReportingCodeDataType:
    """
    Contains each payroll reporting code for the position.

    Attributes:
        payroll_reporting_code_reference: Reference to the payroll reporting code.
        code: The payroll reporting code's value.
        formatted_code: The payroll reporting code with formatting applied.
        name: The name of the payroll reporting code.
        payroll_reporting_type_reference: Reference to the payroll reporting type for the payroll
            reporting code.
    """

    class Meta:
        name = "Position_Payroll_Reporting_Code_DataType"
        target_namespace = "urn:com.workday/bsvc"

    payroll_reporting_code_reference: Optional[PayrollReportingCodeAllObjectType] = field(
        default=None,
        metadata={
            "name": "Payroll_Reporting_Code_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    formatted_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Formatted_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    payroll_reporting_type_reference: Optional[PayrollReportingTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Payroll_Reporting_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Position and its
    associated data.

    Attributes:
        positions_reference: An unique identifier for a Position requested.
        skip_non_existing_instances
        ignore_invalid_references
    """

    class Meta:
        name = "Position_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    positions_reference: list[PositionElementObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Positions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    skip_non_existing_instances: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip_Non_Existing_Instances",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ignore_invalid_references: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ignore_Invalid_References",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionRestrictionsCustomObjectDataType:
    """
    Effective dated additional data for position restrictions.

    Attributes:
        effective_date: Effective date of the edit additional data request.
        position_restrictions_reference: Position restrictions for for edit additional data request.
        business_object_additional_data
    """

    class Meta:
        name = "Position_Restrictions_Custom_Object_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restrictions_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Restrictions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_object_additional_data: list[EffectiveDatedWebServiceAdditionalDataType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Object_Additional_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionForWorkerStaffingEventIDataType:
    """
    Organization Reference is required.

    if hiring or contracting into a Position group Organization- put the
    position reference into the position reference if hiring or
    contracting  into a Job Management group Organization- don't put
    anything in the headcount or position references. The Organization
    will be used. The Position ID is (will be) the position id of the
    existing position reference (if Position Management) or the new
    position created for Job Management groups.  If left blank, the next
    position id in the sequence will be used.

    Attributes:
        organization_reference: Supervisory Organization
        position_reference: Position from Workday ID
        position_id: Position ID for the Position.
        job_profile_reference: Job Profile Reference
        position_title: Position Title
        business_title: Business Title
        location_reference: Location
        work_space_reference: Effective Work Space
        position_time_type_reference: Position Time Type
        time_type_subtype_for_worker_event_reference: Reference(s) to the Time Type Subtype type for
            a worker
        work_shift_reference: Work shift for Postion
        work_hours_profile_reference: Work hours for Position
        default_weekly_hours: Default Hours
        scheduled_weekly_hours: Scheduled Hours
        working_time_frequency_reference: You can record details about a worker's expected schedule
            using the Working Time section. Enable Working Time in the Maintain Localization
            Settings task. Set the Working Time Frequency values in the Maintain Frequencies task.
        working_time_unit_reference: The Working Time Unit can be in hours or days. Enable Working
            Time in the Maintain Localization Settings task. Enable units in the Maintain Unit of
            Time task.
        working_time_value: The numeric value of the Working Time Unit. Enable Working Time in the
            Maintain Localization Settings task.
        specify_paid_fte: True if Paid FTE Percentage is specified on the position.
        paid_fte: The paid full time equivalent percentage for the position, entered as a decimal
            value. This overrides the calculated full time equivalent.
        specify_working_fte: True if Working FTE Percentage is specified on the position.
        working_fte: The working full time equivalent percentage for the position, entered as a
            decimal value. This overrides the calculated full time equivalent.
        pay_rate_type_reference: Pay Rate Type
        job_classification_reference: Job Classifications for Position
        company_insider_type_reference: Company Insider type
        annual_work_period_reference: Academic pay period AWP
        disbursement_plan_period_reference: Academic pay period DPP
        work_study_reference: The Pay With Work-Study Award Option. Example: 'Don't pay with Work-
            Study award' or 'Pay with Work- Study award'
        workers_compensation_code_override_reference: Workers Compensation Code
        appointment_type_for_worker_event_reference: Reference(s) to the Appointment Type for a
            worker
        employee_tenure_for_worker_event_reference: Reference(s) to the Employee Tenure type for a
            worker
        annuitant_indicator_for_worker_event_reference: Reference(s) to the Annuitant Indicator type
            for a worker
        position_external_id_data: External ID
    """

    class Meta:
        name = "Position_for_Worker_Staffing_Event_iDataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Business_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    work_space_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Space_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    time_type_subtype_for_worker_event_reference: Optional[TimeTypeSubtypeObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Type_Subtype_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_shift_reference: Optional[WorkShiftObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_hours_profile_reference: Optional[WorkHoursProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    scheduled_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    working_time_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_unit_reference: Optional[WorkingTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_Time_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 6,
            "fraction_digits": 2,
        },
    )
    specify_paid_fte: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Specify_Paid_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    paid_fte: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Paid_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 12,
        },
    )
    specify_working_fte: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Specify_Working_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_fte: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 12,
        },
    )
    pay_rate_type_reference: Optional[PayRateTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Rate_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_reference: list[JobClassificationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_insider_type_reference: list[CompanyInsiderTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Company_Insider_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annual_work_period_reference: Optional[AcademicPayPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Annual_Work_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disbursement_plan_period_reference: Optional[AcademicPayPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Disbursement_Plan_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_study_reference: Optional[PayWithWorkStudyOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Study_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    workers_compensation_code_override_reference: Optional[WorkersCompensationCodeObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Workers__Compensation_Code_Override_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    appointment_type_for_worker_event_reference: Optional[AppointmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Appointment_Type_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_tenure_for_worker_event_reference: Optional[EmployeeTenureObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Tenure_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annuitant_indicator_for_worker_event_reference: Optional[AnnuitantIndicatorObjectType] = field(
        default=None,
        metadata={
            "name": "Annuitant_Indicator_for_Worker_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_external_id_data: Optional[ExternalIdDataType] = field(
        default=None,
        metadata={
            "name": "Position_External_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PreHireResumeDetailDataType:
    """
    The resume for an applicant.

    Attributes:
        resume_reference: A reference to a specific resume for an applicant.
        resume_data: The details of a resume (resume, name, comments).
    """

    class Meta:
        name = "Pre-Hire_Resume_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    resume_reference: Optional[ApplicantResumeObjectType] = field(
        default=None,
        metadata={
            "name": "Resume_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    resume_data: Optional[AttachmentDataWwstype] = field(
        default=None,
        metadata={
            "name": "Resume_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodEligibilityRuleRequestReferencesType:
    """
    Probation Period Eligibility Rule Request References Element.

    Attributes:
        probation_period_eligibility_rule_reference: Probation Period Eligibility Rules Request
            References Work Set
    """

    class Meta:
        name = "Probation_Period_Eligibility_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodLengthDataType:
    """
    Probation Period Length.

    Attributes:
        duration: Duration
        unit_reference: Unit
    """

    class Meta:
        name = "Probation_Period_Length_DataType"
        target_namespace = "urn:com.workday/bsvc"

    duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodOutcomeDataType:
    """
    Probation Period Outcome Data Element.

    Attributes:
        id: ID
        probation_period_outcome_name: Probation Period Outcome Name
        probation_period_action_reference: Probation Period Action Reference
        inactive: Inactive
        country_reference: Country Reference
    """

    class Meta:
        name = "Probation_Period_Outcome_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcome_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcome_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    probation_period_action_reference: list[ProbationPeriodActionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodOutcomeForCountryDataType:
    """
    Adds a probation period outcome row.

    Attributes:
        probation_period_outcome_name: Probation Period Outcome Name
        probation_period_actions_reference: Probation Period Actions Reference
        inactive: Inactive
    """

    class Meta:
        name = "Probation_Period_Outcome_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcome_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcome_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    probation_period_actions_reference: list[ProbationPeriodActionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Actions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomeRequestReferencesType:
    """
    Probation Period Outcome Request References Element.

    Attributes:
        probation_period_outcome_reference: Probation Period Outcome Reference
    """

    class Meta:
        name = "Probation_Period_Outcome_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcome_reference: list[ProbationPeriodOutcomeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcome_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ProbationPeriodOutcomesForCountryRequestCriteriaType:
    """
    Request element for Country References.

    Attributes:
        country_reference: Country Reference
    """

    class Meta:
        name = "Probation_Period_Outcomes_For_Country_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomesForCountryRequestReferencesType:
    """
    Request element for Probation Period Outcome References.

    Attributes:
        probation_period_outcomes_for_country_reference: Probation Period Outcome References
    """

    class Meta:
        name = "Probation_Period_Outcomes_For_Country_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcomes_for_country_reference: list[
        ProbationPeriodOutcomesSetupTableObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcomes_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ProbationPeriodReviewLengthType:
    """
    Probation Review Data.

    Attributes:
        schedule: Schedule
        unit_reference: Unit Reference
    """

    class Meta:
        name = "Probation_Period_Review_LengthType"
        target_namespace = "urn:com.workday/bsvc"

    schedule: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Schedule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodsForCountryRequestCriteriaType:
    """
    Probation Periods For Country Request Criteria.

    Attributes:
        country_reference: Single or Multiple Countries
    """

    class Meta:
        name = "Probation_Periods_For_Country_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodsForCountryRequestReferencesType:
    """
    Probation Periods For Country References.

    Attributes:
        maintain_probation_periods_for_country_reference: Maintain Probation Periods For Country
            Reference
    """

    class Meta:
        name = "Probation_Periods_For_Country_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_probation_periods_for_country_reference: list[ProbationPeriodRulesTableObjectType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Maintain_Probation_Periods_For_Country_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )


@dataclass
class ProbationPeriodsForWorkerDataType:
    """
    Contains the probation period data for a worker.

    Attributes:
        worker_reference: Worker Reference
        position_reference: Position
        start_date: Probation Period Start Date
        end_date: End Date
        extended_end_date: Extended End Date
        employee_probation_period_type_reference: Probation Period Type Reference
        probation_period_reason_reference: Probation Period Reason
        note: Note
        custom_probation_period_duration: Custom Probation Period Duration
        custom_probation_period_unit_reference: Custom Probation Period Unit
        extended_probation_period_duration: Extended Probation Period Duration
        extended_probation_period_unit_reference: Extended Probation Period Unit
        custom_review_probation_period_date: Review Probation Period Date
        custom_review_probation_period_duration: Review Probation Period Duration
        custom_review_probation_period_unit_reference: Review Probation Period Unit
    """

    class Meta:
        name = "Probation_Periods_For_Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    extended_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Extended_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_probation_period_type_reference: Optional[EmployeeProbationPeriodTypeObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Employee_Probation_Period_Type_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    probation_period_reason_reference: Optional[EmployeeProbationPeriodReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_probation_period_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Custom_Probation_Period_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    custom_probation_period_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Custom_Probation_Period_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    extended_probation_period_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Extended_Probation_Period_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    extended_probation_period_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Extended_Probation_Period_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_review_probation_period_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Custom_Review_Probation_Period_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_review_probation_period_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Custom_Review_Probation_Period_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    custom_review_probation_period_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Custom_Review_Probation_Period_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodsForWorkersRequestReferencesType:
    """
    Contains a single reference to a worker.

    Attributes:
        workers_reference: Reference to a Worker
    """

    class Meta:
        name = "Probation_Periods_For_Workers_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    workers_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Workers_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedAllowancePlanAssignmentDataType:
    """
    Encapsulating element containing all Allowance Plan Compensation data.

    Attributes:
        allowance_plan_reference: Allowance Plan to update or assign. Does not default for Request
            Compensation Change.
        percent: Percent for the allowance plan. Required if percent allowance plan is entered and
            there is no default percent for the plan. The amount will be calculated using this
            percent. Mutually exclusive from the amount.
        amount: Amount for the allowance plan. Decimal precision of the amount must match the
            currency. Required if amount allowance plan is entered and there is no default amount
            for the plan. Mutually exclusive from the percent.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        currency_reference: Currency of the allowance plan. Required if amount allowance plan is
            entered and there is no default currency for the plan.
        frequency_reference: Frequency of the allowance plan. Required if there is no default
            frequency for the plan.
        expected_end_date: Expected end date for the plan assignment.
        reimbursement_start_date: Reimbursement Start Date.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Allowance_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allowance_plan_reference: Optional[AllowanceValuePlanObjectType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 10,
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reimbursement_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Reimbursement_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedAllowanceUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Allowance Plan Compensation data.

    Attributes:
        unit_allowance_plan_reference: Unit Allowance Plan to update or assign.  Does not default
            for Request Compensation Change.
        number_of_units: Number of units to assign. Required if there is no default number of units
            for the plan.
        frequency_reference: Frequency of the unit allowance plan. Required if there is no default
            frequency for the plan.
        per_unit_amount: Amount per unit of the unit allowance plan. Required if there is no default
            amount per unit for the plan.
        currency_reference: Currency of the unit amount. Required if there is no default currency
            for the plan.
        reimbursement_start_date: Reimbursement Start Date.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Allowance_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_allowance_plan_reference: Optional[AllowanceUnitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Allowance_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reimbursement_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Reimbursement_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBasePayPlanAssignmentDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        pay_plan_reference: Salary or hourly plan to update or assign. Doesn't default for Request
            Compensation Change.
        amount: Amount for the salary or hourly plan assignment. Required if the plan has no default
            amount. Decimal precision of the amount must match the currency.  Mutually exclusive
            from the percent.
        percent_change: Percent of the compensation basis defined on the salary or hourly plan.
            Workday calculates the amount using this percent. Mutually exclusive from the amount.
        amount_change: Amount difference from the compensation change.
        currency_reference: Currency of the plan assignment.
        frequency_reference: Frequency of the salary or hourly plan. Required if the plan has no
            default frequency.
        expected_end_date: Expected end date for the plan assignment.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Base_Pay_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_plan_reference: Optional[SalaryPayPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBasePayPlanJobAssignmentDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        pay_plan_reference: Salary or hourly plan to update or assign. Doesn't default for Request
            Compensation Change.
        amount: Amount for the salary or hourly plan assignment. Required if the plan has no default
            amount. Decimal precision of the amount must match the currency.  Mutually exclusive
            from the percent.
        currency_reference: Currency of the plan assignment.
        frequency_reference: Frequency of the salary or hourly plan. Required if the plan has no
            default frequency.
        expected_end_date: Expected end date for the plan assignment.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Base_Pay_Plan_Job_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_plan_reference: Optional[SalaryPayPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    expected_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBonusPlanAssignmentDataType:
    """
    Encapsulating element containing all Bonus Plan Compensation data.

    Attributes:
        bonus_plan_reference: Bonus Plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_amount: Individual target amount that overrides the default target percent
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        individual_target_percent: Individual target percent that overrides the default target
            percent on the plan, provided Allow Target Override is enabled on the plan. Mutually
            exclusive from Individual Target Amount.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        guaranteed_minimum: If true, employee is guaranteed the minimum for the bonus plan.
        percent_assigned: Percent of the bonus assigned. If none entered, default is 100%.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Bonus_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_plan_reference: Optional[BonusPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_assigned: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percent_Assigned",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCalculatedPlanAssignmentDataType:
    """
    Encapsulating element containing all Calculated Plan Compensation data.

    Attributes:
        calculated_plan_reference: Calculated plan to update or assign.  Does not default for
            Request Compensation Change.
        amount_override: This field allows an override amount to be specified for workerswho are
            managed by compensation basis.
        currency_reference: Currency of the calculated plan.
        frequency_reference: Frequency of the calculated plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Calculated_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    calculated_plan_reference: Optional[CalculatedPlanInterfaceObjectType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_override: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Amount_Override",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCommissionPlanAssignmentDataType:
    """
    Encapsulating element containing all Commission Plan Compensation data.

    Attributes:
        commission_plan_reference: Commission plan to update or assign. Does not default for Request
            Compensation Change.
        target_amount: Target amount for the Commission Plan.
        currency_reference: Currency for the Commission Plan. Required if the target amount is
            entered and there is no default currency for the plan.
        frequency_reference: Frequency for the Commission Plan. Required if the target amount is
            entered and there is no default amount for the plan.
        draw_amount: Draw amount for the Commission Plan.
        draw_frequency_reference: Reference element representing a unique instance of Frequency for
            the Draw Amount.
        draw_duration: Description of the duration of the draw amount. For informational purposes.
        recoverable: If true, the compensation element is recoverable.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Commission_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    commission_plan_reference: Optional[CommissionPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Draw_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    draw_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Draw_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    draw_duration: Optional[str] = field(
        default=None,
        metadata={
            "name": "Draw_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recoverable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Recoverable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedMeritPlanAssignmentDataType:
    """
    Encapsulating element containing all Merit Plan Compensation data.

    Attributes:
        merit_plan_reference: Merit Plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_amount: Individual target amount that overrides the default target amount
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        individual_target_percent: Individual target percent that overrides the default target
            percent on the plan, provided Allow Target Override is enabled on the plan. Mutually
            exclusive from Individual Target Amount.
        guaranteed_minimum: If true, employee is guaranteed the minimum for the merit plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Merit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    merit_plan_reference: Optional[MeritPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 16,
            "fraction_digits": 6,
        },
    )
    guaranteed_minimum: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed_Minimum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedPeriodSalaryPlanAssignmentDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        period_salary_plan_reference: Period salary plan to update or assign.  Does not default for
            Request Compensation Change.
        compensation_period_reference: Compensation period of time measure.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        currency_reference: Currency of the period salary plan.
        compensation_period_multiplier: Default Compensation Period Multiplier is required.
        frequency_reference: Frequency of the period salary plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Period_Salary_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_salary_plan_reference: Optional[PeriodSalaryPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_reference: Optional[CompensationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_period_multiplier: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Compensation_Period_Multiplier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedSalaryUnitPlanAssignmentDataType:
    """
    Encapsulating element containing all Unit Salary Plan Compensation data.

    Attributes:
        unit_salary_plan_reference: Unit salary plan to update or assign. Doesn't default for
            Request Compensation Change.
        per_unit_amount: Amount per unit of the unit salary plan. Decimal precision of the amount
            must match the currency. Required if there is no default amount for the plan.
        currency_reference: Currency of the unit amount. Required if there is no default currency
            for the plan.
        default_units: Number of units to assign.
        frequency_reference: Frequency of the unit salary plan.
        actual_end_date: Actual End Date for the plan assignment.
    """

    class Meta:
        name = "Proposed_Salary_Unit_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_salary_plan_reference: Optional[SalaryUnitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    per_unit_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Per_Unit_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedStockPlanAssignmentDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        stock_plan_reference: Stock plan to update or assign. Does not default for Request
            Compensation Change.
        individual_target_shares: Individual target shares that overrides the default target shares
            on the plan, provided Allow Target Override is enabled on the plan.
        individual_target_percent: Individual target percent that overrides the default target
            amount on the plan, provided Allow Target Override is enabled on the plan.
        individual_target_amount: Individual target amount that overrides the default target amount
            on the plan, provided Allow Target Override is enabled on the plan. Mutually exclusive
            from Individual Target Percent.
        manage_by_compensation_basis_override_amount: This field allows an override amount to be
            specified for workerswho are managed by compensation basis.
        currency_reference: Workday ignores any currency specified for the stock plan and assigns a
            currency based on worker eligibility for stock plans.
        actual_end_date: Actual End Date for the plan assignment.
        fixed_for_manage_by_basis_total: This field allows a plan assignment for a remainder plan in
            the compensation basis algorithm to be considered a fixed plan assignment.  This field
            is only valid for plans in the PCB of a worker that is managed by basis total where the
            plan allows override.  The flag will be ignored if the conditions are not met.
    """

    class Meta:
        name = "Proposed_Stock_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_reference: Optional[StockPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_target_shares: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Shares",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    individual_target_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 18,
            "fraction_digits": 6,
        },
    )
    individual_target_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Individual_Target_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    manage_by_compensation_basis_override_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Manage_by_Compensation_Basis_Override_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    actual_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Actual_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fixed_for_manage_by_basis_total: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Fixed_for_Manage_by_Basis_Total",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PurchaseOrderContractDetailsDataType:
    """
    This element is used to group all data needed to create a purchase order if purchase orders are
    used.

    Attributes:
        company_for_purchase_order_reference: The company to be used on the purchase order if
            purchase orders are used.
        requester_reference: The worker who is requesting this contract.
        spend_category_reference: The spend category that describes the purpose of this contract.
        contract_amount: The amount of the contract.
        worktags_reference: The worktags to use for accounting for this contract.
    """

    class Meta:
        name = "Purchase_Order_Contract_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    company_for_purchase_order_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Company_for_Purchase_Order_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    requester_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Requester_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    spend_category_reference: Optional[SpendCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Spend_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_amount: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contract_Amount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    worktags_reference: list[AuditedAccountingWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worktags_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutAssignMatrixOrganizationResponseType:
    """
    Response for assign worker matrix organization request.

    Attributes:
        matrix_organization_event_reference: Returns assign worker matrix organization event created
        version
    """

    class Meta:
        name = "Put_Assign_Matrix_Organization_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    matrix_organization_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Matrix_Organization_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCitizenshipStatusResponseType:
    """
    Response element for the Put Citizenship Status operation.

    Attributes:
        citizenship_status_reference: Reference element representing a unique instance of
            Citizenship Status.
        version
    """

    class Meta:
        name = "Put_Citizenship_Status_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    citizenship_status_reference: Optional[CitizenshipStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCollectiveAgreementResponseType:
    """
    Put Collective Agreement Response Element.

    Attributes:
        collective_agreement_reference: Collective Agreement Reference
        version
    """

    class Meta:
        name = "Put_Collective_Agreement_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_reference: Optional[CollectiveAgreementObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutEditNoticePeriodsEventResponseType:
    """
    Response element for Put Edit Notice Periods Event.

    Attributes:
        edit_notice_periods_event_reference: Edit Notice Periods Event Reference
        version
    """

    class Meta:
        name = "Put_Edit_Notice_Periods_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    edit_notice_periods_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Edit_Notice_Periods_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFseWorkerCategoryCriteriaResponseType:
    """
    Response element for FSE Worker Category Criteria.

    Attributes:
        fse_worker_category_criteria_reference: FSE Worker Category Criteria Reference
        version
    """

    class Meta:
        name = "Put_FSE_Worker_Category_Criteria_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    fse_worker_category_criteria_reference: Optional[FseWorkerCategoryCriteriaObjectType] = field(
        default=None,
        metadata={
            "name": "FSE_Worker_Category_Criteria_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFunctionalityForStaffingTransactionsResponseType:
    """
    The Functionality for Staffing Transactions configuration created or modified by the web
    service.

    Attributes:
        functionality_for_staffing_transactions_reference: The Functionality for Staffing
            Transactions configuration created or modified by the web service.
        version
    """

    class Meta:
        name = "Put_Functionality_for_Staffing_Transactions_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    functionality_for_staffing_transactions_reference: Optional[
        FunctionalAreaConfigurationObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Functionality_for_Staffing_Transactions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutHireEventProposedWorkerIdRequestType:
    """
    This web service imports a Worker ID which will override the Workday generated ID.

    Attributes:
        event_reference: Event ID of an active supported event, including Contract Contingent Worker
            or Hire Employee event.
        worker_id: The unique ID to be assigned to a worker when an active hire event is completed.
            If the ID provided is in use, the system will default to the next ID provided by the
            sequence generator.
        version
    """

    class Meta:
        name = "Put_Hire_Event_Proposed_Worker_ID_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutHireEventProposedWorkerIdResponseType:
    """
    Responds with the Event ID for the Hire Event.

    Attributes:
        hire_event_reference: Event ID of an active supported event, including Contract Contingent
            Worker or Hire Employee event.
        worker_id: The unique ID to be assigned to a worker when an active hire event is completed.
            If the ID provided is in use, the system will default to the next ID provided by the
            sequence generator.
        version
    """

    class Meta:
        name = "Put_Hire_Event_Proposed_Worker_ID_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    hire_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Hire_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutImportProcessResponseType:
    """
    Put Import Process Response element.

    Attributes:
        import_process_reference: Web Service Background Process Runtime element
        header_instance_reference: Header Instance element
        version
    """

    class Meta:
        name = "Put_Import_Process_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    import_process_reference: Optional[WebServiceBackgroundProcessRuntimeObjectType] = field(
        default=None,
        metadata={
            "name": "Import_Process_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    header_instance_reference: Optional[InstanceObjectType] = field(
        default=None,
        metadata={
            "name": "Header_Instance_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobClassificationGroupResponseType:
    """
    Response element for Put Job Classification.

    Attributes:
        job_classification_group_reference: A unique identifier used to reference a Job
            Classification Group.
        version
    """

    class Meta:
        name = "Put_Job_Classification_Group_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_group_reference: Optional[JobClassificationGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobFamilyGroupResponseType:
    """
    Response element for the Put Job Family Group.

    Attributes:
        job_family_groups_reference: Reference element representing a unique instance of Job Family
            Group.
        version
    """

    class Meta:
        name = "Put_Job_Family_Group_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_groups_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Groups_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobFamilyResponseType:
    """
    Response element for Put Job Family.

    Attributes:
        job_family_reference: Reference element representing a unique instance of Job Family.
        version
    """

    class Meta:
        name = "Put_Job_Family_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobOverlapRoutingExclusionRuleResponseType:
    """
    Contains a Job Overlap Routing Exclusion Rule.

    Attributes:
        job_overlap_routing_exclusion_rule_reference: Contains a unique identifier for an instance
            of an object.
        version
    """

    class Meta:
        name = "Put_Job_Overlap_Routing_Exclusion_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    job_overlap_routing_exclusion_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutLegalAuthorityResponseType:
    """
    Put Legal Authority Response Element.

    Attributes:
        legal_authority_reference: Legal Authority Reference Element
        version
    """

    class Meta:
        name = "Put_Legal_Authority_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainEmployeeContractRulesForCountryResponseType:
    """
    Response Element for Put Maintain Employee Contract Rules for Country.

    Attributes:
        country_reference: Country Reference
        version
    """

    class Meta:
        name = "Put_Maintain_Employee_Contract_Rules_For_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainJobOverlapRoutingExclusionRuleResponseType:
    """
    Contains a reference to the Job Overlap Condition Rule instance updated by the web service.

    Attributes:
        maintain_job_overlap_routing_exclusion_rule_reference: Contains a reference to the Job
            Overlap Condition Rule instance updated by the web service.
        version
    """

    class Meta:
        name = "Put_Maintain_Job_Overlap_Routing_Exclusion_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_job_overlap_routing_exclusion_rule_reference: Optional[
        JobOverlapConditionRuleObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainNoticePeriodsForCountryResponseType:
    """
    Response element for Put Maintain Notice Periods for Country.

    Attributes:
        country_reference: Country Reference
        maintain_notice_periods_for_country_reference: Notice Periods for Country Reference
        version
    """

    class Meta:
        name = "Put_Maintain_Notice_Periods_for_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_notice_periods_for_country_reference: Optional[NoticePeriodsSetupTableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Maintain_Notice_Periods_For_Country_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutNatureOfActionResponseType:
    """
    Put Nature of Action Response element.

    Attributes:
        nature_of_action_reference: Unique identifier for the Nature of Action reference
        version
    """

    class Meta:
        name = "Put_Nature_of_Action_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    nature_of_action_reference: Optional[NatureOfActionObjectType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutNoticePeriodEligibilityRuleResponseType:
    """
    Response element for Put Notice Period Eligibility Rule.

    Attributes:
        notice_period_eligibility_rule_reference: Notice Period Eligibility Rule Reference
        version
    """

    class Meta:
        name = "Put_Notice_Period_Eligibility_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPersonnelActionRequestStatusOnMassActionRequestType:
    """
    Contains data for viewing or updating a PAR Mass Action Enabled Status.

    Attributes:
        par_mass_action_reference: Unique identifier for PAR Mass Action reference.
        par_mass_action_data
        version
    """

    class Meta:
        name = "Put_Personnel_Action_Request_Status_on_Mass_Action_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    par_mass_action_reference: Optional[ParMassActionObjectType] = field(
        default=None,
        metadata={
            "name": "PAR_Mass_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    par_mass_action_data: Optional[ParMassActionDataType] = field(
        default=None,
        metadata={
            "name": "PAR_Mass_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutPersonnelActionRequestStatusOnMassActionResponseType:
    """
    Response element for Put Personnel Action Request Status on Mass Action.

    Attributes:
        par_mass_action_reference: Unique identifier for PAR Mass Action reference.
        version
    """

    class Meta:
        name = "Put_Personnel_Action_Request_Status_on_Mass_Action_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    par_mass_action_reference: Optional[ParMassActionObjectType] = field(
        default=None,
        metadata={
            "name": "PAR_Mass_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutProbationPeriodOutcomeResponseType:
    """
    Put Probation Period Outcome Response.

    Attributes:
        probation_period_outcome_reference: Probation Period Outcome Reference
        version
    """

    class Meta:
        name = "Put_Probation_Period_Outcome_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcome_reference: Optional[ProbationPeriodOutcomeObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcome_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutProbationPeriodOutcomesResponseType:
    """
    Response element for Put Probation Period Outcomes.

    Attributes:
        probation_period_outcome_reference: Probation Period Outcome Reference
        country_reference: Country Reference
        probation_period_outcomes_for_country_reference: Probation Period Outcomes Reference
        version
    """

    class Meta:
        name = "Put_Probation_Period_Outcomes_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcome_reference: list[ProbationPeriodOutcomeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcome_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcomes_for_country_reference: Optional[
        ProbationPeriodOutcomesSetupTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcomes_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutRemarkResponseType:
    """
    Root element for Put Remarks Response.

    Attributes:
        remark_reference: Remark Reference
        version
    """

    class Meta:
        name = "Put_Remark_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    remark_reference: Optional[RemarkObjectType] = field(
        default=None,
        metadata={
            "name": "Remark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutRemoveMatrixOrganizationResponseType:
    """
    Response for remove worker matrix organization request.

    Attributes:
        remove_from_matrix_organization_event_reference: Returns remove matrix organization event
            created
        version
    """

    class Meta:
        name = "Put_Remove_Matrix_Organization_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    remove_from_matrix_organization_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Remove_from_Matrix_Organization_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStaffingFieldDefaultsConditionRulesResponseType:
    class Meta:
        name = "Put_Staffing_Field_Defaults_Condition_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Defaults_Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStaffingFieldDefaultsResponseType:
    """
    The Staffing Field Defaults configuration created or modified by the web service.

    Attributes:
        staffing_field_defaults_reference: The Staffing Field Defaults configuration created or
            modified by the web service.
        version
    """

    class Meta:
        name = "Put_Staffing_Field_Defaults_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_reference: Optional[StaffingDefaultingFieldConfigurationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Staffing_Field_Defaults_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStudentEmploymentEligibilityRuleResponseType:
    """
    Container for the Student Employment Eligibility Rule.

    Attributes:
        student_employment_eligibility_rule_reference: Reference for the Student Employment
            Eligibility Rule created/updated
        version
    """

    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStudentEmploymentEligibilityStatusRequestType:
    """
    Update request for Student Employment Eligibility Event.

    Attributes:
        student_employment_eligibility_event_reference: Student Employment Eligibility to be updated
        student_employment_eligibility_event_data: Data container used for updating
        version
    """

    class Meta:
        name = "Put_Student_Employment_Eligibility_Status_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_event_reference: Optional[
        StudentEmploymentEligibilityEventObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    student_employment_eligibility_event_data: Optional[
        StudentEmploymentEligibilityEventDataType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStudentEmploymentEligibilityStatusResponseType:
    """
    Student Emploment Eligibility Reference Updated.

    Attributes:
        student_employment_eligibility_event_reference: Student Employment Eligibility Evnet that
            was updated
        version
    """

    class Meta:
        name = "Put_Student_Employment_Eligibility_Status_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_event_reference: Optional[
        StudentEmploymentEligibilityEventObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutWorkerDocumentResponseType:
    """
    Response element for Put Worker Document.

    Attributes:
        worker_document_reference: The reference to the worker document.
        version
    """

    class Meta:
        name = "Put_Worker_Document_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document_reference: Optional[WorkerDocumentObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class QualifiedDomesticRelationsOrderReplacementDataType:
    """
    Court Order Details.

    NOTE: You must pass in the entire set of court orders. Any existing court orders that are not submitted will be removed.

    Attributes:
        benefit_coverage_type_reference: Enforce court order for this benefit coverage type.
        start_date: Enforce court order starting on this date.
        end_date: Stop enforcing court order on this date.
    """

    class Meta:
        name = "Qualified_Domestic_Relations_Order_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_coverage_type_reference: Optional[BenefitCoverageTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Coverage_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RecruitingDataType:
    """
    Wrapper element for Recruiting Information.

    Attributes:
        applicant_entered_date: The date the applicant was created.
        applicant_comments: Comments about the applicant.
        eligible_for_hire_reference: Enter Yes if the pre-hire is eligible for hire. Enter No if the
            pre-hire isn’t eligible for hire. If empty, Workday uses the existing hire eligibility
            status.
        eligible_for_rehire_comments: Comment on the rehire eligibility status for the prehire.
        applicant_has_marked_as_no_show_reference: This pre-hire was previously marked as a no show.
        applicant_source_reference: The source of the applicant. Examples are : job site,  college
            recruitment, advertisement.
        referred_by_worker_reference: Worker referring the applicant.
        positions_considered_for_reference: The positions that the applicant is considered for.
    """

    class Meta:
        name = "Recruiting_DataType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_entered_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Applicant_Entered_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Applicant_Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_for_hire_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_For_Hire_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_for_rehire_comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Eligible_for_Rehire_Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_has_marked_as_no_show_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Has_Marked_as_No_Show_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_source_reference: Optional[ApplicantSourceObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    referred_by_worker_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Referred_by_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    positions_considered_for_reference: list[PositionGroupObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Positions_Considered_for_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RecruitingInstructionDataType:
    """
    Wrapper element for Job Requisition Recruiting Instructions or posting instructions.

    Attributes:
        recruiting_instruction_reference: The Recruiting Instruction for the Job Requisition.
        do_not_send_to_recruiting_system: Indicates the Job Requisition will be sent to an external
            recruiting system.
        name: The Name of the Recruiting Instruction
    """

    class Meta:
        name = "Recruiting_Instruction_DataType"
        target_namespace = "urn:com.workday/bsvc"

    recruiting_instruction_reference: Optional[RecruitingInstructionObjectType] = field(
        default=None,
        metadata={
            "name": "Recruiting_Instruction_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_send_to_recruiting_system: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Send_To_Recruiting_System",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelocationPreferenceDataType:
    """
    Contains the information about the employee's willingness to relocate as part of their job.

    Attributes:
        short_term_relocation_reference: Indicates if an employee is willing to relocate in the
            short term to another geographic location as part of their job.
        short_term_relocation_area_reference: A reference to the geographic area that the employee
            is willing to relocate to as part of their job.  This is only valid when the employee is
            willing to relocate (Willing to Relocate = Yes or Maybe).
        long_term_relocation_reference: Indicates if an employee is willing to relocate in the long
            term to another geographic location as part of their job.
        long_term_relocation_area_reference: A reference to the geographic area that the employee is
            willing to relocate to as part of their job.  This is only valid when the employee is
            willing to relocate (Willing to Relocate = Yes or Maybe).
        additional_information: More information about why (or why not) the employee is willing to
            relocate as part of their job.
    """

    class Meta:
        name = "Relocation_Preference_DataType"
        target_namespace = "urn:com.workday/bsvc"

    short_term_relocation_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Short_Term_Relocation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    short_term_relocation_area_reference: list[RelocationAreaObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Short_Term_Relocation_Area__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    long_term_relocation_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Long_Term_Relocation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    long_term_relocation_area_reference: list[RelocationAreaObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Long_Term_Relocation_Area__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_information: Optional[str] = field(
        default=None,
        metadata={
            "name": "Additional_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemarkRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Get Remarks and its
    associated data.

    Attributes:
        remark_reference: Remark Reference
    """

    class Meta:
        name = "Remark_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    remark_reference: list[RemarkObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Remark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class RemarkValueDataType:
    """
    Contains details on the Remark Data for the Nature of Action.

    Attributes:
        remark_reference: The Remark associated with the Remark Value for the Nature of Action.
        parameter_value_remark
    """

    class Meta:
        name = "Remark_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    remark_reference: Optional[RemarkObjectType] = field(
        default=None,
        metadata={
            "name": "Remark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_value_remark: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_Remark",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveCompensationPlanAssignmentDataType:
    """
    Specific compensation plan assigned to the worker to be removed.

    Attributes:
        compensation_plan_reference: Compensation plan assigned to the worker to be removed.
    """

    class Meta:
        name = "Remove_Compensation_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_plan_reference: list[CompensationPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveMatrixOrganizationDetailDataType:
    """
    Effective date and Matrix Organization for Matrix Organization Removal.

    Attributes:
        effective_date: The effective date of this event.
        matrix_organization_reference: An indirect reporting relationship. Workers can belong to
            multiple matrix organizations.
    """

    class Meta:
        name = "Remove_Matrix_Organization_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    matrix_organization_reference: Optional[MatrixOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Matrix_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RemoveRetireeStatusEventDataType:
    """
    Contains reason for removing retirement status and retiree organization that the worker is in.

    Attributes:
        end_retirement_reason_reference: Contains reason for removing retirement status.
    """

    class Meta:
        name = "Remove_Retiree_Status_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    end_retirement_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "End_Retirement_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RemoveRetireeStatusResponseType:
    """
    This element contains information on Remove Retiree Status event.

    Attributes:
        event_reference: Contains information on Remove Retiree Status event.
        version
    """

    class Meta:
        name = "Remove_Retiree_Status_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveRetireeStatusSubProcessDetailsType:
    """
    Contains details for Remove Retiree Status as sub process.

    Attributes:
        end_retirement_date: The date when the worker's retiree status is removed.
        reason_reference: The reason for removing retiree status.
    """

    class Meta:
        name = "Remove_Retiree_Status_Sub_Process_DetailsType"
        target_namespace = "urn:com.workday/bsvc"

    end_retirement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Retirement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ResponsibilityProfileForJobDataType:
    """
    Contains the responsibility profile's information for a position.

    Attributes:
        responsibility: The description of the Responsibility.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Responsibility_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    responsibility: Optional[str] = field(
        default=None,
        metadata={
            "name": "Responsibility",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewCobraEligibilityDataType:
    """
    Contains COBRA Eligibility detail for a participant.

    If this element is not populated then the participant is assumed to
    not be COBRA eligible.

    Attributes:
        cobra_eligible: Indicates if the employee is eligible for COBRA.
        reason_reference: The reason why the participant is eligible for COBRA.  The reason is
            required if the participant is eligible for COBRA..
        cobra_eligible_date: The COBRA Eligible Date is the day the worker is eligible for COBRA
            coverage. It represents the worker's Last day of Coverage + 1 day.  For example, if an
            employee terminated on June 28th and was covered to the end of the month (June 30th),
            you would enter the COBRA Eligible Date as July 1st.
        qualifying_event_date: The Qualifying Event Date is the date of the event that caused the
            worker to be eligible for COBRA. For example, in the case of a dependent that is now
            over age, you would enter the birth date. If an employee has a reduction in hours and is
            now eligible for COBRA, you would enter the date they went from full-time to part-time.
        coverage_end_date: Date COBRA coverage will end.
        participant_reference: A unique identifier for the employee or dependent(s) that are
            eligible for COBRA coverage. If this is not populated, the employee is assumed to be the
            only participant covered.
        benefit_plan_reference: The Benefit Plan for which the employee or dependent(s) is eligible
            for COBRA coverage.
    """

    class Meta:
        name = "Review_COBRA_Eligibility_DataType"
        target_namespace = "urn:com.workday/bsvc"

    cobra_eligible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "COBRA_Eligible",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[CobraEligibilityReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cobra_eligible_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "COBRA_Eligible_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualifying_event_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Qualifying_Event_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    participant_reference: list[CobraParticipantObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Participant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_plan_reference: Optional[BenefitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewProbationPeriodDataType:
    """
    Review Probation Period Data.

    Attributes:
        review_probation_duration: Probation Period Duration
        review_probation_unit_reference: Probation Period Unit
    """

    class Meta:
        name = "Review_Probation_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    review_probation_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Review_Probation_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    review_probation_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Review_Probation_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignerRequestReferencesType:
    """
    Role Assigner References.

    Attributes:
        role_assigner_reference: Role Assigner References.
    """

    class Meta:
        name = "Role_Assigner_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    role_assigner_reference: list[RoleAssignerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Role_Assigner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class RoleAssignerResponseGroupType:
    """
    Parameters for Response Group for Role Assigner References.

    Attributes:
        include_reference: Allows you specify whether references should be included in the response.
        effective_timezone_reference: Allows you to override the effective timezone used when
            application data is deemed effective in the Workday system. (Also referred to as the
            "Effective Moment".) If not specified, this date defaults to the current timezone
    """

    class Meta:
        name = "Role_Assigner_Response_GroupType"
        target_namespace = "urn:com.workday/bsvc"

    include_reference: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_timezone_reference: Optional[TimeZoneObjectType] = field(
        default=None,
        metadata={
            "name": "Effective_Timezone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignmentDataType:
    """
    Role Assignment Data.

    Attributes:
        delete: Flag indicating that the role assignment should be deleted.
        update: Flag indicating that the role assignment should be updated.
        organization_role_reference: Reference to the Assignable Role
        role_assignee_reference: Reference to the Role Assignee.
    """

    class Meta:
        name = "Role_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Update",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_role_reference: Optional[AssignableRoleObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    role_assignee_reference: list[RoleeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Role_Assignee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignmentsRequestCriteriaType:
    """
    Request Criteria for Role Assignments of Role Assigner References.

    Attributes:
        assignable_role_reference: Designate Assignable Role References to filter the set of
            returned Role Assignments.
    """

    class Meta:
        name = "Role_Assignments_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    assignable_role_reference: list[AssignableRoleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Assignable_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SalaryOverTheCapCostingAllocationDetailDataType:
    """
    Details of the Salary over the Cap allocation, (e.g., a set of allocation dimensions and
    percentages)

    Attributes:
        soc_order: Orders the allocation detail (e.g., 'a', 'b', 'c', ...).  Note that during
            general ledger costing, any rounding issues resulting from the distributions are
            reconciled in the last allocation detail.
        soc_default_from_organization_assignment: Select Yes (Y) to indicate that the corresponding
            percentage should be allocated using the worker's (or position's) default organizational
            assignments with no overrides. Workday detects if this Request represents a sub-event
            embedded within a higher-level business process, and if so searches for a possible
            Assign Organization sub-event which contains proposed assignments.
        soc_costing_override_company_reference: Overriding Company for an Allocation Detail, used
            for Intercompany Accounting
        soc_override_worktag_reference: The costing dimension value(s) to use for the override
            (e.g., cost center reference, fund reference, etc.).
        soc_distribution_percent: The percentage for the given allocation detail, represented as a
            decimal value (e.g., .5).
    """

    class Meta:
        name = "Salary_Over_the_Cap_Costing_Allocation_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    soc_order: Optional[str] = field(
        default=None,
        metadata={
            "name": "SOC_Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    soc_default_from_organization_assignment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SOC_Default_from_Organization_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    soc_costing_override_company_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "SOC_Costing_Override_Company_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    soc_override_worktag_reference: list[TenantedPayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "SOC_Override_Worktag_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    soc_distribution_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "SOC_Distribution_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 9,
            "fraction_digits": 6,
        },
    )


@dataclass
class SecondPersonnelActionFirstLegalAuthorityValueDataType:
    """
    Container Element for the First Legal Authority Value for the Second Personnel Action data.

    Attributes:
        second_action_6_c_and_6_d_legal_authority_reference: The Legal Authority associated with the
            6-C and 6-D Legal Authority Value for the Second Action.
        parameter_value_6_c_and_6_d_legal_authority
    """

    class Meta:
        name = "Second_Personnel_Action_First_Legal_Authority_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_action_6_c_and_6_d_legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "Second_Action_6-C_and_6-D_Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_value_6_c_and_6_d_legal_authority: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_6-C_and_6-D_Legal_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecondPersonnelActionNatureOfActionValueDataType:
    """
    Container Element for the Nature of Action Value for the Second Personnel Action data.

    Attributes:
        second_action_6_a_and_6_b_nature_of_action_reference: The Nature of Action associated with
            the 6-A and 6-B Nature of Action Value for the Second Action.
        parameter_value_6_a_and_6_b_nature_of_action
    """

    class Meta:
        name = "Second_Personnel_Action_Nature_of_Action_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_action_6_a_and_6_b_nature_of_action_reference: Optional[NatureOfActionObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Second_Action_6-A_and_6-B_Nature_of_Action_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    parameter_value_6_a_and_6_b_nature_of_action: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_6-A_and_6-B_Nature_of_Action",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecondPersonnelActionSecondLegalAuthorityValueDataType:
    """
    Container Element for the Second Legal Authority Value for the Second Personnel Action data.

    Attributes:
        second_action_6_e_and_6_f_legal_authority_reference: The Legal Authority associated with the
            6-E and 6-F Legal Authority Value for the Second Action.
        parameter_value_6_e_and_6_f_legal_authority
    """

    class Meta:
        name = "Second_Personnel_Action_Second_Legal_Authority_Value_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_action_6_e_and_6_f_legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "Second_Action_6-E_and_6-F_Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    parameter_value_6_e_and_6_f_legal_authority: list[ParVariableValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Value_6-E_and_6-F_Legal_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SecondaryTerminationDataType:
    """
    The secondary reasons for the worker's most recent termination.

    Attributes:
        secondary_termination_reason_reference: Secondary reason for the worker's termination.
        secondary_termination_reason_category_reference: Reference to the secondary termination
            reason category.
    """

    class Meta:
        name = "Secondary_Termination_DataType"
        target_namespace = "urn:com.workday/bsvc"

    secondary_termination_reason_reference: Optional[EventClassificationSubcategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Secondary_Termination_Reason_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    secondary_termination_reason_category_reference: Optional[
        EventClassificationCategoryObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Secondary_Termination_Reason_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SetHiringRestrictionsResponseType:
    """
    Responds with the event id for the Job Restrictions Request Event, and the Supervisory
    Organization Reference.

    Attributes:
        event_reference: Reference to the Job Restrictions Request Event
        supervisory_organization_reference: Reference to the Supervisory Organization
        version
    """

    class Meta:
        name = "Set_Hiring_Restrictions_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillItemDataType:
    """
    Contains all the information about the Skill Item.

    Attributes:
        category_reference: A reference to the Skill Item Category associated with the Skill Item.
        id: The ID of the skill item.
        hide_from_candidates: When true, this Skill Item will not be shown to candidates.
        exclude_from_synonym_management: When True, the maintained skill will be excluded as a
            synonym when Workday converts skill synonyms to Skills Cloud skills.
        name: The name of the skill item.
        inactive: When true, the Skill Item is inactive.
    """

    class Meta:
        name = "Skill_Item_DataType"
        target_namespace = "urn:com.workday/bsvc"

    category_reference: list[SkillCategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hide_from_candidates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hide_from_Candidates",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_from_synonym_management: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_From_Synonym_Management",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillProfileForJobDataType:
    """
    Contains the Skill profile's information for a position.

    Attributes:
        skill_reference: The identifier of a skill.
        name: Enter the name of Skill.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Skill_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    skill_reference: Optional[SkillObjectType] = field(
        default=None,
        metadata={
            "name": "Skill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillQualificationProfileReplacementDataType:
    """
    Contains request data for replacing or deleting skill qualifications.

    If the delete field is true, this operation deletes all skills; do
    not specify any replacement data. Otherwise, this operation replaces
    all skills with the specified skills in the replacement data.

    Attributes:
        external_skill_id: The identifier of an external skill.
        skill_reference: The identifier of a skill.
        name: Enter the name of Skill.
        required: If Yes, Skill Qualification Profile is required.
        skill_level: The skill level between 1 and 5 of this skill. You can view Skill Level
            descriptions on the Create Job Profile and Edit Job Profile tasks. You can only view or
            enter Skill Levels on Get Job Profile or Put Job Profile web services.
    """

    class Meta:
        name = "Skill_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    external_skill_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "External_Skill_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_reference: Optional[LocalSkillObjectType] = field(
        default=None,
        metadata={
            "name": "Skill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_level: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Skill_Level",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 2,
            "fraction_digits": 0,
        },
    )


@dataclass
class SpecialtyAchievementDataType:
    """
    This element contains data about each Specialty-Subspecialty combination associated with the
    certification achievement.

    Attributes:
        specialty_reference: Enter the Speciality associated with the certification achievement.
        subspecialty_reference: Enter the subspecialty ID associated with the specialty.
    """

    class Meta:
        name = "Specialty_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    specialty_reference: Optional[SpecialtyParentObjectType] = field(
        default=None,
        metadata={
            "name": "Specialty_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    subspecialty_reference: list[SpecialtyChildObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Subspecialty_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SpecialtyAchievementDataWithDatesType:
    """
    This element contains data about each Specialty-Subspecialty combination associated with the
    certification achievement.

    Attributes:
        specialty_reference: Enter the Speciality associated with the certification achievement.
        start_date: Enter the Specialty Start Date associated with this certification achievement.
        end_date: Enter the Specialty End Date associated with this certification achievement.
        subspecialty_reference: Enter the subspecialty ID associated with the specialty.
    """

    class Meta:
        name = "Specialty_Achievement_Data_with_DatesType"
        target_namespace = "urn:com.workday/bsvc"

    specialty_reference: Optional[SpecialtyParentObjectType] = field(
        default=None,
        metadata={
            "name": "Specialty_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    subspecialty_reference: list[SpecialtyChildObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Subspecialty_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsConditionRuleRequestReferencesType:
    """
    Contains references that identify specific Staffing Field Defaults Condition Rules to retrieve.

    Attributes:
        staffing_field_defaults_condition_rule_reference: Contains a reference to the ID of the
            Staffing Field Defaults Condition Rule.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Condition_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_condition_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Staffing_Field_Defaults_Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StaffingFieldDefaultsForkableConditionItemDataType:
    """
    Contains the Forkable Condition Item data.

    Attributes:
        order: Defines the alphanumeric value that specifies the order of this Forkable Condition
            Item.
        condition_rule_reference: Contains a reference to the ID of the Condition Rule evaluated by
            the Forkable Condition Item.
        report_field_reference: Contains a reference to an External Field instance that provides the
            result that the Forkable Condition Item returns.
        instance_specific_value_reference: Contains a reference that identifies the Instance
            Specific Value instance returned by the Forkable Condition Item.
        text_specific_value: Contains the Text Value that the Forkable Condition Item returns.
        date_specific_value: Contains the Date Specific Value that the Forkable Condition Item
            returns.
        boolean_specific_value: Contains the Boolean Specific Value that this Forkable Condition
            Item returns.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Forkable_Condition_Item_DataType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 6,
        },
    )
    condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    report_field_reference: Optional[ExternalFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Report_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    instance_specific_value_reference: list[InstanceObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Instance_Specific_Value_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    text_specific_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Text_Specific_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_specific_value: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Specific_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    boolean_specific_value: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Boolean_Specific_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsRequestReferencesType:
    """
    Contains references that identify specific Staffing Field Defaults to retrieve.

    Attributes:
        staffing_field_defaults_reference: Contains references that identify specific Staffing Field
            Defaults to retrieve.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_reference: list[StaffingDefaultingFieldConfigurationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Staffing_Field_Defaults_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StartInternationalAssignmentResponseType:
    """
    Responds with the Event ID for the Start International Assignment for Employee Event and the job
    reference.

    Attributes:
        start_international_assignment_reference: Event ID of the Start International Assignment for
            Employee Event
        employee_reference: Reference to Employee.
        job_reference: Reference to position if web service was automatically completed.
        version
    """

    class Meta:
        name = "Start_International_Assignment_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    start_international_assignment_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Start_International_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityEventRequestReferencesType:
    """
    Container Element for included references.

    Attributes:
        student_employment_eligibility_event_reference: Student Employment Eligibility Reference to
            retrieve supporting information for
    """

    class Meta:
        name = "Student_Employment_Eligibility_Event_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_event_reference: list[
        StudentEmploymentEligibilityEventObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleRequestReferencesType:
    """
    Container for providing a specific Student Employment Eligibility Rule Reference.

    Attributes:
        student_employment_eligibility_rule_reference: Specific Reference that will be returned in
            the Response
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSetRequestReferencesType:
    """
    Reference  Student Employment Eligibility Rule Set Request.

    Attributes:
        student_employment_eligibility_rule_set_request_reference: Reference Student Employment
            Eligibility Rule Set Request
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Set_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_set_request_reference: list[
        StudentEmploymentEligibilityRuleSetObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Request_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSubeditDataType:
    """
    Container for Student Employment Eligibility Rule Subedit Data.

    Attributes:
        condition_rule_reference: Condition Rule Reference
        student_employment_eligibility_rule_reference: Student Employment Eligibility Rule ID
        reason_for_ineligibility: Specifies the Reason for Ineligibility
        critical_severity: Severity of the Condition Rule
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Subedit_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    student_employment_eligibility_rule_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_for_ineligibility: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reason_for_Ineligibility",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    critical_severity: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Critical_Severity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentPersonalProfileDataType:
    """
    Contains personal information of the Student Prospect.

    Attributes:
        date_of_birth: Date of birth for the Student Prospect.
        gender_reference: Gender for the Student Prospect.
        ethnicity_reference: Ethnicity for the Student Prospect.
        race_ethnicity_details_reference: Race/Ethnicity Details for the Student Prospect.
        citizenship_status_reference: Citizenship for the Student Prospect.
        hispanic_or_latino: Identifies if the Student Prospect is Hispanic or Latino.
        aboriginal_indigenous_identification_reference: Specify an Aboriginal/Indigenous
            Identification that is valid for this country.
        aboriginal_indigenous_identification_details_reference: Specify an Aboriginal/Indigenous
            Identification Details Reference that is valid for this country.
        religion_reference: Religion for the Student.
    """

    class Meta:
        name = "Student_Personal_Profile_DataType"
        target_namespace = "urn:com.workday/bsvc"

    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ethnicity_reference: list[EthnicityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Ethnicity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    race_ethnicity_details_reference: list[EthnicityDetailsObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Race_Ethnicity_Details_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_reference: list[CitizenshipStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hispanic_or_latino: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hispanic_or_Latino",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aboriginal_indigenous_identification_reference: Optional[
        AboriginalIndigenousIdentificationSelectionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Aboriginal_Indigenous_Identification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aboriginal_indigenous_identification_details_reference: list[
        AboriginalIndigenousDetailsObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Aboriginal_Indigenous_Identification_Details_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    religion_reference: Optional[ReligionObjectType] = field(
        default=None,
        metadata={
            "name": "Religion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SuccessionPlanCandidateDataType:
    """
    Contains information about the succession plan candidacy for the employee.

    Attributes:
        position_element_reference: The position or position restriction for which this employee is
            a succession plan candidate.
        succession_readiness_reference: The readiness of the candidate to fill this position.
        top_candidate: Indicates whether the employee is the top candidate for this succession plan.
        notes: Notes on this candidate.
        last_updated: The date the candidate information was last updated.
    """

    class Meta:
        name = "Succession_Plan_Candidate_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_element_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Element_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    succession_readiness_reference: Optional[SuccessionReadinessObjectType] = field(
        default=None,
        metadata={
            "name": "Succession_Readiness_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    top_candidate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Top_Candidate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_updated: Optional[str] = field(
        default=None,
        metadata={
            "name": "Last_Updated",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SwitchPrimaryJobDataType:
    """
    Wrapper element for the Switch Primary Job business process.

    Attributes:
        reason_reference: Reason for the change of the primary job.
        proposed_primary_job_reference: The worker must have an additional job in order to propose a
            primary job. When used in a standalone Switch Primary Job web service and the worker has
            only 1 additional job, Workday will automatically use the new primary job value. In
            Change Job and Add Additional Job web services, if no value is specified, this field
            will remain blank.
    """

    class Meta:
        name = "Switch_Primary_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    proposed_primary_job_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Proposed_Primary_Job_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SystemUserForWorkerDataType:
    """
    Contains the worker's user account information (user name, preferred language).

    Attributes:
        user_name: The user name that is used to sign on to the Workday application.
        user_language_reference: The preferred language for the user account.
        preferred_communication_language_reference: Captures the Preferred Communication Language
        locale_reference: The preferred locale for the user account.
        hour_clock_reference: The preferred hour clock for the user account.
        currency_reference: The preferred currency for the user account.
        time_zone_reference: The preferred time zone for the user account.
        default_display_language_reference: The default display language is derived by the system
            from the employee data.  It is overridden by the User Language Reference value if it
            exists.
        simplified_view: To enable user preferences that simplify the overall user experience.
    """

    class Meta:
        name = "System_User_for_Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    user_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "User_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    user_language_reference: Optional[UserLanguageObjectType] = field(
        default=None,
        metadata={
            "name": "User_Language__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    preferred_communication_language_reference: Optional[UserLanguageObjectType] = field(
        default=None,
        metadata={
            "name": "Preferred_Communication_Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    locale_reference: Optional[LocaleObjectType] = field(
        default=None,
        metadata={
            "name": "Locale__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hour_clock_reference: Optional[HourClockObjectType] = field(
        default=None,
        metadata={
            "name": "Hour_Clock_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_zone_reference: Optional[TimeZoneObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Zone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_display_language_reference: Optional[UserLanguageObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Display_Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    simplified_view: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Simplified_View",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TerminateEmployeeEventResponseType:
    """
    Responds with the Event ID for the Terminate Employee Event along with the worker reference.

    Attributes:
        event_reference: Event ID for the Terminate Employee Event.
        version
    """

    class Meta:
        name = "Terminate_Employee_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingAchievementDataType:
    """
    Wrapper element for Training information.

    Attributes:
        training_id: Training ID.  If no value is provided, a new training will be created.  If a
            value is passed in and a corresponding training is not found, a new training will be
            created with the provided id.
        remove_training: Used for inbound operations to indicate that the training should be removed
            for the person.  Will always return false for outbound operations.
        training: The Name of the Training.  Required unless the training is being removed.
        description: Description of the training.
        training_type_reference: Enter the Training Type ID specified in Training Types report.
        completion_date: The date of completion of the training.
        training_duration: The length of the course in days.
    """

    class Meta:
        name = "Training_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    training_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Training_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_training: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Training",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training: Optional[str] = field(
        default=None,
        metadata={
            "name": "Training",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_type_reference: Optional[TrainingTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Training_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    completion_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Completion_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_duration: Optional[str] = field(
        default=None,
        metadata={
            "name": "Training_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingProfileForJobDataType:
    """
    Contains the training profile's information for a position.

    Attributes:
        training_name: The name of the training.
        description: Description of the training.
        training_type_reference: Enter the Training Type ID specified in Training Types report.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Training_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    training_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Training_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_type_reference: Optional[TrainingTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Training_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingQualificationProfileReplacementDataType:
    """
    Replacement element containing Training Qualifications for the Job Profile When updating a Job
    Profile, all Training Qualifications for the Job Profile will be replaced by the submitted data.

    If no data is submitted, then the existing Training Qualifications
    are not changed.

    Attributes:
        training_name: Enter the text attribute that identifies the Training Program/Class.
        description: Enter the text attribute that describes the Training Program/Class.
        training_type_reference: Enter the Training Type ID specified in Training Types report.
        required: If Yes, Training Qualification is required.
    """

    class Meta:
        name = "Training_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    training_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Training_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_type_reference: Optional[TrainingTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Training_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionLogDataType:
    """
    Encapsulating element containing the data of the transaction log entry.

    Attributes:
        transaction_log_description: The Description of the Transaction Log
        transaction_effective_moment: Date attribute identifying the effective moment of the
            transaction.
        transaction_entry_moment: Date attribute identifying the entry moment of the transaction.
        transaction_log_type_reference: References to the transaction log types of the transaction.
        transaction_target_reference: References to the transaction targets of the transaction.
        is_rescind_or_rescinded: This transaction log is either an event that has been rescinded or
            is a rescind event that rescinds another event.
        is_correction_or_corrected: This transaction log is either an event that has been corrected
            or is a correction event that corrects another event.
    """

    class Meta:
        name = "Transaction_Log_DataType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_effective_moment: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Transaction_Effective_Moment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_entry_moment: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Transaction_Entry_Moment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_type_reference: list[TransactionLogTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Log_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_target_reference: list[EventTargetObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Target_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_rescind_or_rescinded: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Is_Rescind_Or_Rescinded",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_correction_or_corrected: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Is_Correction_Or_Corrected",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionLogRescindAndCorrectEventDataType:
    """
    Details on the rescind or correct of the event described in the main transaction data section.

    Attributes:
        transaction_log_reference: A reference to a transaction log entry.
        transaction_log_description: The Description of the Transaction Log
        is_correction: True if this is a correction of the main transaction.
        is_rescind: True if this is a rescind of the main transaction.
        prior_effective_moment: Date attribute identifying the effective moment of the transaction
            prior to the correction. This date will be the same as the transaction effective moment
            if the correction did not involve a date change.
        transaction_entry_moment: Date attribute identifying the entry moment of the transaction.
    """

    class Meta:
        name = "Transaction_Log_Rescind_And_Correct_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_reference: Optional[TransactionLogObjectType] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_correction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Is_Correction",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_rescind: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Is_Rescind",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    prior_effective_moment: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Prior_Effective_Moment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_entry_moment: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Transaction_Entry_Moment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionTypeReferencesType:
    """
    Wrapper element containing Transaction Types.

    Attributes:
        transaction_type_reference: If specified, this search criterium will return those
            Transaction Log Entries with Transaction Types that match the search criterium.
    """

    class Meta:
        name = "Transaction_Type_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_type_reference: list[TransactionLogTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TravelPreferenceDataType:
    """
    Contains the information about the employees willingness to travel as part of their job.

    Attributes:
        willing_to_travel_reference: A reference to whether an employee is willing to travel as part
            of their job.  The only values allowed are: Yes, No, and Maybe.
        travel_amount_reference: A reference to the amount of time that the employee is willing to
            travel for as part of their job. This is only applicable when the employee is willing to
            travel (Willing to Travel = Yes or Maybe).
        travel_additional_information: More information about why (or why not) the employee is
            willing to travel as part of their job.
    """

    class Meta:
        name = "Travel_Preference_DataType"
        target_namespace = "urn:com.workday/bsvc"

    willing_to_travel_reference: Optional[MobilityChoiceObjectType] = field(
        default=None,
        metadata={
            "name": "Willing_to_Travel_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    travel_amount_reference: Optional[TravelAmountObjectType] = field(
        default=None,
        metadata={
            "name": "Travel_Amount_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    travel_additional_information: Optional[str] = field(
        default=None,
        metadata={
            "name": "Travel_Additional_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnionMembershipDataType:
    """
    Element containing specific union membership dates and details.

    Attributes:
        start_date: Start date of the union membership.
        end_date: End date of the union membership.
        membership_type_reference: Reference ID for the types of membership, such as regular,
            retired, pending, or dues only.
        related_position_reference: Reference ID for the related position for the union membership.
            Can either be filled with a position or a position group.
        notes: Notes about the union membership.
    """

    class Meta:
        name = "Union_Membership_DataType"
        target_namespace = "urn:com.workday/bsvc"

    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    membership_type_reference: Optional[UnionMembershipTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Membership_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    related_position_reference: Optional[StaffingInterfaceObjectType] = field(
        default=None,
        metadata={
            "name": "Related_Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UserNotificationFrequencyConfigurationDataType:
    """
    Set the Notification Frequency for the channel.

    Attributes:
        channel_reference: Channel for Notification Frequency Configuration
        delivery_frequency_reference: Delivery frequency for Notification Type
    """

    class Meta:
        name = "User_Notification_Frequency_Configuration_DataType"
        target_namespace = "urn:com.workday/bsvc"

    channel_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Channel_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delivery_frequency_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Delivery_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ValidationFault(ValidationFaultType):
    class Meta:
        name = "Validation_Fault"
        namespace = "urn:com.workday/bsvc"


@dataclass
class VisaIdDataType:
    """
    Wrapper element for Visa identifier data.

    Attributes:
        id: Visa Identifier.
        id_type_reference: Visa Identifier Type.
        country_reference: Country issuing the Visa Identifier.
        issued_date: Date the Visa Identifier was issued.
        expiration_date: Expiration Date of the Visa Identifier.
        verification_date: Verification Date of the Visa Identifier.
        verified_by_reference: Worker who verified the ID.
    """

    class Meta:
        name = "Visa_ID_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id_type_reference: Optional[VisaIdTypeObjectType] = field(
        default=None,
        metadata={
            "name": "ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Verification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    verified_by_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Verified_By_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class VolumeDataType:
    """
    The volume information for the coverage level selected.

    Attributes:
        volume: The volume of the coverage amount selected.
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Volume_DataType"
        target_namespace = "urn:com.workday/bsvc"

    volume: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Volume",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkExperienceDataType:
    """
    Wrapper element for the work experience.

    Attributes:
        experience_reference: The reference to the work experience.
        remove_experience: Used for inbound operations to indicate that the work experience should
            be removed for the person.  Will always return false for outbound operations.
        experience_rating_reference: The reference to the work experience rating.
        experience_comment: Comments about the work experience.
    """

    class Meta:
        name = "Work_Experience_DataType"
        target_namespace = "urn:com.workday/bsvc"

    experience_reference: Optional[WorkExperienceQualificationObjectType] = field(
        default=None,
        metadata={
            "name": "Experience_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_experience: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Experience",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    experience_rating_reference: Optional[WorkExperienceRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Experience_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    experience_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Experience_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkExperienceProfileForJobDataType:
    """
    Contains the work experience profile's information for a position.

    Attributes:
        work_experience_reference: The reference to the work experience.
        work_experience_rating_reference: The reference to the work experience rating.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Work_Experience_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    work_experience_reference: Optional[WorkExperienceQualificationObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Experience_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_experience_rating_reference: Optional[WorkExperienceRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Experience_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkExperienceQualificationProfileReplacementDataType:
    """
    Replacement element containing Work Experience Qualifications for the Job Profile When updating
    a Job Profile, all Work Experiences for the Job Profile will be replaced by the submitted data.

    If no data is submitted, then the existing Work Experiences are not
    changed.

    Attributes:
        worker_experience_reference: The unique identifier of the Work Experience.
        work_experience_rating_reference: The unique identifier of the Work Experience Rating.
        required: If Y, Work Experience Qualification Profile is required.
    """

    class Meta:
        name = "Work_Experience_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_experience_reference: Optional[WorkExperienceQualificationObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Experience_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    work_experience_rating_reference: Optional[WorkExperienceRatingObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Experience_Rating_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkSpaceChangeEventDataType:
    """
    Sub element used to change work space on a Position.

    Attributes:
        position_reference: The Position you want to specify for the "Change Work Space" Web
            Service.
        effective_date: Date the work space change will be effective.
        work_space_reference: Work Space location for the Position.
    """

    class Meta:
        name = "Work_Space_Change_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    work_space_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Space_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerBasicDataType:
    """
    Worker Reference and Name of the Worker.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        worker_descriptor: Worker name including person name and status and other information about
            the worker.
    """

    class Meta:
        name = "Worker_Basic_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerCompensationCodeDataType:
    """
    Wrapper element for the worker compensation code.

    Contains the reference id and the worker comp code.

    Attributes:
        workers_compensation_code_reference: Reference for Workers' Compensation Code
        workers_compensation_code: The worker compensation code.
    """

    class Meta:
        name = "Worker_Compensation_Code_DataType"
        target_namespace = "urn:com.workday/bsvc"

    workers_compensation_code_reference: Optional[WorkersCompensationCodeObjectType] = field(
        default=None,
        metadata={
            "name": "Workers_Compensation_Code_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    workers_compensation_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Workers_Compensation_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerContractDetailDataType:
    """
    Encapsulating element containing all Contract data for a Worker.

    Attributes:
        contract_pay_rate: Contract Pay Rate for the Worker.
        currency_reference: Reference to the Currency.
        frequency_reference: Reference to the Frequency.
        contract_assignment_details: Contract Assignment Details for the Worker.
        contract_end_date: The date the contingent worker's contract ends.  The corresponding
            contract start date can be found in the Hire Date. This field is informational only. The
            value is effective immediately on update.
        supplier_reference: The Supplier for the Contingent Worker.
    """

    class Meta:
        name = "Worker_Contract_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contract_pay_rate: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contract_Pay_Rate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_assignment_details: Optional[str] = field(
        default=None,
        metadata={
            "name": "Contract_Assignment_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supplier_reference: Optional[SupplierObjectType] = field(
        default=None,
        metadata={
            "name": "Supplier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerCustomObjectDataType:
    """
    Effective dated additional data for a worker.

    When updating custom objects that allow multiple instances, data for
    existing instances must appear in the request, otherwise it will be
    removed.

    Attributes:
        effective_date: Effective date of the edit additional data request.
        worker_reference: Worker for edit additional data request.
        business_object_additional_data
    """

    class Meta:
        name = "Worker_Custom_Object_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    business_object_additional_data: Optional[EffectiveDatedWebServiceAdditionalDataType] = field(
        default=None,
        metadata={
            "name": "Business_Object_Additional_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerDocumentDataType:
    """
    The information about the worker document, such as the category and file.

    Attributes:
        id: The ID for the worker document.
        filename: The name of the worker document file.
        comment: A comment about the worker document.
        file: File content in base64 encoding.
        document_category_reference: The category that the worker document is for.
        worker_reference: Reference to a Role.
        content_type: Text attribute identifying Content Type of the Attachment.
    """

    class Meta:
        name = "Worker_Document_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filename: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filename",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    document_category_reference: Optional[DocumentCategoryAllObjectType] = field(
        default=None,
        metadata={
            "name": "Document_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Content_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 80,
        },
    )


@dataclass
class WorkerDocumentDetailsDataType:
    """
    Wrapper element for the details of a worker document.

    Attributes:
        document_category_reference: The category that the worker document is for.
        filename: The name of the worker document file.
        comment: A comment about the worker document.
        file: The document that was attached for the worker.
    """

    class Meta:
        name = "Worker_Document_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    document_category_reference: Optional[DocumentCategoryAllObjectType] = field(
        default=None,
        metadata={
            "name": "Document_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    filename: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filename",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )


@dataclass
class WorkerDocumentRequestReferencesType:
    """
    The Worker Document reference(s) to be retrieved.

    Attributes:
        worker_document_reference: The reference to the worker document.
    """

    class Meta:
        name = "Worker_Document_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document_reference: list[WorkerDocumentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class WorkerDocumentForStaffingEventDataType:
    """
    Attachments for the Staffing Event entered via a web service.

    Attributes:
        file_name: Filename for the attachment.
        worker_document_comment: Free form text comment about the attachment.
        document_category_reference: Category of attachment.
        file: Binary file contents.
        content_type: Text attribute identifying Content Type of the Attachment.
    """

    class Meta:
        name = "Worker_Document_for_Staffing_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "File_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    worker_document_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    document_category_reference: Optional[DocumentCategoryAllObjectType] = field(
        default=None,
        metadata={
            "name": "Document_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Content_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 80,
        },
    )


@dataclass
class WorkerDocumentIDataForStaffingEventType:
    """
    Wrapper for Document iData Information.

    Attributes:
        filename: Filename
        worker_document_comment: Comment
        document_category_reference: Document Category
        file: File Payload
        content_type: Content Type
    """

    class Meta:
        name = "Worker_Document_iData_for_Staffing_EventType"
        target_namespace = "urn:com.workday/bsvc"

    filename: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filename",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 255,
        },
    )
    worker_document_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    document_category_reference: Optional[DocumentCategoryAllObjectType] = field(
        default=None,
        metadata={
            "name": "Document_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    file: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "format": "base64",
        },
    )
    content_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Content_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 80,
        },
    )


@dataclass
class WorkerForFilledPositionType:
    """
    Wrapper element for  Worker Filling Position.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        position_reference: A unique identifier to reference a Position.
    """

    class Meta:
        name = "Worker_For_Filled_PositionType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerOrganizationRoleAssignmentDataType:
    """
    Contains the workers that fill the organization role.

    Attributes:
        worker_reference: A unique identifier that can be used to reference a worker(s) that fills
            the organization role.
        assignment_from: The way the role was assigned to the worker. Valid values are:  Assigned,
            Default, Inherited
    """

    class Meta:
        name = "Worker_Organization_Role_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_from: Optional[str] = field(
        default=None,
        metadata={
            "name": "Assignment_From",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerRequestReferencesType:
    """
    Utilize the Request References element to retrieve a specific instance(s) of Worker and its
    associated data.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        skip_non_existing_instances
        ignore_invalid_references
    """

    class Meta:
        name = "Worker_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    skip_non_existing_instances: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip_Non_Existing_Instances",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ignore_invalid_references: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ignore_Invalid_References",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerByNationalIdRequestCriteriaType:
    """
    National Id request criteria.

    Attributes:
        identifier_id: The specific national ID value for the worker.
        national_id_type_reference: The type of national id for the worker. Either the type or the
            country need to be included.
        country_reference: The Country Reference for the National ID. You must enter either the
            National ID Type or the Country for the National ID. Using the National ID Type is more
            explicit -if a country is entered, then it is possible that there are multiple workers
            who have the same ID value but with different national id types within that country.
    """

    class Meta:
        name = "Worker_by_National_ID_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    identifier_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Identifier_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    national_id_type_reference: Optional[NationalIdTypeObjectType] = field(
        default=None,
        metadata={
            "name": "National_ID_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeEligibilityRuleRequestReferencesType:
    """
    Working Time Eligibility Rule Request References Element.

    Attributes:
        working_time_eligibility_rule_reference: Working Time Eligibility Rule Request References
            Work Set
    """

    class Meta:
        name = "Working_Time_Eligibility_Rule_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    working_time_eligibility_rule_reference: list[ConditionRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeForCountryRequestCriteriaType:
    """
    Working Time For Country Request Criteria.

    Attributes:
        country_reference: Single or Multiple Countries
    """

    class Meta:
        name = "Working_Time_For_Country_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class WorkingTimeForCountryRequestReferencesType:
    """
    Working Time For Country References.

    Attributes:
        maintain_working_time_for_country_reference: Maintain Working Time For Country Reference
    """

    class Meta:
        name = "Working_Time_For_Country_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_working_time_for_country_reference: list[
        WorkingTimeDefaultingEligibilityTableObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Working_Time_for_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class WorkingTimeForCountryRowDataType:
    """
    Working Time For Country Row Data.

    Attributes:
        id: Reference ID
        order: Order For Working Time By Country Table
        working_time_eligibility_rule_reference: Condition Rule For Working Time
        working_time_default_details_data: Working Time Default Details Data
    """

    class Meta:
        name = "Working_Time_For_Country_Row_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 6,
        },
    )
    working_time_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    working_time_default_details_data: Optional[WorkingTimeDefaultDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Default_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddAdditionalJobEventDataType:
    """
    Wrapper element for the details of an Add Additional Job for an employee.

    Attributes:
        position_id: If you are adding the employee into a Position Group, you should not submit
            this field. The existing Position ID will continue to be used. If the employee is being
            added into a Headcount Group or Job Management Organization, then a new "position" will
            be created for them.  You can choose to enter an unique ID of your own choosing. If you
            do not submit it, an unique ID will be generated for it - either using the Position ID
            sequence generator if you have set one up - or another system generated ID will be used.
            This is the ID that you will be able to use in later web services where a Position
            Reference is needed.
        additional_job_reason_reference: Reference to the reason the employee is getting an
            Additional Job.
        employee_type_reference: Reference to the employee type for this employee.
        first_day_of_work: The date of the employee's first day of work in the additional job. Will
            default from the start date of the additional job if not submitted.
        probation_start_date: Date the employee's probation will start.
        probation_end_date: Date the employee's probation will end.
        end_employment_date: The End Employment Date for the position of fixed term or temporary
            employees. If empty, Workday will use the existing End Employment Date.
        conversion_position_start_date: The employee's start date for the current position. Must be
            later than the Hire Date. Use only for loading existing workers during implementation.
            Used for Manager History and Time in Position calculations.
        assignment_type_reference: Reference to the assignment type for the assignment position.
        expected_assignment_end_date: The End Date for the assignment.
        position_details: Position Details
    """

    class Meta:
        name = "Add_Additional_Job_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_job_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Additional_Job_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_type_reference: Optional[PositionWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    conversion_position_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Conversion_Position_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_type_reference: Optional[AssignmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Assignment_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_assignment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Assignment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_details: Optional[PositionDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Position_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AddAdditionalJobEventResponse(AddAdditionalJobEventResponseType):
    class Meta:
        name = "Add_Additional_Job_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AddFlexibleWorkArrangementSubProcessEventDataType:
    """
    Wrapper for Add Flexible Work Arrangement Event Data.

    Attributes:
        start_date: Contains the start date of the flexible work arrangement.
        proposed_end_date: Contains the proposed end date for the flexible work arrangement.
        reason_reference: Contains a reference that identifies a specific Reason instance.
        add_flexible_work_arrangement_type_details_data: Contains details about the type of flexible
            work arrangement.
    """

    class Meta:
        name = "Add_Flexible_Work_Arrangement_Sub_Process_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    proposed_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Proposed_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_flexible_work_arrangement_type_details_data: Optional[
        AddFlexibleWorkArrangementTypeDetailsDataType
    ] = field(
        default=None,
        metadata={
            "name": "Add_Flexible_Work_Arrangement_Type_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AddRetireeStatusDataType:
    """
    Wrapper Element for the Add Retiree Status business process web service and its sub business
    processes.

    Attributes:
        employee_reference: Contains reference for employee who is going to retire.
        retiree_status_date: Contains retirement date.
        add_retiree_status_event_data: Contains Add Retiree Status details for a worker.
    """

    class Meta:
        name = "Add_Retiree_Status_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    retiree_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Retiree_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_retiree_status_event_data: Optional[AddRetireeStatusEventDataType] = field(
        default=None,
        metadata={
            "name": "Add_Retiree_Status_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AddRetireeStatusResponse(AddRetireeStatusResponseType):
    class Meta:
        name = "Add_Retiree_Status_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ApplicantRequestCriteriaType:
    """
    Utilize the following criteria options to search for Applicants within the Workday system.

    The Applicant references that are returned are those that satisfy
    ALL criteria included in the request.  Therefore, the result set
    will become more limited with every criterium that is populated.

    Attributes:
        worker_reference: Search for a pre-hire by specifying the contingent worker id. The
            contingent worker id could be the current contingent worker id for the pre-hire (where
            the pre- hire is still currently also a contingent worker in the system), or the
            previous contingent worker id for the pre-hire where the pre-hire is no longer a
            contingent worker.
        former_worker_reference: Search for a pre-hire by specifying the former worker id.
        email_address: If specified, this search criterium will return those references with an
            exact match.  The search index used to query on this value is not case-sensitive.
        field_and_parameter_criteria_data
    """

    class Meta:
        name = "Applicant_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    former_worker_reference: Optional[FormerWorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Former_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    email_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Email_Address",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    field_and_parameter_criteria_data: Optional[FieldAndParameterCriteriaDataType] = field(
        default=None,
        metadata={
            "name": "Field_And_Parameter_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationResponse(AssignOrganizationResponseType):
    class Meta:
        name = "Assign_Organization_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AssignOrganizationRolesResponse(AssignOrganizationRolesResponseType):
    class Meta:
        name = "Assign_Organization_Roles_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AssignPositionOrganizationEventDataType:
    """
    Wrapper element for Assign Position Organization business process.

    Attributes:
        company_assignments_reference: The companies assigned to the position. If empty, Workday
            will use the existing assignments.
        cost_center_assignments_reference: The cost centers assigned to the position. If empty,
            Workday will use the existing assignments.
        region_assignments_reference: The regions assigned to the position. If empty, Workday will
            use the existing assignments.
        custom_organization_assignment_data
        fund_assignments_reference: The funds assigned to the position. If empty, Workday will use
            the existing assignment.
        grant_assignments_reference: The grants assigned to the position. If empty, Workday will use
            the existing assignment.
        program_assignments_reference: The programs assigned to the position. If empty, Workday will
            use the existing assignment.
        business_unit_assignments_reference: The business units assigned to the position. If empty,
            Workday will use the existing assignment.
        gift_assignments_reference: The gifts assigned to the position. If empty, Workday will use
            the existing assignment.
    """

    class Meta:
        name = "Assign_Position_Organization_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    company_assignments_reference: list[CompanyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Company_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cost_center_assignments_reference: list[CostCenterObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Cost_Center_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_assignments_reference: list[RegionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Region_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_organization_assignment_data: list[CustomOrganizationAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Custom_Organization_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fund_assignments_reference: list[FundObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Fund_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_assignments_reference: list[GrantObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Grant_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    program_assignments_reference: list[ProgramObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Program_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_unit_assignments_reference: list[BusinessUnitObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Unit_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gift_assignments_reference: list[GiftObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Gift_Assignments_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignRolesEventDataType:
    """
    Wrapper Element for the Assign Roles web service.

    Attributes:
        effective_date: Date the Role Assignments should take effect. Defaults to the current date
            if not provided.
        effective_timezone_reference: Only users secured to Manage: Role Assignment Time Zone
            security domain can override the default time zone in Assign Role Web Services. If left
            blank and role assignment tenant setup option = 'Assignee Location', then time zone of
            Event Target Assignee's location will be used for all role assignments including
            assignees to add/remove that are in different time zones. If tenant setup option =
            'Tenant Default', then tenant default time zone will be used. Leave this field blank if
            no role assignment time zone option has been selected in tenant setup.
        event_target_assignee_reference: The Position/Worker that is the subject of this event, used
            for business process definition selection and routing. If a worker is specified and they
            have multiple jobs as of specified effective date, business process definition selection
            and routing will be based on the international assignment (IA) position with earliest
            start date, otherwise it will be based on worker's primary position. Specify a position
            if this behavior for worker is not desired.The valid ID types may include:
            Cost_Center_Reference_ID, Custom_Organization_Reference_ID, Custom_Worktag_06-15_ID,
            Custom_Worktag_1-5_ID, Customer_ID, Customer_Reference_ID, Gift_Reference_ID, Grant_ID,
            Loan_ID, Organization_Reference_ID, Program_ID, Project_ID, Purchase_Item_ID,
            Region_Reference_ID, Revenue_Category_ID, Sales_Item_ID, Spend_Category_ID, Sponsor_ID,
            Sponsor_Reference_ID, Student_Charge_Item_ID.
        remove_all_role_assignments_for_event_target_assignee: When TRUE, ALL role assignments for
            assignee as of the specified effective date onward will be removed including role
            assignments with a later-dated effective date.
        assign_roles_role_assignment_data
    """

    class Meta:
        name = "Assign_Roles_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_timezone_reference: Optional[TimeZoneObjectType] = field(
        default=None,
        metadata={
            "name": "Effective_Timezone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_target_assignee_reference: Optional[RoleeSelectorObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Target_Assignee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_all_role_assignments_for_event_target_assignee: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_All_Role_Assignments_for_Event_Target_Assignee",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles_role_assignment_data: list[AssignRolesRoleAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Assign_Roles_Role_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignRolesResponse(AssignRolesResponseType):
    class Meta:
        name = "Assign_Roles_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AssignRolesSubProcessDataType:
    """
    Container for the Assign Roles and related Role Assignments data.

    Attributes:
        remove_all_role_assignments_for_event_target_assignee: When TRUE, ALL role assignments for
            assignee as of the specified effective date onward will be removed including role
            assignments with a later-dated effective date.
        assign_roles_role_assignment_data
    """

    class Meta:
        name = "Assign_Roles_Sub_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    remove_all_role_assignments_for_event_target_assignee: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_All_Role_Assignments_for_Event_Target_Assignee",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles_role_assignment_data: list[AssignRolesRoleAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Assign_Roles_Role_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AwardAndActivityType:
    """
    Wrapper element for Award and Activity information.

    Attributes:
        award_and_activity_reference: Reference to the Award and Activity Profile.
        award_and_activity_data: Wrapper element for Award and Activity information.
    """

    class Meta:
        name = "Award_and_ActivityType"
        target_namespace = "urn:com.workday/bsvc"

    award_and_activity_reference: Optional[AwardObjectType] = field(
        default=None,
        metadata={
            "name": "Award_and_Activity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    award_and_activity_data: Optional[AwardAndActivityAchievementDataType] = field(
        default=None,
        metadata={
            "name": "Award_and_Activity_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BeneficiaryDataType:
    """
    Contains the details about the beneficiary.

    Attributes:
        beneficiary_id: The ID for the beneficiary.
        irrevocable: Indicates if the beneficiary is revocable.
        inactive_date: If inactive, the date from which the beneficiary is inactive.
        court_order
    """

    class Meta:
        name = "Beneficiary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    beneficiary_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Beneficiary_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    irrevocable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Irrevocable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Inactive_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    court_order: list[QualifiedDomesticRelationsOrderReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Court_Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BeneficiaryDesignationDataType:
    """
    Contains the beneficiary that the coverage allocation is for and the details about the
    allocation.

    Attributes:
        beneficiary_reference: A unique identifier for the beneficiary.
        original_coverage_begin_date: The original date that coverage began.
        coverage_end_date: The end date of the coverage.
        beneficiary_allocation_data
    """

    class Meta:
        name = "Beneficiary_Designation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    beneficiary_reference: Optional[BeneficiaryObjectType] = field(
        default=None,
        metadata={
            "name": "Beneficiary_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    original_coverage_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    beneficiary_allocation_data: Optional[BeneficiaryAllocationDataType] = field(
        default=None,
        metadata={
            "name": "Beneficiary_Allocation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class BenefitPlanSummaryDataType:
    """
    Contains the summary information about the benefit provider of the benefit plan.

    Attributes:
        benefit_plan_reference: A reference for the benefit plan.
        benefit_plan_name: The name of the benefit plan.
        group_identifier: The group identifier of the benefit plan.
        benefit_coverage_type_reference: The type of coverage that the benefit plan is for.
        currency_reference: The default currency of the benefit plan.
        frequency_reference: The default currency of the benefit plan.
        health_care_classification_reference: The classification of the health care plan.
        insurance_coverage_target_reference: The insurance coverage target for the insurance plan.
        benefit_provider_summary_data: Contains the summary information about the benefit provider
            of the benefit plan.
        external_integration_id_data
        pay_component_reference: Pay Component Reference for the Benefit Plan
    """

    class Meta:
        name = "Benefit_Plan_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_plan_reference: Optional[BenefitPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Benefit_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    group_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "Group_Identifier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_coverage_type_reference: Optional[BenefitCoverageTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Benefit_Coverage_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    health_care_classification_reference: Optional[HealthCareClassificationObjectType] = field(
        default=None,
        metadata={
            "name": "Health_Care_Classification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    insurance_coverage_target_reference: Optional[InsuranceCoverageTargetObjectType] = field(
        default=None,
        metadata={
            "name": "Insurance_Coverage_Target_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_provider_summary_data: Optional[BenefitProviderSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Provider_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_integration_id_data: Optional[ExternalIntegrationIdDataType] = field(
        default=None,
        metadata={
            "name": "External_Integration_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_component_reference: list[PayComponentObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Pay_Component_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessProcessParametersType:
    """
    Container for the processing options for a business process.

    If no options are submitted (or the options are submitted as
    'false') then the business process is simply initiated as if it
    where submitted on-line with approvals, reviews, notifications and
    to-do's in place. If the Initiator is an Integration System User,
    any validations you configured on the Initiation step are ignored.

    Attributes:
        auto_complete: When set to "true" or "1", the business process is automatically processed.
            This means that all approvals will be automatically approved in the system, all reviews
            and to-do's will be automatically by-passed, and all notifications will be automatically
            suppressed.
        run_now: Indicates the transaction should process to completion before the response is
            generated. Note: All &lt; v12 operations will process with Run_Now = True for backwards
            compatibility but please review this setting in your environment for performance
            conditions.
        discard_on_exit_validation_error: Enforces all validation conditions defined on the
            initiation step. If any condition is true, the validation error blocks the step from
            exiting and a business process event isn't created. The attribute is currently not
            available for use. It will be generally available for all web services in a future
            release.
        comment_data
        business_process_attachment_data
    """

    class Meta:
        name = "Business_Process_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    auto_complete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Auto_Complete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    run_now: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Run_Now",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    discard_on_exit_validation_error: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Discard_On_Exit_Validation_Error",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comment_data: Optional[BusinessProcessCommentDataType] = field(
        default=None,
        metadata={
            "name": "Comment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_attachment_data: list[BusinessProcessAttachmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Process_Attachment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BusinessSubProcessParametersType:
    """
    Container for the processing options for sub-business processes within a business process.

    If no options are submitted (or the options are submitted as
    'false') then the sub-business process is simply initiated as if it
    where submitted on-line with approvals, reviews, notifications and
    to-do's in place. If the Initiator is an Integration System User,
    any validations you configured on the Initiation step are ignored.

    Attributes:
        auto_complete: When set to "true" or "1", the business process is automatically processed.
            This means that all approvals will be automatically approved in the system, all reviews
            and to-do's will be automatically by-passed, and all notifications will be automatically
            suppressed.
        skip: When set to "true" or "1", the business process is automatically skipped (if it is
            defined as "skippable" within the business process definition).
        discard_on_exit_validation_error: Enforces all validation conditions defined on the
            initiation step. If any condition is true, the validation error blocks the step from
            exiting and a business process event isn't created. The attribute is currently not
            available for use. It will be generally available for all web services in a future
            release.
        business_process_comment_data
        business_process_attachment_data
    """

    class Meta:
        name = "Business_Sub_Process_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    auto_complete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Auto_Complete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skip: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    discard_on_exit_validation_error: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Discard_On_Exit_Validation_Error",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_comment_data: Optional[BusinessProcessCommentDataType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Comment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_attachment_data: list[BusinessProcessAttachmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Process_Attachment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationAchievementDataType:
    """
    Wrapper element for Certification information.

    Attributes:
        certification_id: Certification ID. If no value is provided, a new certification will be
            created. If a value is passed in and a corresponding certification is not found, a new
            certification will be created with the provided id.
        remove_certification: Used for inbound operations to indicate that the certification should
            be removed for the person.  Will always return false for outbound operations.
        certification_reference: Wrapper element for the Certification Reference, i.e. from the list
            of pre-defined certifications.
        country_reference: The country in which the certification is used.
        certification_name: The name of the Certification.
        issuer: The authority issuing the certification.
        certification_number: Certification Number for the Certification.
        issued_date: The date the certification was issued.
        expiration_date: The date of expiration of the certification.
        examination_score: The person's score on the certification examination.
        examination_date: The date the certification examination was taken.
        specialty_achievement_data: This data contains information about any specialties and
            subspecialties associated with the certification achievement.
        worker_document_data: Worker Document Data is only used for worker certifications. Do not
            use this for applicants.
    """

    class Meta:
        name = "Certification_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    certification_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Certification_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_certification: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Certification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_reference: Optional[CertificationObjectType] = field(
        default=None,
        metadata={
            "name": "Certification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Certification_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issuer: Optional[str] = field(
        default=None,
        metadata={
            "name": "Issuer",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Certification_Number",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issued_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Issued_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expiration_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    examination_score: Optional[str] = field(
        default=None,
        metadata={
            "name": "Examination_Score",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    examination_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Examination_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    specialty_achievement_data: list[SpecialtyAchievementDataWithDatesType] = field(
        default_factory=list,
        metadata={
            "name": "Specialty_Achievement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: list[CertificationAttachmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationProfileForJobDataType:
    """
    Contains the certification profile's information for a position.

    Attributes:
        country_reference: The country of certification.
        certification_reference: The certification ID reference.
        certification_name: The name of Certification.
        certification_issuer: The Issuer of Certification.
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
        specialty_achievement_data
    """

    class Meta:
        name = "Certification_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_reference: Optional[CertificationObjectType] = field(
        default=None,
        metadata={
            "name": "Certification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Certification_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_issuer: Optional[str] = field(
        default=None,
        metadata={
            "name": "Certification_Issuer",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    specialty_achievement_data: list[SpecialtyAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Specialty_Achievement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationQualificationProfileReplacementDataType:
    """
    Replacement element containing Certification Qualifications for the Job Profile When updating a
    Job Profile, all Certifications for the Job Profile will be replaced by the submitted data.

    If no data is submitted, then the existing Certifications are not
    changed.

    Attributes:
        country_reference: The country of certification.
        certification_reference: The certification ID reference.
        name: The name of Certification.
        issuer: The Issuer of Certification.
        required: If Y, Certification Qualification Profile is required.
        specialty_achievement_reference
    """

    class Meta:
        name = "Certification_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_reference: Optional[CertificationObjectType] = field(
        default=None,
        metadata={
            "name": "Certification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    issuer: Optional[str] = field(
        default=None,
        metadata={
            "name": "Issuer",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    specialty_achievement_reference: list[SpecialtyAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Specialty_Achievement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobDetailDataType:
    """
    Contains the details of the change job business process including the reason.

    Attributes:
        reason_reference: The Reason for the job change. The Reason must be valid for the worker
            type.
        supervisory_organization_reference: The proposed Supervisory Organization. If empty, Workday
            will use the existing Supervisory Organization.
        headcount_option_reference: The Headcount Option type ID. Entering Move will move the
            position to a new supervisory organization. Entering Backfill will keep the current
            position open in order to backfill it. Entering Close will close the current position.
            Only used when moving a worker between position management organizations. When equal to
            Move, Workday will not use the Proposed Position.
        job_overlap_allowed: If Y, allows multiple workers to be placed in a position
            simultaneously. Only applies to position management positions.
        proposed_position_reference: The position restriction that the worker will fill. Only used
            when Headcount Option is equal to Backfill or Close. If Create Position equals Y,
            Workday ignores this value.
        proposed_job_requisition_reference: The existing job requisition that the worker will fill.
            Only used when Headcount Option is equal to Backfill or Close. If Create Position equals
            Y, Workday ignores this value.
        create_position: If Y, creates a new position for the proposed supervisory organization.
            Valid only for position management organizations.
        employee_type_reference: The Employee Type of the position. If empty, Workday will use the
            existing Employee Type.
        contingent_worker_type_reference: The Contingent Worker Type of the position. If empty,
            Workday will use the existing Contingent Worker Type.
        job_details_data
        assignment_type_reference: The Assignment Type for the assignment position.
        expected_assignment_end_date: The End Date for the assignment.
        end_employment_date: Date attribute representing the fixed end of employment for this
            employee.
        contract_end_date: The Contract End Date for the position. If empty, Workday will use the
            existing Contract End Date.
        first_day_of_work: The date that the worker starts with the new position information. If
            empty, Workday will use the existing effective date.
        notify_worker_by: The date by which the manager should notify the worker of any job changes.
            If empty, Workday will use the effective date.
        new_position_id: When Create Position is Y, Workday updates the reference ID of the new
            position. If Create Position is N, Workday ignores this value.
        contract_details_data
        worker_document_data
    """

    class Meta:
        name = "Change_Job_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[ChangeJobSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    headcount_option_reference: Optional[HeadcountOptionsObjectType] = field(
        default=None,
        metadata={
            "name": "Headcount_Option_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Allowed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    proposed_position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Proposed_Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    proposed_job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Proposed_Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_position: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Create_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_type_reference: Optional[EmployeeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contingent_worker_type_reference: Optional[ContingentWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_details_data: Optional[PositionDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Job_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_type_reference: Optional[AssignmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Assignment_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_assignment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Assignment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notify_worker_by: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notify_Worker_By",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    new_position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "New_Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_details_data: Optional[ContractDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Contract_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: list[WorkerDocumentForStaffingEventDataType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobResponseType:
    """
    Responds with the Event ID of the Change Job and any exceptions.

    Attributes:
        event_reference: Event ID of the Job Change event.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Change_Job_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeOrganizationAssignmentsResponse(ChangeOrganizationAssignmentsResponseType):
    class Meta:
        name = "Change_Organization_Assignments_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangeWorkSpaceResponse(ChangeWorkSpaceResponseType):
    class Meta:
        name = "Change_Work_Space_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CitizenshipStatusType:
    """
    Citizenship Status Details.

    Attributes:
        citizenship_status_reference: The reference of the Citizenship Status requested.
        citizenship_status_data
    """

    class Meta:
        name = "Citizenship_StatusType"
        target_namespace = "urn:com.workday/bsvc"

    citizenship_status_reference: Optional[CitizenshipStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_data: list[CitizenshipStatusDataType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ClosePositionDataType:
    """
    Wrapper element for the Close Position business process data including the position to close and
    the event data.

    Attributes:
        position_reference: Reference of the position restriction that will be closed.
        close_event_data
    """

    class Meta:
        name = "Close_Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    close_event_data: list[ClosePositionEventDataType] = field(
        default_factory=list,
        metadata={
            "name": "Close_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ClosePositionResponse(ClosePositionResponseType):
    class Meta:
        name = "Close_Position_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CollectiveAgreementDataType:
    """
    Collective Agreement Data Element.

    Attributes:
        agreement: Agreement Text
        id: ID Text
        code: Code Text
        start_date: Start Date
        end_date: End Date
        restricted_to_countries_reference: Restricted to Countries
        location_reference: Location
        collective_agreement_eligibility_rule: Collective Agreement Eligibility Rule
        union_reference: Union
        note: Note Text
        inactive: Inactive Boolean
        collective_agreement_factors_mapping
        collective_agreement_classification_parameters
    """

    class Meta:
        name = "Collective_Agreement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    agreement: Optional[str] = field(
        default=None,
        metadata={
            "name": "Agreement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    restricted_to_countries_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Restricted_to_Countries_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_eligibility_rule: Optional[CollectiveAgreementRuleDataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    union_reference: list[UnionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Union_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factors_mapping: Optional[CollectiveAgreementFactorsMappingType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factors_Mapping",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_classification_parameters: list[
        CollectiveAgreementClassificationParametersType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Classification_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementFactorOptionsDataType:
    """
    Wrapper for collective agreement factors and factor options.

    Attributes:
        collective_agreement_factor_1_data: Container for the collective agreement factor 1 and
            factor option 1 data.
        collective_agreement_factor_2_data: Container for the collective agreement factor 2 and
            factor option 2 data.
        collective_agreement_factor_3_data: Container for the collective agreement factor 3 and
            factor option 3 data.
        collective_agreement_factor_4_data: Container for the collective agreement factor 4 and
            factor option 4 data.
        collective_agreement_factor_5_data: Container for the collective agreement factor 5 and
            factor option 5 data.
    """

    class Meta:
        name = "Collective_Agreement_Factor_Options_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_factor_1_data: Optional[CollectiveAgreementFactor1DataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_1_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_2_data: Optional[CollectiveAgreementFactor2DataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_2_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_3_data: Optional[CollectiveAgreementFactor3DataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_3_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_4_data: Optional[CollectiveAgreementFactor4DataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_4_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor_5_data: Optional[CollectiveAgreementFactor5DataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Factor_5_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementSnapshotDataType:
    """
    Encapsulating Element containing the Collective Agreement Classification Parameter Data.

    Attributes:
        collective_agreement_reference: The Collective Agreement Reference.
        collective_agreement_review_date: The collective agreement review date.
        collective_agreement_factor
    """

    class Meta:
        name = "Collective_Agreement_Snapshot_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_reference: Optional[CollectiveAgreementObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_review_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Review_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_factor: list[CollectiveAgreementFactorParameterDataType] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Factor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CommunicationMethodUsageInformationDataType:
    """
    Encapsulating element for all Communication Method Usage data.

    Attributes:
        type_data: Reference ID for the communication usage type.
        use_for_reference: Reference ID for communication usage behavior.
        use_for_tenanted_reference: Reference ID for communication usage behavior tenanted.
        comments: Description of the  address, phone, email, instant messenger, or web address.
        public: Indicates if the address is public.
    """

    class Meta:
        name = "Communication_Method_Usage_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    type_data: list[CommunicationUsageTypeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Type_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    use_for_reference: list[CommunicationUsageBehaviorObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Use_For_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_for_tenanted_reference: list[CommunicationUsageBehaviorTenantedObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Use_For_Tenanted_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    comments: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    public: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Public",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensatableSummaryDataType:
    """
    Wrapper element containing summary compensation information for a position.

    The information is in the position's compensation currency and
    frequency, annualized, and annualized in the default currency.

    Attributes:
        employee_compensation_summary_data: Employee Compensation Summary Data
        annualized_summary_data: Annualized Summary Data
        summary_data_in_pay_group_frequency
        annualized_in_reporting_currency_summary_data: Annualized in Reporting Currency Summary Data
        summary_data_in_hourly_frequency
    """

    class Meta:
        name = "Compensatable_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_compensation_summary_data: Optional[CompensatableSummaryAmountDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Compensation_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annualized_summary_data: Optional[CompensatableSummaryAmountAnnualizedDataType] = field(
        default=None,
        metadata={
            "name": "Annualized_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    summary_data_in_pay_group_frequency: Optional[
        CompensatableSummaryAmountInTargetFrequencyDataType
    ] = field(
        default=None,
        metadata={
            "name": "Summary_Data_in_Pay_Group_Frequency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annualized_in_reporting_currency_summary_data: Optional[
        CompensatableSummaryAmountAnnualizedInReportingCurrencyDataType
    ] = field(
        default=None,
        metadata={
            "name": "Annualized_in_Reporting_Currency_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    summary_data_in_hourly_frequency: Optional[CompensatableSummaryAmountHourlyDataType] = field(
        default=None,
        metadata={
            "name": "Summary_Data_in_Hourly_Frequency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyProfileForJobType:
    """
    Contains the position's competency information.

    Attributes:
        competency_profile_reference: A unique Identifier for the competency profile for the
            position.
        competency_profile_data
    """

    class Meta:
        name = "Competency_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    competency_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Competency_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    competency_profile_data: Optional[CompetencyProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Competency_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompetencyQualificationReplacementType:
    """
    Wrapper element for Competency Qualifications.

    Allows all competency qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing competency qualifications with those sent in the web service

    Attributes:
        competency_qualification_replacement_data
        delete: If Y, deletes all competency qualifications for the position restriction or job
            profile.
    """

    class Meta:
        name = "Competency_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    competency_qualification_replacement_data: list[
        CompetencyQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Competency_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionItemDataWwstype:
    """
    Wrapper element containing data for each Condition Item.

    Attributes:
        order: Text value for order of Condition Item.
        and_or_operator_reference: Reference to the And Or Operator used on this Condition Item.
        open_parentheses: Specify an Open Parentheses for the Condition Item by placing the "("
            character here.
        relational_operator_reference: Reference to the Relational Operator to use for this
            Condition Item.
        condition_entry_option_reference: Reference to the Condition Entry Option to use for this
            Condition Item.
        close_parentheses: Specify an Close Parentheses for the Condition Item by placing the ")"
            character here.
        source_external_field_reference: Reference to the External Field to use as the source for
            this Condition Item.
        source_condition_rule_reference: Reference to the Condition Rule to use as the source for
            this Condition Item.
        filter_boolean: Boolean value for Filter.
        filter_date: Date value for Filter.
        filter_date_time_zone: DateTimeZone value for filter.
        filter_time: Time value for filter.
        filter_number: Numeric value for Filter Number.
        filter_text: Text value for Filter.
        target_external_field_reference: Reference to Target External Field for this Condition
            Item..
        target_instance_reference: Reference to specific object to be used in filter for this
            Condition Rule.
    """

    class Meta:
        name = "Condition_Item_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "max_length": 6,
        },
    )
    and_or_operator_reference: Optional[AndOrOperatorsObjectType] = field(
        default=None,
        metadata={
            "name": "And_Or_Operator_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    open_parentheses: Optional[str] = field(
        default=None,
        metadata={
            "name": "Open_Parentheses",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    relational_operator_reference: Optional[RelationalOperatorObjectType] = field(
        default=None,
        metadata={
            "name": "Relational_Operator_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    condition_entry_option_reference: Optional[ConditionEntryOptionObjectType] = field(
        default=None,
        metadata={
            "name": "Condition_Entry_Option_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_parentheses: Optional[str] = field(
        default=None,
        metadata={
            "name": "Close_Parentheses",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    source_external_field_reference: Optional[ExternalFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Source_External_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    source_condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Source_Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_boolean: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Filter_Boolean",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Filter_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_date_time_zone: Optional[FilterDateTimeZoneDataType] = field(
        default=None,
        metadata={
            "name": "Filter_DateTimeZone",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "Filter_Time",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filter_number: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Filter_Number",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 16,
            "fraction_digits": 4,
        },
    )
    filter_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "Filter_Text",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_external_field_reference: Optional[ExternalFieldObjectType] = field(
        default=None,
        metadata={
            "name": "Target_External_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_instance_reference: list[InstanceObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Target_Instance_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContractContingentWorkerEventDataType:
    """
    Wrapper element for the details of a contingent worker contract.

    Attributes:
        contingent_worker_id: If this is a rehire, you can leave the ID blank and the Contingent
            Worker ID that is currently used for the terminated contingent worker instance will be
            used. You can also enter a new ID to be used (which will change the ID on the terminated
            contingent worker instance). If this is a new contingent worker and you are using an
            contingent worker id sequence generator, leave this ID blank and the next ID in the
            sequence will be given to the contingent worker . If this is a new contingent worker and
            you are not using an contingent worker id sequence generator, enter the ID you want to
            use. If you leave it blank, an unique ID will be generated. If this is a former worker
            and Reuse Former Worker ID tenant setup is on, leave this ID blank and the ID from the
            former worker will be defaulted in if it is not already in use by another employee.
        position_id: If you are contracting the  worker into a Position Group, you should not submit
            this field. The existing Position ID will continue to be used. If the worker is being
            contracted into a Headcount Group or Job Management Organization, then a new "position"
            will be created for them. You can choose to enter an unique ID of your own choosing. If
            you do not submit it, an unique ID will be generated for it - either using the Position
            ID sequence generator if you have set one up - or another system generated ID will be
            used. This is the ID that you will be able to use in later web services where a Position
            Reference is needed.
        contract_worker_reason_reference: Reference to the reason the worker is being contracted.
        contract_worker_type_reference: Reference to the type of contingent worker.
        create_purchase_order: Set the Create Purchase Order to True if you use Workday Procurement
            and you wish a purchase order to be created for this contingent worker. Setting the flag
            to True will cause the sub process of Create Purchase Order for Contingent Worker to be
            initiated after the contingent worker is created. The sub process will only be initiated
            if it is defined as part of the supervisory organization's business process definition.
            It will need to be finished online manually to activate the Purchase Order. Setting the
            flag to true will cause the Contract End Date to be required, and will require a
            currency and frequency (of an hourly type) if a pay rate is entered.
        contract_end_date: Date the contract is expected to end.
        first_day_of_work: The date of the contingent worker's first day of work. If left empty,
            Workday uses the Contract Start Date.
        conversion_position_start_date: The employee's start date for the current position. Must be
            later than the Hire Date. Use only for loading existing workers during implementation.
            Used for Manager History and Time in Position calculations.
        supplier_reference: If the worker is not an independent contingent worker, enter the
            reference to the supplier.
        default_payment_term_reference: If the worker is not an independent contract, enter the
            payment terms for the supplier. This attribute is not valid if supplier is not also
            entered.
        position_details
        contract_details_data
        purchase_order_contract_details_data
        contingent_worker_external_id_data
    """

    class Meta:
        name = "Contract_Contingent_Worker_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contingent_worker_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_worker_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Contract_Worker_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_worker_type_reference: Optional[ContingentWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Contract_Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_purchase_order: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Create_Purchase_Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    conversion_position_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Conversion_Position_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supplier_reference: Optional[SupplierObjectType] = field(
        default=None,
        metadata={
            "name": "Supplier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_payment_term_reference: Optional[PaymentTermsObjectType] = field(
        default=None,
        metadata={
            "name": "Default_Payment_Term_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_details: Optional[PositionDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Position_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    contract_details_data: list[ContractDetailsSubDataType] = field(
        default_factory=list,
        metadata={
            "name": "Contract_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    purchase_order_contract_details_data: Optional[PurchaseOrderContractDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Purchase_Order_Contract_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contingent_worker_external_id_data: Optional[ExternalIdDataType] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_External_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContractContingentWorkerResponseType:
    """
    Responds with the event id of the contract contingent worker event.

    Attributes:
        event_reference: Event ID of the contract contingent worker event.
        contingent_worker_reference: Reference to Contingent Worker if web service was automatically
            completed.
        position_reference: Reference to position if web service was automatically completed.
        applicant_reference: Reference ID for the Applicant.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Contract_Contingent_Worker_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contingent_worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CorrectContractContingentWorkerRequest(CorrectContractContingentWorkerRequestType):
    class Meta:
        name = "Correct_Contract_Contingent_Worker_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CorrectContractContingentWorkerResponse(CorrectContractContingentWorkerResponseType):
    class Meta:
        name = "Correct_Contract_Contingent_Worker_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CorrectHireEmployeeRequest(CorrectHireEmployeeRequestType):
    class Meta:
        name = "Correct_Hire_Employee_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CorrectHireEmployeeResponse(CorrectHireEmployeeResponseType):
    class Meta:
        name = "Correct_Hire_Employee_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CostingAllocationDetailReplacementDataType:
    """
    Details of the allocation, (e.g., a set of allocation dimensions and percentages)

    Attributes:
        order: Orders the allocation detail (e.g., 'a', 'b', 'c', ...).  Note that during general
            ledger costing, any rounding issues resulting from the distributions are reconciled in
            the last allocation detail.
        default_from_organization_assignment: Select Yes (Y) to indicate that the corresponding
            percentage should be allocated using the worker's (or position's) default organizational
            assignments with no overrides. Workday detects if this Request represents a sub-event
            embedded within a higher-level business process, and if so searches for a possible
            Assign Organization sub-event which contains proposed assignments.
        costing_override_company_reference: Overriding Company for an Allocation Detail, used for
            Intercompany Accounting
        costing_override_worktag_reference: The costing dimension value(s) to use for the override
            (e.g., cost center reference, fund reference, etc.).
        distribution_percent: The percentage for the given allocation detail, represented as a
            decimal value (e.g., .5).
        salary_over_the_cap_costing_allocation_detail_data: Details of the Salary over the Cap
            allocation, (e.g., a set of allocation dimensions and percentages)
    """

    class Meta:
        name = "Costing_Allocation_Detail_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    default_from_organization_assignment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Default_from_Organization_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_override_company_reference: Optional[CompanyObjectType] = field(
        default=None,
        metadata={
            "name": "Costing_Override_Company_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_override_worktag_reference: list[TenantedPayrollWorktagObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Costing_Override_Worktag_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    distribution_percent: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Distribution_Percent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 9,
            "fraction_digits": 6,
        },
    )
    salary_over_the_cap_costing_allocation_detail_data: list[
        SalaryOverTheCapCostingAllocationDetailDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Salary_Over_the_Cap_Costing_Allocation_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreatePositionResponse(CreatePositionResponseType):
    class Meta:
        name = "Create_Position_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CreditableServiceChangeDataType:
    """
    Wrapper element for the Submit Creditable Service Change Event business process web service.

    Attributes:
        employee_reference: Referenced employee whose Creditable Service will be updated.
        effective_date: Effective Date for Edit Creditable Service Web Service
        creditable_service_data
    """

    class Meta:
        name = "Creditable_Service_Change_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    creditable_service_data: list[CreditableServiceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Creditable_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CustomIdtype:
    """
    Encapsulating element for all Custom Identifier data.

    Attributes:
        custom_id_reference: Reference ID for Custom Identifier.
        custom_id_data: Wrapper element for Custom Identifier data.
        custom_id_shared_reference: Shared Reference ID for Custom Identifiers.
        delete: If Delete is set to True and Replace All has been set to False, the ID will be
            deleted when the web service is submitted. Note: The Replace All flag defaults to False
            if not specified in the web service
    """

    class Meta:
        name = "Custom_IDType"
        target_namespace = "urn:com.workday/bsvc"

    custom_id_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Custom_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_id_data: Optional[CustomIdDataType] = field(
        default=None,
        metadata={
            "name": "Custom_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_id_shared_reference: Optional[CustomIdentifierReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Custom_ID_Shared_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeleteWorkerDocumentRequestType:
    """
    Documentation Request element for worker reference.

    Attributes:
        worker_reference: The reference ID for the worker whose documents you’re deleting.
        delete_worker_data: The information about the worker document, such as the category and
            file.
        version
    """

    class Meta:
        name = "Delete_Worker_Document_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete_worker_data: list[DeleteWorkerDocumentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Delete_Worker_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeleteWorkerDocumentResponse(DeleteWorkerDocumentResponseType):
    class Meta:
        name = "Delete_Worker_Document_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class DependentCoverageDataType:
    """
    Contains the dependents covered for the election.

    Attributes:
        dependent_reference: A reference to the dependent.
        original_coverage_begin_date: The date that coverage began for this election.
        coverage_end_date: The date that coverage ended for this election.
        original_coverage_begin_date_for_benefit_coverage_type: The date that coverage for the
            Dependent began on the Benefit Coverage Type.
        first_date_covered_by_benefit_plan: The very first date that the Dependent was covered by
            the Benefit Plan. Any gaps in coverage are ignored.
        first_date_covered_by_benefit_provider: The very first date that the Dependent was covered
            by the Benefit provider. Any gaps in coverage are ignored.
        provider_id: The Provider ID of the Primary Care Physician for the dependent.
        cobra_eligibility_data: Contains COBRA Eligibility detail for a participant.  If this
            element is not populated then the participant is assumed to not be COBRA eligible.
    """

    class Meta:
        name = "Dependent_Coverage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    dependent_reference: Optional[DependentObjectType] = field(
        default=None,
        metadata={
            "name": "Dependent_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_coverage_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_coverage_begin_date_for_benefit_coverage_type: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date_for_Benefit_Coverage_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_date_covered_by_benefit_plan: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Date_Covered_by_Benefit_Plan",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_date_covered_by_benefit_provider: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Date_Covered_by_Benefit_Provider",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    provider_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Provider_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cobra_eligibility_data: list[CobraEligibilityDataType] = field(
        default_factory=list,
        metadata={
            "name": "COBRA_Eligibility_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityStatusInformationDataType:
    """
    Wrapper element for each disability status entry.

    Attributes:
        disability_status_reference: Reference to an existing Military Service entry for edits and
            deletes.
        disability_status_data
        delete: Flag to delete an existing Disability status entry. If this flag is set, Disability
            Status Reference is also required.
    """

    class Meta:
        name = "Disability_Status_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_status_reference: Optional[DisabilityStatusReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_status_data: Optional[DisabilityStatusSubDataType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityStatusInformationDataForRelatedPersonType:
    """
    Wrapper element for each disability status entry.

    Attributes:
        disability_status_reference: Reference to an existing Disability Status entry for edits and
            deletes.
        delete: Flag to delete an existing disability status entry. If this flag is set, Disability
            Status Reference is also required.
        disability_status_data: Container for disability status data for the Dependent business
            process.
    """

    class Meta:
        name = "Disability_Status_Information_Data_for_Related_PersonType"
        target_namespace = "urn:com.workday/bsvc"

    disability_status_reference: Optional[DisabilityStatusReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_status_data: Optional[DisabilityStatusSubDataForRelatedPersonType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditCreditableServiceResponseType:
    """
    Responds with the Event ID for the Creditable Service Change Event.

    Attributes:
        creditable_service_change_reference: Event ID of the Creditable Service Change Event.
        creditable_service_data
        version
    """

    class Meta:
        name = "Edit_Creditable_Service_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    creditable_service_change_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Creditable_Service_Change_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    creditable_service_data: list[CreditableServiceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Creditable_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditEmployeeContractAdditionalDataResponse(EditEmployeeContractAdditionalDataResponseType):
    class Meta:
        name = "Edit_Employee_Contract_Additional_Data_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditHiringRestrictionsResponse(EditHiringRestrictionsResponseType):
    class Meta:
        name = "Edit_Hiring_Restrictions_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditPositionEventResponseType:
    """
    Responds with the Event ID for the Edit Position Event.

    Attributes:
        event_reference: Responds with the Event ID for the Edit Position Event.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Edit_Position_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRestrictionsAdditionalDataResponse(
    EditPositionRestrictionsAdditionalDataResponseType
):
    class Meta:
        name = "Edit_Position_Restrictions_Additional_Data_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditPositonRestrictionResponse(EditPositonRestrictionResponseType):
    class Meta:
        name = "Edit_Positon_Restriction_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditServiceDatesResponse(EditServiceDatesResponseType):
    class Meta:
        name = "Edit_Service_Dates_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditWorkerAdditionalDataResponse(EditWorkerAdditionalDataResponseType):
    class Meta:
        name = "Edit_Worker_Additional_Data_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EducationAchievementDataType:
    """
    Wrapper element for Education information.

    Attributes:
        education_id: Education ID.  If no value is provided, a new education will be created.  If a
            value is passed in and a corresponding education is not found a new education will be
            created with the provided id.
        remove_education: Used for inbound operations to indicate that the education should be
            removed for the person.  Will always return false for outbound operations.
        country_reference: The Reference of the Country in which the school is located.  If the
            Country Reference and School Name matches an entry from the Schools report, this
            reference will not be set; a School Reference will be used instead.
        school_reference: The Reference of the School where the education was received.  The Schools
            report returns all of the schools that can be referenced.
        school_name: The name of the education institution.
        school_type_reference: A Reference of the of School Type.  If a School Reference is
            submitted, or found by a matching Country Reference and School Name, this value will not
            be saved because the School Reference is linked to a School Type.
        location: The text location of the education institution.  If a School Reference is
            submitted, or found by a matching Country Reference and School Name, this value will not
            be saved.
        degree_reference: The degree earned.
        degree_completed_reference: Indicates whether the degree was received.
        date_degree_received: The date on which the degree was awarded.
        field_of_study_reference: The field of study.
        grade_average: The grade point average.
        first_year_attended: The first year of attendance. This field should be in YYYY-MM-DD
            format, however the month and day will be ignored.
        last_year_attended: The last year of attendance. Should be displayed in YYYY-MM-DD format,
            but the month and day will be ignored.
        is_highest_level_of_education: Indicates whether this is the worker's highest level of
            education.   Degrees are ranked using Qualification Rating Value.  If a worker has two
            or more equivalent degrees, the most recent one is considered highest.
        first_day_attended: The first date of attendance using day month year precision. Note this
            can only be populated when the Education is for a Worker in a Country that has been
            configured to 'Use Date with Day Precision for Education' on Tenant Setup - Global.
        last_day_attended: The last date of attendance using day month year precision. Note this can
            only be populated when the Education is for a Worker in a Country that has been
            configured to 'Use Date with Day Precision for Education' on Tenant Setup - Global.
        education_attachment_data
    """

    class Meta:
        name = "Education_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    education_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Education_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_education: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Education",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    school_reference: Optional[SchoolObjectType] = field(
        default=None,
        metadata={
            "name": "School_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    school_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "School_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    school_type_reference: Optional[SchoolTypeObjectType] = field(
        default=None,
        metadata={
            "name": "School_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location: Optional[str] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    degree_reference: Optional[DegreeObjectType] = field(
        default=None,
        metadata={
            "name": "Degree_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    degree_completed_reference: Optional[DegreeCompletedObjectType] = field(
        default=None,
        metadata={
            "name": "Degree_Completed_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_degree_received: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Degree_Received",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    field_of_study_reference: Optional[FieldOfStudyObjectType] = field(
        default=None,
        metadata={
            "name": "Field_Of_Study_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grade_average: Optional[str] = field(
        default=None,
        metadata={
            "name": "Grade_Average",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_year_attended: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Year_Attended",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_year_attended: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Year_Attended",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_highest_level_of_education: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Is_Highest_Level_of_Education",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_attended: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_Attended",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_day_attended: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Day_Attended",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education_attachment_data: list[EducationAttachmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Education_Attachment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationProfileForJobType:
    """
    Contains the position's education information.

    Attributes:
        education_profile_reference: Reference for the education profile.
        education_profile_data
    """

    class Meta:
        name = "Education_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    education_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Education_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education_profile_data: Optional[EducationProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Education_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationQualificationReplacementType:
    """
    Wrapper element for Education Qualifications.

    Allows all education qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing education qualifications with those sent in the web service.

    Attributes:
        education_qualification_replacement_data
        delete: If Y, deletes all education qualifications for the position restriction or job
            profile, and doesn't send any additional work experience qualifications.
    """

    class Meta:
        name = "Education_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    education_qualification_replacement_data: list[
        EducationQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Education_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationCalculatedPlanAssignmentDataType:
    """
    Employee Compensation Detail Data.

    Attributes:
        calculated_plan_name: Text attribute identifying name of Calculated Plan
        compensation_element_values_for_calculated_plan_data: Encapsulating element containing all
            Calculated Plan Compensation data.
    """

    class Meta:
        name = "Employee_Compensation_Calculated_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    calculated_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_calculated_plan_data: Optional[
        EmployeeCompensationCalculatedPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationPeriodSalaryPlanAssignmentDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        period_salary_plan_name: Text attribute identifying name of Period Salary Plan
        compensation_element_values_for_period_salary_plan_data: Encapsulating element containing
            all Period Salary Plan Compensation data.
    """

    class Meta:
        name = "Employee_Compensation_Period_Salary_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_salary_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_period_salary_plan_data: Optional[
        EmployeeCompensationPeriodSalaryPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeCompensationStockPlanAssignmentDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        stock_plan_name: Compensation Component Name
        compensation_element_values_for_stock_plan_data: Encapsulating element containing all Stock
            Plan Compensation data.
    """

    class Meta:
        name = "Employee_Compensation_Stock_Plan_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_element_values_for_stock_plan_data: Optional[
        EmployeeCompensationStockPlanAssignmentDetailDataType
    ] = field(
        default=None,
        metadata={
            "name": "Compensation_Element_Values_for_Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployeeContractRulesForCountryDataType:
    """
    Employee Contract Rules For Country Details.

    Attributes:
        country_reference: Country Reference
        employee_contract_rule_data: Employee Contract Rules Details
    """

    class Meta:
        name = "Employee_Contract_Rules_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_contract_rule_data: list[EmployeeContractRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractsDataType:
    """
    Contains the employee's contract information.

    Attributes:
        employee_contract_data: Contains data for a Pre-Hire Contract.
    """

    class Meta:
        name = "Employee_Contracts_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_contract_data: list[EmployeeContractDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContributionAmountDataType:
    """
    Contains the retirement savings amount information.

    Attributes:
        contribution_amount_data
        payroll_interface_contribution_amount_data
        contribution_amount_maximum: The maximum contribution amount allowed.
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Employee_Contribution_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_amount_data: Optional[ContributionAmountDataType] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    payroll_interface_contribution_amount_data: Optional[
        PayrollInterfaceContributionAmountDataType
    ] = field(
        default=None,
        metadata={
            "name": "Payroll_Interface_Contribution_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contribution_amount_maximum: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount_Maximum",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "min_inclusive": Decimal("0"),
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContributionDataType:
    """
    Contains the spending account election information including the contribution, payroll interface
    contribution, goal, and annual contribution information.

    Attributes:
        contribution_data
        payroll_interface_contribution_data
        goal_data
        annual_contribution_data
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Employee_Contribution_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_data: Optional[ContributionDataType] = field(
        default=None,
        metadata={
            "name": "Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_interface_contribution_data: Optional[PayrollInterfaceContributionDataType] = field(
        default=None,
        metadata={
            "name": "Payroll_Interface_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    goal_data: Optional[GoalDataType] = field(
        default=None,
        metadata={
            "name": "Goal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annual_contribution_data: Optional[AnnualContributionDataType] = field(
        default=None,
        metadata={
            "name": "Annual_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeNoticePeriodDataType:
    """
    Adds or updates notice period data for an employee's voluntary termination.

    Attributes:
        derive_notice_period: Specifies if Workday derives the notice period from the employee's
            notice period eligibility rule.
        override_notice_period_data: Override Notice Period Data
    """

    class Meta:
        name = "Employee_Notice_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    derive_notice_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Derive_Notice_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    override_notice_period_data: Optional[OverrideNoticePeriodDataType] = field(
        default=None,
        metadata={
            "name": "Override_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeProbationPeriodSummaryDataType:
    """
    Encapsulating element containing all Probation Period data.

    Attributes:
        employee_probation_period_detail_data: The Worker's Probation Period Data.
    """

    class Meta:
        name = "Employee_Probation_Period_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_probation_period_detail_data: list[EmployeeProbationPeriodDetailDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Probation_Period_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployerContributionAmountDataType:
    """
    Contains the employer contribution amount for the retirement savings election.

    Attributes:
        contribution_amount_data
        payroll_interface_contribution_amount_data
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Employer_Contribution_Amount_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_amount_data: Optional[ContributionAmountDataType] = field(
        default=None,
        metadata={
            "name": "Contribution_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    payroll_interface_contribution_amount_data: Optional[
        PayrollInterfaceContributionAmountDataType
    ] = field(
        default=None,
        metadata={
            "name": "Payroll_Interface_Contribution_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EmployerContributionDataType:
    """
    Contains the employer contribution amount information for the spending account election.

    Attributes:
        contribution_data
        payroll_interface_contribution_data
        goal_data
        currency_reference: A unique identifier for the currency.
    """

    class Meta:
        name = "Employer_Contribution_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contribution_data: Optional[ContributionDataType] = field(
        default=None,
        metadata={
            "name": "Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_interface_contribution_data: Optional[PayrollInterfaceContributionDataType] = field(
        default=None,
        metadata={
            "name": "Payroll_Interface_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    goal_data: Optional[GoalDataType] = field(
        default=None,
        metadata={
            "name": "Goal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    currency_reference: Optional[CurrencyObjectType] = field(
        default=None,
        metadata={
            "name": "Currency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployerNoticePeriodDataType:
    """
    Adds or updates an employer's notice period data for an employee's involuntary termination.

    Attributes:
        derive_notice_period: Specifies if Workday derives the notice period from the employee's
            notice period eligibility rule.
        override_notice_period_data: Override Notice Period Data
    """

    class Meta:
        name = "Employer_Notice_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    derive_notice_period: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Derive_Notice_Period",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    override_notice_period_data: Optional[OverrideNoticePeriodDataType] = field(
        default=None,
        metadata={
            "name": "Override_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndAdditionalEmployeeJobEventResponse(EndAdditionalEmployeeJobEventResponseType):
    class Meta:
        name = "End_Additional_Employee_Job_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EndAdditionalJobSubDataType:
    """
    Web service for the End Additional Job as a sub process.

    Attributes:
        employee_reference: You cannot end this additional job because you do not have permission.
        position_reference: Reference to a Position. Enter the Position ID or the GUID.
        end_additional_job_date: Date the end additional job will happen. This attribute is
            required.
        end_additional_job_event_data: Data for the End Additional Job event. This element is
            required and must contain all its required attributes.
    """

    class Meta:
        name = "End_Additional_Job_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_additional_job_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Additional_Job_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_additional_job_event_data: Optional[EndAdditionalJobEventDataType] = field(
        default=None,
        metadata={
            "name": "End_Additional_Job_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndContingentWorkerContractResponse(EndContingentWorkerContractResponseType):
    class Meta:
        name = "End_Contingent_Worker_Contract_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EndInternationalAssignmentForEmployeeEventResponse(
    EndInternationalAssignmentForEmployeeEventResponseType
):
    class Meta:
        name = "End_International_Assignment_for_Employee_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ExtendedEmployeeContractDataType:
    """
    Contains extended data for an employee contract.

    Attributes:
        employee_contract_data: Contains data for a Pre-Hire Contract.
    """

    class Meta:
        name = "Extended_Employee_Contract_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_contract_data: list[EmployeeContractDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FseWorkerCategoryCriteriaType:
    """
    The element containing all necessary information to retrieve FSE Worker Category Criteria for
    Worker Category Definition.

    Attributes:
        fse_worker_category_criteria_reference: The FSE Worker Category Criteria retrieved
        fse_worker_category_criteria_data: The element containing all necessary information to
            retrieve FSE Worker Category Criteria for Worker Category Definition
    """

    class Meta:
        name = "FSE_Worker_Category_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    fse_worker_category_criteria_reference: Optional[FseWorkerCategoryCriteriaObjectType] = field(
        default=None,
        metadata={
            "name": "FSE_Worker_Category_Criteria_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fse_worker_category_criteria_data: list[FseWorkerCategoryCriteriaDataType] = field(
        default_factory=list,
        metadata={
            "name": "FSE_Worker_Category_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FeedbackReceivedDataType:
    """
    Contains the employee's feedback received.

    Attributes:
        feedback_received: Contains the informational components of a feedback (comment, date,
            question asked, sender, requester, and type).
    """

    class Meta:
        name = "Feedback_Received_DataType"
        target_namespace = "urn:com.workday/bsvc"

    feedback_received: list[FeedbackReceivedType] = field(
        default_factory=list,
        metadata={
            "name": "Feedback_Received",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FilledPositionEditDetailsDataType:
    """
    Contains information for a filled position.

    If this Position has already been filled, this element can be used
    to change this data. If the position has not been entered, an error
    will be returned if this element is supplied.

    Attributes:
        position_id: The Position ID of the position. If empty, Workday automatically populates the
            existing Position ID. You can't rescind this Position ID change by rescinding this Edit
            Position Event.
        employee_type_reference: The Employee Type of the position. Example: regular, temporary, or
            fixed term. If empty, Workday will use the existing Employee Type.
        contingent_worker_type_reference: The Contingent Worker Type of the position. Example:
            contractor, consultant, or vendor. If empty, Workday will use the existing Contingent
            Worker Type.
        position_details_sub_data: Wrapper for position details. You must include the element
            wrapper to have the values from the existing position brought forward.
        end_employment_date: The End Employment Date for the position of fixed term or temporary
            employees. If empty, Workday will use the existing End Employment Date.
        contract_end_date: The Contract End Date for the position. If empty, Workday will use the
            existing Contract End Date.
        contract_details_data
        exclude_from_headcount: If Y, the position will be excluded from headcount reporting.
        expected_assignment_end_date: The End Date for the assignment.
        assignment_type_reference: The Assignment Type for the assignment position.
    """

    class Meta:
        name = "Filled_Position_Edit_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_type_reference: Optional[EmployeeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contingent_worker_type_reference: Optional[ContingentWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_details_sub_data: Optional[PositionDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Position_Details_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_details_data: Optional[ContractDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Contract_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_from_headcount: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_from_Headcount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_assignment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Assignment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assignment_type_reference: Optional[AssignmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Assignment_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FinancialsBusinessSubProcessParametersType:
    """
    Container for the processing options for sub-business processes within a business process.

    If no options are submitted (or the options are submitted as
    'false') then the sub-business process is simply initiated as if it
    where submitted on-line with approvals, reviews, notifications and
    to-do's in place. If the Initiator is an Integration System User,
    any validations you configured on the Initiation step are ignored.

    Attributes:
        skip: When set to "true" or "1", the business process is automatically skipped (if it is
            defined as "skippable" within the business process definition).
        business_process_comment_data
    """

    class Meta:
        name = "Financials_Business_Sub_Process_ParametersType"
        target_namespace = "urn:com.workday/bsvc"

    skip: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Skip",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_comment_data: Optional[BusinessProcessCommentDataType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Comment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FirstPersonnelActionDataType:
    """Wrapper element for the First Personnel Action Data."""

    class Meta:
        name = "First_Personnel_Action_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_action_5_a_and_5_b_nature_of_action_data: Optional[
        FirstPersonnelActionNatureOfActionValueDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Action_5-A_and_5-B_Nature_of_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    first_action_5_c_and_5_d_legal_authority_value: Optional[
        FirstPersonnelActionFirstLegalAuthorityValueDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Action_5-C_and_5-D_Legal_Authority_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_action_5_e_and_5_f_legal_authority_value: Optional[
        FirstPersonnelActionSecondLegalAuthorityValueDataType
    ] = field(
        default=None,
        metadata={
            "name": "First_Action_5-E_and_5-F_Legal_Authority_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FreezePositionResponse(FreezePositionResponseType):
    class Meta:
        name = "Freeze_Position_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class FunctionalityForStaffingTransactionsType:
    """
    Contains the data for Functionality for Staffing Transactions.

    Attributes:
        functionality_for_staffing_transactions_reference: Contains a reference that identifies a
            specific Functionality for Staffing Transactions configuration.
        functionality_for_staffing_transactions_data: Contains the Functionality for Staffing
            Transactions data.
    """

    class Meta:
        name = "Functionality_for_Staffing_TransactionsType"
        target_namespace = "urn:com.workday/bsvc"

    functionality_for_staffing_transactions_reference: Optional[
        FunctionalAreaConfigurationObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Functionality_for_Staffing_Transactions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    functionality_for_staffing_transactions_data: list[
        FunctionalityForStaffingTransactionsDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Functionality_for_Staffing_Transactions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenericDisabilityStatusInformationDataType:
    """
    Wrapper element for each disability status entry.

    Attributes:
        disability_status_reference: Reference to an existing Military Service entry for edits and
            deletes.
        disability_status_data
        delete: Flag to delete an existing Disability status entry. If this flag is set, Disability
            Status Reference is also required.
    """

    class Meta:
        name = "Generic_Disability_Status_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_status_reference: Optional[DisabilityStatusReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_status_data: Optional[GenericDisabilityStatusSubDataType] = field(
        default=None,
        metadata={
            "name": "Disability_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenericMilitaryServiceInformationDataType:
    """
    Wrapper element for each Military Service entry.

    Attributes:
        military_service_reference: Reference to an existing Military Service entry for edits and
            deletes.
        military_service_data
        delete: Flag to delete an existing Military Service entry. If this flag is set, Military
            Service Reference is also required.
    """

    class Meta:
        name = "Generic_Military_Service_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    military_service_reference: Optional[MilitaryServiceReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_data: Optional[GenericMilitaryServiceSubDataType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeGovernmentIdsRequestType:
    """
    Request element used to get government IDs for a worker.

    The response is formatted to be usable as input to the Change
    Government IDs web service request.

    Attributes:
        request_references: Utilize the Request References element to retrieve a specific  instance
            or instances of Worker and its associated IDs.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        request_criteria_data: Allows retrieving government IDs based on request criteria. Request
            Criteria is only used when government ID reference is not provided
        version
    """

    class Meta:
        name = "Get_Change_Government_IDs_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangeGovernmentIdsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangeGovernmentIdRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeLegalNameRequestType:
    """
    Request element used to get legal name for a worker.

    The response is formatted to be usable as input to the Change Legal Name web service request.
    """

    class Meta:
        name = "Get_Change_Legal_Name_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangeLegalNameRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangeLegalNameRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeLicensesRequestType:
    """
    Request element used to get licenses for a worker.

    The response is formatted to be usable as input to the Change Licenses web service request.
    """

    class Meta:
        name = "Get_Change_Licenses_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangeLicensesRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangeLicenseIdRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeOtherIdsRequestType:
    """
    Request element used to get other IDs for a worker.

    The response is formatted to be usable as input to the Change Other IDs web service request.
    """

    class Meta:
        name = "Get_Change_Other_IDs_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangeOtherIdsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangeOtherIdRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePassportsAndVisasRequestType:
    """
    Request element used to get passports and visas for a worker.

    The response is formatted to be usable as input to the Change
    Passports and Visas web service request.

    Attributes:
        request_references: A reference to the ID of the worker. The ID consists of a type
            attribute, which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value
            attribute, such as "04345".   If Skip Non Existing Instances value is set to true. When
            a reference id value that does not meet the entry date criteria is passed, the non
            existent reference id will be ignored.
        response_filter
        request_criteria_data
        version
    """

    class Meta:
        name = "Get_Change_Passports_and_Visas_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangePassportsAndVisasRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangePassportAndVisaRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePersonalInformationRequestType:
    """
    Request element used to get personal information for a worker.

    The response is formatted to be usable as input to the Change Personal Information web service
    request.
    """

    class Meta:
        name = "Get_Change_Personal_Information_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangePersonalInformationRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangePersonalInformationRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePreferredNameRequestType:
    """
    Request element used to get preferred name for a worker.

    The response is formatted to be usable as input to the Change Preferred Name web service
    request.
    """

    class Meta:
        name = "Get_Change_Preferred_Name_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangePreferredNameRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria_data: Optional[ChangePreferredNameRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCitizenshipStatusesRequestType:
    """Element containing the references of the Citizenship Statuses requested."""

    class Meta:
        name = "Get_Citizenship_Statuses_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CitizenshipStatusRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCollectiveAgreementsRequestType:
    """Get Collective Agreements Request Element."""

    class Meta:
        name = "Get_Collective_Agreements_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CollectiveAgreementRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CollectiveAgreementRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CollectiveAgreementResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCreditableServiceRequestType:
    """
    Get Creditable Service Changes Request.

    Attributes:
        request_references: Creditable Service Change Request References
        request_criteria: Creditable Service Change Request Criteria
        response_filter
        version
    """

    class Meta:
        name = "Get_Creditable_Service_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CreditableServiceRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CreditableServiceRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFseWorkerCategoryCriteriasRequestType:
    """The FSE Worker Category Criteria References to extract."""

    class Meta:
        name = "Get_FSE_Worker_Category_Criterias_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[FseWorkerCategoryCriteriaRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFunctionalityForStaffingTransactionsRequestType:
    """
    Contains data for retrieving Functionality for Staffing Transaction configurations.

    Attributes:
        request_references: Contains references that identify specific Functionality for Staffing
            Transaction configurations to retrieve.
        request_criteria: Contains additional criteria for identifying specific Functionality for
            Staffing Transactions configuration instances.
        response_filter
        response_group: Contains data for Functionality for Staffing Transactions Response Groups.
        version
    """

    class Meta:
        name = "Get_Functionality_for_Staffing_Transactions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[FunctionalityForStaffingTransactionsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[FunctionalityForStaffingTransactionsRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[FunctionalityForStaffingTransactionsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetGlobalStaffingEligibilityRulesRequestType:
    """Global Staffing Eligibility Rule Request Element."""

    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GlobalStaffingEligibilityRulesRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetGlobalStaffingEligibilityRulesWithoutDependenciesRequestType:
    """Get Global Staffing Eligibility Rules Without Dependencies Request."""

    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_Without_Dependencies_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GlobalStaffingEligibilityRulesRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobClassificationGroupsRequestType:
    """
    Request Element for Get Job Classification.

    Attributes:
        request_references
        response_filter
        response_group: Get Job Classification Group Response Group
        version
    """

    class Meta:
        name = "Get_Job_Classification_Groups_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobClassificationGroupRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobClassificationGroupResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobFamilyGroupsRequestType:
    """Request element for Get Job Family Groups."""

    class Meta:
        name = "Get_Job_Family_Groups_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobFamilyGroupRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobFamilyGroupResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobOverlapRoutingExclusionRulesRequestType:
    """Retrieves Job Overlap Routing Exclusion Rules and their associated data."""

    class Meta:
        name = "Get_Job_Overlap_Routing_Exclusion_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobOverlapRoutingExclusionRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[JobOverlapRoutingExclusionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobOverlapRoutingExclusionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetLegalAuthoritiesRequestType:
    """Get Legal Authorities Request."""

    class Meta:
        name = "Get_Legal_Authorities_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[LegalAuthorityRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainEmployeeContractRulesForCountryRequestType:
    """
    Get Maintain Employee Contract Rules for Country Request.

    Attributes:
        request_references: Employee Contract Rules Table References
        request_criteria: Country/Countries Request References
        response_filter
        version
    """

    class Meta:
        name = "Get_Maintain_Employee_Contract_Rules_For_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EmployeeContractRulesForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EmployeeContractRulesForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainJobOverlapRoutingExclusionRuleRequestType:
    """Retrieves Job Overlap Routing Exclusion Rules and their associated data."""

    class Meta:
        name = "Get_Maintain_Job_Overlap_Routing_Exclusion_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[MaintainJobOverlapRoutingExclusionRuleRequestReferencesType] = (
        field(
            default=None,
            metadata={
                "name": "Request_References",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_criteria: Optional[MaintainJobOverlapRoutingExclusionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[MaintainJobOverlapRoutingExclusionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainNoticePeriodsForCountryRequestType:
    """
    Get Notice Periods for a single or multiple countries.

    Get all Notice Periods if Country is empty.

    Attributes:
        request_references: Notice Periods Setup Table Request References
        request_criteria: Country/Countries Request Criteria.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        version
    """

    class Meta:
        name = "Get_Maintain_Notice_Periods_For_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NoticePeriodsForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[NoticePeriodsForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainProbationPeriodsForCountryRequestType:
    """
    Get Probation Periods for a single or multiple countries.

    Attributes:
        request_references: Get Maintain Probation Periods For Country Request
        request_criteria: Country/Countries Request Criteria.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        version
    """

    class Meta:
        name = "Get_Maintain_Probation_Periods_For_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodsForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ProbationPeriodsForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainWorkingTimeForCountryRequestType:
    """
    Get Working Times for a single or multiple countries.

    Attributes:
        request_references: Get Maintain Working Times For Country Request
        request_criteria: Country/Countries Request Criteria.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        version
    """

    class Meta:
        name = "Get_Maintain_Working_Time_for_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkingTimeForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[WorkingTimeForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodEligibilityRulesRequestType:
    """
    Get Notice Period Eligibility Rules Request.

    Attributes:
        request_references: Get Notice Period Eligibility Rule Request References Element
        response_filter: Response Filter Element
        version
    """

    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NoticePeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodEligibilityRulesWithoutDependenciesRequestType:
    """Get Notice Period Eligibility Rules Without Dependencies Request."""

    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_Without_Dependencies_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NoticePeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodsForWorkerRequestType:
    """
    Get Notice Periods for a single Notice Period Target (Employee).

    Returns employer and employee notice periods.

    Attributes:
        request_references: Notice Period Target Reference.
        response_filter
        version
    """

    class Meta:
        name = "Get_Notice_Periods_for_Worker_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetNoticePeriodsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPersonnelActionRequestStatusOnMassActionRequestType:
    """
    Request element to get PAR on Mass Action information.

    If no criteria are specified in the PAR on Mass Action Request References element, all instances
    of PAR on Mass Action will be returned.
    """

    class Meta:
        name = "Get_Personnel_Action_Request_Status_on_Mass_Action_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ParMassActionRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodEligibilityRulesRequestType:
    """Get Probation Period Eligibility Rules Request Element."""

    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodEligibilityRulesWithoutDependenciesRequestType:
    """
    Get Probation Period Eligibility Rules Without Dependencies Request Element.

    Attributes:
        request_references: Probation Period Eligibility Rule Without Dependencies Request
            References Element
        response_filter
        version
    """

    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_Without_Dependencies_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodOutcomeRequestType:
    """Get Probation Period Outcome Request Element."""

    class Meta:
        name = "Get_Probation_Period_Outcome_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodOutcomeRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_critera: Optional[ProbationPeriodOutcomeRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Critera",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodOutcomesRequestType:
    """
    Request element for Get Probation Period Outcomes.

    Attributes:
        request_references: Request element for Probation Period Outcome References
        request_criteria: Request element for Country References
        response_filter
        version
    """

    class Meta:
        name = "Get_Probation_Period_Outcomes_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodOutcomesForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ProbationPeriodOutcomesForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodsForWorkersRequestType:
    """Get Probation Periods for a single Worker."""

    class Meta:
        name = "Get_Probation_Periods_For_Workers_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodsForWorkersRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetRemarksRequestType:
    """
    Root element for Get Remarks Request.

    Attributes:
        request_references: Utilize the Request References element to retrieve a specific
            instance(s) of Get Remarks and its associated data.
        response_filter
        version
    """

    class Meta:
        name = "Get_Remarks_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[RemarkRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetRoleAssignmentsForRoleAssignersRequestType:
    """
    Gets Role Assignments for Role Assigners Request.

    Attributes:
        request_references: Role Assigner References for Get Role Assignments Request.
        request_criteria: Request Criteria for Role Assignments of Role Assigner References.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Parameters for Response Group for Role Assigner References.
        version
    """

    class Meta:
        name = "Get_Role_Assignments_For_Role_Assigners_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[RoleAssignerRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_criteria: Optional[RoleAssignmentsRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[RoleAssignerResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStaffingFieldDefaultsConditionRulesRequestType:
    """
    Contains Staffing Defaulting Condition Rules Request.

    Attributes:
        request_references: Contains a reference that identifies a specific Staffing Field Defaults
            Condition Rule.
        request_criteria
        response_filter
        response_group
        version
    """

    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StaffingFieldDefaultsConditionRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StaffingFieldDefaultsConditionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StaffingFieldDefaultsConditionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStaffingFieldDefaultsConditionRulesWithoutDependenciesRequestType:
    """Request element used to find and get Staffing Defaulting Condition Rules without
    dependencies."""

    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_without_Dependencies_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[StaffingFieldDefaultsConditionRuleRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: list[StaffingFieldDefaultsConditionRuleRequestCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: list[StaffingFieldDefaultsConditionRuleResponseGroupType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStaffingFieldDefaultsRequestType:
    """
    Element containing the request to retrieve Staffing Field Defaults.

    Attributes:
        request_references: Contains references that identify specific Staffing Field Defaults to
            retrieve.
        request_criteria: Contains additional criteria for identifying specific Staffing Field
            Defaults instances.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Defines the data to include in the response. By default, the response
            includes: Response.
        version
    """

    class Meta:
        name = "Get_Staffing_Field_Defaults_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StaffingFieldDefaultsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StaffingFieldDefaultsRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StaffingFieldDefaultsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStudentEmploymentEligibilityDataRequestType:
    """
    Request element to provide additional supporting information about a Student Employment
    Eligibility Event.

    Attributes:
        request_references: Provide the reference of Student Employment Eligibility Event, Required.
        request_criteria
        response_filter
        response_group: In the response, choose whether to return the Student Employment Eligibility
            reference itself again.
        version
    """

    class Meta:
        name = "Get_Student_Employment_Eligibility_Data_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StudentEmploymentEligibilityEventRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_criteria: list[StudentEmploymentEligibilityEventRequestCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StudentEmploymentEligibilityEventResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStudentEmploymentEligibilityRuleSetRequestType:
    """
    Container for Get Student Employment Eligibility Rule Sets Request.

    Attributes:
        request_references: Reference  Student Employment Eligibility Rule Set Request
        response_filter: Response Filter
        response_group: Reference Student Employment Eligibility Rule Set Group
        version
    """

    class Meta:
        name = "Get_Student_Employment_Eligibility_Rule_Set_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StudentEmploymentEligibilityRuleSetRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StudentEmploymentEligibilityRuleSetResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStudentEmploymentEligibilityRulesRequestType:
    """
    Wrapper for requesting Student Employment Eligibility Rule Data.

    Attributes:
        request_references: Container for providing a specific Student Employment Eligibility Rule
            Reference
        response_filter: Container for any filter criteria included
        response_group: Container for determining what is included in the Response
        version
    """

    class Meta:
        name = "Get_Student_Employment_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StudentEmploymentEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StudentEmploymentEligibilityRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetWorkerDocumentsRequestType:
    """
    Request element for Get Worker Documents.

    Attributes:
        request_references: The Worker Document reference(s) to be retrieved.
        response_filter
        response_group: Worker Document Response Group which controls the type and amount of data
            returned.
        version
    """

    class Meta:
        name = "Get_Worker_Documents_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkerDocumentRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[WorkerDocumentResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetWorkingTimeEligibilityRulesRequestType:
    """Get Working Time Eligibility Rules Request Element."""

    class Meta:
        name = "Get_Working_Time_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkingTimeEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GovernmentIdtype:
    """
    Encapsulating element for all Government Identifier data.

    Attributes:
        government_id_reference: The Reference ID for the Government Identifier.
        government_id_data: Wrapper element for  Government Identifier Data
        government_id_shared_reference: Shared Reference ID for Government Identifiers.
        delete: If Delete is set to True and Replace All has been set to False, the ID will be
            deleted when the web service is submitted. Note: The Replace All flag defaults to False
            if not specified in the web service
    """

    class Meta:
        name = "Government_IDType"
        target_namespace = "urn:com.workday/bsvc"

    government_id_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Government_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    government_id_data: Optional[GovernmentIdDataType] = field(
        default=None,
        metadata={
            "name": "Government_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    government_id_shared_reference: Optional[GovernmentIdentifierReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Government_ID_Shared_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HireEmployeeEventDataType:
    """
    Wrapper element for the details for an Employee Hire.

    Attributes:
        employee_id: The unique Employee ID. For a rehire: Manually enter a unique ID to change the
            terminated Employee ID. If left blank, Workday automatically generates the Employee ID.
            For a new employee: Manually enter a unique ID. If left blank, Workday automatically
            generates the Employee ID. If left blank for a former worker when tenant configuration
            enables Reuse Former Worker ID, Workday will reuse the former worker ID. If Reuse Former
            Worker ID isn't enabled and you leave this field blank, Workday automatically generates
            the Employee ID.
        position_id: The unique Position ID. For a position management organization, leave empty.
            Workday will use the existing Position ID for the position. When hiring into a job
            management organization: If you enter a unique ID, Workday will use that ID for the new
            position. If left empty, Workday will generate a unique Position ID.
        hire_reason_reference: The reason for hiring the worker.
        employee_type_reference: The worker's employee type.
        first_day_of_work: The date of the employee's first day of work. If left empty, Workday uses
            the Hire Date.
        time_of_hire: The expected time that the worker will start their first day of work. Use the
            Maintain Localization Settings task to localize for specific countries.
        continuous_service_date: Date that service calculations will use as the start of service. If
            empty, Workday will use the existing date. When rehiring workers, if you run the Hire
            Employee and Edit Service Dates EIBs concurrently, you must enter the same Continuous
            Service Date in both EIBs for each worker.
        probation_start_date: Date the employee's probation will start. Instead of using
            Probation_Start_Date, use the Manage Employee Probation Period Sub Business Process.
        probation_end_date: Date the employee's probation will end. Instead of using
            Probation_End_Date, use the Manage Employee Probation Period Sub Business Process.
        employment_end_date: The End Employment Date for the position of fixed term or temporary
            employees. If empty, Workday will use the existing End Employment Date.
        benefits_service_date: The Benefits Service Date in the employee's service dates. If empty,
            Workday will use the existing date. When rehiring workers, if you run the Hire Employee
            and Edit Service Dates EIBs concurrently, you must enter the same Benefit Service Date
            in both EIBs for each worker.
        company_service_date: The Company Service Date in the employee's service dates. If empty,
            Workday will use the existing date. When rehiring workers, if you run the Hire Employee
            and Edit Service Dates EIBs concurrently, you must enter the same Company Service Date
            in both EIBs for each worker.
        conversion_position_start_date: The employee's start date for the current position. Must be
            later than the Hire Date. Use only for loading existing workers during implementation.
            Used for Manager History and Time in Position calculations.
        position_details
        employee_external_id_data
    """

    class Meta:
        name = "Hire_Employee_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Employee_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Hire_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_type_reference: Optional[PositionWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_of_hire: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "Time_of_Hire",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    continuous_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Continuous_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Employment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefits_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Benefits_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Company_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    conversion_position_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Conversion_Position_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_details: Optional[PositionDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Position_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_external_id_data: Optional[ExternalIdDataType] = field(
        default=None,
        metadata={
            "name": "Employee_External_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HireEmployeeEventResponseType:
    """
    Responds with the Event ID for the Hire Employee Event.

    Attributes:
        event_reference: Event ID of the Hire Employee Event.
        employee_reference: Reference to Employee if web service was automatically completed.
        position_reference: Reference to position if web service was automatically completed.
        applicant_reference: Reference ID for the Applicant.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Hire_Employee_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class InsuranceCoverageLevelDataType:
    """Contains the coverage level detailed information and volume for the insurance election."""

    class Meta:
        name = "Insurance_Coverage_Level_DataType"
        target_namespace = "urn:com.workday/bsvc"

    coverage_level_value_data: Optional[CoverageLevelValueDataType] = field(
        default=None,
        metadata={
            "name": "Coverage_Level_Value_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    volume_data: Optional[VolumeDataType] = field(
        default=None,
        metadata={
            "name": "Volume_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobClassificationType:
    """
    Job Classification Group Data.

    Attributes:
        job_classification_reference: A unique identifier use to reference a Job Classification.
        job_classification_data: Job Classification Data
        delete: Flag indicating that the referenced data should be deleted.
    """

    class Meta:
        name = "Job_ClassificationType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_reference: Optional[JobClassificationObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_data: Optional[JobClassificationDataType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamiliesRequestCriteriaType:
    """
    Utilize the Request Criteria element to limit the Job Families returned based on the specific
    criteria.

    Job Families that are returned must meet all of the criteria
    specified.

    Attributes:
        field_and_parameter_criteria_data
        include_in_active_job_families: Gives the customer the ability to have inactive job families
            returned
    """

    class Meta:
        name = "Job_Families_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    field_and_parameter_criteria_data: Optional[FieldAndParameterCriteriaDataType] = field(
        default=None,
        metadata={
            "name": "Field_And_Parameter_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_in_active_job_families: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_InActive_Job_Families",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyDataType:
    """
    Encapsulating element containing all Job Family data.

    Attributes:
        id: The ID of the Job Family data (Job_Family_ID).
        effective_date: Effective Date of Job Family.
        name: Text attribute identifying Job Family Name.
        summary: Text attribute identifying Job Family Summary.
        inactive: Boolean attribute indicating if a Job Family/Job Family Group is Inactive or not.
            Inactive Job Families/Groups will not appear in prompts.
        job_profile_data: Element containing the Job Profile reference for a Job Family.
        integration_field_override_data
    """

    class Meta:
        name = "Job_Family_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_data: list[JobProfileForJobFamilyDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    integration_field_override_data: list[DocumentFieldResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Integration_Field_Override_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobHistoryType:
    """
    Wrapper element for Job History information.

    Attributes:
        job_history_reference: Reference to the Job History profile.
        job_history_data: Wrapper element for Job History Data.
    """

    class Meta:
        name = "Job_HistoryType"
        target_namespace = "urn:com.workday/bsvc"

    job_history_reference: Optional[JobHistoryQualificationObjectType] = field(
        default=None,
        metadata={
            "name": "Job_History_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_history_data: list[JobHistoryAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_History_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class JobProfileSummaryDataType:
    """
    Contains the details of a Job Profile.

    Attributes:
        job_profile_reference: A unique identifier for the job profile.
        job_profile_name: The name of the job profile.
        management_level_reference: A unique identifier for the management level.
        job_category_reference: A unique identifier for the job category.
        job_family_reference: A unique identifier for the job family.
        work_shift_required: A boolean attribute that returns true if a work shift is required on
            the position where this job profile is used.
        job_profile_exempt_data
        critical_job: Boolean attribute indicating whether the job profile is considered a critical
            job.
        difficulty_to_fill_reference: A unique identifier for the difficulty to fill.
    """

    class Meta:
        name = "Job_Profile_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    management_level_reference: Optional[ManagementLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Management_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_category_reference: Optional[JobCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyBaseObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_shift_required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_exempt_data: list[JobProfileExemptDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Exempt_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    critical_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Critical_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    difficulty_to_fill_reference: Optional[DifficultyToFillObjectType] = field(
        default=None,
        metadata={
            "name": "Difficulty_to_Fill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionOrganizationsDataForBusinessProcessType:
    """
    Containing element for the cost center and custom organizations related to the job requisition.

    Attributes:
        organization_assignments_for_job_requisition_data
        replace_all: If yes, deletes existing organizations before the data in this web service is
            processed.
        delete: If Yes, previous organizations are copied to this business process except for
            organization references.
    """

    class Meta:
        name = "Job_Requisition_Organizations_Data_for_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    organization_assignments_for_job_requisition_data: Optional[
        OrganizationAssignmentsForJobRequisitionDataType
    ] = field(
        default=None,
        metadata={
            "name": "Organization_Assignments_for_Job_Requisition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageAbilityType:
    """Wrapper element for Language Ability."""

    class Meta:
        name = "Language_AbilityType"
        target_namespace = "urn:com.workday/bsvc"

    language_ability_data: list[LanguageAbilityDataType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Ability_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class LanguageProfileForJobDataType:
    """
    Contains the language profile's information for a position.

    Attributes:
        language_reference: A unique identifier for a language.
        language_ability_data
        required: Indicates if the profile is required for this position.
        qualification_source_reference: The source (job profile or position) reference from which
            the qualification came from.
    """

    class Meta:
        name = "Language_Profile_for_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    language_reference: Optional[LanguageObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_ability_data: list[LanguageAbilityDataType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Ability_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_source_reference: Optional[TalentQualificationEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Qualification_Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageQualificationProfileReplacementDataType:
    """
    Replacement element containing Language Qualifications for the Job Profile.

    When updating a Job Profile, all Languages for the Job Profile will
    be replaced by the submitted data. If no data is submitted, then the
    existing Languages are not changed.

    Attributes:
        language_reference: The identifier of a Language.
        language_ability_profile_data
        required: If Y, Language Qualification Profile is required.
    """

    class Meta:
        name = "Language_Qualification_Profile_Replacement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    language_reference: Optional[LanguageObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    language_ability_profile_data: list[LanguageAbilityProfileDataType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Ability_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LegalAuthorityDataType:
    """
    Legal Authority Data Element.

    Attributes:
        id: The user specified ID of the Legal Authority reference
        code: Legal Authority Code attribute for the Legal Authority Reference
        explanation: OPM Explanation attribute for the Legal Authority Reference
        parameter_data
        nature_of_action_reference: Nature of Action (All) reference for the Legal Authority
            Reference
        inactive: Inactive attribute for the Legal Authority Reference
    """

    class Meta:
        name = "Legal_Authority_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 3,
        },
    )
    explanation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Explanation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parameter_data: list[ParVariableDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_reference: list[NatureOfActionAllObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Nature_of_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LicenseIdtype:
    """
    Encapsulating element for all License Identifier data.

    Attributes:
        license_id_reference: Reference ID for the License Identifier.
        license_id_data: Wrapper element for the License Identifier data.
        license_id_shared_reference: Shared Reference ID for License Identifiers.
        delete: If Delete is set to True and Replace All has been set to False, the ID will be
            deleted when the web service is submitted. Note: The Replace All flag defaults to False
            if not specified in the web service
    """

    class Meta:
        name = "License_IDType"
        target_namespace = "urn:com.workday/bsvc"

    license_id_reference: Optional[LicenseIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "License_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    license_id_data: Optional[LicenseIdDataType] = field(
        default=None,
        metadata={
            "name": "License_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    license_id_shared_reference: Optional[LicenseIdentifierReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "License_ID_Shared_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MainTransactionLogEntryDataType:
    """
    The details of the transaction that has been rescinded or corrected.

    Attributes:
        transaction_log_reference: A reference to a transaction log entry.
        transaction_log_data: Encapsulating element containing the rescind and correction data of
            the transaction log entry.
    """

    class Meta:
        name = "Main_Transaction_Log_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_reference: Optional[TransactionLogObjectType] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_data: Optional[TransactionLogDataType] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainEmployeeContractsDataType:
    """
    Contains employee contracts for an employee.

    Attributes:
        employee_reference: The employee covered by the employee contracts.
        employee_contract_data
    """

    class Meta:
        name = "Maintain_Employee_Contracts_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_contract_data: list[EmployeeContractDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class MaintainEmployeeContractsResponse(MaintainEmployeeContractsResponseType):
    class Meta:
        name = "Maintain_Employee_Contracts_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class MaintainEmployeeContractsSubDataType:
    """
    Contains data for the Employee Contract Event.

    Attributes:
        employee_contract_data: Contains data for a Pre-Hire Contract.
    """

    class Meta:
        name = "Maintain_Employee_Contracts_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_contract_data: list[EmployeeContractDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainJobOverlapRoutingExclusionRuleType:
    """
    Retrieves the Job Overlap Routing Exclusion Rules configuration and rules data.

    Attributes:
        maintain_job_overlap_routing_exclusion_rule_reference: Contains a reference to the Maintain
            Job Overlap Routing Exclusion Rules Configuration instance.
        maintain_job_overlap_routing_exclusion_rule_data
    """

    class Meta:
        name = "Maintain_Job_Overlap_Routing_Exclusion_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_job_overlap_routing_exclusion_rule_reference: Optional[
        JobOverlapConditionRuleObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_job_overlap_routing_exclusion_rule_data: list[
        MaintainJobOverlapRoutingExclusionRulesItemDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagementChainDataType:
    """
    Contains the organization reference and details about an organization.

    Attributes:
        organization_reference: A unique identifier for the organization.
        manager_reference: Returns the reference(s) to the supervisory organization's manager(s).
        manager: Returns the reference(s) to the supervisory organization's manager(s).
    """

    class Meta:
        name = "Management_Chain_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_reference: Optional[OrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manager_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Manager_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manager: list[WorkerBasicDataType] = field(
        default_factory=list,
        metadata={
            "name": "Manager",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManagerEvaluationDetailDataType:
    """
    Contains the evaluation information that was filled out by the manager.

    Attributes:
        overall_data: The overall section evaluation information (rating, comments) from the
            manager.
    """

    class Meta:
        name = "Manager_Evaluation_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    overall_data: Optional[OverallEvaluationDetailDataType] = field(
        default=None,
        metadata={
            "name": "Overall_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryServiceInformationDataType:
    """
    Wrapper element for each Military Service entry.

    Attributes:
        military_service_reference: Reference to an existing Military Service entry for edits and
            deletes.
        military_service_data
        delete: Flag to delete an existing Military Service entry. If this flag is set, Military
            Service Reference is also required.
    """

    class Meta:
        name = "Military_Service_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    military_service_reference: Optional[MilitaryServiceReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_data: Optional[MilitaryServiceSubDataType] = field(
        default=None,
        metadata={
            "name": "Military_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MoveWorkersByOrganizationDataType:
    """
    Contains the Move Workers (By Organization) web service.

    Attributes:
        effective_date: Effective date of when the Move Workers (By Organization) takes effect.
        from_organization_reference: Move workers out of this organization.
        move_workers_by_organization_position_data
        to_organization_reference: Move workers into this organization.
    """

    class Meta:
        name = "Move_Workers_By_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    from_organization_reference: Optional[StaffObjectType] = field(
        default=None,
        metadata={
            "name": "From_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    move_workers_by_organization_position_data: list[MoveWorkersByOrganizationPositionDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Move_Workers_By_Organization_Position_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "min_occurs": 1,
            },
        )
    )
    to_organization_reference: Optional[StaffObjectType] = field(
        default=None,
        metadata={
            "name": "To_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class MoveWorkersByOrganizationResponse(MoveWorkersByOrganizationResponseType):
    class Meta:
        name = "Move_Workers_By_Organization_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class NationalIdtype:
    """
    Wrapper element for all National Identifier Data.

    Attributes:
        national_id_reference: The Reference ID for the National Identifier.
        national_id_data: Wrapper element for the National Identifier Data
        national_id_shared_reference: Shared Reference ID for National Identifiers.
        delete: If Delete is set to True and Replace All has been set to False, the ID will be
            deleted when the web service is submitted. Note: The Replace All flag defaults to False
            if not specified in the web service
    """

    class Meta:
        name = "National_IDType"
        target_namespace = "urn:com.workday/bsvc"

    national_id_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "National_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    national_id_data: Optional[NationalIdDataType] = field(
        default=None,
        metadata={
            "name": "National_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    national_id_shared_reference: Optional[NationalIdentifierReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "National_ID_Shared_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NatureOfActionDataType:
    """
    Nature of Action Data element.

    Attributes:
        id: The user specified ID of the Nature of Action reference. If this field left blank, the
            system will generate a Nature of Action ID for a newly created Nature of Action. This
            field can be used in lieu of the Nature of Action reference to determine which Nature of
            Action to update.
        nature_of_action_series_reference: Unique identifier for the Nature of Action Series
            reference. This reference is required when adding a new Nature of Action. When updating,
            this reference must be compatible with the existing or passed in NOA Code.
        code: Code for the Nature of Action reference. This field is required when adding a new
            Nature of Action. When updating, the code must be compatible with the existing or passed
            in NOA Series reference.
        explanation: Explanation for the Nature of Action reference. This field is required when
            adding a new Nature of Action. When updating, the Explanation must be compatible with
            the Parameters' names and types.
        parameter_data
        don_t_require_legal_authority_and_remark: Don't Require Legal Authority and Remark boolean
            for the Nature of Action reference
        inactive: Inactive boolean for the Nature of Action reference
    """

    class Meta:
        name = "Nature_of_Action_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_series_reference: Optional[NatureOfActionSeriesObjectType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Series_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 3,
        },
    )
    explanation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Explanation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parameter_data: list[ParVariableDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    don_t_require_legal_authority_and_remark: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Don_t_Require_Legal_Authority_and_Remark",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NatureOfActionsRequestReferencesType:
    """
    Nature of Actions Request References Element.

    Attributes:
        nature_of_action_reference: Unique identifier for Nature of Action reference
        nature_of_actions_secondary_request_reference: Wrapper element for NOA Series Reference
    """

    class Meta:
        name = "Nature_of_Actions_Request_ReferencesType"
        target_namespace = "urn:com.workday/bsvc"

    nature_of_action_reference: list[NatureOfActionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Nature_of_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_actions_secondary_request_reference: list[
        NatureOfActionsSecondaryRequestReferenceType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Nature_of_Actions_Secondary_Request_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoShowEventResponse(NoShowEventResponseType):
    class Meta:
        name = "No_Show_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class NoticePeriodDataEmployeeType:
    """
    Notice Period data specific to the Employee.

    Attributes:
        notice_period_data: Employee notice period data.
    """

    class Meta:
        name = "Notice_Period_Data_-_EmployeeType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_data: list[NoticePeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodDataEmployerType:
    """
    Notice Period data for an employer.

    Attributes:
        notice_period_data: Detail notice period data for employer and employee.
    """

    class Meta:
        name = "Notice_Period_Data_-_EmployerType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_data: list[NoticePeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodsForCountryDataType:
    """
    Data element containing Notice Period Lines and Country Reference.

    Attributes:
        country_reference: Country Reference
        notice_period_line_data: Notice Period Line Data
    """

    class Meta:
        name = "Notice_Periods_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    notice_period_line_data: list[NoticePeriodLineDataType] = field(
        default_factory=list,
        metadata={
            "name": "Notice_Period_Line_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NotificationSubTypeConfigurationType:
    """
    Notification sub type configuration for each notification sub type.

    Attributes:
        notification_sub_type_reference: Notification sub type for which notification channels will
            be updated/added.
        user_notification_frequency_configuration: Notification Frequency Configurations for
            Notification Categorizable
    """

    class Meta:
        name = "Notification_Sub_Type_ConfigurationType"
        target_namespace = "urn:com.workday/bsvc"

    notification_sub_type_reference: Optional[NotificationCategorizableObjectType] = field(
        default=None,
        metadata={
            "name": "Notification_Sub_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    user_notification_frequency_configuration: list[
        UserNotificationFrequencyConfigurationDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "User_Notification_Frequency_Configuration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OldEmergencyContactType:
    """
    Encapsulating element containing all Emergency Contact data.

    Attributes:
        emergency_contact_reference: A reference for the emergency contact.
        emergency_contact_data: Contains the details about an emergency contact.
    """

    class Meta:
        name = "Old_Emergency_ContactType"
        target_namespace = "urn:com.workday/bsvc"

    emergency_contact_reference: Optional[EmergencyContactObjectType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    emergency_contact_data: Optional[EmergencyContactDataType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class OrganizationRoleForWorkerDataType:
    """
    Contains the organization role and the organizations that the worker supports that role for.

    Attributes:
        organization_role_reference: A unique identifier for the organization role.
        organization_role_data
    """

    class Meta:
        name = "Organization_Role_for_Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_role_reference: Optional[AssignableRoleObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_role_data: list[OrganizationRoleAssignmentForWorkerDataType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationRolesWwsDataType:
    """
    Contains information about role assignments for an organization.

    Attributes:
        organization_role_data: Contains information about an Organization Role and incumbent
            worker(s).
    """

    class Meta:
        name = "Organization_Roles_WWS_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_role_data: list[OrganizationRoleAssignmentWwsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationSupportingRoleDataType:
    """
    The organizational roles which provide support for the worker.

    Attributes:
        organization_role_reference: A unique identifier for the organization role.
        organization_role_data
    """

    class Meta:
        name = "Organization_Supporting_Role_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_role_reference: Optional[AssignableRoleObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_role_data: list[WorkerOrganizationRoleAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ParMassActionResponseDataType:
    """PAR Mass Action Response Data."""

    class Meta:
        name = "PAR_Mass_Action_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    par_mass_action: list[ParMassActionType] = field(
        default_factory=list,
        metadata={
            "name": "PAR_Mass_Action",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PassportIdtype:
    """
    Encapsulating element for all Passport Identifier data.

    Attributes:
        passport_id_reference: Reference ID for the Passport Identifier.
        passport_id_data: Wrapper element for the Passport Identifier Data.
        passport_id_shared_reference: Shared Reference ID for Passport Identifiers.
        delete: If Delete is set to True and Replace All has been set to False, the ID will be
            deleted when the web service is submitted. Note: The Replace All flag defaults to False
            if not specified in the web service
    """

    class Meta:
        name = "Passport_IDType"
        target_namespace = "urn:com.workday/bsvc"

    passport_id_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Passport_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passport_id_data: Optional[PassportIdDataType] = field(
        default=None,
        metadata={
            "name": "Passport_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passport_id_shared_reference: Optional[PassportIdentifierReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Passport_ID_Shared_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonNameDetailDataType:
    """
    Contains the components of a name, such as the First Name and Last Name.

    Attributes:
        country_reference: The Country that the name is in reference to.
        prefix_data: Contains the prefixes for a name.
        first_name: The First Name (Given Name) for a person.
        middle_name: The Middle Name for a person.
        last_name: The Last Name (Family Name) for a person.
        secondary_last_name: The Secondary Last Name (Secondary Family Name) for a person.
        tertiary_last_name: The Tertiary Last Name for a person.
        local_name_detail_data: Contains the name components in local script for supporting
            countries.
        suffix_data: Contains the suffixes for a name.
        full_name_for_singapore_and_malaysia: Full Person Name is used by Malaysia and Singapore. It
            is designed for (eliminate space between these two words) Workers in these countries to
            enter their Full Legal Name. It is an attribute of Global Person Name Class and is not a
            concatenation of First and Last Names.
        formatted_name: Contains a fully formatted name in one string that has all of its pieces in
            their proper place. This name is only used in a response and is not used for requests
        reporting_name: Contains a fully formatted name in one string for reporting that has all of
            its pieces in their proper place. This name is only used in a response and is not used
            for request
    """

    class Meta:
        name = "Person_Name_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    prefix_data: Optional[PersonNamePrefixDataType] = field(
        default=None,
        metadata={
            "name": "Prefix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "First_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    middle_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Middle_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Last_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    secondary_last_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Secondary_Last_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    tertiary_last_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Tertiary_Last_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_name_detail_data: Optional[LocalPersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Local_Name_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    suffix_data: Optional[PersonNameSuffixDataType] = field(
        default=None,
        metadata={
            "name": "Suffix_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    full_name_for_singapore_and_malaysia: Optional[str] = field(
        default=None,
        metadata={
            "name": "Full_Name_for_Singapore_and_Malaysia",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    formatted_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Formatted_Name",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reporting_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reporting_Name",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionGroupFreezeDataType:
    """
    Wrapper element for the Freeze Position business process data including the position to close
    and the event data.

    Attributes:
        position_reference: Reference to the Position to be frozen.
        freeze_event_data
    """

    class Meta:
        name = "Position_Group_Freeze_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    freeze_event_data: Optional[PositionGroupFreezeEventDataType] = field(
        default=None,
        metadata={
            "name": "Freeze_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class PositionMatrixOrganizationDataType:
    """
    Contains matrix organization assignment for each position.

    Attributes:
        position_reference: The worker's position you're assigning to a matrix organization.
        position_matrix_organization_detail_data
    """

    class Meta:
        name = "Position_Matrix_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_matrix_organization_detail_data: Optional[PositionMatrixOrganizationDetailDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_Matrix_Organization_Detail_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )


@dataclass
class PreHireResumeDataType:
    """
    Contains the applicant's resume(s).

    Attributes:
        resume: The resume for an applicant.
    """

    class Meta:
        name = "Pre-Hire_Resume_DataType"
        target_namespace = "urn:com.workday/bsvc"

    resume: list[PreHireResumeDetailDataType] = field(
        default_factory=list,
        metadata={
            "name": "Resume",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodForCountryDataType:
    """
    Probation Period For Country Data.

    Attributes:
        id: Reference ID
        order: Order on Maintain Probation Periods by Country table
        probation_period_eligibility_rule_reference: Probation Period Eligibility Rule
        probation_period_duration: Probation Period Duration
        probation_period_unit_reference: Probation Period Unit
        maximum_probation_period_data: Maximum Probation Period Data
        review_probation_period_data: Review Probation Period Data
        inactive: Probation Period Inactive
    """

    class Meta:
        name = "Probation_Period_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    order: Optional[str] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 6,
        },
    )
    probation_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    probation_period_duration: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Duration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 20,
            "fraction_digits": 0,
        },
    )
    probation_period_unit_reference: Optional[DateAndTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maximum_probation_period_data: list[MaximumProbationPeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Maximum_Probation_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_probation_period_data: list[ReviewProbationPeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Review_Probation_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomesDataType:
    """
    Probation Period Outcomes Data Element.

    Attributes:
        probation_period_outcome_reference: Probation Period Outcomes Reference
        probation_period_outcome_data: Probation Period Outcome Data
    """

    class Meta:
        name = "Probation_Period_Outcomes_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcome_reference: Optional[ProbationPeriodOutcomeObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcome_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcome_data: list[ProbationPeriodOutcomeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcome_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomesForCountryDataType:
    """
    Data element containing Probation Period Outcomes and Country Reference.

    Attributes:
        country_reference: Country reference
        probation_period_outcome_data: Probation Period Outcome Data
    """

    class Meta:
        name = "Probation_Period_Outcomes_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    probation_period_outcome_data: list[ProbationPeriodOutcomeForCountryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcome_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodsForWorkersType:
    """
    Contains Probation Periods For Worker.

    Attributes:
        probation_periods_for_worker_reference: Probation Periods For Worker Reference
        probation_period_for_worker_data: Probation Period For Worker Data
    """

    class Meta:
        name = "Probation_Periods_For_WorkersType"
        target_namespace = "urn:com.workday/bsvc"

    probation_periods_for_worker_reference: Optional[EmployeeProbationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Periods_For_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_for_worker_data: list[ProbationPeriodsForWorkerDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_For_Worker_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationReviewDataType:
    """
    Details of Probation Period Review.

    Attributes:
        derive_probation_period_review_from_rule: Derive Probation Period Review from Rule
        probation_review_date: Review Date of Probation Period
        probation_period_review_length: Probation Period Review Length
    """

    class Meta:
        name = "Probation_Review_DataType"
        target_namespace = "urn:com.workday/bsvc"

    derive_probation_period_review_from_rule: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Derive_Probation_Period_Review_from_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_review_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_Review_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_review_length: Optional[ProbationPeriodReviewLengthType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Review_Length",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedAllowancePlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Allowance Plan Compensation data.

    Attributes:
        allowance_plan_sub_data: Encapsulating element containing all Allowance Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Allowance_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    allowance_plan_sub_data: list[ProposedAllowancePlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedAllowanceUnitPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Unit Allowance Plan Compensation data.

    Attributes:
        unit_allowance_plan_sub_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Allowance_Unit_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_allowance_plan_sub_data: list[ProposedAllowanceUnitPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Allowance_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBasePayPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        pay_plan_sub_data: Encapsulating element containing all Salary or Hourly Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Base_Pay_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_plan_sub_data: list[ProposedBasePayPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Pay_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBasePayPlanJobAssignmentContainerDataType:
    """
    Encapsulating element containing all Salary or Hourly Plan Compensation data.

    Attributes:
        pay_plan_sub_data
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Base_Pay_Plan_Job_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    pay_plan_sub_data: list[ProposedBasePayPlanJobAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Pay_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedBonusPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Bonus Plan Compensation data.

    Attributes:
        bonus_plan_sub_data: Encapsulating element containing all Bonus Plan Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Bonus_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    bonus_plan_sub_data: list[ProposedBonusPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCalculatedPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Calculated Plan Compensation data.

    Attributes:
        calculated_plan_sub_data: Encapsulating element containing all Calculated Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Calculated_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    calculated_plan_sub_data: list[ProposedCalculatedPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Calculated_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedCommissionPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Commission Plan Compensation data.

    Attributes:
        commission_plan_sub_data: Encapsulating element containing all Commission Plan Compensation
            data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Commission_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    commission_plan_sub_data: list[ProposedCommissionPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Commission_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedMeritPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Merit Plan Compensation data.

    Attributes:
        merit_plan_sub_data: Encapsulating element containing all Merit Plan Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Merit_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    merit_plan_sub_data: list[ProposedMeritPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Merit_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedPeriodSalaryPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Period Salary Plan Compensation data.

    Attributes:
        period_salary_plan_sub_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Period_Salary_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    period_salary_plan_sub_data: list[ProposedPeriodSalaryPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Salary_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedSalaryUnitPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Unit Salary Plan Compensation data.

    Attributes:
        unit_salary_plan_sub_data: Encapsulating element containing all Unit Salary Plan
            Compensation data.
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Salary_Unit_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    unit_salary_plan_sub_data: list[ProposedSalaryUnitPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Salary_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposedStockPlanAssignmentContainerDataType:
    """
    Encapsulating element containing all Stock Plan Compensation data.

    Attributes:
        stock_plan_sub_data
        replace: When True, indicates the compensation plans will replace any existing compensation
            plan assigned to the worker. The default value of False will add or update the
            compensation plans for the worker.
    """

    class Meta:
        name = "Proposed_Stock_Plan_Assignment_Container_DataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_sub_data: list[ProposedStockPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutApplicantResponseType:
    """
    Wrapper element for the Put Applicant Returned data.

    Attributes:
        applicant_reference: The reference to the applicant which was added or updated.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Put_Applicant_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutAssignMatrixOrganizationResponse(PutAssignMatrixOrganizationResponseType):
    class Meta:
        name = "Put_Assign_Matrix_Organization_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCitizenshipStatusRequestType:
    """
    Request element for the Put Citizenship Status operation.

    Attributes:
        citizenship_status_reference: Reference element representing a unique instance of
            Citizenship Status.
        citizenship_status_data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Citizenship_Status_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    citizenship_status_reference: Optional[CitizenshipStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_data: Optional[CitizenshipStatusDataType] = field(
        default=None,
        metadata={
            "name": "Citizenship_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCitizenshipStatusResponse(PutCitizenshipStatusResponseType):
    class Meta:
        name = "Put_Citizenship_Status_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCollectiveAgreementResponse(PutCollectiveAgreementResponseType):
    class Meta:
        name = "Put_Collective_Agreement_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutDependentResponseType:
    """
    Wrapper element for the Put Dependent Returned data.

    Attributes:
        dependent_reference: The reference to the dependent which was added or updated.
        employee_reference: The reference to the employee for the dependent.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Put_Dependent_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    dependent_reference: Optional[DependentObjectType] = field(
        default=None,
        metadata={
            "name": "Dependent_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutEditNoticePeriodsEventResponse(PutEditNoticePeriodsEventResponseType):
    class Meta:
        name = "Put_Edit_Notice_Periods_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutFseWorkerCategoryCriteriaRequestType:
    """
    The element containing all necessary information to add/update a FSE Worker Category Criteria
    for Worker Category Definition.

    Attributes:
        fse_worker_category_criteria_data: The element containing all necessary information to
            add/update a FSE Worker Category Criteria for Worker Category Definition
        version
    """

    class Meta:
        name = "Put_FSE_Worker_Category_Criteria_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    fse_worker_category_criteria_data: Optional[FseWorkerCategoryCriteriaDataType] = field(
        default=None,
        metadata={
            "name": "FSE_Worker_Category_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFseWorkerCategoryCriteriaResponse(PutFseWorkerCategoryCriteriaResponseType):
    class Meta:
        name = "Put_FSE_Worker_Category_Criteria_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutFunctionalityForStaffingTransactionsRequestType:
    """
    Contains data for editing, deleting, or adding a Functionality for Staffing Transactions
    configuration.

    Attributes:
        functionality_for_staffing_transactions_reference: Contains a reference that identifies a
            specific Functionality for Staffing Transactions configuration.
        functionality_for_staffing_transactions_data: Contains data for Functionality for Staffing
            Transactions.
        add_only: Specifies if the web service request is adding an entirely new Functionality for
            Staffing Transactions configuration, instead of updating an existing one.
        delete: Deletes an existing Functionality for Staffing Transactions configuration.
        version
    """

    class Meta:
        name = "Put_Functionality_for_Staffing_Transactions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    functionality_for_staffing_transactions_reference: Optional[
        FunctionalAreaConfigurationObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Functionality_for_Staffing_Transactions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    functionality_for_staffing_transactions_data: Optional[
        FunctionalityForStaffingTransactionsDataType
    ] = field(
        default=None,
        metadata={
            "name": "Functionality_for_Staffing_Transactions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFunctionalityForStaffingTransactionsResponse(
    PutFunctionalityForStaffingTransactionsResponseType
):
    class Meta:
        name = "Put_Functionality_for_Staffing_Transactions_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutGlobalStaffingEligibilityRuleResponseType:
    """
    Put Global Staffing Eligibility Rule Response Element.

    Attributes:
        global_staffing_eligibility_rule_reference: Global Staffing Eligibility Rule Reference
        application_instance_related_exceptions_data
        version
    """

    class Meta:
        name = "Put_Global_Staffing_Eligibility_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    global_staffing_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    application_instance_related_exceptions_data: list[
        ApplicationInstanceRelatedExceptionsDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Application_Instance_Related_Exceptions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutHireEventProposedWorkerIdRequest(PutHireEventProposedWorkerIdRequestType):
    class Meta:
        name = "Put_Hire_Event_Proposed_Worker_ID_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutHireEventProposedWorkerIdResponse(PutHireEventProposedWorkerIdResponseType):
    class Meta:
        name = "Put_Hire_Event_Proposed_Worker_ID_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutImportProcessResponse(PutImportProcessResponseType):
    class Meta:
        name = "Put_Import_Process_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobClassificationGroupResponse(PutJobClassificationGroupResponseType):
    class Meta:
        name = "Put_Job_Classification_Group_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobFamilyGroupResponse(PutJobFamilyGroupResponseType):
    class Meta:
        name = "Put_Job_Family_Group_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobFamilyResponse(PutJobFamilyResponseType):
    class Meta:
        name = "Put_Job_Family_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobOverlapRoutingExclusionRuleResponse(PutJobOverlapRoutingExclusionRuleResponseType):
    class Meta:
        name = "Put_Job_Overlap_Routing_Exclusion_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutLegalAuthorityResponse(PutLegalAuthorityResponseType):
    class Meta:
        name = "Put_Legal_Authority_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainEmployeeContractRulesForCountryResponse(
    PutMaintainEmployeeContractRulesForCountryResponseType
):
    class Meta:
        name = "Put_Maintain_Employee_Contract_Rules_For_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainJobOverlapRoutingExclusionRuleRequestType:
    """
    Creates Job Overlap Routing Exclusion Rules.

    Attributes:
        maintain_job_overlap_routing_exclusion_rule_reference: Contains a reference to the Job
            Overlap Condition Rule instance.
        maintain_job_overlap_routing_exclusion_rule_data
        version
    """

    class Meta:
        name = "Put_Maintain_Job_Overlap_Routing_Exclusion_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_job_overlap_routing_exclusion_rule_reference: Optional[
        JobOverlapConditionRuleObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_job_overlap_routing_exclusion_rule_data: Optional[
        MaintainJobOverlapRoutingExclusionRulesItemDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainJobOverlapRoutingExclusionRuleResponse(
    PutMaintainJobOverlapRoutingExclusionRuleResponseType
):
    class Meta:
        name = "Put_Maintain_Job_Overlap_Routing_Exclusion_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainNoticePeriodsForCountryResponse(PutMaintainNoticePeriodsForCountryResponseType):
    class Meta:
        name = "Put_Maintain_Notice_Periods_for_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainProbationPeriodsForCountryResponseType:
    """
    Response element for Put Maintain Probation Periods for Country.

    Attributes:
        probation_period_for_country_reference: Country Reference
        exceptions_response_data
        version
    """

    class Meta:
        name = "Put_Maintain_Probation_Periods_For_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_for_country_reference: list[ProbationPeriodRuleObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainWorkingTimeForCountryResponseType:
    """
    Put Maintain Working Time for Country Response.

    Attributes:
        working_time_defaulting_eligibility_table_reference: Working Time Defaulting Eligibility
            Table Reference
        application_instance_related_exceptions_data: Application Instance Related Exceptions Data
        version
    """

    class Meta:
        name = "Put_Maintain_Working_Time_for_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    working_time_defaulting_eligibility_table_reference: Optional[
        WorkingTimeDefaultingEligibilityTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Working_Time_Defaulting_Eligibility_Table_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    application_instance_related_exceptions_data: list[
        ApplicationInstanceRelatedExceptionsDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Application_Instance_Related_Exceptions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutNatureOfActionResponse(PutNatureOfActionResponseType):
    class Meta:
        name = "Put_Nature_of_Action_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutNoticePeriodEligibilityRuleResponse(PutNoticePeriodEligibilityRuleResponseType):
    class Meta:
        name = "Put_Notice_Period_Eligibility_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPersonnelActionRequestStatusOnMassActionRequest(
    PutPersonnelActionRequestStatusOnMassActionRequestType
):
    class Meta:
        name = "Put_Personnel_Action_Request_Status_on_Mass_Action_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutPersonnelActionRequestStatusOnMassActionResponse(
    PutPersonnelActionRequestStatusOnMassActionResponseType
):
    class Meta:
        name = "Put_Personnel_Action_Request_Status_on_Mass_Action_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutProbationPeriodEligibilityRuleResponseType:
    """
    Put Probation Period Eligibility Rule Response Element.

    Attributes:
        probation_period_eligibility_rule_reference: Probation Period Eligibility Rule Reference
        application_instance_related_exceptions_data
        version
    """

    class Meta:
        name = "Put_Probation_Period_Eligibility_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    application_instance_related_exceptions_data: list[
        ApplicationInstanceRelatedExceptionsDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Application_Instance_Related_Exceptions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutProbationPeriodOutcomeRequestType:
    """
    Put Probation Period Outcome Request.

    Attributes:
        add_only: Add Only
        probation_period_outcome_reference: Probation Period Outcome Reference
        probation_period_outcome_data: Probation Period Outcome Data
        version
    """

    class Meta:
        name = "Put_Probation_Period_Outcome_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcome_reference: Optional[ProbationPeriodOutcomeObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcome_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcome_data: Optional[ProbationPeriodOutcomeDataType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcome_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutProbationPeriodOutcomeResponse(PutProbationPeriodOutcomeResponseType):
    class Meta:
        name = "Put_Probation_Period_Outcome_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutProbationPeriodOutcomesResponse(PutProbationPeriodOutcomesResponseType):
    class Meta:
        name = "Put_Probation_Period_Outcomes_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutRemarkResponse(PutRemarkResponseType):
    class Meta:
        name = "Put_Remark_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutRemoveMatrixOrganizationResponse(PutRemoveMatrixOrganizationResponseType):
    class Meta:
        name = "Put_Remove_Matrix_Organization_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStaffingFieldDefaultsConditionRulesResponse(
    PutStaffingFieldDefaultsConditionRulesResponseType
):
    class Meta:
        name = "Put_Staffing_Field_Defaults_Condition_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStaffingFieldDefaultsResponse(PutStaffingFieldDefaultsResponseType):
    class Meta:
        name = "Put_Staffing_Field_Defaults_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStudentEmploymentEligibilityRuleResponse(PutStudentEmploymentEligibilityRuleResponseType):
    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStudentEmploymentEligibilityStatusRequest(
    PutStudentEmploymentEligibilityStatusRequestType
):
    class Meta:
        name = "Put_Student_Employment_Eligibility_Status_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStudentEmploymentEligibilityStatusResponse(
    PutStudentEmploymentEligibilityStatusResponseType
):
    class Meta:
        name = "Put_Student_Employment_Eligibility_Status_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutWorkerDocumentRequestType:
    """
    Request element for Put Worker Document/

    Attributes:
        worker_document_reference: The reference to the worker document.
        worker_document_data: Wrapper element for the details of a worker document.
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Worker_Document_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document_reference: Optional[WorkerDocumentObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: Optional[WorkerDocumentDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutWorkerDocumentResponse(PutWorkerDocumentResponseType):
    class Meta:
        name = "Put_Worker_Document_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutWorkingTimeEligibilityRulesResponseType:
    """
    Put Working Time Eligibility Rules Response Element.

    Attributes:
        working_time_eligibility_rule_reference: Working Time Eligibility Rule Reference
        application_instance_related_exceptions_data: Element containing Exceptions Data
        version
    """

    class Meta:
        name = "Put_Working_Time_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    working_time_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    application_instance_related_exceptions_data: list[
        ApplicationInstanceRelatedExceptionsDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Application_Instance_Related_Exceptions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemarkDataType:
    """
    Remark Data element with reference ID and its associated  data.

    Attributes:
        id: The user specified ID of the Remark reference
        code: Code for the Remark reference
        explanation: OPM Explanation for the Remark reference
        parameter_data: PAR Variable Data element
        nature_of_action_reference: Nature of Action Reference
        inactive: Inactive boolean for the Remark reference
    """

    class Meta:
        name = "Remark_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 3,
        },
    )
    explanation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Explanation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parameter_data: list[ParVariableDataType] = field(
        default_factory=list,
        metadata={
            "name": "Parameter_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_reference: list[NatureOfActionAllObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Nature_of_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveMatrixOrganizationPositionDataType:
    """
    Contains matrix organization assignment for each position.

    Attributes:
        position_reference: The worker's position you're removing from a matrix organization.
        remove_matrix_organization_detail_data
    """

    class Meta:
        name = "Remove_Matrix_Organization_Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_matrix_organization_detail_data: Optional[RemoveMatrixOrganizationDetailDataType] = (
        field(
            default=None,
            metadata={
                "name": "Remove_Matrix_Organization_Detail_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )


@dataclass
class RemoveRetireeStatusDataType:
    """
    Wrapper Element for the Remove Retiree Status business process web service.

    Attributes:
        employee_reference: Contains reference for employee who will have the retiree designation
            removed.
        end_retirement_date: The last date of retirement for the employee.
        remove_retiree_status_event_data
    """

    class Meta:
        name = "Remove_Retiree_Status_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_retirement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Retirement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_retiree_status_event_data: Optional[RemoveRetireeStatusEventDataType] = field(
        default=None,
        metadata={
            "name": "Remove_Retiree_Status_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class RemoveRetireeStatusResponse(RemoveRetireeStatusResponseType):
    class Meta:
        name = "Remove_Retiree_Status_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestStockGrantSubdataType:
    """
    Data element for the stock grant request.

    Attributes:
        stock_plan_reference: Stock Plan for the Stock Grants.
        reason_reference: Reason for the stock plan assignment. Use the format:
            General_Event_Subcategory.
        individual_stock_grant_data
    """

    class Meta:
        name = "Request_Stock_Grant_SubdataType"
        target_namespace = "urn:com.workday/bsvc"

    stock_plan_reference: Optional[StockPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    individual_stock_grant_data: list[IndividualStockGrantDataType] = field(
        default_factory=list,
        metadata={
            "name": "Individual_Stock_Grant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class ResponsibilityProfileForJobType:
    """
    Contains the position's responsibility information.

    Attributes:
        responsibility_profile_reference: A unique reference to the responsibility profile.
        responsibility_profile_data
    """

    class Meta:
        name = "Responsibility_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    responsibility_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Responsibility_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    responsibility_profile_data: Optional[ResponsibilityProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Responsibility_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignerDataType:
    """
    Role Assigner Reference and Data.

    Attributes:
        effective_timezone_reference: Overridden Effective Timezone.
        role_assigner_reference: Role Assigner Reference.
        role_assignment_data: Role Assignment Data
        effective_date: Effective Moment with Pacific Timezone.
    """

    class Meta:
        name = "Role_Assigner_DataType"
        target_namespace = "urn:com.workday/bsvc"

    effective_timezone_reference: Optional[TimeZoneObjectType] = field(
        default=None,
        metadata={
            "name": "Effective_Timezone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    role_assigner_reference: Optional[RoleAssignerObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assigner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    role_assignment_data: list[RoleAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Role_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignmentType:
    """
    Encapsulating Element for all Organization Role Assignment data.

    Attributes:
        role_assignment_reference: Workday ID for Role Assignment.
        role_assignment_data
    """

    class Meta:
        name = "Role_AssignmentType"
        target_namespace = "urn:com.workday/bsvc"

    role_assignment_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assignment_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    role_assignment_data: Optional[OrganizationRoleAssignmentDataType] = field(
        default=None,
        metadata={
            "name": "Role_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class SecondPersonnelActionDataType:
    """Wrapper element for the Second Personnel Action Data."""

    class Meta:
        name = "Second_Personnel_Action_DataType"
        target_namespace = "urn:com.workday/bsvc"

    second_action_6_a_and_6_b_nature_of_action_data: Optional[
        SecondPersonnelActionNatureOfActionValueDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Action_6-A_and_6-B_Nature_of_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_action_6_c_and_6_d_legal_authority_value: Optional[
        SecondPersonnelActionFirstLegalAuthorityValueDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Action_6-C_and_6-D_Legal_Authority_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    second_action_6_e_and_6_f_legal_authority_value: Optional[
        SecondPersonnelActionSecondLegalAuthorityValueDataType
    ] = field(
        default=None,
        metadata={
            "name": "Second_Action_6-E_and_6-F_Legal_Authority_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SelfEvaluationDetailDataType:
    """
    Contains the evaluation information that was filled out by the employee.

    Attributes:
        overall_data: The overall section evaluation information (rating, comments) from the
            employee.
    """

    class Meta:
        name = "Self_Evaluation_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    overall_data: Optional[OverallEvaluationDetailDataType] = field(
        default=None,
        metadata={
            "name": "Overall_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SetHiringRestrictionsResponse(SetHiringRestrictionsResponseType):
    class Meta:
        name = "Set_Hiring_Restrictions_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class SkillType:
    """
    Wrapper element for Skill Items.

    Attributes:
        skill_reference: A reference to a Skill Item.
        skill_data: An element containing information about a Skill Item.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    skill_reference: Optional[LocalSkillObjectType] = field(
        default=None,
        metadata={
            "name": "Skill_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_data: list[SkillItemDataType] = field(
        default_factory=list,
        metadata={
            "name": "Skill_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillProfileForJobType:
    """
    Contains the Position's Skill information.

    Attributes:
        skill_profile_reference: Reference for the Skill profile.
        skill_profile_data: Contains the Skill profile's information for a position.
    """

    class Meta:
        name = "Skill_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    skill_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Skill_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_profile_data: Optional[SkillProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Skill_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SkillQualificationReplacementType:
    """
    Contains information about a replacement skill.

    Attributes:
        skill_qualification_replacement_data
        delete: If Y, deletes or updates all skill qualifications for the position restriction or
            job profile, and doesn't send any additional work skill qualifications.
    """

    class Meta:
        name = "Skill_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    skill_qualification_replacement_data: list[SkillQualificationProfileReplacementDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Skill_Qualification_Replacement_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsForkableConditionItemType:
    """
    Contains the request to add, update, or delete a Forkable Condition Item.

    Attributes:
        forkable_condition_item_reference: Contains a reference that identifies a specific instance
            of Forkable Condition Item instance.
        forkable_condition_item_data: Contains the Forkable Condition Item data.
        add_only: Specifies if the request is an add only, not an update.
        delete: If true, indicates a delete operation.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Forkable_Condition_ItemType"
        target_namespace = "urn:com.workday/bsvc"

    forkable_condition_item_reference: Optional[ForkableConditionItemObjectType] = field(
        default=None,
        metadata={
            "name": "Forkable_Condition_Item_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    forkable_condition_item_data: Optional[StaffingFieldDefaultsForkableConditionItemDataType] = (
        field(
            default=None,
            metadata={
                "name": "Forkable_Condition_Item_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StartInternationalAssignmentEventDataType:
    """
    Wrapper element that contains international assignment job related information.

    Attributes:
        position_id: If you are adding the employee into a Position Group, you should not submit
            this field. The existing Position ID will continue to be used. If the employee is being
            added into a Headcount Group or Job Management Organization, then a new "position" will
            be created for them.  You can choose to enter an unique ID of your own choosing. If you
            do not submit it, an unique ID will be generated for it - either using the Position ID
            sequence generator if you have set one up - or another system generated ID will be used.
            This is the ID that you will be able to use in later web services where a Position
            Reference is needed.
        international_assignment_type_reference: The International Assignment Type for the
            international assignment position.
        expected_assignment_end_date: The End Date for the International Assignment. If empty,
            Workday will use the existing date. This field is informational only. The value is
            effective immediately on update.
        start_international_assignment_reason_reference: Reference to the reason the employee is
            getting an International Assignment job.
        employee_type_reference: Reference to the employee type for this employee.
        first_day_of_work: The date of the employee's first day of work in the international
            assignment job. Will default from the start date
        end_employment_date: The End Employment Date for the position of fixed term or temporary
            employees. If empty, Workday will use the existing End Employment Date.
        position_details
    """

    class Meta:
        name = "Start_International_Assignment_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    international_assignment_type_reference: Optional[AssignmentTypeObjectType] = field(
        default=None,
        metadata={
            "name": "International_Assignment_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    expected_assignment_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Assignment_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_international_assignment_reason_reference: Optional[GeneralEventSubcategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Start_International_Assignment_Reason_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    employee_type_reference: Optional[PositionWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_details: Optional[PositionDetailsSubDataType] = field(
        default=None,
        metadata={
            "name": "Position_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StartInternationalAssignmentResponse(StartInternationalAssignmentResponseType):
    class Meta:
        name = "Start_International_Assignment_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class StudentEmploymentEligibilityEventType:
    """
    Container for individual student employment eligibility data.

    Attributes:
        student_employment_eligibility_event_reference: Reference requested from the initial request
        pre_hire_reference: Applicant of Hire Event if subprocess of Hire
        worker_reference: Worker referred to be Student Employment Eligibility
        proposed_worker_id: Will be used as Worker ID
        parent_event_reference: Parent process of Student Employment Eligibility
        employee_type_reference: Categorization of Employee
        supervisory_organization_reference: Related Supervisory Organization to this process
        manager_reference: Manager of Related Supervisory Organization
        event_effective_date: Effective Date of Parent process
        total_scheduled_hours: Total Scheduled Hours (includes proposed scheduled hours of current
            event)
        job_requisition_reference: Job Requisition associated to the Parent Event of the Student
            Employment Eligibility Event
        position_restriction_reference: Position Restriction associated to the Parent Event of the
            Student Employment Eligibility Event
        position_details_data
    """

    class Meta:
        name = "Student_Employment_Eligibility_EventType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_event_reference: Optional[
        StudentEmploymentEligibilityEventObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pre_hire_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Pre-Hire_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    proposed_worker_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Proposed_Worker_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    parent_event_reference: Optional[ActionEventObjectType] = field(
        default=None,
        metadata={
            "name": "Parent_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_type_reference: Optional[EmployeeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manager_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Manager_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Event_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    total_scheduled_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Total_Scheduled_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 30,
            "fraction_digits": 10,
        },
    )
    job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restriction_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Restriction_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_details_data: list[PositionDetailsSubDataType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSetDataType:
    """
    Container for Put Student Employment Eligibility Rule Set Response.

    Attributes:
        id: Student Employment Eligibility Rule Set ID
        student_employment_eligibility_rule_set_name: Student Employment Eligibility Rule Set Name
        student_employment_eligibility_rule_set_description: Student Employment Eligibility Rule Set
            Description
        inactive: Inactive
        job_profile_reference: Job Profile Reference
        job_family_reference: Reference element representing a unique instance of Job Family.
        academic_level_reference: Academic Level Reference
        academic_period_reference: Academic Period Reference
        academic_period_type_reference: Reference for Academic Period Types
        student_employment_eligibility_rule_subedit_data: Container for Student Employment
            Eligibility Rule Subedit Data
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Set_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_set_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    student_employment_eligibility_rule_set_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_level_reference: list[AcademicLevelObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Academic_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_period_reference: list[AcademicPeriodObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Academic_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_period_type_reference: list[AcademicPeriodTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Academic_Period_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_subedit_data: list[
        StudentEmploymentEligibilityRuleSubeditDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Subedit_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class SuccessionProfileDataType:
    """Contains information about all the succession plans that this employee is on."""

    class Meta:
        name = "Succession_Profile_DataType"
        target_namespace = "urn:com.workday/bsvc"

    candidate_data: list[SuccessionPlanCandidateDataType] = field(
        default_factory=list,
        metadata={
            "name": "Candidate_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SwitchPrimaryJobEventResponseType:
    """
    Responds with the Event ID for the Switch Primary Job business process.

    Attributes:
        event_reference: Responds with the Event ID for the Switch Primary Job business process.
        exceptions_response_data
        version
    """

    class Meta:
        name = "Switch_Primary_Job_Event_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exceptions_response_data: list[ApplicationInstanceRelatedExceptionsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Exceptions_Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SwitchPrimaryJobRequestDataType:
    """
    Wrapper element for the Switch Primary Job business process.

    Attributes:
        worker_reference: Reference to the Worker whose primary job is being edited.
        effective_date: Date that the change will be effective
        switch_primary_job_data: Wrapper element for the Switch Primary Job Event
    """

    class Meta:
        name = "Switch_Primary_Job_Request_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    switch_primary_job_data: Optional[SwitchPrimaryJobDataType] = field(
        default=None,
        metadata={
            "name": "Switch_Primary_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class TalentAssessmentDataType:
    """
    Contains the potential assessment for the employee.

    Attributes:
        employee_potential_data: Contains the information about the employee's potential.
    """

    class Meta:
        name = "Talent_Assessment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_potential_data: Optional[EmployeeTalentAssessmentDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Potential_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TerminateEmployeeEventResponse(TerminateEmployeeEventResponseType):
    class Meta:
        name = "Terminate_Employee_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class TerminateEventDataType:
    """
    Data Element that contains the basic information to terminate an employee.

    All required information must be included. The Terminate Employee
    business process (for the employee) will be initiated from this
    information.

    Attributes:
        last_day_of_work: Date for the last day the worker will work. Will default to the
            Termination date if not set.
        primary_reason_reference: Primary reason why the worker is being terminated.  This attribute
            is required.
        secondary_reason_reference: Secondary reason for the worker's termination.
        local_termination_reason_reference: Local specific reason for the worker's termination.
        pay_through_date: Date the terminated worker will be paid through. It will default to the
            termination date if it is not set.
        resignation_date: The date the employee submitted their resignation. Applies to voluntary
            terminations only - the date will not be loaded if the primary reason category is
            involuntary.
        agreement_signature_date: The agreement signature date used in the termination tasks. This
            is a localized field.
        dismissal_process_start_date: The dismissal process start date used in the termination
            tasks.  This is a localized field.
        notification_date: The date the employee was notified or gave notice of the termination.
        notice_period_start_date: The notice period start date used in the termination tasks. This
            is a localized field.
        regrettable_reference: Enter Yes if the ~worker’s~ departure is regrettable for your
            organization. Enter No if the ~worker’s~ departure isn’t regrettable for your
            organization. If empty, Workday uses an empty value.
        eligible_for_hire_reference: Enter Yes if the worker is eligible for rehire. Enter No if the
            worker isn’t eligible for rehire. Leave empty if you want to use the existing rehire
            eligibility status as stated on their most recent termination. If there isn’t an
            existing rehire eligibility status and you leave empty, then Workday creates a blank
            value.
        close_position: Boolean to indicate whether the worker's position should be closed. Default
            is no.
        job_overlap_allowed: If Y, allows multiple workers to be placed in a position
            simultaneously. Only applies to position management positions.
        last_date_for_which_paid: This field is used for Canadian employees' Record of Employment
            and indicates that last date for which the employee will be paid. If a value is not
            supplied the field will default to the Pay Through Date.
        expected_date_of_return: This field is used for Canadian employees' Record of Employment and
            indicates that the date on which the employee is expected to return. If the employee is
            Canadian then exactly one one of the following return status must be supplied: Expected
            Date of Return, Not Returning, Return Unknown.
        not_returning: This field is used for Canadian employees' Record of Employment and indicates
            that the employee is not expected to return. If the employee is Canadian then exactly
            one of the following return status must be supplied: Expected Date of Return, Not
            Returning, Return Unknown.
        return_unknown: This field is used for Canadian employees' Record of Employment and
            indicates that it is unknown if the employee will return. If the employee is Canadian
            then exactly one of the following return status must be supplied: Expected Date of
            Return, Not Returning, Return Unknown.
        worker_document_data: Container for attachments related to the worker's termination.
    """

    class Meta:
        name = "Terminate_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_reason_reference: Optional[TerminationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    secondary_reason_reference: list[TerminationSubcategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Secondary_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_termination_reason_reference: Optional[LocalTerminationReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Local_Termination_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_through_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Pay_Through_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    resignation_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Resignation_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agreement_signature_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Agreement_Signature_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dismissal_process_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Dismissal_Process_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notification_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notification_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notice_period_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    regrettable_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Regrettable_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_for_hire_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_for_Hire_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_position: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Close_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_allowed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Allowed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_date_for_which_paid: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Date_for_Which_Paid",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_date_of_return: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Date_of_Return",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    not_returning: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Not_Returning",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    return_unknown: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Return_Unknown",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: list[WorkerDocumentForStaffingEventDataType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingType:
    """
    Wrapper element for Training information.

    Attributes:
        training_reference: Reference to the Training information.
        training_data: Wrapper element for Training information.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    training_reference: Optional[TrainingObjectType] = field(
        default=None,
        metadata={
            "name": "Training_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_data: list[TrainingAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Training_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingProfileForJobType:
    """
    Contains the position's training information.

    Attributes:
        training_profile_reference: A unique identifier to reference a training profile.
        training_profile_data
    """

    class Meta:
        name = "Training_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    training_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Training_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_profile_data: Optional[TrainingProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Training_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TrainingQualificationReplacementType:
    """
    Wrapper element for Training Qualifications.

    Allows all training qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing training qualifications with those sent in the web service.

    Attributes:
        training_qualification_replacement_data
        delete: If Y, deletes training qualifications for the position restriction or job profile.
    """

    class Meta:
        name = "Training_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    training_qualification_replacement_data: list[
        TrainingQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Training_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionLogCriteriaType:
    """
    Searches the transaction log for business processes and event lites to find specific events that
    occurred during a period of time.

    Changes to organization data such as organization name and code are
    not captured in the transaction log. The Organization Core Connector
    with the Transaction Service Log disabled can be used to detect
    organizations with organization data changes. When Transaction Log
    Criteria is configured, this web service will search through the
    transaction log looking for instances with a reference to an
    organization. Organizations are a very common reference in the
    transaction log  (e.g. role assignments are in the transaction log
    and typically reference an org). The more data that the transaction
    log has, the more data that needs to be evaluated by the web
    service.

    Attributes:
        transaction_date_range_data: Encapsulating element containing Effective and Updated DateTime
            data.
        transaction_type_references: If specified, this search criteria will return those
            Transaction Log Entries which match the Transaction Types specified here.
        subscriber_reference: If specified, this search criterium will return those Transaction Log
            Entries that match the Transaction Types defined in the subscription of the subscriber.
    """

    class Meta:
        name = "Transaction_Log_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_date_range_data: Optional[EffectiveAndUpdatedDateTimeDataType] = field(
        default=None,
        metadata={
            "name": "Transaction_Date_Range_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_type_references: Optional[TransactionTypeReferencesType] = field(
        default=None,
        metadata={
            "name": "Transaction_Type_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    subscriber_reference: Optional[SubscriberObjectType] = field(
        default=None,
        metadata={
            "name": "Subscriber_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransactionLogEntryType:
    """
    Encapsulating element containing the transaction log entry.

    Attributes:
        transaction_log_reference: A reference to a transaction log entry.
        transaction_log_data
    """

    class Meta:
        name = "Transaction_Log_EntryType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_reference: Optional[TransactionLogObjectType] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_data: Optional[TransactionLogDataType] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UnionMemberDataType:
    """
    Element  containing a single union member with associated membership details.

    Attributes:
        worker_reference: Reference ID for the worker who's enrolled, or enrolling, in the union.
        union_reference: Reference ID for the union in which the worker is member.
        seniority_date: Date when the worker gained seniority at the union.
        union_membership_data
    """

    class Meta:
        name = "Union_Member_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    union_reference: Optional[UnionObjectType] = field(
        default=None,
        metadata={
            "name": "Union_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    seniority_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Seniority_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    union_membership_data: list[UnionMembershipDataType] = field(
        default_factory=list,
        metadata={
            "name": "Union_Membership_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class UpdateAcademicAppointmentDataType:
    """
    Wrapper element for the Update Academic Appointment business process.

    Attributes:
        reason_reference: Reference ID for the reason for the academic appointment event.
        academic_appointee_reference: Reference ID for the person this academic appointment is for.
        academic_appointment_data: Used to set or update the Reference ID for the Appointment
            Thread. The value cannot already be in use by a different appointment thread.
    """

    class Meta:
        name = "Update_Academic_Appointment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    academic_appointee_reference: Optional[AcademicAppointeeEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    academic_appointment_data: Optional[AcademicAppointmentSnapshotDataType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class VisaIdtype:
    """
    Encapsulating element for all Visa Identifier data.

    Attributes:
        visa_id_reference: Reference ID for the Visa Identifier.
        visa_id_data: Wrapper element for the Visa Identifier Data
        visa_id_shared_reference: Shared Reference ID for Visa Identifiers.
        delete: If Delete is set to True and Replace All has been set to False, the ID will be
            deleted when the web service is submitted. Note: The Replace All flag defaults to False
            if not specified in the web service
    """

    class Meta:
        name = "Visa_IDType"
        target_namespace = "urn:com.workday/bsvc"

    visa_id_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Visa_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    visa_id_data: Optional[VisaIdDataType] = field(
        default=None,
        metadata={
            "name": "Visa_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    visa_id_shared_reference: Optional[VisaIdentifierReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Visa_ID_Shared_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkExperienceQualificationReplacementType:
    """
    Wrapper element for Work Experience Qualifications.

    Allows all work experience qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing work experience qualifications with those sent in the web service.

    Attributes:
        work_experience_qualification_replacement_data
        delete: If Y, deletes all work experience qualifications for the position restriction or job
            profile, and doesn't send any additional work experience qualifications.
    """

    class Meta:
        name = "Work_Experience_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    work_experience_qualification_replacement_data: list[
        WorkExperienceQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Work_Experience_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkExperienceForJobType:
    """
    Contains the position's work experience information.

    Attributes:
        worker_experience_profile_reference: Reference for the Work Experience profile.
        work_experience_data
    """

    class Meta:
        name = "Work_Experience_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    worker_experience_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Experience_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_experience_data: Optional[WorkExperienceProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Work_Experience_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerBenefitEligibilityDataType:
    """
    Contains the plans that the worker is eligible for.

    Attributes:
        benefit_plan_reference: Benefit plan that the worker is eligible for
        plan_eligibility_dates_data
    """

    class Meta:
        name = "Worker_Benefit_Eligibility_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_plan_reference: list[BenefitPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Benefit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    plan_eligibility_dates_data: list[PlanEligiblityDatesDataType] = field(
        default_factory=list,
        metadata={
            "name": "Plan_Eligibility_Dates_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerCareerDataType:
    """
    Contains the current career information for an employee.

    This includes the travel and relocation preferences, job profiles the employee is interested in,
    and their career interests
    """

    class Meta:
        name = "Worker_Career_DataType"
        target_namespace = "urn:com.workday/bsvc"

    relocation_data: Optional[RelocationPreferenceDataType] = field(
        default=None,
        metadata={
            "name": "Relocation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    travel_data: Optional[TravelPreferenceDataType] = field(
        default=None,
        metadata={
            "name": "Travel_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_interests_data: Optional[JobInterestsDataType] = field(
        default=None,
        metadata={
            "name": "Job_Interests_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    career_interests_data: Optional[CareerPreferencesDataType] = field(
        default=None,
        metadata={
            "name": "Career_Interests_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDevelopmentItemType:
    """
    Contains the reference to the Development Item and the Development Item details.

    Attributes:
        development_item_reference: The reference to the Development Item
        development_item_data
    """

    class Meta:
        name = "Worker_Development_ItemType"
        target_namespace = "urn:com.workday/bsvc"

    development_item_reference: Optional[DevelopmentItemObjectType] = field(
        default=None,
        metadata={
            "name": "Development_Item_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    development_item_data: Optional[DevelopmentItemVersionDataType] = field(
        default=None,
        metadata={
            "name": "Development_Item_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDocumentType:
    """
    Contains the retrieved Worker Document information.

    Attributes:
        worker_document_reference: The reference to the worker document.
        worker_document_data
    """

    class Meta:
        name = "Worker_DocumentType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document_reference: Optional[WorkerDocumentObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: Optional[WorkerDocumentDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDocumentWwstype:
    """
    Wrapper element for documents associated with a worker.

    Attributes:
        worker_document_reference: The reference to the worker document.
        worker_document_detail_data: The information about the worker document, such as the category
            and file.
    """

    class Meta:
        name = "Worker_Document_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document_reference: Optional[WorkerDocumentObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_document_detail_data: Optional[WorkerDocumentDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerGoalType:
    """
    Contains the reference to the Goal Detail and all the Goal Data payload.

    Attributes:
        goal_reference: Reference to the Goal Detail.
        goal_data
    """

    class Meta:
        name = "Worker_GoalType"
        target_namespace = "urn:com.workday/bsvc"

    goal_reference: Optional[GoalObjectType] = field(
        default=None,
        metadata={
            "name": "Goal_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    goal_data: list[GoalDetailDataType] = field(
        default_factory=list,
        metadata={
            "name": "Goal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerStatusDetailDataType:
    """
    Encapsulating element containing all Status data for a Worker.

    Attributes:
        active: Boolean attribute identifying whether the Worker is Active.
        active_status_date: The most recent date the employee's status was changed.
        hire_date: The most recent hire date for the employee or contract start date for the
            contingent worker.
        original_hire_date: Earliest Hire Date for the Worker.
        hire_reason_reference: Reason for Hire from the most recent Hire event.
        end_employment_date: Employment End Date for the Worker. This field is informational only.
            The value is effective immediately on update.
        continuous_service_date: Continuous Service Date for the Worker.
        first_day_of_work: First Day of Work only applies to the Payroll web service.
        expected_retirement_date: Expected retirement date for the worker.
        retirement_eligibility_date: Retirement Eligibility Date for the Worker.
        retired: Boolean attribute identifying whether the Worker is currently retired.
        retirement_date: Most recent Retirement Date.
        seniority_date: Seniority date for the worker.  Defaults to hire date.
        severance_date: Severance date for the worker.
        benefits_service_date: The Benefits Service Date in the employee's service dates. If empty,
            Workday will use the existing date.
        company_service_date: The Company Service Date in the employee's service dates. If empty,
            Workday will use the existing date.
        time_off_service_date: The Time Off Service Date in the worker's service dates. If empty,
            Workday will use the existing date.
        vesting_date: The Vesting Date in the employee's service dates. If empty, Workday will use
            the existing date.
        date_entered_workforce: The Date Entered Workforce in the employee's service dates. If
            empty, Workday will use the existing date.
        days_unemployed: Number of days unemployed since the employee first joined the work force.
            Used only for China.
        months_continuous_prior_employment: Number of months of continuous prior employment at the
            employee's most recent job. Used only for China.
        terminated: Boolean attribute identifying whether the Worker is currently Terminated.
        termination_date: Most recent Termination Date.
        pay_through_date: The payroll pay through date from the worker's most recent termination.
        agreement_signature_date: Agreement Signature Date.
        dismissal_process_start_date: Dismissal Process Start Date.
        notice_period_start_date: Notice Period Start Date.
        primary_termination_reason_reference: The primary reason for the worker's most recent
            termination.
        primary_termination_category_reference: Reference to primary termination reason category.
        termination_involuntary: Indicates if the termination was involuntary.
        secondary_termination_reasons_data: Secondary Termination Reasons Data
        local_termination_reason_reference: The local reason for the worker's most recent
            termination.
        eligible_for_hire_reference: The ~pre-hire’s~ hire eligibility status.
        regrettable_termination: Boolean attribute identifying whether the termination was
            regrettable.
        eligible_for_rehire_on_latest_termination_reference: The ~worker’s~ rehire eligibility
            status as stated on their most recent termination.
        hire_rescinded: This field is linked to the pre-hire record, not the employee record. The
            field returns true when a pre-hire has had their hire rescinded. If the pre-hire was
            rehired, the field returns false. The only way to reset the field after the hire has
            been rescinded, is to rehire the pre-hire.
        termination_last_day_of_work: Last day worked for the worker's termination event.
        resignation_date: Date the employee submitted their resignation.
        last_date_for_which_paid: The last date for which the Canadian worker is paid as specified
            on the most recent termination transaction for the worker. This field is specific to
            Canadian employment.
        expected_date_of_return: The date the Canadian worker is expected to return as specified on
            the most recent termination transaction for the worker. This field is specific to
            Canadian employment.
        not_returning: Returns "Yes" if the Canadian worker is not expected to return as specified
            on the most recent termination transaction. This field is specific to Canadian
            employment.
        return_unknown: Returns "Yes" if it is unknown if the Canadian worker is expected to return
            as specified on the most recent termination transaction. This field is specific to
            Canadian employment.
        probation_start_date: Primary Position Probation Start Date
        probation_end_date: Primary Position Probation End Date
        leave_status_data: Encapsulating element containg all Leave Status data.
        leave_requests_corrected_data: Encapsulating element containing leave requests that have
            been corrected.
        academic_tenure_date: Date the worker received tenure.
        rehire: Returns "Yes" if the worker is a rehire based on the most recent hire event.
    """

    class Meta:
        name = "Worker_Status_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Active",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    active_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Active_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Hire_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    continuous_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Continuous_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_retirement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Retirement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_eligibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Retirement_Eligibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retired: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Retired",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Retirement_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    seniority_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Seniority_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    severance_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Severance_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefits_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Benefits_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Company_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_off_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Time_Off_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    vesting_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Vesting_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_entered_workforce: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_Entered_Workforce",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    days_unemployed: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Days_Unemployed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    months_continuous_prior_employment: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Months_Continuous_Prior_Employment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    terminated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Terminated",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    termination_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Termination_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_through_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Pay_Through_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agreement_signature_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Agreement_Signature_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dismissal_process_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Dismissal_Process_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notice_period_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_termination_reason_reference: Optional[TerminationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Termination_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_termination_category_reference: Optional[EventClassificationCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Termination_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    termination_involuntary: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Termination_Involuntary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    secondary_termination_reasons_data: list[SecondaryTerminationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Secondary_Termination_Reasons_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_termination_reason_reference: Optional[LocalTerminationReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Local_Termination_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_for_hire_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_for_Hire_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    regrettable_termination: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Regrettable_Termination",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligible_for_rehire_on_latest_termination_reference: Optional[CommonYesNoObjectType] = field(
        default=None,
        metadata={
            "name": "Eligible_for_Rehire_on_Latest_Termination_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_rescinded: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hire_Rescinded",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    termination_last_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Termination_Last_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    resignation_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Resignation_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_date_for_which_paid: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Date_for_Which_Paid",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_date_of_return: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Date_of_Return",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    not_returning: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Not_Returning",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    return_unknown: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Return_Unknown",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_status_data: list[LeaveStatusDetailDataType] = field(
        default_factory=list,
        metadata={
            "name": "Leave_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leave_requests_corrected_data: list[LeaveRequestsCorrectedDetailDataType] = field(
        default_factory=list,
        metadata={
            "name": "Leave_Requests_Corrected_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_tenure_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Academic_Tenure_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rehire: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Rehire",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeDefaultingEligibilityTableDataType:
    """
    Working Time Defaulting Eligibility Table Data.

    Attributes:
        id: Reference ID
        country_reference: Country Reference
        working_time_for_country_row_data: Working Time For Country Data
    """

    class Meta:
        name = "Working_Time_Defaulting_Eligibility_Table_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    working_time_for_country_row_data: list[WorkingTimeForCountryRowDataType] = field(
        default_factory=list,
        metadata={
            "name": "Working_Time_For_Country_Row_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortAddAdditionalJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAddAdditionalJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        add_additional_job_event_response: Optional[AddAdditionalJobEventResponse] = field(
            default=None,
            metadata={
                "name": "Add_Additional_Job_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortAddAdditionalJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortAddAdditionalJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortAddRetireeStatusOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAddRetireeStatusOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        add_retiree_status_response: Optional[AddRetireeStatusResponse] = field(
            default=None,
            metadata={
                "name": "Add_Retiree_Status_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortAddRetireeStatusOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortAddRetireeStatusOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortAssignOrganizationRolesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAssignOrganizationRolesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_organization_roles_response: Optional[AssignOrganizationRolesResponse] = field(
            default=None,
            metadata={
                "name": "Assign_Organization_Roles_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortAssignOrganizationRolesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortAssignOrganizationRolesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortAssignOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAssignOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_organization_response: Optional[AssignOrganizationResponse] = field(
            default=None,
            metadata={
                "name": "Assign_Organization_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortAssignOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortAssignOrganizationOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortAssignRolesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAssignRolesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_roles_response: Optional[AssignRolesResponse] = field(
            default=None,
            metadata={
                "name": "Assign_Roles_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortAssignRolesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortAssignRolesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortBulkImportEndAdditionalJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortBulkImportEndAdditionalJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortBulkImportEndAdditionalJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortBulkImportEndAdditionalJobOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortChangeOrganizationAssignmentsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangeOrganizationAssignmentsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_organization_assignments_response: Optional[
            ChangeOrganizationAssignmentsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Change_Organization_Assignments_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortChangeOrganizationAssignmentsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortChangeOrganizationAssignmentsOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortChangeWorkSpaceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangeWorkSpaceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_work_space_response: Optional[ChangeWorkSpaceResponse] = field(
            default=None,
            metadata={
                "name": "Change_Work_Space_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortChangeWorkSpaceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortChangeWorkSpaceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortClosePositionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortClosePositionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        close_position_response: Optional[ClosePositionResponse] = field(
            default=None,
            metadata={
                "name": "Close_Position_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortClosePositionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortClosePositionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortCorrectContractContingentWorkerInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortCorrectContractContingentWorkerInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortCorrectContractContingentWorkerInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        correct_contract_contingent_worker_request: Optional[
            CorrectContractContingentWorkerRequest
        ] = field(
            default=None,
            metadata={
                "name": "Correct_Contract_Contingent_Worker_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortCorrectContractContingentWorkerOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortCorrectContractContingentWorkerOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        correct_contract_contingent_worker_response: Optional[
            CorrectContractContingentWorkerResponse
        ] = field(
            default=None,
            metadata={
                "name": "Correct_Contract_Contingent_Worker_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortCorrectContractContingentWorkerOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortCorrectContractContingentWorkerOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortCorrectHireEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortCorrectHireEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortCorrectHireEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        correct_hire_employee_request: Optional[CorrectHireEmployeeRequest] = field(
            default=None,
            metadata={
                "name": "Correct_Hire_Employee_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortCorrectHireEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortCorrectHireEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        correct_hire_employee_response: Optional[CorrectHireEmployeeResponse] = field(
            default=None,
            metadata={
                "name": "Correct_Hire_Employee_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortCorrectHireEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortCorrectHireEmployeeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortCreatePositionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortCreatePositionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        create_position_response: Optional[CreatePositionResponse] = field(
            default=None,
            metadata={
                "name": "Create_Position_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortCreatePositionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortCreatePositionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortDeleteWorkerDocumentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortDeleteWorkerDocumentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        delete_worker_document_response: Optional[DeleteWorkerDocumentResponse] = field(
            default=None,
            metadata={
                "name": "Delete_Worker_Document_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortDeleteWorkerDocumentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortDeleteWorkerDocumentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditEmployeeContractAdditionalDataOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditEmployeeContractAdditionalDataOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_employee_contract_additional_data_response: Optional[
            EditEmployeeContractAdditionalDataResponse
        ] = field(
            default=None,
            metadata={
                "name": "Edit_Employee_Contract_Additional_Data_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditEmployeeContractAdditionalDataOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortEditEmployeeContractAdditionalDataOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditHiringRestrictionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditHiringRestrictionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_hiring_restrictions_response: Optional[EditHiringRestrictionsResponse] = field(
            default=None,
            metadata={
                "name": "Edit_Hiring_Restrictions_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditHiringRestrictionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEditHiringRestrictionsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditPositionRestrictionsAdditionalDataOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditPositionRestrictionsAdditionalDataOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_position_restrictions_additional_data_response: Optional[
            EditPositionRestrictionsAdditionalDataResponse
        ] = field(
            default=None,
            metadata={
                "name": "Edit_Position_Restrictions_Additional_Data_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditPositionRestrictionsAdditionalDataOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortEditPositionRestrictionsAdditionalDataOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditPositionRestrictionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditPositionRestrictionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_positon_restriction_response: Optional[EditPositonRestrictionResponse] = field(
            default=None,
            metadata={
                "name": "Edit_Positon_Restriction_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditPositionRestrictionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEditPositionRestrictionsOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditServiceDatesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditServiceDatesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_service_dates_response: Optional[EditServiceDatesResponse] = field(
            default=None,
            metadata={
                "name": "Edit_Service_Dates_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditServiceDatesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEditServiceDatesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditWorkerAdditionalDataOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditWorkerAdditionalDataOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_worker_additional_data_response: Optional[EditWorkerAdditionalDataResponse] = field(
            default=None,
            metadata={
                "name": "Edit_Worker_Additional_Data_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditWorkerAdditionalDataOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEditWorkerAdditionalDataOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEndAdditionalJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEndAdditionalJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        end_additional_employee_job_event_response: Optional[
            EndAdditionalEmployeeJobEventResponse
        ] = field(
            default=None,
            metadata={
                "name": "End_Additional_Employee_Job_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEndAdditionalJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEndAdditionalJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEndContingentWorkerContractOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEndContingentWorkerContractOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        end_contingent_worker_contract_response: Optional[EndContingentWorkerContractResponse] = (
            field(
                default=None,
                metadata={
                    "name": "End_Contingent_Worker_Contract_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortEndContingentWorkerContractOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEndContingentWorkerContractOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEndInternationalAssignmentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEndInternationalAssignmentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        end_international_assignment_for_employee_event_response: Optional[
            EndInternationalAssignmentForEmployeeEventResponse
        ] = field(
            default=None,
            metadata={
                "name": "End_International_Assignment_for_Employee_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEndInternationalAssignmentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEndInternationalAssignmentOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortFreezePositionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortFreezePositionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        freeze_position_response: Optional[FreezePositionResponse] = field(
            default=None,
            metadata={
                "name": "Freeze_Position_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortFreezePositionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortFreezePositionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportAddAdditionalJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportAddAdditionalJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportAddAdditionalJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportAddAdditionalJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportApplicantOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportApplicantOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportApplicantOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportApplicantOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportAssignMatrixOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportAssignMatrixOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportAssignMatrixOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportAssignMatrixOrganizationOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportChangeJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportChangeJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportChangeJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportChangeJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportChangeOrganizationAssignmentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportChangeOrganizationAssignmentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportChangeOrganizationAssignmentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportChangeOrganizationAssignmentOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportContractContingentWorkerOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportContractContingentWorkerOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportContractContingentWorkerOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportContractContingentWorkerOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportCreatePositionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportCreatePositionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportCreatePositionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportCreatePositionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportEditHiringRestrictionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportEditHiringRestrictionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportEditHiringRestrictionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportEditHiringRestrictionsOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportEditPositionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportEditPositionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportEditPositionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportEditPositionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportEndContingentWorkerContractOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportEndContingentWorkerContractOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportEndContingentWorkerContractOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportEndContingentWorkerContractOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportExternalStudentInformationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportExternalStudentInformationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportExternalStudentInformationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportExternalStudentInformationOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportHireEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportHireEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportHireEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportHireEmployeeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportMoveWorkersByOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportMoveWorkersByOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportMoveWorkersByOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportMoveWorkersByOrganizationOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportRemoveMatrixOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportRemoveMatrixOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportRemoveMatrixOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortImportRemoveMatrixOrganizationOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportSwapPositionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportSwapPositionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportSwapPositionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportSwapPositionsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortImportTerminateEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportTerminateEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_import_process_response: Optional[PutImportProcessResponse] = field(
            default=None,
            metadata={
                "name": "Put_Import_Process_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortImportTerminateEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortImportTerminateEmployeeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortMaintainEmployeeContractsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortMaintainEmployeeContractsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        maintain_employee_contracts_response: Optional[MaintainEmployeeContractsResponse] = field(
            default=None,
            metadata={
                "name": "Maintain_Employee_Contracts_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortMaintainEmployeeContractsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortMaintainEmployeeContractsOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortMoveWorkersByOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortMoveWorkersByOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        move_workers_by_organization_response: Optional[MoveWorkersByOrganizationResponse] = field(
            default=None,
            metadata={
                "name": "Move_Workers_By_Organization_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortMoveWorkersByOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortMoveWorkersByOrganizationOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortNoShowOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortNoShowOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        no_show_event_response: Optional[NoShowEventResponse] = field(
            default=None,
            metadata={
                "name": "No_Show_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortNoShowOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortNoShowOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutAssignMatrixOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutAssignMatrixOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_assign_matrix_organization_response: Optional[PutAssignMatrixOrganizationResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Assign_Matrix_Organization_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortPutAssignMatrixOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutAssignMatrixOrganizationOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutCitizenshipStatusOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutCitizenshipStatusOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_citizenship_status_response: Optional[PutCitizenshipStatusResponse] = field(
            default=None,
            metadata={
                "name": "Put_Citizenship_Status_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutCitizenshipStatusOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutCitizenshipStatusOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutCollectiveAgreementOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutCollectiveAgreementOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_collective_agreement_response: Optional[PutCollectiveAgreementResponse] = field(
            default=None,
            metadata={
                "name": "Put_Collective_Agreement_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutCollectiveAgreementOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutCollectiveAgreementOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutEditNoticePeriodsEventOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutEditNoticePeriodsEventOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_edit_notice_periods_event_response: Optional[PutEditNoticePeriodsEventResponse] = field(
            default=None,
            metadata={
                "name": "Put_Edit_Notice_Periods_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutEditNoticePeriodsEventOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutEditNoticePeriodsEventOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutFseWorkerCategoryCriteriaOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutFseWorkerCategoryCriteriaOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_fse_worker_category_criteria_response: Optional[
            PutFseWorkerCategoryCriteriaResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_FSE_Worker_Category_Criteria_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutFseWorkerCategoryCriteriaOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutFseWorkerCategoryCriteriaOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutFunctionalityForStaffingTransactionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutFunctionalityForStaffingTransactionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_functionality_for_staffing_transactions_response: Optional[
            PutFunctionalityForStaffingTransactionsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Functionality_for_Staffing_Transactions_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutFunctionalityForStaffingTransactionsOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutFunctionalityForStaffingTransactionsOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutHireEventProposedWorkerIdInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutHireEventProposedWorkerIdInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutHireEventProposedWorkerIdInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_hire_event_proposed_worker_id_request: Optional[PutHireEventProposedWorkerIdRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Hire_Event_Proposed_Worker_ID_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutHireEventProposedWorkerIdOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutHireEventProposedWorkerIdOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_hire_event_proposed_worker_id_response: Optional[
            PutHireEventProposedWorkerIdResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Hire_Event_Proposed_Worker_ID_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutHireEventProposedWorkerIdOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutHireEventProposedWorkerIdOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutJobClassificationGroupOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobClassificationGroupOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_classification_group_response: Optional[PutJobClassificationGroupResponse] = field(
            default=None,
            metadata={
                "name": "Put_Job_Classification_Group_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutJobClassificationGroupOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutJobClassificationGroupOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutJobFamilyGroupOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobFamilyGroupOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_family_group_response: Optional[PutJobFamilyGroupResponse] = field(
            default=None,
            metadata={
                "name": "Put_Job_Family_Group_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutJobFamilyGroupOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutJobFamilyGroupOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutJobFamilyOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobFamilyOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_family_response: Optional[PutJobFamilyResponse] = field(
            default=None,
            metadata={
                "name": "Put_Job_Family_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutJobFamilyOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutJobFamilyOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutJobOverlapRoutingExclusionRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobOverlapRoutingExclusionRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_overlap_routing_exclusion_rule_response: Optional[
            PutJobOverlapRoutingExclusionRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Job_Overlap_Routing_Exclusion_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutJobOverlapRoutingExclusionRuleOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutJobOverlapRoutingExclusionRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutLegalAuthorityOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutLegalAuthorityOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_legal_authority_response: Optional[PutLegalAuthorityResponse] = field(
            default=None,
            metadata={
                "name": "Put_Legal_Authority_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutLegalAuthorityOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutLegalAuthorityOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutMaintainEmployeeContractRulesForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainEmployeeContractRulesForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_employee_contract_rules_for_country_response: Optional[
            PutMaintainEmployeeContractRulesForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Employee_Contract_Rules_For_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortPutMaintainEmployeeContractRulesForCountryOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutMaintainEmployeeContractRulesForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutMaintainJobOverlapRoutingExclusionRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainJobOverlapRoutingExclusionRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_job_overlap_routing_exclusion_rule_response: Optional[
            PutMaintainJobOverlapRoutingExclusionRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Job_Overlap_Routing_Exclusion_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortPutMaintainJobOverlapRoutingExclusionRuleOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutMaintainJobOverlapRoutingExclusionRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutMaintainNoticePeriodsForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainNoticePeriodsForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_notice_periods_for_country_response: Optional[
            PutMaintainNoticePeriodsForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Notice_Periods_for_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutMaintainNoticePeriodsForCountryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutMaintainNoticePeriodsForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutNatureOfActionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutNatureOfActionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_nature_of_action_response: Optional[PutNatureOfActionResponse] = field(
            default=None,
            metadata={
                "name": "Put_Nature_of_Action_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutNatureOfActionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutNatureOfActionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutNoticePeriodEligibilityRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutNoticePeriodEligibilityRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_notice_period_eligibility_rule_response: Optional[
            PutNoticePeriodEligibilityRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Notice_Period_Eligibility_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutNoticePeriodEligibilityRuleOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutNoticePeriodEligibilityRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutPersonnelActionRequestStatusOnMassActionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutPersonnelActionRequestStatusOnMassActionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutPersonnelActionRequestStatusOnMassActionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_personnel_action_request_status_on_mass_action_request: Optional[
            PutPersonnelActionRequestStatusOnMassActionRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Personnel_Action_Request_Status_on_Mass_Action_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutPersonnelActionRequestStatusOnMassActionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutPersonnelActionRequestStatusOnMassActionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_personnel_action_request_status_on_mass_action_response: Optional[
            PutPersonnelActionRequestStatusOnMassActionResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Personnel_Action_Request_Status_on_Mass_Action_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortPutPersonnelActionRequestStatusOnMassActionOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutPersonnelActionRequestStatusOnMassActionOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutProbationPeriodOutcomeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutProbationPeriodOutcomeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_probation_period_outcome_response: Optional[PutProbationPeriodOutcomeResponse] = field(
            default=None,
            metadata={
                "name": "Put_Probation_Period_Outcome_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutProbationPeriodOutcomeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutProbationPeriodOutcomeOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutProbationPeriodOutcomesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutProbationPeriodOutcomesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_probation_period_outcomes_response: Optional[PutProbationPeriodOutcomesResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Probation_Period_Outcomes_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortPutProbationPeriodOutcomesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutProbationPeriodOutcomesOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutRemarkOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutRemarkOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_remark_response: Optional[PutRemarkResponse] = field(
            default=None,
            metadata={
                "name": "Put_Remark_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutRemarkOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutRemarkOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutRemoveMatrixOrganizationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutRemoveMatrixOrganizationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_remove_matrix_organization_response: Optional[PutRemoveMatrixOrganizationResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Remove_Matrix_Organization_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortPutRemoveMatrixOrganizationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutRemoveMatrixOrganizationOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutStaffingFieldDefaultsConditionRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStaffingFieldDefaultsConditionRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_staffing_field_defaults_condition_rules_response: Optional[
            PutStaffingFieldDefaultsConditionRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Staffing_Field_Defaults_Condition_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutStaffingFieldDefaultsConditionRulesOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutStaffingFieldDefaultsConditionRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutStaffingFieldDefaultsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStaffingFieldDefaultsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_staffing_field_defaults_response: Optional[PutStaffingFieldDefaultsResponse] = field(
            default=None,
            metadata={
                "name": "Put_Staffing_Field_Defaults_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutStaffingFieldDefaultsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutStaffingFieldDefaultsOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutStudentEmploymentEligibilityRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStudentEmploymentEligibilityRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_student_employment_eligibility_rule_response: Optional[
            PutStudentEmploymentEligibilityRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Student_Employment_Eligibility_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutStudentEmploymentEligibilityRuleOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutStudentEmploymentEligibilityRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutStudentEmploymentEligibilityStatusInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStudentEmploymentEligibilityStatusInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutStudentEmploymentEligibilityStatusInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_student_employment_eligibility_status_request: Optional[
            PutStudentEmploymentEligibilityStatusRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Student_Employment_Eligibility_Status_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutStudentEmploymentEligibilityStatusOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStudentEmploymentEligibilityStatusOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_student_employment_eligibility_status_response: Optional[
            PutStudentEmploymentEligibilityStatusResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Student_Employment_Eligibility_Status_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutStudentEmploymentEligibilityStatusOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutStudentEmploymentEligibilityStatusOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutWorkerDocumentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutWorkerDocumentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_worker_document_response: Optional[PutWorkerDocumentResponse] = field(
            default=None,
            metadata={
                "name": "Put_Worker_Document_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutWorkerDocumentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutWorkerDocumentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortRemoveRetireeStatusOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortRemoveRetireeStatusOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        remove_retiree_status_response: Optional[RemoveRetireeStatusResponse] = field(
            default=None,
            metadata={
                "name": "Remove_Retiree_Status_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortRemoveRetireeStatusOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortRemoveRetireeStatusOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortSetHiringRestrictionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortSetHiringRestrictionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        set_hiring_restrictions_response: Optional[SetHiringRestrictionsResponse] = field(
            default=None,
            metadata={
                "name": "Set_Hiring_Restrictions_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortSetHiringRestrictionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortSetHiringRestrictionsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortStartInternationalAssignmentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortStartInternationalAssignmentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        start_international_assignment_response: Optional[StartInternationalAssignmentResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Start_International_Assignment_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortStartInternationalAssignmentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortStartInternationalAssignmentOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortTerminateEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortTerminateEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        terminate_employee_event_response: Optional[TerminateEmployeeEventResponse] = field(
            default=None,
            metadata={
                "name": "Terminate_Employee_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortTerminateEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortTerminateEmployeeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class AddFlexibleWorkArrangementSubBusinessProcessType:
    """Wrapper for the Request Flexible Work Arrangement sub business process."""

    class Meta:
        name = "Add_Flexible_Work_Arrangement_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_flexible_work_arrangement_sub_process_event_data: Optional[
        AddFlexibleWorkArrangementSubProcessEventDataType
    ] = field(
        default=None,
        metadata={
            "name": "Add_Flexible_Work_Arrangement_Sub_Process_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddRetireeStatusRequestType:
    """This web service operation is designed to add a terminated worker as a retiree into a retiree
    organization using the Add Retiree Status business process."""

    class Meta:
        name = "Add_Retiree_Status_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_retiree_status_data: Optional[AddRetireeStatusDataType] = field(
        default=None,
        metadata={
            "name": "Add_Retiree_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddRetireeStatusSubBusinessProcessType:
    """
    Element that contains details for invoking Add Retiree Status as sub process.

    Attributes:
        business_sub_process_parameters: Business Process Sub Parameters
        add_retiree_status_details: Contains Add Retiree Status details for a worker.
    """

    class Meta:
        name = "Add_Retiree_Status_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_retiree_status_details: Optional[AddRetireeStatusSubProcessDetailsType] = field(
        default=None,
        metadata={
            "name": "Add_Retiree_Status_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AdditionalNameDataType:
    """
    Contains the additional names for a person, other than their legal and preferred names.

    Additional names are not valid for applicants.

    Attributes:
        name_detail_data: Contains the components of a name, such as the First Name and Last Name.
        name_type_reference: The type of Additional Name that the name is.
    """

    class Meta:
        name = "Additional_Name_DataType"
        target_namespace = "urn:com.workday/bsvc"

    name_detail_data: Optional[PersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Name_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    name_type_reference: Optional[AdditionalNameTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Name_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddressInformationDataType:
    """
    Address information.

    Attributes:
        country_reference: Country for the address.
        last_modified: The moment when the address was last modified.
        address_line_data
        municipality: City part of the address.
        country_city_reference: Country city for the address.
        submunicipality_data
        country_region_reference: The region part of the address. Typically this contains the
            state/province information.
        country_region_descriptor: The region part of the address. Typically this contains the
            state/province information.
        subregion_data
        postal_code: The postal code part of the address.
        usage_data: Encapsulating element for all Communication Method Usage data.
        number_of_days: Tracks the number of days an employee works from home per week.
        municipality_local: City in local script part of the address.
        address_reference: The address Reference ID.
        address_id: New ID value used in address updates. The ID cannot already be in use by another
            address.
        formatted_address: Returns the formatted address in the format specified for the country.
            This data is not used for inbound requests and any data provided in this element will be
            ignored.
        address_format_type: The format type of the address.
        defaulted_business_site_address: Set to 1 if the address is a defaulted location address. If
            this value is 1, this address will not be processed for inbound web services.
        delete: Set this flag to true in order to delete the referenced address. If this flag is
            set, the Reference ID field becomes required, and all other address fields that would
            otherwise be required will be optional and meaningless.
        do_not_replace_all: This flag controls whether or not existing non-primary address data will
            be replaced. A value of true means only the referenced address will be updated, or
            created if it does not exist or no reference was provided. This behavior is used if the
            flag is set to true for ANY address in the request.
        effective_date: Effective date of address.
    """

    class Meta:
        name = "Address_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_modified: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Last_Modified",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    address_line_data: list[AddressLineInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Address_Line_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    municipality: Optional[str] = field(
        default=None,
        metadata={
            "name": "Municipality",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_city_reference: Optional[CountryCityObjectType] = field(
        default=None,
        metadata={
            "name": "Country_City_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    submunicipality_data: list[SubmunicipalityInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Submunicipality_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_region_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Country_Region_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    subregion_data: list[SubregionInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Subregion_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    postal_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Postal_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    usage_data: list[CommunicationMethodUsageInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Usage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_days: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Days",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 1,
            "fraction_digits": 0,
        },
    )
    municipality_local: Optional[str] = field(
        default=None,
        metadata={
            "name": "Municipality_Local",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    address_reference: Optional[AddressReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Address_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    address_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    formatted_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Formatted_Address",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    address_format_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address_Format_Type",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    defaulted_business_site_address: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Defaulted_Business_Site_Address",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEmployeeCollectiveAgreementSubDataType:
    """
    Wrapper element for Assign Employee Collective Agreement event used as a sub bp.

    Attributes:
        collective_agreement_reference: The Collective Agreement ID.
        collective_agreement_review_date: The collective agreement review date.
        factor_options: Wrapper for collective agreement factors and factor options.
    """

    class Meta:
        name = "Assign_Employee_Collective_Agreement_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_reference: Optional[CollectiveAgreementObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    collective_agreement_review_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Review_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    factor_options: Optional[CollectiveAgreementFactorOptionsDataType] = field(
        default=None,
        metadata={
            "name": "Factor_Options",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEstablishmentSubBusinessProcessType:
    """Wrapper to hold the business process configuration and data for Assign Establishment sub
    business process."""

    class Meta:
        name = "Assign_Establishment_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_establishment_data: Optional[AssignEstablishmentSubProcessEventDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Establishment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignMatrixOrganizationBusinessProcessDataType:
    """
    Worker, position, and matrix organization data.

    Attributes:
        worker_reference: The worker you're assigning to a matrix organization.
        position_matrix_organization_data: Worker position and matrix organization information
    """

    class Meta:
        name = "Assign_Matrix_Organization_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_matrix_organization_data: Optional[PositionMatrixOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Position_Matrix_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AssignMatrixOrganizationSubBusinessProcessType:
    """
    Encapsulates the Assign Matrix Organization sub business process.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        assign_matrix_organization_data: Contains the assignment of a matrix organization to a
            worker/position.
    """

    class Meta:
        name = "Assign_Matrix_Organization_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_data: Optional[AssignMatrixOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationRolesEventDataType:
    """
    Wrapper for Organization Role Assignment Data.

    Includes Role Assignments.

    Attributes:
        role_assignee_reference: The Position that is the subject of this event, used for business
            process definition selection and routing. Regardless of value specified, role assignee
            will be the Position_Reference specified in 'Change_Job_Data' subelement
        effective_date: Date the Role Assignments should take effect. Defaults to the current date
            if not provided.
        role_assignment
    """

    class Meta:
        name = "Assign_Organization_Roles_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    role_assignee_reference: Optional[RoleeObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assignee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    role_assignment: list[RoleAssignmentType] = field(
        default_factory=list,
        metadata={
            "name": "Role_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignPayGroupSubBusinessProcessType:
    """
    Wrapper element for Assign Pay Group sub business process.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        assign_pay_group_data: Wrapper element for Assign Pay Group business process
    """

    class Meta:
        name = "Assign_Pay_Group_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_data: Optional[AssignPayGroupDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignPayGroupForPositionRestrictionsSubBusinessProcessType:
    """
    Wrapper element for the Assign Pay Group to Position Restriction sub business process.

    Attributes:
        business_sub_process_parameters
        assign_pay_group_data: Contains the Pay Group and Event Effective Date required to Assign
            Pay Group to Position Restriction.
    """

    class Meta:
        name = "Assign_Pay_Group_for_Position_Restrictions_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_data: Optional[AssignPayGroupForPositionRestrictionDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignRolesRequestType:
    """This operation will assign organization roles to one ore more workers or positions."""

    class Meta:
        name = "Assign_Roles_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles_event_data: Optional[AssignRolesEventDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignRolesSubProcessType:
    """
    Container for Organization Assign Roles and options for this sub-business process.

    If a worker is specified, position to which role is assigned is determined when event is
    submitted, not completed. If worker has multiple jobs as of specified effective date, role will
    be assigned to international assignment (IA) position with earliest start date, otherwise to
    worker's primary position. Specify a position if this behavior for worker is not desired.
    """

    class Meta:
        name = "Assign_Roles_Sub_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles_sub_process_data: Optional[AssignRolesSubProcessDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles_Sub_Process_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignSuperiorOrganizationSubProcessType:
    """
    Wrapper for  Assign Superior Organization.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        assign_superior_organization_data: Wrapper element for  Assign Superior Data Organization
    """

    class Meta:
        name = "Assign_Superior_Organization_Sub_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_superior_organization_data: Optional[AssignSuperiorOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Superior_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BeneficiaryType:
    """
    Encapsulating element containing all Beneficiary data.

    Attributes:
        beneficiary_reference: A reference to the beneficiary.
        beneficiary_data: Contains the details about the beneficiary.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    beneficiary_reference: Optional[BeneficiaryObjectType] = field(
        default=None,
        metadata={
            "name": "Beneficiary_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    beneficiary_data: Optional[BeneficiaryDataType] = field(
        default=None,
        metadata={
            "name": "Beneficiary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class CertificationAchievementType:
    """
    Wrapper element for Certification information.

    Attributes:
        certification_reference: The reference to the certification profile.
        certification_data: Wrapper element for Certification data.
    """

    class Meta:
        name = "Certification_AchievementType"
        target_namespace = "urn:com.workday/bsvc"

    certification_reference: Optional[CertificationQualificationObjectType] = field(
        default=None,
        metadata={
            "name": "Certification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_data: list[CertificationAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Certification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class CertificationProfileForJobType:
    """
    Contains the position's certification information.

    Attributes:
        certification_profile_reference: The reference to the certification profile.
        certification_profile_data
    """

    class Meta:
        name = "Certification_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    certification_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Certification_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_profile_data: Optional[CertificationProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Certification_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CertificationQualificationReplacementType:
    """
    Wrapper element for Certification Qualifications.

    Allows all certification qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing certification qualifications with those sent in the web service

    Attributes:
        certification_qualification_replacement_data
        delete: If Yes, deletes certification qualifications for the position restriction or job
            profile.
    """

    class Meta:
        name = "Certification_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    certification_qualification_replacement_data: list[
        CertificationQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Certification_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobResponse(ChangeJobResponseType):
    class Meta:
        name = "Change_Job_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangeLegalNameBusinessProcessDataType:
    """
    Wrapper element for the Legal Name Change business process web service.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID Reference for the Person that the Legal Name will be
            applied to.
        effective_date: The date the snapshot becomes effective.
        name_data
    """

    class Meta:
        name = "Change_Legal_Name_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name_data: Optional[PersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangePreferredNameBusinessProcessDataType:
    """
    Wrapper element for the Preferred Name Change business process web service.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID Reference for the Person that the Preferred Name will
            be applied to.
        use_legal_name_as_preferred_name: Flag indicating that the worker's legal name should be
            used as preferred. If this flag is set, Name Data is not allowed (otherwise it is
            required).
        name_data
    """

    class Meta:
        name = "Change_Preferred_Name_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_legal_name_as_preferred_name: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Legal_Name_As_Preferred_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name_data: Optional[PersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeWorkSpaceRequestType:
    """This web service allows updates to the work space location of a filled Position."""

    class Meta:
        name = "Change_Work_Space_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_space_change_event_data: Optional[WorkSpaceChangeEventDataType] = field(
        default=None,
        metadata={
            "name": "Work_Space_Change_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CheckPositionBudgetSubBusinessProcessType:
    """
    Top element used for Check Position Budget as a sub business process.

    Attributes:
        business_sub_process_parameters: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
    """

    class Meta:
        name = "Check_Position_Budget_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[FinancialsBusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CitizenshipStatusResponseDataType:
    """Response Data for the Citizenship Status."""

    class Meta:
        name = "Citizenship_Status_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    citizenship_status: list[CitizenshipStatusType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Status",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ClosePositionRequestType:
    """Wrapper element for the Close Position business process."""

    class Meta:
        name = "Close_Position_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    close_restriction_data: Optional[ClosePositionDataType] = field(
        default=None,
        metadata={
            "name": "Close_Restriction_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementType:
    """
    Collective Agreement Element.

    Attributes:
        collective_agreement_reference: Collective Agreement Instance
        collective_agreement_data: Collective Agreement Data Element
    """

    class Meta:
        name = "Collective_AgreementType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_reference: Optional[CollectiveAgreementObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_data: list[CollectiveAgreementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementDetailDataType:
    """
    Encapsulating element containing all Collective Agreement data.

    Attributes:
        assign_employee_collective_agreement_event_reference: Assign Employee Collective Agreement
            Event
        effective_date: The Effective Date of the Assign Employee Collective Agreement Event
        end_assignment_date: The Collective Agreement End Date is populated if there is an End
            Collective Agreement Event for the Collective Agreement that is being displayed or if
            the Collective Agreement has been ended
        collective_agreement_data: The Collective Agreement Snapshot Data.
    """

    class Meta:
        name = "Collective_Agreement_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    assign_employee_collective_agreement_event_reference: Optional[UniqueIdentifierObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Assign_Employee_Collective_Agreement_Event_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_assignment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Assignment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_data: list[CollectiveAgreementSnapshotDataType] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationChangeDataType:
    """
    Data element that contains the compensation change information.

    Attributes:
        reason_reference: Reason for the compensation change. Use format: General_Event_Subcategory.
        override_compensation_basis_calculation: This field allows you to override the amount
            calculated for plan assignments for a worker managed by compensation basis.
        primary_compensation_basis: Sum of the employee's plan assignments as defined by their
            primary compensation basis.
        primary_compensation_basis_amount_change: Amount you can change the primary compensation
            basis for employees managed by basis total. Mutually exclusive from the percent.
        primary_compensation_basis_percent_change: Percent you can change the primary compensation
            basis for employees managed by a compensation basis. Mutually exclusive from the amount.
        compensation_guidelines_data: Data element containing the compensation guidelines for a
            compensation change.
        pay_plan_data: Encapsulating element containing all Salary or Hourly Plan Compensation data.
        unit_salary_plan_data: Encapsulating element containing all Unit Salary Plan Compensation
            data.
        allowance_plan_data: Encapsulating element containing all Allowance Plan Compensation data.
        unit_allowance_plan_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        bonus_plan_data: Encapsulating element containing all Bonus Plan Compensation data.
        merit_plan_data: Encapsulating element containing all Merit Plan Compensation data.
        commission_plan_data: Encapsulating element containing all Commission Plan Compensation
            data.
        stock_plan_data: Encapsulating element containing all Stock Plan Compensation data.
        remove_plan_data: Reference specific compensation plans assigned to the worker to be removed
            as part of this request.
        period_salary_plan_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        calculated_plan_data: Encapsulating element containing all Calculated Plan Compensation
            data.
    """

    class Meta:
        name = "Compensation_Change_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    override_compensation_basis_calculation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Override_Compensation_Basis_Calculation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    compensation_guidelines_data: Optional[CompensatableGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_data: Optional[ProposedAllowancePlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_allowance_plan_data: Optional[ProposedAllowanceUnitPlanAssignmentContainerDataType] = (
        field(
            default=None,
            metadata={
                "name": "Unit_Allowance_Plan_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_plan_data: list[RemoveCompensationPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Remove_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationDefaultDataType:
    """
    Data element that contains the compensation default information.

    If a section is to be provided, it must be provided fully as it will
    fully replace the current default compensation.

    Attributes:
        primary_compensation_basis: Sum of the employee's plan assignments as defined by their
            primary compensation basis.
        primary_compensation_basis_amount_change: Amount you can change the primary compensation
            basis for employees managed by basis total. Mutually exclusive from the percent.
        primary_compensation_basis_percent_change: Percent you can change the primary compensation
            basis for employees managed by a compensation basis. Mutually exclusive from the amount.
        guidelines_data: Data element containing the compensation guidelines for a compensation
            change.
        pay_plan_data: Encapsulating element containing all Salary or Hourly Plan Compensation data.
        unit_salary_plan_data: Encapsulating element containing all Unit Salary Plan Compensation
            data.
        allowance_plan_non_unit_based_data: Encapsulating element containing all Allowance Plan
            Compensation data.
        allowance_plan_unit_based_data: Encapsulating element containing all Unit Allowance Plan
            Compensation data.
        bonus_plan_data: Encapsulating element containing all Bonus Plan Compensation data.
        merit_plan_data: Encapsulating element containing all Merit Plan Compensation data.
        commission_plan_data: Encapsulating element containing all Commission Plan Compensation
            data.
        stock_plan_data: Encapsulating element containing all Stock Plan Compensation data.
        period_salary_plan_data: Encapsulating element containing all Period Salary Plan
            Compensation data.
        calculated_plan_data: Encapsulating element containing all Calculated Plan Compensation
            data.
    """

    class Meta:
        name = "Compensation_Default_DataType"
        target_namespace = "urn:com.workday/bsvc"

    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_amount_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Amount_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    primary_compensation_basis_percent_change: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis_Percent_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 21,
            "fraction_digits": 6,
        },
    )
    guidelines_data: Optional[CompensatableDefaultGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_non_unit_based_data: Optional[
        ProposedAllowancePlanAssignmentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Non-Unit_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_unit_based_data: Optional[
        ProposedAllowanceUnitPlanAssignmentContainerDataType
    ] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Unit_Based_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationProposedForEmploymentDataType:
    """
    Data element for the Propose Compensation for Hire business process.

    Attributes:
        primary_compensation_basis: Sum of the worker's plan assignments as defined by their primary
            compensation basis.
        compensation_guidelines_data
        pay_plan_data
        unit_salary_plan_data
        allowance_plan_data
        unit_allowance_plan_data
        bonus_plan_data
        merit_plan_data
        commission_plan_data
        stock_plan_data
        period_salary_plan_data
        calculated_plan_data
    """

    class Meta:
        name = "Compensation_Proposed_For_Employment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    compensation_guidelines_data: Optional[CompensatableGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanJobAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_data: Optional[ProposedAllowancePlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_allowance_plan_data: Optional[ProposedAllowanceUnitPlanAssignmentContainerDataType] = (
        field(
            default=None,
            metadata={
                "name": "Unit_Allowance_Plan_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CompensationProposedForPositionDataType:
    """
    Data element for the Propose Compensation for Transfer business process.

    Attributes:
        initialize_using_defaulting_logic: If true, Workday uses the default compensation on the
            position. If there is no default compensation on the position, Workday uses eligibility
            rules. Workday doesn’t populate compensation values if the worker is eligible for more
            than 1 package, grade, grade profile, or plan type. If true, the plan-specific Replace
            attribute doesn’t apply. When False, the resulting compensation is carried forward as is
            from the source position.
        employee_visibility_date: Date the employee can view their compensation change.  Employee
            Visibility Date must be enabled on the Edit Tenant Setup - HCM task.
        primary_compensation_basis: Sum of the worker's plan assignments as defined by their primary
            compensation basis.
        compensation_guidelines_data
        pay_plan_data
        unit_salary_plan_data
        allowance_plan_data
        unit_allowance_plan_data
        bonus_plan_data
        merit_plan_data
        commission_plan_data
        stock_plan_data
        period_salary_plan_data
        calculated_plan_data
    """

    class Meta:
        name = "Compensation_Proposed_For_Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    initialize_using_defaulting_logic: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Initialize_Using_Defaulting_Logic",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_visibility_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Employee_Visibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    compensation_guidelines_data: Optional[CompensatableGuidelinesDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_plan_data: Optional[ProposedBasePayPlanJobAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Pay_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: Optional[ProposedSalaryUnitPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_data: Optional[ProposedAllowancePlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_allowance_plan_data: Optional[ProposedAllowanceUnitPlanAssignmentContainerDataType] = (
        field(
            default=None,
            metadata={
                "name": "Unit_Allowance_Plan_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    bonus_plan_data: Optional[ProposedBonusPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: Optional[ProposedMeritPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: Optional[ProposedCommissionPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: Optional[ProposedStockPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: Optional[ProposedPeriodSalaryPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_data: Optional[ProposedCalculatedPlanAssignmentContainerDataType] = field(
        default=None,
        metadata={
            "name": "Calculated_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ConditionRuleDataWwstype:
    """
    Wrapper containing data for Condition Rule.

    Attributes:
        condition_rule_id: Text value for reference ID for Condition Rule.
        rule_description: Text description of Condition Rule.
        comment: Text comment for Condition Rule.
        condition_rule_category_reference: Categories for Condition Rule.
        condition_item_data: Data for each Condition Rule
        countries_reference: Countries for Condition Rule
    """

    class Meta:
        name = "Condition_Rule_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    rule_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Rule_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    condition_rule_category_reference: list[ConditionRuleCategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Rule_Category_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    condition_item_data: list[ConditionItemDataWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Item_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    countries_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Countries_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContractContingentWorkerResponse(ContractContingentWorkerResponseType):
    class Meta:
        name = "Contract_Contingent_Worker_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CorrectedOrRescindedTransactionDataType:
    """Transaction Data for an event that has been rescinded or corrected."""

    class Meta:
        name = "Corrected_Or_Rescinded_Transaction_DataType"
        target_namespace = "urn:com.workday/bsvc"

    main_transaction_data: list[MainTransactionLogEntryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Main_Transaction_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    correction_or_rescind_data: list[TransactionLogRescindAndCorrectEventDataType] = field(
        default_factory=list,
        metadata={
            "name": "Correction_Or_Rescind_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CostingAllocationIntervalDataType:
    """
    Specifies an allocation for a given date range.

    Attributes:
        costing_interval_update_key
        costing_override_id: A unique identifier for the Costing Allocation Interval within Workday.
            You can optionally submit this for a new instance, but If left blank Workday will
            automatically generate an appropriate ID.
        start_date: Start date for the allocation.
        end_date: End date for the allocation.
        costing_allocation_detail_data: Details of the allocation, (e.g., one or many sets of
            allocation dimensions with a specific distribution percentage).  Note that individual
            allocation details can not be edited because they do not have a discrete key - rather,
            the entire set of desired allocation details (totaling 100% distribution) must be
            submitted, which then replaces the existing details.
    """

    class Meta:
        name = "Costing_Allocation_Interval_DataType"
        target_namespace = "urn:com.workday/bsvc"

    costing_interval_update_key: list[CostingIntervalUpdateKeyType] = field(
        default_factory=list,
        metadata={
            "name": "Costing_Interval_Update_Key",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_override_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Costing_Override_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    costing_allocation_detail_data: list[CostingAllocationDetailReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Costing_Allocation_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateBenefitLifeEventSubBusinessProcessType:
    """
    Wrapper element for the Create Benefit Life Event sub business process.

    Attributes:
        business_sub_process_parameters
        create_benefit_life_event_data: Container for the data in the Create Benefit Life Event sub
            business process.
    """

    class Meta:
        name = "Create_Benefit_Life_Event_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_benefit_life_event_data: Optional[CreateBenefitLifeEventDataType] = field(
        default=None,
        metadata={
            "name": "Create_Benefit_Life_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateProvisioningEventSubBusinessProcessType:
    """
    Launch the create provisioning system.

    Uses the Create Provisioning System business process. This subprocess can be skipped, processed
    manually or processed automatically from the web service.
    """

    class Meta:
        name = "Create_Provisioning_Event_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateSubordinateSubBusinessProcessType:
    """
    Wrapper for the Create Subordinate sub process.

    Attributes:
        business_sub_process_parameters
        create_subordinate_event_data: Wrapper element for Create Subordinate sub process data
    """

    class Meta:
        name = "Create_Subordinate_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: list[BusinessSubProcessParametersType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_subordinate_event_data: list[CreateSubordinateEventDataType] = field(
        default_factory=list,
        metadata={
            "name": "Create_Subordinate_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreditableServiceChangeType:
    """
    Creditable Service Change.

    Attributes:
        creditable_service_change_data: Creditable Service Change Data
    """

    class Meta:
        name = "Creditable_Service_ChangeType"
        target_namespace = "urn:com.workday/bsvc"

    creditable_service_change_data: list[CreditableServiceChangeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Creditable_Service_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CustomIdentificationDataType:
    """
    Wrapper for Custom Identification Data.

    Includes Custom Identifiers.

    Attributes:
        custom_id: Wrapper element for all Custom Identifier Data.
        replace_all: If Replace All is set to True, a full sync is performed after you submit the
            web service. Set to False if you want to preserve the existing data and only add, edit,
            or remove specific reference ids. Note: If you leave this boolean value blank it
            defaults to True to preserve the existing Replace All functionality in older versions of
            this web service for web service users depending on the default behavior.
    """

    class Meta:
        name = "Custom_Identification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    custom_id: list[CustomIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Custom_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DeleteWorkerDocumentRequest(DeleteWorkerDocumentRequestType):
    class Meta:
        name = "Delete_Worker_Document_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class DisabilityInformationDataType:
    """
    Wrapper element for all Disability Status data for the worker.

    Attributes:
        disability_status_information_data
        replace_all: When this flag is set to false, existing Disability data for the Worker will be
            preserved. When true, it causes the web service to replace all Disability data for the
            Worker with the information in the request. (This is the default behavior when the
            entire tag is omitted.)
    """

    class Meta:
        name = "Disability_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_status_information_data: list[DisabilityStatusInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Disability_Status_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisabilityInformationDataForRelatedPersonType:
    """
    Wrapper element for all Disability Status data for the Dependent.

    Attributes:
        replace_all: When this flag is set to false, existing disability data for the worker will be
            preserved. When true
        disability_status_information_data
    """

    class Meta:
        name = "Disability_Information_Data_for_Related_PersonType"
        target_namespace = "urn:com.workday/bsvc"

    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_status_information_data: list[
        DisabilityStatusInformationDataForRelatedPersonType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Disability_Status_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditAssignPositionOrganizationSubBusinessProcessType:
    """
    Wrapper element for the Assign Organizations to Position sub business process.

    If this element is submitted (Auto or Manual) as part of a Staffing
    event and the Position_Organization_Assignment  wrapper is not
    submitted, then the position's organization assignments will default
    from the supervisory organization.

    Attributes:
        business_sub_process_parameters
        position_organization_assignments_data: Organization Assignments to a filled Position. The
            existing organization assignment will be retained if the element is not submitted.
    """

    class Meta:
        name = "Edit_Assign_Position_Organization_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_organization_assignments_data: Optional[AssignPositionOrganizationEventDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_Organization_Assignments_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class EditBackgroundCheckSubBusinessProcessType:
    """Wrapper for the Edit Background Check sub business process that is part of the Hire and Edit
    Position business processes."""

    class Meta:
        name = "Edit_Background_Check_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_background_check_data: Optional[EditBackgroundCheckDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Background_Check_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditCreditableServiceRequestType:
    """This web service operation allows updates to the creditable service for an employee."""

    class Meta:
        name = "Edit_Creditable_Service_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    creditable_service_change_data: Optional[CreditableServiceChangeDataType] = field(
        default=None,
        metadata={
            "name": "Creditable_Service_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditCreditableServiceResponse(EditCreditableServiceResponseType):
    class Meta:
        name = "Edit_Creditable_Service_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditCreditableServiceSubBusinessProcessType:
    """Wrapper element for the Edit Creditable Service Sub Business Process."""

    class Meta:
        name = "Edit_Creditable_Service_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    creditable_service_data: list[CreditableServiceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Creditable_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditEmployeeContractAdditionalDataRequestType:
    """
    Allows updating of effective dated custom objects for an Employee Contract.

    When updating custom objects that allow multiple instances, data for existing instances must
    appear in the request, otherwise it will be removed.
    """

    class Meta:
        name = "Edit_Employee_Contract_Additional_Data_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_custom_object_data: list[EmployeeContractCustomObjectDataType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Contract_Custom_Object_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditNoticePeriodsDataType:
    """
    Contains Notice Period Data.

    Attributes:
        employer_notice_period_data: Employer Notice Period Data
        employee_notice_period_data: Employee notice period data.
    """

    class Meta:
        name = "Edit_Notice_Periods_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employer_notice_period_data: Optional[EmployerNoticePeriodDataType] = field(
        default=None,
        metadata={
            "name": "Employer_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_notice_period_data: Optional[EmployeeNoticePeriodDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionEventDataType:
    """
    Wrapper element for the Edit Position Event.

    Attributes:
        position_change_reason_reference: The reason for the position change.
        filled_position_edit_details_data: Container for the details of a filled position for either
            an employee or a contingent worker.
    """

    class Meta:
        name = "Edit_Position_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_change_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Change_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    filled_position_edit_details_data: Optional[FilledPositionEditDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Filled_Position_Edit_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EditPositionEventResponse(EditPositionEventResponseType):
    class Meta:
        name = "Edit_Position_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditPositionRestrictionsAdditionalDataRequestType:
    """
    Allows updating of effective-dated custom objects for position restrictions.

    When updating custom objects that allow multiple instances, data for existing instances must
    appear in the request, otherwise it will be removed.
    """

    class Meta:
        name = "Edit_Position_Restrictions_Additional_Data_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restrictions_custom_object_data: Optional[PositionRestrictionsCustomObjectDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_Restrictions_Custom_Object_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditServiceDatesRequestType:
    """This web service operation allows updates to the service dates for a worker."""

    class Meta:
        name = "Edit_Service_Dates_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_service_dates_data: Optional[EditServiceDatesBusinessProcessDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditServiceDatesSubBusinessProcessType:
    """
    This web service operation allows updates to the service dates for a worker.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        edit_service_dates_event_data
    """

    class Meta:
        name = "Edit_Service_Dates_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_service_dates_event_data: Optional[EditServiceDatesEventDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditWorkerAdditionalDataRequestType:
    """
    Allows updating of effective dated custom objects for a worker.

    When updating custom objects that allow multiple instances, data for existing instances must
    appear in the request, otherwise it will be removed.
    """

    class Meta:
        name = "Edit_Worker_Additional_Data_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_custom_object_data: Optional[WorkerCustomObjectDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Custom_Object_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EducationType:
    """
    Wrapper element for Education information.

    Attributes:
        education_reference: The reference to the education profile.
        education_data
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    education_reference: Optional[EducationQualificationObjectType] = field(
        default=None,
        metadata={
            "name": "Education_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education_data: list[EducationAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Education_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmailAddressInformationDataType:
    """
    Email Address Information.

    Attributes:
        email_address: Email Address Information
        email_comment: Email comments.
        usage_data: Encapsulating element for all Communication Method Usage data.
        email_reference: The email Reference ID.
        id: New ID value used in email address updates. The ID cannot already be in use by another
            email address.
        delete: Set this flag to true in order to delete the referenced email. If this flag is set,
            the Reference ID field becomes required, and all other email fields that would otherwise
            be required will be optional and meaningless.
        do_not_replace_all: This flag controls whether or not existing non-primary email address
            data will be replaced. A value of true means only the referenced email address will be
            updated, or created if it does not exist or no reference was provided. This behavior is
            used if the flag is set to true for ANY email address in the request.
    """

    class Meta:
        name = "Email_Address_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    email_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Email_Address",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    email_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Email_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    usage_data: list[CommunicationMethodUsageInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Usage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    email_reference: Optional[EmailReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Email_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeCompensationDetailDataType:
    """
    Encapsulating element containing all Compesation Detail data.

    Attributes:
        primary_compensation_basis: Proposed Compensation Amount
        compensation_package_reference
        compensation_grade_reference
        compensation_grade_profile_reference
        compensation_step_reference
        salary_plan_for_compensation_data
        hourly_plan_for_compensation_data
        unit_salary_plan_for_compensation_data
        allowance_plan_for_compensation_data
        unit_allowance_plan_for_compensation_data
        bonus_plan_for_compensation_data
        merit_plan_for_compensation_data
        commission_plan_for_compensation_data
        stock_plan_for_compensation_data
        period_salary_plan_for_compensation_data
        calculated_plan_for_compensation_data: Compensation Calculated Plan
    """

    class Meta:
        name = "Employee_Compensation_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    primary_compensation_basis: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Primary_Compensation_Basis",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 26,
            "fraction_digits": 6,
        },
    )
    compensation_package_reference: Optional[CompensationPackageReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Package_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_grade_reference: Optional[CompensationGradeReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    compensation_grade_profile_reference: Optional[CompensationGradeProfileReferenceType] = field(
        default=None,
        metadata={
            "name": "Compensation_Grade_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_step_reference: Optional[CompensationStepReferenceDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Step_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_plan_for_compensation_data: list[EmployeeCompensationSalaryPlanAssignmentDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Salary_Plan_for_Compensation_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    hourly_plan_for_compensation_data: list[EmployeeCompensationHourlyPlanAssignmentDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Hourly_Plan_for_Compensation_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    unit_salary_plan_for_compensation_data: list[
        EmployeeCompensationSalaryUnitPlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Salary_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_for_compensation_data: list[
        EmployeeCompensationAllowancePlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_allowance_plan_for_compensation_data: list[
        EmployeeCompensationAllowanceUnitPlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Allowance_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plan_for_compensation_data: list[EmployeeCompensationBonusPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_for_compensation_data: list[EmployeeCompensationMeritPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Merit_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_for_compensation_data: list[
        EmployeeCompensationCommissionPlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Commission_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_for_compensation_data: list[EmployeeCompensationStockPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_for_compensation_data: list[
        EmployeeCompensationPeriodSalaryPlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Period_Salary_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    calculated_plan_for_compensation_data: list[
        EmployeeCompensationCalculatedPlanAssignmentDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Calculated_Plan_for_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeContractRulesForCountryGetDataType:
    """
    Employee Contract Rules For Country Get Data Element.

    Attributes:
        maintain_employee_contract_rules_for_country_reference: Employee Contract Rules Table
            References
        maintain_employee_contract_rules_for_country_data: Employee Contract Rules For Country
            Details
    """

    class Meta:
        name = "Employee_Contract_Rules_For_Country_Get_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_employee_contract_rules_for_country_reference: Optional[
        EmployeeContractRulesTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contract_Rules_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contract_rules_for_country_data: Optional[
        EmployeeContractRulesForCountryDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contract_Rules_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeReviewDetailsDataType:
    """
    Contains the information about the review for the employee.

    Attributes:
        manager_reference: The manager for this review.
        review_type_reference: The type of review.
        review_template_reference: The review template that was used as a basis for the review.
        review_initiated_date: The date the review was started (i.e. first created).
        period_start_date: The date the review period began.
        period_end_date: The date the review period ended.
        self_evaluation_data: Contains the evaluation information that was filled out by the
            employee.
        manager_evaluation_data: Contains the evaluation information that was filled out by the
            manager.
    """

    class Meta:
        name = "Employee_Review_Details_DataType"
        target_namespace = "urn:com.workday/bsvc"

    manager_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Manager_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_type_reference: Optional[ReviewTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Review_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_template_reference: Optional[EmployeeReviewTemplateObjectType] = field(
        default=None,
        metadata={
            "name": "Review_Template_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_initiated_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Review_Initiated_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Period_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    self_evaluation_data: Optional[SelfEvaluationDetailDataType] = field(
        default=None,
        metadata={
            "name": "Self_Evaluation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manager_evaluation_data: Optional[ManagerEvaluationDetailDataType] = field(
        default=None,
        metadata={
            "name": "Manager_Evaluation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndAcademicAppointmentSubBusinessProcessType:
    """Wrapper for the End Academic Appointment sub business process that is part of the Terminate
    Employee business processes."""

    class Meta:
        name = "End_Academic_Appointment_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_academic_appointment_data: Optional[EndAcademicAppointmentDataType] = field(
        default=None,
        metadata={
            "name": "End_Academic_Appointment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndAdditionalJobSubBusinessProcessType:
    """
    Wrapper for the End Additional Job sub business process that is part of the Terminate Employee
    business processes.

    Attributes:
        business_sub_process_parameters
        end_additional_job_sub_data: Web service for the End Additional Job as a sub process.
    """

    class Meta:
        name = "End_Additional_Job_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_additional_job_sub_data: Optional[EndAdditionalJobSubDataType] = field(
        default=None,
        metadata={
            "name": "End_Additional_Job_Sub_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndCollectiveAgreementAssignmentSubBusinessProcessType:
    """Wrapper element for the End Collective Agreement sub business process."""

    class Meta:
        name = "End_Collective_Agreement_Assignment_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_collective_agreement_assignment_data: Optional[EndCollectiveAgreementAssignmentDataType] = (
        field(
            default=None,
            metadata={
                "name": "End_Collective_Agreement_Assignment_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class EndPayrollInputsSubBusinessProcessType:
    """Ends ongoing payroll inputs for terminated workers."""

    class Meta:
        name = "End_Payroll_Inputs_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventTargetTransactionLogEntryDataType:
    """Encapsulating element containing all transaction log entries."""

    class Meta:
        name = "Event_Target_Transaction_Log_Entry_DataType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_entry: list[TransactionLogEntryType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Log_Entry",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExtendedEmployeeContractsDataType:
    """
    Contains the extended employee's contract information.

    Attributes:
        extended_employee_contract_data: Contains extended data for an employee contract.
    """

    class Meta:
        name = "Extended_Employee_Contracts_DataType"
        target_namespace = "urn:com.workday/bsvc"

    extended_employee_contract_data: list[ExtendedEmployeeContractDataType] = field(
        default_factory=list,
        metadata={
            "name": "Extended_Employee_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FseWorkerCategoryCriteriaResponseDataType:
    """
    The element containing all necessary information to retrieve FSE Worker Category Criteria for
    Worker Category Definition.

    Attributes:
        fse_worker_category_criteria: The element containing all necessary information to retrieve
            FSE Worker Category Criteria for Worker Category Definition
    """

    class Meta:
        name = "FSE_Worker_Category_Criteria_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    fse_worker_category_criteria: list[FseWorkerCategoryCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "FSE_Worker_Category_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FreezePositionRequestType:
    """
    Wrapper element for the Freeze Position business process.

    Attributes:
        freeze_position_data: Wrapper element for the Freeze Position business process data
            including the position to close and the event data.
        business_process_parameters
        version
    """

    class Meta:
        name = "Freeze_Position_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    freeze_position_data: Optional[PositionGroupFreezeDataType] = field(
        default=None,
        metadata={
            "name": "Freeze_Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class FunctionalityForStaffingTransactionsResponseDataType:
    """
    Contains the data for Functionality for Staffing Transactions.

    Attributes:
        functionality_for_staffing_transactions: Contains the data for Functionality for Staffing
            Transactions.
    """

    class Meta:
        name = "Functionality_for_Staffing_Transactions_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    functionality_for_staffing_transactions: list[FunctionalityForStaffingTransactionsType] = field(
        default_factory=list,
        metadata={
            "name": "Functionality_for_Staffing_Transactions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenericDisabilityInformationDataType:
    """
    Wrapper element for all Disability Status data for the person.

    Attributes:
        disability_status_information_data
        replace_all: When this flag is set to false, existing disability data will be preserved.
            When true, it causes the web service to replace all disability data with the information
            in the request (this is the default behavior when the entire tag is omitted).
    """

    class Meta:
        name = "Generic_Disability_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disability_status_information_data: list[GenericDisabilityStatusInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Disability_Status_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GenericMilitaryInformationDataType:
    """
    Wrapper element for all Military Service data for the person.

    Attributes:
        military_service_information_data
        replace_all: When this flag is set to false, existing military data will be preserved. When
            true, it causes the web service to replace all military data with the information in the
            request (this is the default behavior when the entire tag is omitted).
    """

    class Meta:
        name = "Generic_Military_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    military_service_information_data: list[GenericMilitaryServiceInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Military_Service_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetApplicantsRequestType:
    """
    Wrapper element for Applicant Request.

    Attributes:
        request_references: Wrapper element  containing the list of applicants for which data is
            requested.
        request_criteria: Utilize the Request Criteria element to search for specific instance(s) of
            an Applicant.
        response_filter: Element Content containing Response Filter.
        response_group: Wrapper element containing the list of applicant information to be included
            in the response.
        version
    """

    class Meta:
        name = "Get_Applicants_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ApplicantRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ApplicantRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[ApplicantResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeGovernmentIdsRequest(GetChangeGovernmentIdsRequestType):
    class Meta:
        name = "Get_Change_Government_IDs_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangeLegalNameRequest(GetChangeLegalNameRequestType):
    class Meta:
        name = "Get_Change_Legal_Name_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangeLicensesRequest(GetChangeLicensesRequestType):
    class Meta:
        name = "Get_Change_Licenses_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangeOtherIdsRequest(GetChangeOtherIdsRequestType):
    class Meta:
        name = "Get_Change_Other_IDs_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangePassportsAndVisasRequest(GetChangePassportsAndVisasRequestType):
    class Meta:
        name = "Get_Change_Passports_and_Visas_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangePersonalInformationRequest(GetChangePersonalInformationRequestType):
    class Meta:
        name = "Get_Change_Personal_Information_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangePreferredNameRequest(GetChangePreferredNameRequestType):
    class Meta:
        name = "Get_Change_Preferred_Name_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCitizenshipStatusesRequest(GetCitizenshipStatusesRequestType):
    class Meta:
        name = "Get_Citizenship_Statuses_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCollectiveAgreementsRequest(GetCollectiveAgreementsRequestType):
    class Meta:
        name = "Get_Collective_Agreements_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCreditableServiceRequest(GetCreditableServiceRequestType):
    class Meta:
        name = "Get_Creditable_Service_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetFseWorkerCategoryCriteriasRequest(GetFseWorkerCategoryCriteriasRequestType):
    class Meta:
        name = "Get_FSE_Worker_Category_Criterias_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetFunctionalityForStaffingTransactionsRequest(
    GetFunctionalityForStaffingTransactionsRequestType
):
    class Meta:
        name = "Get_Functionality_for_Staffing_Transactions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetGlobalStaffingEligibilityRulesRequest(GetGlobalStaffingEligibilityRulesRequestType):
    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetGlobalStaffingEligibilityRulesWithoutDependenciesRequest(
    GetGlobalStaffingEligibilityRulesWithoutDependenciesRequestType
):
    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_Without_Dependencies_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobClassificationGroupsRequest(GetJobClassificationGroupsRequestType):
    class Meta:
        name = "Get_Job_Classification_Groups_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobFamiliesRequestType:
    """
    Request element for Get Job Families.

    Attributes:
        request_references: The Job Family reference(s) to be retrieved. Does not support job family
            groups.
        request_criteria
        response_filter
        response_group: Job Family Response Group which controls the type and amount of data
            returned.
        version
    """

    class Meta:
        name = "Get_Job_Families_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobFamilyRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[JobFamiliesRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobFamilyResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobFamilyGroupsRequest(GetJobFamilyGroupsRequestType):
    class Meta:
        name = "Get_Job_Family_Groups_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobOverlapRoutingExclusionRulesRequest(GetJobOverlapRoutingExclusionRulesRequestType):
    class Meta:
        name = "Get_Job_Overlap_Routing_Exclusion_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetLegalAuthoritiesRequest(GetLegalAuthoritiesRequestType):
    class Meta:
        name = "Get_Legal_Authorities_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainEmployeeContractRulesForCountryRequest(
    GetMaintainEmployeeContractRulesForCountryRequestType
):
    class Meta:
        name = "Get_Maintain_Employee_Contract_Rules_For_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainJobOverlapRoutingExclusionRuleRequest(
    GetMaintainJobOverlapRoutingExclusionRuleRequestType
):
    class Meta:
        name = "Get_Maintain_Job_Overlap_Routing_Exclusion_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainNoticePeriodsForCountryRequest(GetMaintainNoticePeriodsForCountryRequestType):
    class Meta:
        name = "Get_Maintain_Notice_Periods_For_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainProbationPeriodsForCountryRequest(
    GetMaintainProbationPeriodsForCountryRequestType
):
    class Meta:
        name = "Get_Maintain_Probation_Periods_For_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainWorkingTimeForCountryRequest(GetMaintainWorkingTimeForCountryRequestType):
    class Meta:
        name = "Get_Maintain_Working_Time_for_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNatureOfActionsRequestType:
    """Get Nature of Actions Request element."""

    class Meta:
        name = "Get_Nature_of_Actions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NatureOfActionsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodEligibilityRulesRequest(GetNoticePeriodEligibilityRulesRequestType):
    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodEligibilityRulesWithoutDependenciesRequest(
    GetNoticePeriodEligibilityRulesWithoutDependenciesRequestType
):
    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_Without_Dependencies_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodsForWorkerRequest(GetNoticePeriodsForWorkerRequestType):
    class Meta:
        name = "Get_Notice_Periods_for_Worker_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPersonnelActionRequestStatusOnMassActionRequest(
    GetPersonnelActionRequestStatusOnMassActionRequestType
):
    class Meta:
        name = "Get_Personnel_Action_Request_Status_on_Mass_Action_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPersonnelActionRequestStatusOnMassActionResponseType:
    """Get Personnel Action Request Status on Mass Action Response."""

    class Meta:
        name = "Get_Personnel_Action_Request_Status_on_Mass_Action_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ParMassActionRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ParMassActionResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodEligibilityRulesRequest(GetProbationPeriodEligibilityRulesRequestType):
    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodEligibilityRulesWithoutDependenciesRequest(
    GetProbationPeriodEligibilityRulesWithoutDependenciesRequestType
):
    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_Without_Dependencies_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodOutcomeRequest(GetProbationPeriodOutcomeRequestType):
    class Meta:
        name = "Get_Probation_Period_Outcome_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodOutcomesRequest(GetProbationPeriodOutcomesRequestType):
    class Meta:
        name = "Get_Probation_Period_Outcomes_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodsForWorkerResponseDataType:
    """Contains Probation Periods For Worker."""

    class Meta:
        name = "Get_Probation_Periods_For_Worker_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_periods_for_workers: list[ProbationPeriodsForWorkersType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Periods_For_Workers",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodsForWorkersRequest(GetProbationPeriodsForWorkersRequestType):
    class Meta:
        name = "Get_Probation_Periods_For_Workers_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetRemarksRequest(GetRemarksRequestType):
    class Meta:
        name = "Get_Remarks_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetRoleAssignmentsForRoleAssignersRequest(GetRoleAssignmentsForRoleAssignersRequestType):
    class Meta:
        name = "Get_Role_Assignments_For_Role_Assigners_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStaffingFieldDefaultsConditionRulesRequest(
    GetStaffingFieldDefaultsConditionRulesRequestType
):
    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStaffingFieldDefaultsConditionRulesWithoutDependenciesRequest(
    GetStaffingFieldDefaultsConditionRulesWithoutDependenciesRequestType
):
    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_without_Dependencies_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStaffingFieldDefaultsRequest(GetStaffingFieldDefaultsRequestType):
    class Meta:
        name = "Get_Staffing_Field_Defaults_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStudentEmploymentEligibilityDataRequest(GetStudentEmploymentEligibilityDataRequestType):
    class Meta:
        name = "Get_Student_Employment_Eligibility_Data_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStudentEmploymentEligibilityRuleSetRequest(
    GetStudentEmploymentEligibilityRuleSetRequestType
):
    class Meta:
        name = "Get_Student_Employment_Eligibility_Rule_Set_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStudentEmploymentEligibilityRulesRequest(GetStudentEmploymentEligibilityRulesRequestType):
    class Meta:
        name = "Get_Student_Employment_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetWorkerDocumentsRequest(GetWorkerDocumentsRequestType):
    class Meta:
        name = "Get_Worker_Documents_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetWorkingTimeEligibilityRulesRequest(GetWorkingTimeEligibilityRulesRequestType):
    class Meta:
        name = "Get_Working_Time_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GovernmentIdentificationDataType:
    """
    Wrapper for Government Identification Data.

    Includes National Identifiers and Government Identifiers.

    Attributes:
        national_id: Wrapper element for all National Identifier Data.
        government_id: Wrapper element for all Government Identifier Data.
        replace_all: If Replace All is set to True, a full sync is performed after you submit the
            web service. Set to False if you want to preserve the existing data and only add, edit,
            or remove specific reference ids. Note: If you leave this boolean value blank it
            defaults to True to preserve the existing Replace All functionality in older versions of
            this web service for web service users depending on the default behavior.
    """

    class Meta:
        name = "Government_Identification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    national_id: list[NationalIdtype] = field(
        default_factory=list,
        metadata={
            "name": "National_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    government_id: list[GovernmentIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Government_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HireEmployeeEventResponse(HireEmployeeEventResponseType):
    class Meta:
        name = "Hire_Employee_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class InstantMessengerInformationDataType:
    """
    Instant Messenger Address.

    Attributes:
        instant_messenger_address: Instant Messenger Address.
        instant_messenger_type_reference: Reference ID for the instant messenger type.
        instant_messenger_comment: Instant messenger comment.
        usage_data: Encapsulating element for all Communication Method Usage data.
        instant_messenger_reference: The Instant Messenger Reference
        id: New ID value used in instant messenger updates. The ID cannot already be in use by
            another instant messenger.
        delete: Set this flag to true in order to delete the referenced instant messenger. If this
            flag is set, the Reference ID field becomes required, and all other instant messenger
            fields that would otherwise be required will be optional and meaningless.
        do_not_replace_all: This flag controls whether or not existing non-primary instant messenger
            data will be replaced. A value of true means only the referenced instant messenger will
            be updated, or created if it does not exist or no reference was provided. This behavior
            is used if the flag is set to true for ANY instant messenger in the request.
    """

    class Meta:
        name = "Instant_Messenger_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    instant_messenger_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Instant_Messenger_Address",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    instant_messenger_type_reference: Optional[InstantMessengerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Instant_Messenger_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    instant_messenger_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Instant_Messenger_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    usage_data: list[CommunicationMethodUsageInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Usage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    instant_messenger_reference: Optional[InstantMessengerReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Instant_Messenger_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobClassificationGroupDataType:
    """
    Job Classification Group Data Element.

    Attributes:
        id: Job Classification Group ID
        effective_date: Effective Date. A new effective-dated organization name is automatically
            created if any attributes used for organization name are different as of specified
            effective date which include: Organization Name, Organization Code, and Include 'xx' in
            Name booleans.
        job_classification_group_name: The name of the Job Classification Group.
        global_setup_data_mapping_reference: Metadata value the job classification group maps to.
        location_reference: Location Reference.  Reference to a Country or Country Region.
        inactive: Inactive Flag.
        job_classification: Job Classification Element
    """

    class Meta:
        name = "Job_Classification_Group_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_group_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Group_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    global_setup_data_mapping_reference: Optional[GlobalSetupDataMappingObjectType] = field(
        default=None,
        metadata={
            "name": "Global_Setup_Data_Mapping_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: Optional[LocationContextObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification: list[JobClassificationType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyType:
    """
    Contains Job Family information.

    Attributes:
        job_family_reference: Reference element representing a unique instance of Job Family.
        job_family_data
    """

    class Meta:
        name = "Job_FamilyType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_data: Optional[JobFamilyDataType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyGroupJobFamilyDataType:
    """
    Info only data about a Job Family.

    Attributes:
        job_family_name: The name of the Job Family.
        job_family_summary: A summary description of the Job Family.
        inactive: Boolean attribute indicating if a Job Family/Job Family Group is Inactive or not.
            Inactive Job Families/Groups will not appear in prompts.
        job_profile_info_data: Optional, Information only, Job Profile data.  This data is
            optionally included here and cannot be updated.
    """

    class Meta:
        name = "Job_Family_Group_Job_Family_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Family_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Family_Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_info_data: list[JobProfileSummaryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Info_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageAchievementDataType:
    """
    Wrapper element for Language Achievement information.

    Attributes:
        language_reference: Language Reference
        remove_language: Used for inbound operations to indicate that the language should be removed
            for the person.  Will always return false for outbound operations.
        native_language: Used for inbound operations to indicate that the language is Native
            language for the person.
        language_ability
        assessed_on: Date of Assessment
        note: Assessment Comments
        assessed_by_worker_reference: Worker assessing the language
    """

    class Meta:
        name = "Language_Achievement_DataType"
        target_namespace = "urn:com.workday/bsvc"

    language_reference: Optional[LanguageObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_language: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Language",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    native_language: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Native_Language",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_ability: list[LanguageAbilityType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Ability",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessed_on: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Assessed_On",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessed_by_worker_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Assessed_by_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageProfileForJobType:
    """
    Contains the position's language information.

    Attributes:
        language_profile_reference: A unique identifier for the language profile.
        language_profile_data
    """

    class Meta:
        name = "Language_Profile_for_JobType"
        target_namespace = "urn:com.workday/bsvc"

    language_profile_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Language_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_profile_data: Optional[LanguageProfileForJobDataType] = field(
        default=None,
        metadata={
            "name": "Language_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LanguageQualificationReplacementType:
    """
    Wrapper element for Language Qualifications.

    Allows all language qualifications for a Job Profile or Position Restriction to be removed - or to replace all existing language qualifications with those sent in the web service.

    Attributes:
        language_qualification_replacement_data
        delete: If Yes, deletes all the default qualifications for the position restriction or job
            profile.
    """

    class Meta:
        name = "Language_Qualification_ReplacementType"
        target_namespace = "urn:com.workday/bsvc"

    language_qualification_replacement_data: list[
        LanguageQualificationProfileReplacementDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Language_Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LegalAuthorityType:
    """
    Legal Authority Element.

    Attributes:
        legal_authority_reference: A unique identifier used to reference a Legal Authority.
        legal_authority_data: Legal Authority Data Element.
    """

    class Meta:
        name = "Legal_AuthorityType"
        target_namespace = "urn:com.workday/bsvc"

    legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    legal_authority_data: Optional[LegalAuthorityDataType] = field(
        default=None,
        metadata={
            "name": "Legal_Authority_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LegalNameDataType:
    """
    Contains the legal name for a person.

    A person must name one and only one legal name.

    Attributes:
        name_detail_data: Contains the components of a name, such as the First Name and Last Name.
    """

    class Meta:
        name = "Legal_Name_DataType"
        target_namespace = "urn:com.workday/bsvc"

    name_detail_data: Optional[PersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Name_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class LicenseIdentificationDataType:
    """
    Wrapper for License Identification Data.

    Includes License Identifiers.

    Attributes:
        license_id
        replace_all: If Replace All is set to True, a full sync is performed after you submit the
            web service. Set to False if you want to preserve the existing data and only add, edit,
            or remove specific reference ids. Note: If you leave this boolean value blank it
            defaults to True to preserve the existing Replace All functionality in older versions of
            this web service for web service users depending on the default behavior.
    """

    class Meta:
        name = "License_Identification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    license_id: list[LicenseIdtype] = field(
        default_factory=list,
        metadata={
            "name": "License_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainEmployeeContractsRequestType:
    """Add or update employee contracts."""

    class Meta:
        name = "Maintain_Employee_Contracts_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_data: Optional[MaintainEmployeeContractsDataType] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainEmployeeContractsSubBusinessProcessType:
    """
    Wrapper element for the Maintain Employee Contracts sub business process.

    Attributes:
        business_sub_process_parameters
        maintain_employee_contracts_data: Container for the data in the Maintain Employee Contracts
            sub business process.
    """

    class Meta:
        name = "Maintain_Employee_Contracts_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_data: Optional[MaintainEmployeeContractsSubDataType] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainJobOverlapRoutingExclusionRuleResponseDataType:
    """Contains Job Overlap Routing Exclusion Rules data based on the request parameters."""

    class Meta:
        name = "Maintain_Job_Overlap_Routing_Exclusion_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_job_overlap_routing_exclusion_rule: list[
        MaintainJobOverlapRoutingExclusionRuleType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Job_Overlap_Routing_Exclusion_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainProbationPeriodsForCountryDataType:
    """
    Contains Maintain Probation Period for Country data.

    Attributes:
        country_reference: Country Reference
        probation_period_for_country_data: Probation Periods For Country Details
    """

    class Meta:
        name = "Maintain_Probation_Periods_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    probation_period_for_country_data: list[ProbationPeriodForCountryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainWorkingTimeForCountryDataType:
    """
    Maintain Working Time For Country Data.

    Attributes:
        maintain_working_time_for_country_reference: Working Time Default Eligibility Table
        maintain_working_time_for_country_data: Maintain Working Time For Country Data new
    """

    class Meta:
        name = "Maintain_Working_Time_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_working_time_for_country_reference: Optional[
        WorkingTimeDefaultingEligibilityTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Working_Time_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_working_time_for_country_data: Optional[
        WorkingTimeDefaultingEligibilityTableDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Working_Time_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManageEmployeeProbationPeriodSubDataType:
    """
    Details of the Probation Period being added to the Worker.

    Attributes:
        probation_period_reference: The Workday generated probation period ID.
        start_date: The Probation Period Start Date.
        end_date: The Probation Period End Date.
        probation_type_reference: The Probation Period Type ID, defined in the Maintain Employee
            Probation Period Types task.
        derive_probation_period_from_rule: Specifies if Workday derives the default probation period
            from the worker's probation period rule. If a probation period rule applies, any values
            in End Date or Length will not apply.
        length
        probation_reason_reference: The Probation Period Reason ID, defined in the Maintain Employee
            Probation Period Reasons task.
        extended_end_date: The Extended End Date of the probation period.
        probation_review: Details of Probation Period Review
        note: Comments / Note
    """

    class Meta:
        name = "Manage_Employee_Probation_Period_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_reference: Optional[EmployeeProbationPeriodObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_type_reference: Optional[EmployeeProbationPeriodTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    derive_probation_period_from_rule: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Derive_Probation_Period_from_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    length: Optional[ProbationPeriodLengthDataType] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_reason_reference: Optional[EmployeeProbationPeriodReasonObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    extended_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Extended_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_review: Optional[ProbationReviewDataType] = field(
        default=None,
        metadata={
            "name": "Probation_Review",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManageInstructorEligibilitySubBusinessProcessDataType:
    """
    Manage Instructor Eligibility Sub Business Process Data.

    Attributes:
        business_sub_process_parameters: Container for the processing options for sub-business
            processes within a business process. If no options are submitted (or the options are
            submitted as 'false') then the sub-business process is simply initiated as if it where
            submitted on-line with approvals, reviews, notifications and to-do's in place. If the
            Initiator is an Integration System User, any validations you configured on the
            Initiation step are ignored.
        instructor_eligibility_line_data
    """

    class Meta:
        name = "Manage_Instructor_Eligibility_Sub_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: list[BusinessSubProcessParametersType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    instructor_eligibility_line_data: list[InstructorEligibilityLineDataType] = field(
        default_factory=list,
        metadata={
            "name": "Instructor_Eligibility_Line_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManageUnionMembershipSubBusinessProcessType:
    """Wrapper for the Manage Union Membership sub business process that is part of staffing event
    business processes."""

    class Meta:
        name = "Manage_Union_Membership_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    union_member_data: Optional[UnionMemberDataType] = field(
        default=None,
        metadata={
            "name": "Union_Member_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MilitaryInformationDataType:
    """
    Wrapper element for all Military Service data for the worker.

    Attributes:
        military_service_information_data
        replace_all: When this flag is set to false, existing Military data for the Worker will be
            preserved. When true, it causes the web service to replace all Military data for the
            Worker with the information in the request. (This is the default behavior when the
            entire tag is omitted.)
    """

    class Meta:
        name = "Military_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    military_service_information_data: list[MilitaryServiceInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Military_Service_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MoveWorkersByOrganizationRequestType:
    """Business process for performing Move Workers (By Organization)."""

    class Meta:
        name = "Move_Workers_By_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    move_workers_by_organization_data: Optional[MoveWorkersByOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Move_Workers_By_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MoveWorkersByOrganizationRequestHvtype:
    """Business process for performing Move Workers (By Organization)."""

    class Meta:
        name = "Move_Workers_By_Organization_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    move_workers_by_organization_data: Optional[MoveWorkersByOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Move_Workers_By_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class NatureOfActionType:
    """
    Nature of Action element.

    Attributes:
        nature_of_action_reference: Unique identifier for the Nature of Action reference
        nature_of_action_series_reference: Unique identifier for the Nature of Action Series
            reference
        nature_of_action_data
    """

    class Meta:
        name = "Nature_of_ActionType"
        target_namespace = "urn:com.workday/bsvc"

    nature_of_action_reference: Optional[NatureOfActionObjectType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_series_reference: Optional[NatureOfActionSeriesObjectType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Series_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_data: Optional[NatureOfActionDataType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoShowRequestType:
    """
    Wrapper for No Show Web Service.

    Attributes:
        business_process_parameters
        no_show_employee_data: Wrapper for No Show Web Service.
        version
    """

    class Meta:
        name = "No_Show_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    no_show_employee_data: Optional[NoShowEmployeeDataType] = field(
        default=None,
        metadata={
            "name": "No_Show_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodDataForNoticePeriodTargetType:
    """
    Contains the employer/employee Notice Period response data specific to the Notice Period Target
    request and As Of Effective Date.

    Attributes:
        notice_period_target_reference: Notice Period Target Reference.
        location_reference: Primary location (for supervisory organizations) is effective dated.
        employer_notice_period_data: Notice Period Data for an employer notice period.
        employee_notice_period_data: Notice Period Data for an employee notice period.
    """

    class Meta:
        name = "Notice_Period_Data_for_Notice_Period_TargetType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_target_reference: Optional[NoticePeriodTargetObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Target_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employer_notice_period_data: list[NoticePeriodDataEmployerType] = field(
        default_factory=list,
        metadata={
            "name": "Employer_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_notice_period_data: list[NoticePeriodDataEmployeeType] = field(
        default_factory=list,
        metadata={
            "name": "Employee_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodsForCountryGetDataType:
    """
    Data element for Get Maintain Notice Periods for Country web service.

    Attributes:
        maintain_notice_periods_for_country_reference: Notice Periods For Country Reference
        maintain_notice_periods_for_country_data: Notice Periods For Country Data
    """

    class Meta:
        name = "Notice_Periods_For_Country_Get_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_notice_periods_for_country_reference: Optional[NoticePeriodsSetupTableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Maintain_Notice_Periods_For_Country_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    maintain_notice_periods_for_country_data: Optional[NoticePeriodsForCountryDataType] = field(
        default=None,
        metadata={
            "name": "Maintain_Notice_Periods_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NotificationSubCategoryConfigurationsForUsersType:
    """
    Notification Type configurations for a particular user.

    Attributes:
        notification_sub_type_configuration: Notification Sub Type configuration(includes selected
            notification channels) for each Notification Sub Type.
    """

    class Meta:
        name = "Notification_Sub_Category_Configurations_for_UsersType"
        target_namespace = "urn:com.workday/bsvc"

    notification_sub_type_configuration: list[NotificationSubTypeConfigurationType] = field(
        default_factory=list,
        metadata={
            "name": "Notification_Sub_Type_Configuration",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OnboardingSetupSubBusinessProcessType:
    """Wrapper for the Onboarding Setup sub business process that is part of the Hire business
    process."""

    class Meta:
        name = "Onboarding_Setup_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_data: Optional[OnboardingSetupDataType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OneTimePaymentForReferralSubBusinessProcessType:
    """
    Sub process for creating a one-time payment paid to the person who referred the hired worker.

    Attributes:
        business_sub_process_parameters: Parameters to indicate whether the subprocess should be
            completed automatically, initiated and left for manual completion, or skipped.  If skip
            is selected, the subprocess must be tagged as optional.
        effective_date: Date the one-time payment for the employee is effective.
        reason_reference: Reason for the one-time payment.  Use format:
            General_Event_Subcategory_ID.
    """

    class Meta:
        name = "One-Time_Payment_for_Referral_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationRequestCriteriaType:
    """
    This element contains criteria to filter the Organizations returned.

    Attributes:
        organization_type_reference: This element allows you to subset the Organizations returned by
            type.
        include_inactive: Set this attributes to true to include Inactive Organizations in your
            results.  Default is not to include Inactive Organizations.
        enable_transaction_log_lite: Select to enable Transaction Log Lite.
        transaction_log_criteria
        field_and_parameter_criteria_data
    """

    class Meta:
        name = "Organization_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    organization_type_reference: list[OrganizationTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enable_transaction_log_lite: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Enable_Transaction_Log_Lite",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_criteria: list[TransactionLogCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Log_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    field_and_parameter_criteria_data: Optional[FieldAndParameterCriteriaDataType] = field(
        default=None,
        metadata={
            "name": "Field_And_Parameter_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationSupportRoleType:
    """Contains the organization role refeference and the information about that role."""

    class Meta:
        name = "Organization_Support_RoleType"
        target_namespace = "urn:com.workday/bsvc"

    organization_support_role: list[OrganizationSupportingRoleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Support_Role",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PassportsAndVisasIdentificationDataType:
    """
    Wrapper for Passports and Visas Identification Data.

    Includes Passport Identifiers and Visa Identifiers

    Attributes:
        passport_id: Wrapper for Passport Identifier data.
        visa_id: Wrapper element for all Visa Identifier Data.
        replace_all: If Replace All is set to True, a full sync is performed after you submit the
            web service. Set to False if you want to preserve the existing data and only add, edit,
            or remove specific reference ids. Note: If you leave this boolean value blank it
            defaults to True to preserve the existing Replace All functionality in older versions of
            this web service for web service users depending on the default behavior.
    """

    class Meta:
        name = "Passports_and_Visas_Identification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    passport_id: list[PassportIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Passport_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    visa_id: list[VisaIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Visa_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonIdentificationDataType:
    """
    Wrapper for Person Identification Data.

    Includes National Identifiers, Government Identifiers, Visa
    Identifiers, Passport Identifiers, License Identifiers and Custom
    Identifiers.

    Attributes:
        national_id: Wrapper element for all National Identifier Data.
        government_id: Wrapper element for all Government Identifier Data.
        visa_id: Wrapper element for all Visa Identifier Data.
        passport_id: Wrapper element for all Passport Identifier Data.
        license_id: Wrapper element for all License  Identifier Data.
        custom_id: Wrapper element for all Custom Identifier Data.
    """

    class Meta:
        name = "Person_Identification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    national_id: list[NationalIdtype] = field(
        default_factory=list,
        metadata={
            "name": "National_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    government_id: list[GovernmentIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Government_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    visa_id: list[VisaIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Visa_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passport_id: list[PassportIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Passport_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    license_id: list[LicenseIdtype] = field(
        default_factory=list,
        metadata={
            "name": "License_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_id: list[CustomIdtype] = field(
        default_factory=list,
        metadata={
            "name": "Custom_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonnelActionRequestDataType:
    """
    Wrapper element for the Personnel Action Request Data.

    Attributes:
        first_personnel_action_data: Wrapper element for the First Personnel Action Data
        second_personnel_action_data: Wrapper element for the Second Personnel Action Data
        agency_data: Contains details on Agency Data for the Personnel Action.
        remark_data: Contains details on the Remark Data for the Nature of Action.
    """

    class Meta:
        name = "Personnel_Action_Request_DataType"
        target_namespace = "urn:com.workday/bsvc"

    first_personnel_action_data: Optional[FirstPersonnelActionDataType] = field(
        default=None,
        metadata={
            "name": "First_Personnel_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    second_personnel_action_data: Optional[SecondPersonnelActionDataType] = field(
        default=None,
        metadata={
            "name": "Second_Personnel_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    agency_data: Optional[AgencyDataDataType] = field(
        default=None,
        metadata={
            "name": "Agency_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remark_data: list[RemarkValueDataType] = field(
        default_factory=list,
        metadata={
            "name": "Remark_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PhoneInformationDataType:
    """
    Phone Information.

    Attributes:
        country_iso_code: Country ISO code. If the Country ISO code is specified, then this ISO code
            will be used to determine the Country Phone Code for (eliminate space between f and o)
            the phone. Pass this ISO code to distinguish between multiple countries sharing the same
            Country Phone Code. (For example, 1 is the Country Phone Code that is shared by USA,
            Canada, Dominican Republic, Bermuda, Jamaica, and Puerto Rico.)
        international_phone_code: International phone code number.
        phone_number: Full phone number.
        phone_extension: Phone extension.
        phone_device_type_reference: Reference ID for Phone Device Type.
        usage_data: Encapsulating element for all Communication Method Usage data.
        phone_reference: The Phone Reference ID.
        id: New ID value used in phone updates. The ID cannot already be in use by another phone.
        area_code: Area code number.
        tenant_formatted_phone: The Phone Number formatted according to tenant setup. This data is
            not used in inbound requests. Any data provided  for this attribute will be ignored.
        international_formatted_phone: The formatted International Phone number with Extension. This
            data is not used in inbound requests. Any data provided  for this attribute will be
            ignored.
        phone_number_without_area_code: The Phone number. This data is not used in inbound requests.
        national_formatted_phone: The formatted National Phone number with Extension. This data is
            not used in inbound requests.
        e164_formatted_phone: The formatted E164 Phone number with Extension. This data is not used
            in inbound requests.
        workday_traditional_formatted_phone: The formatted Workday Traditional Phone number with
            Extension. This data is not used in inbound requests.
        delete: Set this flag to true in order to delete the referenced communication method. If
            this flag is set, the Reference ID field becomes required, and all other communication
            method fields that would otherwise be required will be optional and meaningless.
        do_not_replace_all: This flag controls whether or not existing non-primary phone data will
            be replaced. A value of true means only the referenced phone will be updated, or created
            if it does not exist or no reference was provided. This behavior is used if the flag is
            set to true for ANY email address in the request.
    """

    class Meta:
        name = "Phone_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_iso_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Country_ISO_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 3,
        },
    )
    international_phone_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "International_Phone_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    phone_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "Phone_Number",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    phone_extension: Optional[str] = field(
        default=None,
        metadata={
            "name": "Phone_Extension",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    phone_device_type_reference: Optional[PhoneDeviceTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Phone_Device_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    usage_data: list[CommunicationMethodUsageInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Usage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    phone_reference: Optional[PhoneReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Phone_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    area_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Area_Code",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    tenant_formatted_phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "Tenant_Formatted_Phone",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    international_formatted_phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "International_Formatted_Phone",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    phone_number_without_area_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Phone_Number_Without_Area_Code",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    national_formatted_phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "National_Formatted_Phone",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    e164_formatted_phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "E164_Formatted_Phone",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    workday_traditional_formatted_phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "Workday_Traditional_Formatted_Phone",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionGroupRestrictionSummaryDataType:
    """
    Wrapper for restriction data for openings for all staffing models.

    Attributes:
        availability_date: Date the opening is available.
        earliest_hire_date: Earliest date that a worker can be hired/contracted into this opening.
        job_family_reference: Reference(s) to the job families that a worker being hired/contracted
            using this opening can use.
        job_profile_restriction_summary_data: Reference(s) (and additional data) to the job profiles
            that a worker being hired/contracted using this opening can use.
        location_reference: Reference(s) to the location that a worker being hired/contracted using
            this opening can use.
        worker_type_reference: Reference to the worker type that a worker being hired/contracted
            using this opening can use.
        time_type_reference: Reference to the time type that a worker being hired/contracted using
            this opening can use.
        position_worker_type_reference: Reference(s) to the position worker types that the position
            is restricted by (e.g., Regular, Contractor, Temporary).
    """

    class Meta:
        name = "Position_Group_Restriction_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    availability_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Availability_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    earliest_hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Earliest_Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_reference: list[JobFamilyBaseObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_restriction_summary_data: list[JobProfileSummaryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Profile_Restriction_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_type_reference: Optional[WorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_worker_type_reference: list[PositionWorkerTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionRequestCriteriaType:
    """
    Utilize the Request Criteria element to search the transaction log for specific instance(s) of a
    Position.

    Attributes:
        transaction_log_criteria_data: Searches the transaction log for business processes and event
            lites to find specific events that occurred during a period of time.
        supervisory_organization_reference: A unique identifier for the organization.
        job_requisition_reference: A unique Identifier for a Job Requisition for a Position.
            Identifies all positions connected to the Job Requisition.
        exclude_filled_positions: Indicates if filled positions are to be returned in the response
        exclude_non_recruitable_positions: If set to true, indicates that non-recruitable positions
            are to be excluded in the response.  Non-recruitable positions include those with an
            open Job Requisition if the Recruiting Instruction is specified as "Do Not Send To
            Recruiting System".
        ignore_future_positions: No data will be returned for positions that are available after the
            effective date of the request. The position information will remain in the request
            criteria and they will not cause an error.
        include_closed_positions: Indicates if closed positions are to be included in the response
        show_only_closed_positions: Indicates if only closed positions are to be returned in the
            response
        event_reference: The identifier of an existing Event.
        field_and_parameter_criteria_data
        location_reference: Reference(s) to the location that a worker being hired/contracted using
            this opening can use. The results for this criteria are combined(union operation) with
            the results from the Additional Locations Reference criteria
        additional_locations_reference: Reference to Additional Location(s) for the Job Requisition.
            This also applies to Positions that have Job Requisitions.  The results for this
            criteria are combined(union operation) with the results from the Location Reference
            criteria
    """

    class Meta:
        name = "Position_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_criteria_data: list[TransactionLogCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Log_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supervisory_organization_reference: list[SupervisoryOrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_reference: list[JobRequisitionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_filled_positions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Filled_Positions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_non_recruitable_positions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Non-Recruitable_Positions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ignore_future_positions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ignore_Future_Positions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_closed_positions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Closed_Positions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    show_only_closed_positions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Show_Only_Closed_Positions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_reference: Optional[EventObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    field_and_parameter_criteria_data: Optional[FieldAndParameterCriteriaDataType] = field(
        default=None,
        metadata={
            "name": "Field_And_Parameter_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_locations_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Locations_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PreferredNameDataType:
    """
    Contains the preferred name for a person.

    If no preferred name is returned then the legal name is assumed to
    be the preferred name.  If a preferred name is not provided in a
    request then the legal name is assumed to be the preferred name.

    Attributes:
        name_detail_data: Contains the components of a name, such as the First Name and Last Name.
    """

    class Meta:
        name = "Preferred_Name_DataType"
        target_namespace = "urn:com.workday/bsvc"

    name_detail_data: Optional[PersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Name_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ProbationPeriodOutcomeResponseDataType:
    """Probation Period Outcome Response Data Element."""

    class Meta:
        name = "Probation_Period_Outcome_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcome: list[ProbationPeriodOutcomesDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcome",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomeForCountryResponseDataType:
    """
    Response Data element for Get Probation Period Outcomes web service.

    Attributes:
        probation_period_outcomes_for_country_reference: Probation Period Outcome for Country
            Reference
        probation_period_outcomes_data
    """

    class Meta:
        name = "Probation_Period_Outcome_for_Country_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcomes_for_country_reference: Optional[
        ProbationPeriodOutcomesSetupTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcomes_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcomes_data: list[ProbationPeriodOutcomesForCountryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcomes_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutApplicantResponse(PutApplicantResponseType):
    class Meta:
        name = "Put_Applicant_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCitizenshipStatusRequest(PutCitizenshipStatusRequestType):
    class Meta:
        name = "Put_Citizenship_Status_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutCollectiveAgreementRequestType:
    """
    Put Collective Agreement Request Element.

    Attributes:
        collective_agreement_reference: Collective Agreement Reference
        collective_agreement_data
        add_only: Set Add Only to True to prevent updates to existing Collective Agreements
        version
    """

    class Meta:
        name = "Put_Collective_Agreement_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_reference: Optional[CollectiveAgreementObjectType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_data: Optional[CollectiveAgreementDataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutDependentResponse(PutDependentResponseType):
    class Meta:
        name = "Put_Dependent_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutEditNoticePeriodsEventDataType:
    """
    Contains data for the Edit Notice Periods event.

    Attributes:
        employee_reference: Employee Reference
        effective_date: Effective Date
        employer_notice_period_data: Employer Notice Period Data
        employee_notice_period_data: Employee notice period data.
    """

    class Meta:
        name = "Put_Edit_Notice_Periods_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employer_notice_period_data: Optional[EmployerNoticePeriodDataType] = field(
        default=None,
        metadata={
            "name": "Employer_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_notice_period_data: Optional[EmployeeNoticePeriodDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Notice_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutFseWorkerCategoryCriteriaRequest(PutFseWorkerCategoryCriteriaRequestType):
    class Meta:
        name = "Put_FSE_Worker_Category_Criteria_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutFunctionalityForStaffingTransactionsRequest(
    PutFunctionalityForStaffingTransactionsRequestType
):
    class Meta:
        name = "Put_Functionality_for_Staffing_Transactions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutGlobalStaffingEligibilityRuleResponse(PutGlobalStaffingEligibilityRuleResponseType):
    class Meta:
        name = "Put_Global_Staffing_Eligibility_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobFamilyRequestType:
    """
    Request element for Put Job Family.

    Attributes:
        job_family_reference: Reference element representing a unique instance of Job Family.
        job_family_data: Data to be used for adding a new Job Family or updating an existing Job
            Family.
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Job_Family_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_data: Optional[JobFamilyDataType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutLegalAuthorityRequestType:
    """
    Request to add, update, or delete a Legal Authority.

    Attributes:
        delete: Delete boolean. Values can be either 0 (false/off) or 1 (true/on). Cannot be on
            simultaneously as the Add Only boolean.
        legal_authority_reference: Legal Authority Reference Element
        legal_authority_data
        add_only: Add Only boolean used to determine if only add operation is to be performed on the
            the Legal Authority Reference.
        version
    """

    class Meta:
        name = "Put_Legal_Authority_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    legal_authority_reference: Optional[LegalAuthorityObjectType] = field(
        default=None,
        metadata={
            "name": "Legal_Authority_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    legal_authority_data: Optional[LegalAuthorityDataType] = field(
        default=None,
        metadata={
            "name": "Legal_Authority_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainEmployeeContractRulesForCountryRequestType:
    """
    Request element for Put Maintain Employee Contract Rules for Country.

    Attributes:
        maintain_employee_contract_rules_for_country_reference: Employee Contract Rules Table
            References
        maintain_employee_contract_rules_for_country_data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Maintain_Employee_Contract_Rules_For_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_employee_contract_rules_for_country_reference: Optional[
        EmployeeContractRulesTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contract_Rules_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contract_rules_for_country_data: Optional[
        EmployeeContractRulesForCountryDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contract_Rules_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainJobOverlapRoutingExclusionRuleRequest(
    PutMaintainJobOverlapRoutingExclusionRuleRequestType
):
    class Meta:
        name = "Put_Maintain_Job_Overlap_Routing_Exclusion_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainNoticePeriodsForCountryRequestType:
    """
    Request element for Put Maintain Notice Periods for Country.

    Attributes:
        maintain_notice_periods_for_country_reference: Notice Periods for Country Reference
        maintain_notice_periods_for_country_data: Notice Periods for Country Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Maintain_Notice_Periods_for_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_notice_periods_for_country_reference: Optional[NoticePeriodsSetupTableObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Maintain_Notice_Periods_For_Country_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    maintain_notice_periods_for_country_data: list[NoticePeriodsForCountryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Notice_Periods_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainProbationPeriodsForCountryResponse(
    PutMaintainProbationPeriodsForCountryResponseType
):
    class Meta:
        name = "Put_Maintain_Probation_Periods_For_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainWorkingTimeForCountryRequestType:
    """
    Put Maintain working time for country request.

    Attributes:
        maintain_working_time_for_country_reference: Working Time Eligibility Table class
        maintain_working_time_for_country_data: Data for Table reference
        add_only: Add only
        version
    """

    class Meta:
        name = "Put_Maintain_Working_Time_for_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_working_time_for_country_reference: Optional[
        WorkingTimeDefaultingEligibilityTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Working_Time_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_working_time_for_country_data: Optional[
        WorkingTimeDefaultingEligibilityTableDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Working_Time_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainWorkingTimeForCountryResponse(PutMaintainWorkingTimeForCountryResponseType):
    class Meta:
        name = "Put_Maintain_Working_Time_for_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutNatureOfActionRequestType:
    """
    Request to add, update, or delete a Nature of Action.

    Attributes:
        add_only: Add Only boolean. Values can be either 0 (false/off) or 1 (true/on). Cannot be on
            simultaneously as the Delete boolean.
        nature_of_action_reference: Unique identifier for the Nature of Action reference. User may
            reference either WID or Nature of Action ID in order to update the Nature of Action
            associated with the reference. If reference is left empty, the request will attempt to
            create a new Nature of Action instance. A reference is required when attempting to
            delete.
        nature_of_action_data
        delete: Delete boolean. Values can be either 0 (false/off) or 1 (true/on). Cannot be on
            simultaneously as the Add Only boolean.
        version
    """

    class Meta:
        name = "Put_Nature_of_Action_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_reference: Optional[NatureOfActionObjectType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nature_of_action_data: Optional[NatureOfActionDataType] = field(
        default=None,
        metadata={
            "name": "Nature_of_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutProbationPeriodEligibilityRuleResponse(PutProbationPeriodEligibilityRuleResponseType):
    class Meta:
        name = "Put_Probation_Period_Eligibility_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutProbationPeriodOutcomeRequest(PutProbationPeriodOutcomeRequestType):
    class Meta:
        name = "Put_Probation_Period_Outcome_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutProbationPeriodOutcomesRequestType:
    """
    Request element for Put Probation Period Outcomes For Country.

    Attributes:
        probation_period_outcomes_for_country_reference: Probation Period Outcomes Reference
        probation_period_outcomes_data: Probation Period Outcomes For Country Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Probation_Period_Outcomes_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcomes_for_country_reference: Optional[
        ProbationPeriodOutcomesSetupTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcomes_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_outcomes_data: Optional[ProbationPeriodOutcomesForCountryDataType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Outcomes_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutRemarkRequestType:
    """
    Request to add or update a Remark.

    Attributes:
        delete: Delete boolean
        remark_reference: Unique identifier for the Remark Reference
        remark_data: Remark Data element with reference ID and its associated  data.
        add_only: Add Only boolean
        version
    """

    class Meta:
        name = "Put_Remark_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remark_reference: Optional[RemarkObjectType] = field(
        default=None,
        metadata={
            "name": "Remark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remark_data: Optional[RemarkDataType] = field(
        default=None,
        metadata={
            "name": "Remark_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStudentEmploymentEligibilityRuleSetRequestType:
    """
    Container for Put Student Employment Eligibility Rule Set Request.

    Attributes:
        student_employment_eligibility_rule_set_reference: Student Employment Eligibility Rule Set
            Reference
        student_employment_eligibility_rule_set_data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_Set_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_set_reference: Optional[
        StudentEmploymentEligibilityRuleSetObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_set_data: Optional[
        StudentEmploymentEligibilityRuleSetDataType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStudentEmploymentEligibilityRuleSetResponseType:
    """
    Container for Student Employment Eligibility Rule Set Data.

    Attributes:
        student_employment_eligibility_rule_set_reference: Student Employment Eligibility Rule Set
            Reference
        student_employment_eligibility_rule_set_data: Container for Student Employment Eligibility
            Rule Set Data
        version
    """

    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_Set_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_set_reference: Optional[
        StudentEmploymentEligibilityRuleSetObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_set_data: list[
        StudentEmploymentEligibilityRuleSetDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutWorkerDocumentRequest(PutWorkerDocumentRequestType):
    class Meta:
        name = "Put_Worker_Document_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutWorkingTimeEligibilityRulesResponse(PutWorkingTimeEligibilityRulesResponseType):
    class Meta:
        name = "Put_Working_Time_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RelativeNameDataType:
    """
    Contains relative names for a relative of a person.

    Attributes:
        relative_name_reference_reference: Holds a reference to a main relative name reference, with
            a single instance referencing all versions of a relative name.
        relative_type_reference: Type to specify the relative person relationship.
        name_detail_data
        delete: Flag to delete an existing Relative Name entry. If this flag is set, Relative Name
            Reference is also required.
    """

    class Meta:
        name = "Relative_Name_DataType"
        target_namespace = "urn:com.workday/bsvc"

    relative_name_reference_reference: Optional[RelativeNameReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Relative_Name_Reference_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    relative_type_reference: Optional[RelativeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Relative_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name_detail_data: Optional[PersonNameDetailDataType] = field(
        default=None,
        metadata={
            "name": "Name_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemarkType:
    """
    Remark element.

    Attributes:
        remark_reference: Remark Reference
        remark_data
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    remark_reference: Optional[RemarkObjectType] = field(
        default=None,
        metadata={
            "name": "Remark_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remark_data: Optional[RemarkDataType] = field(
        default=None,
        metadata={
            "name": "Remark_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveMatrixOrganizationBusinessProcessDataType:
    """
    Worker, position, and matrix organization data.

    Attributes:
        worker_reference: The worker you're assigning to a matrix organization.
        remove_matrix_organization_position_data: Detail Data for matrix organization and date
    """

    class Meta:
        name = "Remove_Matrix_Organization_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_matrix_organization_position_data: Optional[RemoveMatrixOrganizationPositionDataType] = (
        field(
            default=None,
            metadata={
                "name": "Remove_Matrix_Organization_Position_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )


@dataclass
class RemoveRetireeStatusRequestType:
    """This web service operation is designed to remove the retiree designation from a retiree using
    the Remove Retiree Status business process."""

    class Meta:
        name = "Remove_Retiree_Status_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    remove_retiree_status_data: Optional[RemoveRetireeStatusDataType] = field(
        default=None,
        metadata={
            "name": "Remove_Retiree_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveRetireeStatusSubBusinessProcessType:
    """
    Element that contains details for invoking Remove Retiree Status as sub process.

    Attributes:
        business_sub_process_parameters: Business Process Sub Parameters
        remove_retiree_status_details: Contains Remove Retiree Status details for a worker.
    """

    class Meta:
        name = "Remove_Retiree_Status_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_retiree_status_details: Optional[RemoveRetireeStatusSubProcessDetailsType] = field(
        default=None,
        metadata={
            "name": "Remove_Retiree_Status_Details",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestOneTimePaymentSubBusinessProcessType:
    """
    Grant an employee a one-time payment such as a referral, spot bonus, or severance pay.

    Uses the Request One Time Payment business event through the web
    service. Can be skipped, processed automatically or processed
    manually.

    Attributes:
        business_sub_process_parameters: Parameters to indicate whether the subprocess should be
            completed automatically, initiated and left for manual completion, or skipped.  If skip
            is selected, the subprocess must be tagged as optional.
        request_one_time_payment_data: Data Element that contains the one-time payment information
            for the terminate employee process.
        effective_date: Date the one-time payment for the employee is effective.
        reason_reference: Reason for the one-time payment.  Use format:
            General_Event_Subcategory_ID.
    """

    class Meta:
        name = "Request_One_Time_Payment_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_one_time_payment_data: list[OneTimePaymentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Request_One_Time_Payment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestStockSubBusinessProcessType:
    """Wrapper element for the Request Stock Grant sub business process."""

    class Meta:
        name = "Request_Stock_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_stock_grant_data: Optional[RequestStockGrantSubdataType] = field(
        default=None,
        metadata={
            "name": "Request_Stock_Grant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewCobraEligibilitySubBusinessProcessType:
    """
    Enter COBRA information for a United States employee who is terminated or requesting a leave of
    absence.

    Uses the Review COBRA Eligibility business process. The subprocess
    can be skipped, processed automatically or processed manually from
    the web service.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        review_cobra_eligibility_data: Contains COBRA Eligibility detail for a participant.  If this
            element is not populated then the participant is assumed to not be COBRA eligible.
    """

    class Meta:
        name = "Review_COBRA_Eligibility_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_cobra_eligibility_data: list[ReviewCobraEligibilityDataType] = field(
        default_factory=list,
        metadata={
            "name": "Review_COBRA_Eligibility_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ReviewPayrollInterfaceDataExtractBusinessSubProcessType:
    """
    Launch the payroll integration.

    Uses the Review Payroll Data Integration Extract business process.
    This subprocess can be skipped, processed manually or processed
    automatically from the web service.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
    """

    class Meta:
        name = "Review_Payroll_Interface_Data_Extract_Business_Sub_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignerType:
    """
    Role Assigner Reference and Data.

    Attributes:
        role_assigner_reference: Role Assigner Reference.
        role_assigner_data: Role Assigner Reference and Data.
    """

    class Meta:
        name = "Role_AssignerType"
        target_namespace = "urn:com.workday/bsvc"

    role_assigner_reference: Optional[RoleAssignerObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Assigner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    role_assigner_data: Optional[RoleAssignerDataType] = field(
        default=None,
        metadata={
            "name": "Role_Assigner_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsDataType:
    """
    Contains the Staffing Field Defaults data.

    Attributes:
        id: Contains a reference that identifies a specific Staffing Field Defaults instance.
        business_process_type_reference: Contains the business process type for which the Staffing
            Field Defaults configuration provides defaulting logic.
        staffing_field_defaults_section_reference: Contains the staffing field defaults section
            which the Staffing Field Defaults configuration provides defaulting logic.
        staffing_field_reference: Contains a reference that identifies a specific Staffing Field
            instance.
        forkable_condition_items: Contains the request to add, update, or delete a Forkable
            Condition Item.
    """

    class Meta:
        name = "Staffing_Field_Defaults_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_process_type_reference: Optional[BusinessProcessTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    staffing_field_defaults_section_reference: Optional[StaffingFieldDefaultsSectionObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Staffing_Field_Defaults_Section_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    staffing_field_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    forkable_condition_items: list[StaffingFieldDefaultsForkableConditionItemType] = field(
        default_factory=list,
        metadata={
            "name": "Forkable_Condition_Items",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityEventResponseDataType:
    """Container for Student Employment Eligibility Event data."""

    class Meta:
        name = "Student_Employment_Eligibility_Event_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_event: list[StudentEmploymentEligibilityEventType] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Event",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSetType:
    """
    Container for Student Employment Eligibility Rule Set Data.

    Attributes:
        student_employment_eligibility_rule_set_reference: Student Employment Eligibility Rule Set
            Reference
        student_employment_eligibility_rule_set_data
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_SetType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_set_reference: Optional[
        StudentEmploymentEligibilityRuleSetObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_set_data: list[
        StudentEmploymentEligibilityRuleSetDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilitySubBusinessProcessType:
    """Wrapper element for the Student Employment Eligibility sub business process."""

    class Meta:
        name = "Student_Employment_Eligibility_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SwitchPrimaryJobEventResponse(SwitchPrimaryJobEventResponseType):
    class Meta:
        name = "Switch_Primary_Job_Event_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class SwitchPrimaryJobRequestType:
    """
    This web service operation is designed to switch primary jobs for a worker using the Switch
    Primary Job Business Process.

    Attributes:
        business_process_parameters
        switch_primary_position_request_data: Wrapper element for the Switch Primary Job web service
        version
    """

    class Meta:
        name = "Switch_Primary_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    switch_primary_position_request_data: Optional[SwitchPrimaryJobRequestDataType] = field(
        default=None,
        metadata={
            "name": "Switch_Primary_Position_Request_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SwitchPrimaryJobSubProcessType:
    """Wrapper element for the Switch Primary Job sub process."""

    class Meta:
        name = "Switch_Primary_Job_Sub_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    switch_primary_job_data: Optional[SwitchPrimaryJobDataType] = field(
        default=None,
        metadata={
            "name": "Switch_Primary_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TransmitDataToThirdPartyPayrollSubBusinessProcessType:
    """
    Wrapper element for the Transmit Data to Third Party Payroll sub business process.

    Contains option to skip the transmission of employee data to the
    third party payroll vendor when Event Driven Integration for Third
    Party Payroll is configured.

    Attributes:
        business_sub_process_parameters
        event_driven_integration_setup_data: Enable Event-Driven Integration
    """

    class Meta:
        name = "Transmit_Data_to_Third_Party_Payroll_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_driven_integration_setup_data: Optional[EventDrivenIntegrationSetupDataType] = field(
        default=None,
        metadata={
            "name": "Event_Driven_Integration_Setup_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UpdateAcademicAppointmentSubProcessType:
    """Wrapper element for the Update Academic Appointment sub business process."""

    class Meta:
        name = "Update_Academic_Appointment_Sub_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_academic_appointment_data: Optional[UpdateAcademicAppointmentDataType] = field(
        default=None,
        metadata={
            "name": "Update_Academic_Appointment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WebAddressInformationDataType:
    """
    Web Address Information.

    Attributes:
        web_address: Web address (Example: URL).
        web_address_comment: Web address comment.
        usage_data: Encapsulating element for all Communication Method Usage data.
        web_address_reference: The Web Address Reference Instance
        id: New ID value used in web address updates. The ID cannot already be in use by another web
            address.
        delete: Set this flag to true in order to delete the referenced communication method. If
            this flag is set, the Reference ID field becomes required, and all other communication
            method fields that would otherwise be required will be optional and meaningless.
        do_not_replace_all: This flag controls whether or not existing non-primary web address data
            will be replaced. A value of true means only the referenced web address will be updated,
            or created if it does not exist or no reference was provided. This behavior is used if
            the flag is set to true for ANY web address in the request.
    """

    class Meta:
        name = "Web_Address_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    web_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Web_Address",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    web_address_comment: Optional[str] = field(
        default=None,
        metadata={
            "name": "Web_Address_Comment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    usage_data: list[CommunicationMethodUsageInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Usage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    web_address_reference: Optional[WebAddressReferenceObjectType] = field(
        default=None,
        metadata={
            "name": "Web_Address_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerBenefitElectionDataType:
    """
    The election information for the coverage.

    Attributes:
        coverage_begin_date: The date that the coverage began for the coverage level, dependents,
            and beneficiaries (if applicable).
        coverage_end_date: The date that coverage ended for this election.
        election_coverage_begin_date: The date that coverage began for this election.
        original_coverage_begin_date: The first date that coverage began for this election.  This is
            used to track when an employee first elected a coverage.
        original_coverage_begin_date_for_benefit_coverage_type: The first date that coverage began
            for this type of coverage.
        deduction_begin_date: The date that the deduction began for this plan.
        deduction_end_date: The date that the deduction ended for plan.
        election_status: The status of the coverage: Current, Prior, or Future
        enrollment_signature_date: Indicates the date on file for the enrollment signature.
        latest_enrollment_signature_date: Returns the Latest Enrollment Signature Date for the plan
            elected
        original_signature_date: Returns the Original Enrollment Signature Date from the Worker's
            submission.
        passive_enrollment: Indicates the date on file for the enrollment signature.
        benefit_plan_summary_data: Indicates the date on file for the enrollment signature.
        original_plan_enrollment_date: First time an individual enrolled in the plan of this benefit
            election, ignoring gaps in coverage.
        original_benefit_provider_enrollment_date: First time an individual enrolled in any plan
            associated with this provider for this election, ignoring gaps in coverage.
        is_corrected_or_rescinded: Indicates whether the Benefit Election is part of an event that
            has been corrected or rescinded.
    """

    class Meta:
        name = "Worker_Benefit_Election_DataType"
        target_namespace = "urn:com.workday/bsvc"

    coverage_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    coverage_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Coverage_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    election_coverage_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Election_Coverage_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_coverage_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_coverage_begin_date_for_benefit_coverage_type: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date_for_Benefit_Coverage_Type",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    deduction_begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Deduction_Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    deduction_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Deduction_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    election_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Election_Status",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enrollment_signature_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Enrollment_Signature_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    latest_enrollment_signature_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Latest_Enrollment_Signature_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_signature_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Signature_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passive_enrollment: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Passive_Enrollment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_plan_summary_data: Optional[BenefitPlanSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Plan_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_plan_enrollment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Plan_Enrollment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_benefit_provider_enrollment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Benefit_Provider_Enrollment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    is_corrected_or_rescinded: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Is_Corrected_or_Rescinded",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerCompensationDataType:
    """
    Contains the worker's compensation information.

    Security Note: This element is secured to the following domains:  Self Service: Compensation; Worker Data: Compensation by Organization

    Attributes:
        compensation_effective_date: Effective Date of Compensation.
        reason_reference: Reason for most recent Compensation event.
        compensation_guidelines_data: Compensation Guidelines Data
        salary_and_hourly_data: Salary and Hourly Data
        unit_salary_plan_data: Unit Salary Plan Data
        allowance_plan_data: Allowance Plan Data
        unit_allowance_plan_data: Unit Allowance Plan Data
        bonus_plan_data: Bonus Plan Data
        merit_plan_data: Merit Plan Data
        commission_plan_data: Commission Plan Data
        stock_plan_data: Stock Plan Data
        future_payment_plan_data
        period_salary_plan_data: Period Salary Plan Data
        employee_compensation_summary_data: Employee Compensation Summary Data
    """

    class Meta:
        name = "Worker_Compensation_DataType"
        target_namespace = "urn:com.workday/bsvc"

    compensation_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Compensation_Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reason_reference: Optional[EventClassificationSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_guidelines_data: list[CompensatableGuidelinesDataType] = field(
        default_factory=list,
        metadata={
            "name": "Compensation_Guidelines_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    salary_and_hourly_data: list[EmployeeBasePayPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Salary_and_Hourly_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_salary_plan_data: list[EmployeeSalaryUnitPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowance_plan_data: list[EmployeeAllowancePlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    unit_allowance_plan_data: list[EmployeeAllowanceUnitPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Unit_Allowance_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    bonus_plan_data: list[EmployeeBonusPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Bonus_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    merit_plan_data: list[EmployeeMeritPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Merit_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    commission_plan_data: list[EmployeeCommissionPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Commission_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    stock_plan_data: list[EmployeeStockPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Stock_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    future_payment_plan_data: list[FuturePaymentPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Future_Payment_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    period_salary_plan_data: list[EmployeePeriodSalaryPlanAssignmentDataType] = field(
        default_factory=list,
        metadata={
            "name": "Period_Salary_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_compensation_summary_data: Optional[CompensatableSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Compensation_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDevelopmentItemDataType:
    """Contains all Development Items for the referenced Worker."""

    class Meta:
        name = "Worker_Development_Item_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_development_item: list[WorkerDevelopmentItemType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Development_Item",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDocumentDataWwstype:
    """
    Contains the documents that were added for a worker during staffing events or ad-hoc.

    These domains secure this element:
    Self-Service: Add Worker Documents
    Self-Service: Edit and Delete Worker Documents
    Worker Data: Add Worker Documents
    Worker Data: Edit and Delete Worker Documents
    """

    class Meta:
        name = "Worker_Document_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document: list[WorkerDocumentWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerDocumentResponseDataType:
    """
    Worker Document Response Data containing the retrieved Worker Document information.

    Attributes:
        worker_document: Contains the retrieved Worker Document information.
    """

    class Meta:
        name = "Worker_Document_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_document: list[WorkerDocumentType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerGoalDataType:
    """
    Contains all the Goal Details (Review Goals and Worker Goal Details) for a Worker.

    Attributes:
        goal: Contains a single Goal Detail (either Review Goal or Worker Goal Detail) and its Notes
            and History.
    """

    class Meta:
        name = "Worker_Goal_DataType"
        target_namespace = "urn:com.workday/bsvc"

    goal: list[WorkerGoalType] = field(
        default_factory=list,
        metadata={
            "name": "Goal",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerMatrixManagementChainDataType:
    """Contains the worker's matrix management chain."""

    class Meta:
        name = "Worker_Matrix_Management_Chain_DataType"
        target_namespace = "urn:com.workday/bsvc"

    management_chain_data: list[ManagementChainDataType] = field(
        default_factory=list,
        metadata={
            "name": "Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerOrganizationRoleDataType:
    """Contains the organization role and the organizations that the worker supports that role
    for."""

    class Meta:
        name = "Worker_Organization_Role_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_role: list[OrganizationRoleForWorkerDataType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Role",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerRequestCriteriaType:
    """
    The Request Criteria element lets you apply additional criteria to identify the specific
    instance(s) of a Worker.

    Attributes:
        transaction_log_criteria_data: Transaction Log Criteria Data
        organization_reference: Unique Identifier for a Supervisory Organization
        country_reference: Unique Identifier for a Country
        include_subordinate_organizations: When this boolean value is set to true, indicates to
            include all subordinate organizations to the Organization Reference in the response.
        position_reference: Unique identifier for  the position of the worker.
        event_reference: The identifier of an existing Event.
        benefit_plan_reference: The unique identifier to a benefits plan, along with a string
            describing the benefits plan. Identifies the benefit plan or plans that can be used for
            Benefit Enrollment and Benefit Eligibility. Enrollment is checked when the benefit plan
            year falls within the effective date. Otherwise, if the benefit plan year falls outside
            of the effective data, then eligibility is checked.
        field_and_parameter_criteria_data
        national_id_criteria_data
        exclude_inactive_workers: Excludes from the response terminated employees or contingent
            workers whose contracts have ended. (See also: Exclude_Employees,
            Exclude_Contingent_Workers)
        exclude_employees: Excludes employees from inclusion in the response. (See also:
            Exclude_Inactive_Workers, Exclude_Contingent_Workers)
        exclude_contingent_workers: Excludes contingent workers from inclusion in the response. (See
            also: Exclude_Inactive_Workers, Exclude_Employees)
        eligibility_criteria_data
        universal_id_reference: All worker roles will be returned for the person associated with
            each universal identifier.
    """

    class Meta:
        name = "Worker_Request_CriteriaType"
        target_namespace = "urn:com.workday/bsvc"

    transaction_log_criteria_data: list[TransactionLogCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Log_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_reference: list[OrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: list[CountryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_subordinate_organizations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Subordinate_Organizations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: list[PositionElementObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    event_reference: Optional[TransactionLogObjectType] = field(
        default=None,
        metadata={
            "name": "Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_plan_reference: list[BenefitPlanObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Benefit_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    field_and_parameter_criteria_data: Optional[FieldAndParameterCriteriaDataType] = field(
        default=None,
        metadata={
            "name": "Field_And_Parameter_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    national_id_criteria_data: list[WorkerByNationalIdRequestCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "National_ID_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_inactive_workers: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Inactive_Workers",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_employees: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Employees",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_contingent_workers: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_Contingent_Workers",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    eligibility_criteria_data: list[EligibilityCriteriaDataType] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility_Criteria_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: list[UniversalIdentifierObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerSkillItemDataType:
    """Creates all Skills for the referenced Worker."""

    class Meta:
        name = "Worker_Skill_Item_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_skill_item: list[SkillType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Skill_Item",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerSupervisoryManagementChainDataType:
    """Contains the worker's supervisory management chain."""

    class Meta:
        name = "Worker_Supervisory_Management_Chain_DataType"
        target_namespace = "urn:com.workday/bsvc"

    management_chain_data: list[ManagementChainDataType] = field(
        default_factory=list,
        metadata={
            "name": "Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortAddOnlyEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAddOnlyEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        hire_employee_event_response: Optional[HireEmployeeEventResponse] = field(
            default=None,
            metadata={
                "name": "Hire_Employee_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortAddOnlyEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortAddOnlyEmployeeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortChangeJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangeJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_job_response: Optional[ChangeJobResponse] = field(
            default=None,
            metadata={
                "name": "Change_Job_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortChangeJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortChangeJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortContractContingentWorkerOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortContractContingentWorkerOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        contract_contingent_worker_response: Optional[ContractContingentWorkerResponse] = field(
            default=None,
            metadata={
                "name": "Contract_Contingent_Worker_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortContractContingentWorkerOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortContractContingentWorkerOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortCorrectContractContingentWorker:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortCorrectContractContingentWorkerInput
    output = StaffingPortCorrectContractContingentWorkerOutput


class StaffingPortCorrectHireEmployee:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortCorrectHireEmployeeInput
    output = StaffingPortCorrectHireEmployeeOutput


@dataclass
class StaffingPortDeleteWorkerDocumentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortDeleteWorkerDocumentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortDeleteWorkerDocumentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        delete_worker_document_request: Optional[DeleteWorkerDocumentRequest] = field(
            default=None,
            metadata={
                "name": "Delete_Worker_Document_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEditCreditableServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditCreditableServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_creditable_service_response: Optional[EditCreditableServiceResponse] = field(
            default=None,
            metadata={
                "name": "Edit_Creditable_Service_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditCreditableServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEditCreditableServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditPositionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditPositionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_position_event_response: Optional[EditPositionEventResponse] = field(
            default=None,
            metadata={
                "name": "Edit_Position_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortEditPositionOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortEditPositionOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetChangeGovernmentIdsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeGovernmentIdsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangeGovernmentIdsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_government_ids_request: Optional[GetChangeGovernmentIdsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Change_Government_IDs_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangeLegalNameInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeLegalNameInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangeLegalNameInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_legal_name_request: Optional[GetChangeLegalNameRequest] = field(
            default=None,
            metadata={
                "name": "Get_Change_Legal_Name_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangeLicensesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeLicensesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangeLicensesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_licenses_request: Optional[GetChangeLicensesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Change_Licenses_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangeOtherIdsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeOtherIdsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangeOtherIdsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_other_ids_request: Optional[GetChangeOtherIdsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Change_Other_IDs_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangePassportsAndVisasInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangePassportsAndVisasInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangePassportsAndVisasInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_passports_and_visas_request: Optional[GetChangePassportsAndVisasRequest] = field(
            default=None,
            metadata={
                "name": "Get_Change_Passports_and_Visas_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangePersonalInformationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangePersonalInformationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangePersonalInformationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_personal_information_request: Optional[GetChangePersonalInformationRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Change_Personal_Information_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangePreferredNameInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangePreferredNameInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetChangePreferredNameInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_preferred_name_request: Optional[GetChangePreferredNameRequest] = field(
            default=None,
            metadata={
                "name": "Get_Change_Preferred_Name_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetCitizenshipStatusesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetCitizenshipStatusesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetCitizenshipStatusesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_citizenship_statuses_request: Optional[GetCitizenshipStatusesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Citizenship_Statuses_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetCollectiveAgreementsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetCollectiveAgreementsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetCollectiveAgreementsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_collective_agreements_request: Optional[GetCollectiveAgreementsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Collective_Agreements_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetCreditableServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetCreditableServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetCreditableServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_creditable_service_request: Optional[GetCreditableServiceRequest] = field(
            default=None,
            metadata={
                "name": "Get_Creditable_Service_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetFseWorkerCategoryCriteriasInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetFseWorkerCategoryCriteriasInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetFseWorkerCategoryCriteriasInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_fse_worker_category_criterias_request: Optional[
            GetFseWorkerCategoryCriteriasRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_FSE_Worker_Category_Criterias_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetFunctionalityForStaffingTransactionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetFunctionalityForStaffingTransactionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetFunctionalityForStaffingTransactionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_functionality_for_staffing_transactions_request: Optional[
            GetFunctionalityForStaffingTransactionsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Functionality_for_Staffing_Transactions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesInput.Body"] = (
        field(
            default=None,
            metadata={
                "name": "Body",
                "type": "Element",
            },
        )
    )
    header: Optional[
        "StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesInput.Header"
    ] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_global_staffing_eligibility_rules_without_dependencies_request: Optional[
            GetGlobalStaffingEligibilityRulesWithoutDependenciesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Global_Staffing_Eligibility_Rules_Without_Dependencies_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetGlobalStaffingEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetGlobalStaffingEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetGlobalStaffingEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_global_staffing_eligibility_rules_request: Optional[
            GetGlobalStaffingEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Global_Staffing_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetJobClassificationGroupsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobClassificationGroupsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetJobClassificationGroupsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_classification_groups_request: Optional[GetJobClassificationGroupsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Job_Classification_Groups_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetJobFamilyGroupsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobFamilyGroupsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetJobFamilyGroupsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_family_groups_request: Optional[GetJobFamilyGroupsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Job_Family_Groups_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetJobOverlapRoutingExclusionRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobOverlapRoutingExclusionRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetJobOverlapRoutingExclusionRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_overlap_routing_exclusion_rules_request: Optional[
            GetJobOverlapRoutingExclusionRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Job_Overlap_Routing_Exclusion_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetLegalAuthoritiesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetLegalAuthoritiesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetLegalAuthoritiesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_legal_authorities_request: Optional[GetLegalAuthoritiesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Legal_Authorities_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetMaintainEmployeeContractRulesForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainEmployeeContractRulesForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetMaintainEmployeeContractRulesForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_employee_contract_rules_for_country_request: Optional[
            GetMaintainEmployeeContractRulesForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Employee_Contract_Rules_For_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetMaintainJobOverlapRoutingExclusionRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainJobOverlapRoutingExclusionRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetMaintainJobOverlapRoutingExclusionRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_job_overlap_routing_exclusion_rule_request: Optional[
            GetMaintainJobOverlapRoutingExclusionRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Job_Overlap_Routing_Exclusion_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetMaintainNoticePeriodsForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainNoticePeriodsForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetMaintainNoticePeriodsForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_notice_periods_for_country_request: Optional[
            GetMaintainNoticePeriodsForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Notice_Periods_For_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetMaintainProbationPeriodsForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainProbationPeriodsForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetMaintainProbationPeriodsForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_probation_periods_for_country_request: Optional[
            GetMaintainProbationPeriodsForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Probation_Periods_For_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetMaintainWorkingTimeForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainWorkingTimeForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetMaintainWorkingTimeForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_working_time_for_country_request: Optional[
            GetMaintainWorkingTimeForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Working_Time_for_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesInput.Body"] = (
        field(
            default=None,
            metadata={
                "name": "Body",
                "type": "Element",
            },
        )
    )
    header: Optional[
        "StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesInput.Header"
    ] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_notice_period_eligibility_rules_without_dependencies_request: Optional[
            GetNoticePeriodEligibilityRulesWithoutDependenciesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Notice_Period_Eligibility_Rules_Without_Dependencies_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetNoticePeriodEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNoticePeriodEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetNoticePeriodEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_notice_period_eligibility_rules_request: Optional[
            GetNoticePeriodEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Notice_Period_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetNoticePeriodsForWorkerInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNoticePeriodsForWorkerInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetNoticePeriodsForWorkerInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_notice_periods_for_worker_request: Optional[GetNoticePeriodsForWorkerRequest] = field(
            default=None,
            metadata={
                "name": "Get_Notice_Periods_for_Worker_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetPersonnelActionRequestStatusOnMassActionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetPersonnelActionRequestStatusOnMassActionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetPersonnelActionRequestStatusOnMassActionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_personnel_action_request_status_on_mass_action_request: Optional[
            GetPersonnelActionRequestStatusOnMassActionRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Personnel_Action_Request_Status_on_Mass_Action_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional[
        "StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesInput.Body"
    ] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional[
        "StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesInput.Header"
    ] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_eligibility_rules_without_dependencies_request: Optional[
            GetProbationPeriodEligibilityRulesWithoutDependenciesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Eligibility_Rules_Without_Dependencies_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetProbationPeriodEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetProbationPeriodEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_eligibility_rules_request: Optional[
            GetProbationPeriodEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetProbationPeriodOutcomeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodOutcomeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetProbationPeriodOutcomeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_outcome_request: Optional[GetProbationPeriodOutcomeRequest] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Outcome_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetProbationPeriodOutcomesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodOutcomesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetProbationPeriodOutcomesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_outcomes_request: Optional[GetProbationPeriodOutcomesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Outcomes_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetProbationPeriodsForWorkersInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodsForWorkersInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetProbationPeriodsForWorkersInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_periods_for_workers_request: Optional[
            GetProbationPeriodsForWorkersRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Periods_For_Workers_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetRemarksInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetRemarksInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetRemarksInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_remarks_request: Optional[GetRemarksRequest] = field(
            default=None,
            metadata={
                "name": "Get_Remarks_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetRoleAssignmentsForRoleAssignersInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetRoleAssignmentsForRoleAssignersInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetRoleAssignmentsForRoleAssignersInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_role_assignments_for_role_assigners_request: Optional[
            GetRoleAssignmentsForRoleAssignersRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Role_Assignments_For_Role_Assigners_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetStaffingFieldDefaultsConditionRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStaffingFieldDefaultsConditionRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetStaffingFieldDefaultsConditionRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_staffing_field_defaults_condition_rules_request: Optional[
            GetStaffingFieldDefaultsConditionRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Staffing_Field_Defaults_Condition_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional[
        "StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesInput.Body"
    ] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional[
        "StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesInput.Header"
    ] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_staffing_field_defaults_condition_rules_without_dependencies_request: Optional[
            GetStaffingFieldDefaultsConditionRulesWithoutDependenciesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Staffing_Field_Defaults_Condition_Rules_without_Dependencies_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetStaffingFieldDefaultsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStaffingFieldDefaultsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetStaffingFieldDefaultsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_staffing_field_defaults_request: Optional[GetStaffingFieldDefaultsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Staffing_Field_Defaults_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetStudentEmploymentEligibilityDataInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStudentEmploymentEligibilityDataInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetStudentEmploymentEligibilityDataInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_student_employment_eligibility_data_request: Optional[
            GetStudentEmploymentEligibilityDataRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Student_Employment_Eligibility_Data_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetStudentEmploymentEligibilityRuleSetInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStudentEmploymentEligibilityRuleSetInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetStudentEmploymentEligibilityRuleSetInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_student_employment_eligibility_rule_set_request: Optional[
            GetStudentEmploymentEligibilityRuleSetRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Student_Employment_Eligibility_Rule_Set_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetStudentEmploymentEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStudentEmploymentEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetStudentEmploymentEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_student_employment_eligibility_rules_request: Optional[
            GetStudentEmploymentEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Student_Employment_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetWorkerDocumentsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetWorkerDocumentsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetWorkerDocumentsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_worker_documents_request: Optional[GetWorkerDocumentsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Worker_Documents_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetWorkingTimeEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetWorkingTimeEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetWorkingTimeEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_working_time_eligibility_rules_request: Optional[
            GetWorkingTimeEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Get_Working_Time_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortHireEmployeeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortHireEmployeeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        hire_employee_event_response: Optional[HireEmployeeEventResponse] = field(
            default=None,
            metadata={
                "name": "Hire_Employee_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortHireEmployeeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortHireEmployeeOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutApplicantOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutApplicantOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_applicant_response: Optional[PutApplicantResponse] = field(
            default=None,
            metadata={
                "name": "Put_Applicant_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutApplicantOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutApplicantOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutCitizenshipStatusInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutCitizenshipStatusInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutCitizenshipStatusInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_citizenship_status_request: Optional[PutCitizenshipStatusRequest] = field(
            default=None,
            metadata={
                "name": "Put_Citizenship_Status_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutDependentOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutDependentOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_dependent_response: Optional[PutDependentResponse] = field(
            default=None,
            metadata={
                "name": "Put_Dependent_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutDependentOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortPutDependentOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutFseWorkerCategoryCriteriaInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutFseWorkerCategoryCriteriaInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutFseWorkerCategoryCriteriaInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_fse_worker_category_criteria_request: Optional[PutFseWorkerCategoryCriteriaRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_FSE_Worker_Category_Criteria_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutFunctionalityForStaffingTransactionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutFunctionalityForStaffingTransactionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutFunctionalityForStaffingTransactionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_functionality_for_staffing_transactions_request: Optional[
            PutFunctionalityForStaffingTransactionsRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Functionality_for_Staffing_Transactions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutGlobalStaffingEligibilityRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutGlobalStaffingEligibilityRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_global_staffing_eligibility_rule_response: Optional[
            PutGlobalStaffingEligibilityRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Global_Staffing_Eligibility_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutGlobalStaffingEligibilityRuleOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutGlobalStaffingEligibilityRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortPutHireEventProposedWorkerId:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutHireEventProposedWorkerIdInput
    output = StaffingPortPutHireEventProposedWorkerIdOutput


@dataclass
class StaffingPortPutMaintainJobOverlapRoutingExclusionRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainJobOverlapRoutingExclusionRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutMaintainJobOverlapRoutingExclusionRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_job_overlap_routing_exclusion_rule_request: Optional[
            PutMaintainJobOverlapRoutingExclusionRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Job_Overlap_Routing_Exclusion_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutMaintainProbationPeriodsForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainProbationPeriodsForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_probation_periods_for_country_response: Optional[
            PutMaintainProbationPeriodsForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Probation_Periods_For_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutMaintainProbationPeriodsForCountryOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutMaintainProbationPeriodsForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutMaintainWorkingTimeForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainWorkingTimeForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_working_time_for_country_response: Optional[
            PutMaintainWorkingTimeForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Working_Time_for_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutMaintainWorkingTimeForCountryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutMaintainWorkingTimeForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortPutPersonnelActionRequestStatusOnMassAction:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutPersonnelActionRequestStatusOnMassActionInput
    output = StaffingPortPutPersonnelActionRequestStatusOnMassActionOutput


@dataclass
class StaffingPortPutProbationPeriodEligibilityRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutProbationPeriodEligibilityRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_probation_period_eligibility_rule_response: Optional[
            PutProbationPeriodEligibilityRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Probation_Period_Eligibility_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutProbationPeriodEligibilityRuleOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutProbationPeriodEligibilityRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortPutProbationPeriodOutcomeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutProbationPeriodOutcomeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutProbationPeriodOutcomeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_probation_period_outcome_request: Optional[PutProbationPeriodOutcomeRequest] = field(
            default=None,
            metadata={
                "name": "Put_Probation_Period_Outcome_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutStudentEmploymentEligibilityStatus:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutStudentEmploymentEligibilityStatusInput
    output = StaffingPortPutStudentEmploymentEligibilityStatusOutput


@dataclass
class StaffingPortPutWorkerDocumentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutWorkerDocumentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutWorkerDocumentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_worker_document_request: Optional[PutWorkerDocumentRequest] = field(
            default=None,
            metadata={
                "name": "Put_Worker_Document_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutWorkingTimeEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutWorkingTimeEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_working_time_eligibility_rules_response: Optional[
            PutWorkingTimeEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Working_Time_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutWorkingTimeEligibilityRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutWorkingTimeEligibilityRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortSwitchPrimaryJobOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortSwitchPrimaryJobOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        switch_primary_job_event_response: Optional[SwitchPrimaryJobEventResponse] = field(
            default=None,
            metadata={
                "name": "Switch_Primary_Job_Event_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortSwitchPrimaryJobOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortSwitchPrimaryJobOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class AddRetireeStatusRequest(AddRetireeStatusRequestType):
    class Meta:
        name = "Add_Retiree_Status_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class AssignCostingAllocationEventDataType:
    """
    Specifies the costing allocation for the position.

    Attributes:
        costing_override_data: Specified the costing allocation for a given date range.
        costing_allocation_level_reference: Specifies the costing allocation level for the given
            costing allocation.
        costing_allocation_earning_reference: Reference to the Earning for this Costing Allocation.
            This is both required and only allowed when the Costing Allocation Level includes
            Earning.
    """

    class Meta:
        name = "Assign_Costing_Allocation_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    costing_override_data: list[CostingAllocationIntervalDataType] = field(
        default_factory=list,
        metadata={
            "name": "Costing_Override_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    costing_allocation_level_reference: Optional[CostingAllocationLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Costing_Allocation_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    costing_allocation_earning_reference: Optional[EarningAllObjectType] = field(
        default=None,
        metadata={
            "name": "Costing_Allocation_Earning_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignEmployeeCollectiveAgreementSubBusinessProcessType:
    """
    Wrapper to hold the business process configuration and data for Assign Employee Collective
    Agreement sub business process.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        assign_employee_collective_agreement_data: Wrapper element for Assign Employee Collective
            Agreement event as a sub.
    """

    class Meta:
        name = "Assign_Employee_Collective_Agreement_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_employee_collective_agreement_data: Optional[
        AssignEmployeeCollectiveAgreementSubDataType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Employee_Collective_Agreement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignMatrixOrganizationRequestHvtype:
    """Request for each worker, position, matrix org in Assign Matrix Organization."""

    class Meta:
        name = "Assign_Matrix_Organization_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_business_process_data: Optional[
        AssignMatrixOrganizationBusinessProcessDataType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Business_Process_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class AssignOrganizationEventDataType:
    """
    Wrapper element for the Assign Organization web service.

    Attributes:
        position_reference: Reference to a Position, Position Restriction or Headcount Restriction.
            If a Position Management Position ID is submitted, the Position Restriction and its
            filled position will be updated. Unless it has an overlapping position. If that is the
            case, the filled position for the submitted worker reference will be updated. If there
            is no submitted worker, then only the Position Restriction will be updated.
        worker_reference: Reference to the Employee or Contingent Worker. This value is only needed
            if the Position Reference is in an overlapped situation. When that happens, we need to
            worker reference in order to identify which of the filled positions for the Position ID
            should have its organizations changed.
        organization_reference: References the Organizations to assign to the indicated position.
        fund_reference: References the Funds to be assigned to the indicated position.
        grant_reference: References the Grants to be assigned to the indicated position.
        program_reference: References the Programs to be assigned to the indicated position.
        business_unit_reference: References the Business Units to be assigned to the indicated
            position.
        gift_reference: References the Gifts to be assigned to the indicated position.
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        as_of_effective_date: Date that the organization assignments will be effective.
    """

    class Meta:
        name = "Assign_Organization_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[StaffingInterfaceObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_reference: list[OrganizationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    fund_reference: list[FundObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Fund_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    grant_reference: list[GrantObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Grant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    program_reference: list[ProgramObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Program_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_unit_reference: list[BusinessUnitObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gift_reference: list[GiftObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Gift_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "As_Of_Effective_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationRolesRequestType:
    """
    This operation will assign organization roles to one ore more workers using the Assign
    Organization Roles business process event.

    Attributes:
        business_process_parameters: Container for the processing options for a business process. If
            no options are submitted (or the options are submitted as 'false') then the business
            process is simply initiated as if it where submitted on-line with approvals, reviews,
            notifications and to-do's in place. If the Initiator is an Integration System User, any
            validations you configured on the Initiation step are ignored.
        assign_organization_roles_data: Wrapper Element for the Assign Organization Roles web
            service.
        version
    """

    class Meta:
        name = "Assign_Organization_Roles_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_organization_roles_data: Optional[AssignOrganizationRolesEventDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationRolesSubBusinessProcessType:
    """
    Wrapper to hold the business process configuration and organization role assignment details.

    For fields that accept worker, worker's position as of specified
    effective date will be determined when event is submitted, not when
    it is completed. This means if worker is being assigned a new
    position and worker is specified, role will be assigned to their
    existing position and not their new position. Workday recommends you
    use 'Assign_Roles_Subprocess' instead to reduce the risk of your
    role assignments being inadvertently reversed due to another role
    assignment event being processed at the same time or later-dated
    role assignments.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        assign_organization_roles_event_data: Wrapper element for organization role assignment data.
    """

    class Meta:
        name = "Assign_Organization_Roles_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_organization_roles_event_data: Optional[AssignOrganizationRolesEventDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignRolesRequest(AssignRolesRequestType):
    class Meta:
        name = "Assign_Roles_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangeGovernmentIdsBusinessProcessDataType:
    """
    Wrapper element for the Government Identifier data.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID reference for the person that the government
            identifier(s) will be applied to.
        government_identification_data
    """

    class Meta:
        name = "Change_Government_IDs_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    government_identification_data: Optional[GovernmentIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "Government_Identification_data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangeLegalNameResponseWrapperType:
    """
    Wrapper element for the Change Legal Name Business Process Data element.

    This is the element that contains data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_legal_name_data
    """

    class Meta:
        name = "Change_Legal_Name_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_legal_name_data: Optional[ChangeLegalNameBusinessProcessDataType] = field(
        default=None,
        metadata={
            "name": "Change_Legal_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeLicensesBusinessProcessDataType:
    """
    Wrapper element for the License Identifier data.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID reference for the person that the license identifier(s)
            will be applied to.
        license_identification_data
    """

    class Meta:
        name = "Change_Licenses_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    license_identification_data: Optional[LicenseIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "License_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangeOrganizationAssignmentsDataType:
    """
    Wrapper element for the Change Organization Assignments web service.

    Attributes:
        position_reference: Reference to a Position, Position Restriction or Headcount Restriction.
            If a Position Management Position ID is submitted, the Position Restriction and its
            filled position will be updated. Unless it has an overlapping position. If that is the
            case, the filled position for the submitted worker reference will be updated. If there
            is no submitted worker, then only the Position Restriction will be updated.
        worker_reference: Reference to the Employee or Contingent Worker. This value is only needed
            if the Position Reference is in an overlapped situation. When that happens, we need to
            worker reference in order to identify which of the filled positions for the Position ID
            should have its organizations changed.
        position_organization_assignments_data
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        effective_date: Effective date of the organization assignments.
    """

    class Meta:
        name = "Change_Organization_Assignments_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[StaffingInterfaceObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_organization_assignments_data: Optional[AssignPositionOrganizationEventDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_Organization_Assignments_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeOtherIdsBusinessProcessDataType:
    """
    Wrapper element for the Other Identifier Data.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID Reference for the Person that the Passport and Visa
            will be applied to.
        custom_identification_data
    """

    class Meta:
        name = "Change_Other_IDs_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_identification_data: Optional[CustomIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "Custom_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangePassportsAndVisasBusinessProcessDataType:
    """
    Wrapper element for the Passport and Visa Identifier data.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID Reference for the Person that the Passport and Visa
            will be applied to.
        passports_and_visas_identification_data
    """

    class Meta:
        name = "Change_Passports_and_Visas_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passports_and_visas_identification_data: Optional[PassportsAndVisasIdentificationDataType] = (
        field(
            default=None,
            metadata={
                "name": "Passports_and_Visas_Identification_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )


@dataclass
class ChangePreferredNameResponseWrapperType:
    """
    Wrapper element for the Change Preferred Name Business Process Data element.

    This is the element that contains data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_preferred_name_data
    """

    class Meta:
        name = "Change_Preferred_Name_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_preferred_name_data: Optional[ChangePreferredNameBusinessProcessDataType] = field(
        default=None,
        metadata={
            "name": "Change_Preferred_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeWorkSpaceRequest(ChangeWorkSpaceRequestType):
    class Meta:
        name = "Change_Work_Space_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ClosePositionRequest(ClosePositionRequestType):
    class Meta:
        name = "Close_Position_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class CollectiveAgreementResponseDataType:
    """Collective Agreement Response Data Element."""

    class Meta:
        name = "Collective_Agreement_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement: list[CollectiveAgreementType] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CollectiveAgreementSummaryDataType:
    """
    Encapsulating element containing all Collective Agreement data.

    Including Corrected data.
    """

    class Meta:
        name = "Collective_Agreement_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    collective_agreement_data: Optional[CollectiveAgreementDetailDataType] = field(
        default=None,
        metadata={
            "name": "Collective_Agreement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContactInformationDataType:
    """
    All of the person's contact data (address, phone, email, instant messenger, web address).

    Attributes:
        address_data: Address information
        phone_data: Phone Information
        email_address_data: Email Address Information
        instant_messenger_data: Instant Messenger Information
        web_address_data: Web Address Information
    """

    class Meta:
        name = "Contact_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    address_data: list[AddressInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Address_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    phone_data: list[PhoneInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Phone_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    email_address_data: list[EmailAddressInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Email_Address_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    instant_messenger_data: list[InstantMessengerInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Instant_Messenger_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    web_address_data: list[WebAddressInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Web_Address_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CountryPersonalInformationDataType:
    """
    Country Specific Personal Information.

    Attributes:
        marital_status_reference: Marital Status
        marital_status_date: Marital Status date
        religion_reference: Religion
        disability_status_data: Disability
        ethnicity_reference: Ethnicity
        race_ethnicity_details_reference: Reference for the person's Race/Ethnicity Details.
        ethnicity_visual_survey_reference: Race/Ethnicity Visual Survey
        hispanic_or_latino: Hispanic or Latino
        hispanic_or_latino_visual_survey: Hispanic Latino Visual Survey
        aboriginal_indigenous_identification_reference: Reference for a person's
            Aboriginal/Indigenous Identification.
        aboriginal_indigenous_identification_details_reference: Reference for a person's
            Aboriginal/Indigenous Identification Details.
        hukou_region_reference: Hukou Region
        hukou_subregion_reference: Hukou Subregion
        hukou_locality: Hukou Locality
        hukou_postal_code: Hukou Postal Code
        hukou_type_reference: Hukou Type
        local_hukou: Local Hukou
        native_region_reference: Hukou Native Region
        native_region_descriptor: Native Region Name
        personnel_file_agency_for_person: Personnel File Agency
        political_affiliation_reference: Political Affiliation
        social_benefits_locality_reference: Social Benefits Locality
        relative_name_information_data: Relative Name Information
        sexual_orientation_and_gender_identity_reference: Sexual Orientation &amp; Gender Identity
        gender_reference: Gender
        reporting_gender_reference: Reporting Gender
        veterans_preference_reference: Veteran's Preference
        veterans_preference_for_rif_reference: Veteran's Preference for RIF
        selective_service_registration_reference: Selective Service Registration
        disabled_veteran_leave_date_reference: Disabled Veteran Leave Date
        active_military_uniformed_service_reference: Active Military Uniformed Service
        uniform_service_reserve_status_reference: Uniform Service Reserve Status
    """

    class Meta:
        name = "Country_Personal_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    marital_status_reference: Optional[MaritalStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Marital_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    marital_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Marital_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    religion_reference: Optional[ReligionObjectType] = field(
        default=None,
        metadata={
            "name": "Religion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_status_data: list[PersonDisabilityStatusDataType] = field(
        default_factory=list,
        metadata={
            "name": "Disability_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ethnicity_reference: list[EthnicityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Ethnicity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    race_ethnicity_details_reference: list[EthnicityDetailsObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Race_Ethnicity_Details_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ethnicity_visual_survey_reference: list[EthnicityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Ethnicity_Visual_Survey_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hispanic_or_latino: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hispanic_or_Latino",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hispanic_or_latino_visual_survey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hispanic_or_Latino_Visual_Survey",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aboriginal_indigenous_identification_reference: Optional[
        AboriginalIndigenousIdentificationSelectionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Aboriginal_Indigenous_Identification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aboriginal_indigenous_identification_details_reference: list[
        AboriginalIndigenousDetailsObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Aboriginal_Indigenous_Identification_Details_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_subregion_reference: Optional[CountrySubregionObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Subregion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_locality: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hukou_Locality",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_postal_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hukou_Postal_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_type_reference: Optional[HukouTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_hukou: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Local_Hukou",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    native_region_reference: list[CountryRegionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Native_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    native_region_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Native_Region_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personnel_file_agency_for_person: Optional[str] = field(
        default=None,
        metadata={
            "name": "Personnel_File_Agency_for_Person",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    political_affiliation_reference: Optional[PoliticalAffiliationObjectType] = field(
        default=None,
        metadata={
            "name": "Political_Affiliation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    social_benefits_locality_reference: Optional[SocialBenefitsLocalityObjectType] = field(
        default=None,
        metadata={
            "name": "Social_Benefits_Locality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    relative_name_information_data: list[RelativeNameDataType] = field(
        default_factory=list,
        metadata={
            "name": "Relative_Name_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sexual_orientation_and_gender_identity_reference: list[LgbtIdentificationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Sexual_Orientation_and_Gender_Identity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reporting_gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Reporting_Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    veterans_preference_reference: list[VeteransPreferenceObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Veterans_Preference_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    veterans_preference_for_rif_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Veterans_Preference_For_RIF_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    selective_service_registration_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Selective_Service_Registration_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disabled_veteran_leave_date_reference: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disabled_Veteran_Leave_Date_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    active_military_uniformed_service_reference: Optional[CommonBooleanEnumerationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Active_Military_Uniformed_Service_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    uniform_service_reserve_status_reference: Optional[UniformServiceReserveStatusObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Uniform_Service_Reserve_Status_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class CreditableServiceResponseDataType:
    """
    Creditable Service Change Response Data.

    Attributes:
        creditable_service_change: Creditable Service Change
    """

    class Meta:
        name = "Creditable_Service_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    creditable_service_change: list[CreditableServiceChangeType] = field(
        default_factory=list,
        metadata={
            "name": "Creditable_Service_Change",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DependentDataType:
    """
    Contains the detailed information for a dependent.

    Attributes:
        dependent_id: The ID for the dependent.
        full_time_student: Boolean attribute identifying whether Dependent is a Full-time Student.
        student_status_start_date: The date the dependent became a full-time student.
        student_status_end_date: The date the dependent's student status ended (no longer a full-
            time student)
        disabled: Boolean attribute identifying whether Dependent is Disabled.
        inactive_date: If inactive, the date from which dependent is inactive.
        dependent_for_payroll_purposes: Tells if this dependent's information is used in payroll
            calculations. Only use if dependents for payroll purposes are being tracked for the
            location context of the worker for this dependent.
        citizenship_status_reference: Reference to the legal status of the dependent.
        country_of_nationality_reference: Reference to the primary country of which the dependent is
            a national.
        country_of_birth_reference: Reference to the dependent's country of birth.
        region_of_birth_reference: Reference to the dependent's country region of birth.
        city_of_birth: The dependent's city of birth.
        court_order
        lives_with_worker_data
        has_health_insurance_data
        allowed_for_tax_deduction_data
        annual_income_data
        occupation_data
        disability_data
    """

    class Meta:
        name = "Dependent_DataType"
        target_namespace = "urn:com.workday/bsvc"

    dependent_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Dependent_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    full_time_student: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Full-time_Student",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_status_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Student_Status_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_status_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Student_Status_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disabled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Disabled",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Inactive_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dependent_for_payroll_purposes: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Dependent_for_Payroll_Purposes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_reference: list[CitizenshipStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_of_nationality_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_of_Nationality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_of_birth_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_of_birth_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Region_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth: Optional[str] = field(
        default=None,
        metadata={
            "name": "City_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    court_order: list[QualifiedDomesticRelationsOrderReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Court_Order",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    lives_with_worker_data: list[LivesWithWorkerDataType] = field(
        default_factory=list,
        metadata={
            "name": "Lives_With_Worker_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    has_health_insurance_data: list[HasHealthInsuranceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Has_Health_Insurance_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allowed_for_tax_deduction_data: list[AllowedForTaxDeductionDataType] = field(
        default_factory=list,
        metadata={
            "name": "Allowed_for_Tax_Deduction_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    annual_income_data: list[AnnualIncomeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Annual_Income_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    occupation_data: list[OccupationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Occupation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_data: list[DisabilityInformationDataForRelatedPersonType] = field(
        default_factory=list,
        metadata={
            "name": "Disability_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DevelopmentPlanDataType:
    """
    Contains the latest completed development plan for the employee.

    Attributes:
        development_plan_reference: Contains a reference to latest completed development plan for
            the employee.
        review_data: Contains the information about the development plan for the employee.
    """

    class Meta:
        name = "Development_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    development_plan_reference: Optional[DevelopmentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Development_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_data: Optional[EmployeeReviewDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DisciplinaryActionDataType:
    """
    Contains the latest completed disciplinary action for the employee.

    Attributes:
        disciplinary_action_reference: Contains a reference to latest completed disciplinary action
            for the employee.
        disciplinary_action_reason_reference: The reason why the disciplinary action was taken.
        disciplinary_action_related_to_reference: The prior disciplinary action(s) that this is
            related to.
        review_data: Contains the information about the disciplinary action for the employee.
    """

    class Meta:
        name = "Disciplinary_Action_DataType"
        target_namespace = "urn:com.workday/bsvc"

    disciplinary_action_reference: Optional[DisciplinaryActionObjectType] = field(
        default=None,
        metadata={
            "name": "Disciplinary_Action_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disciplinary_action_reason_reference: list[DisciplinaryActionReasonObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Disciplinary_Action_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disciplinary_action_related_to_reference: list[DisciplinaryActionObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Disciplinary_Action_Related_To_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_data: Optional[EmployeeReviewDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditCreditableServiceRequest(EditCreditableServiceRequestType):
    class Meta:
        name = "Edit_Creditable_Service_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditCustomIdsSubBusinessProcessType:
    """
    The main element for the Edit Other IDs Business Process.

    This contains all the Custom IDs and Business Processing processing parameters.
    """

    class Meta:
        name = "Edit_Custom_IDs_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    custom_identification_data: list[CustomIdentificationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Custom_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditEmployeeContractAdditionalDataRequest(EditEmployeeContractAdditionalDataRequestType):
    class Meta:
        name = "Edit_Employee_Contract_Additional_Data_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditGovernmentIdsSubBusinessProcessType:
    """
    The main element for the Edit Government IDs Business Process.

    This contains all the Government IDs information  and Business Processing processing parameters.
    """

    class Meta:
        name = "Edit_Government_IDs_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    government_identification_data: list[GovernmentIdentificationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Government_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditLicensesSubBusinessProcessType:
    """
    The main element for the Edit Licenses Business Process.

    This contains all the License IDs and Business Processing processing parameters.
    """

    class Meta:
        name = "Edit_Licenses_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    license_identification_data: list[LicenseIdentificationDataType] = field(
        default_factory=list,
        metadata={
            "name": "License_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditNoticePeriodsSubBusinessProcessType:
    """Wrapper element for Edit Notice Periods sub business process."""

    class Meta:
        name = "Edit_Notice_Periods_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_notice_periods_data: Optional[EditNoticePeriodsDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Notice_Periods_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPassportsAndVisasSubBusinessProcessType:
    """
    The main element for the Edit Passports and Visas Business Process.

    This contains all the Passports and Visas IDs.
    """

    class Meta:
        name = "Edit_Passports_and_Visas_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passports_and_visas_identification_data: list[PassportsAndVisasIdentificationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Passports_and_Visas_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRestrictionsAdditionalDataRequest(
    EditPositionRestrictionsAdditionalDataRequestType
):
    class Meta:
        name = "Edit_Position_Restrictions_Additional_Data_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditServiceDatesRequest(EditServiceDatesRequestType):
    class Meta:
        name = "Edit_Service_Dates_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditWorkerAdditionalDataRequest(EditWorkerAdditionalDataRequestType):
    class Meta:
        name = "Edit_Worker_Additional_Data_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EmployeeContractRulesForCountryResponseDataType:
    """
    Employee Contract Rules for Country Data.

    Attributes:
        maintain_employee_contract_rules_for_country: Employee Contract Rules For Country Get Data
            Element
    """

    class Meta:
        name = "Employee_Contract_Rules_For_Country_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_employee_contract_rules_for_country: list[
        EmployeeContractRulesForCountryGetDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Employee_Contract_Rules_For_Country",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EventTargetTransactionLogRescindAndCorrectDataType:
    """
    Encapsulating element containing transaction log entries that have been rescinded or corrected.

    Attributes:
        corrected_or_rescinded_transaction_log_data: The details of the transaction that has been
            rescinded or corrected.
    """

    class Meta:
        name = "Event_Target_Transaction_Log_Rescind_And_Correct_DataType"
        target_namespace = "urn:com.workday/bsvc"

    corrected_or_rescinded_transaction_log_data: list[CorrectedOrRescindedTransactionDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Corrected_Or_Rescinded_Transaction_Log_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class FreezePositionRequest(FreezePositionRequestType):
    class Meta:
        name = "Freeze_Position_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GenericPersonalInformationDataType:
    """
    Container for the Personal Information data.

    Attributes:
        gender_reference: Reference to the Gender of the person.
        date_of_birth: Person's Date of Birth.
        date_of_death: Person's Date of Death.
        birth_country_reference: Country where the person was born.
        birth_region_reference: Country Region where the person was born.
        city_of_birth: Person's City of Birth.
        marital_status_reference: Reference for the person's Marital Status.
        marital_status_date: Person's Marital Status Date.
        ethnicity_reference: Reference for the person's Ethnicities.
        hispanic_or_latino: Boolean to indicate if a person is Hispanic or Latino.
        religion_reference: Reference for a person's Religions.
        citizenship_reference: Reference for the person's Citizenship Status.
        nationality_reference: Reference for the person's Country of Nationality
        hukou_region_reference: Country region on the Hukou of the person. This field is only
            available for the country China and the person with citizenship status of China.
        hukou_subregion_reference: Country subregion on the Hukou of the person. This field is only
            available for the country China and the person with citizenship status of China.
        hukou_locality: Locality on the Hukou of the person. This field is only available for the
            country China and the person with citizenship status of China.
        hukou_postal_code: Hukou postal code for the person. This field is only available for the
            country China and the person with citizenship status of China.
        hukou_type_reference: Hukou type on the Hukou of the person. This field is only available
            for the country China and the person with citizenship status of China.
        native_region_reference: Native region on the Hukou of the person. This field is only
            available for the country China and the person with citizenship status of China.
        personnel_file_agency: Personnel File Agency is used in China to indicate where persons have
            their personnel file stored.
        political_affiliation_reference: Person's Political Affiliation.
        social_benefits_locality_reference: Person's social benefits locality.
        last_medical_exam_date: Date of person's most recent Medical Examination.
        last_medical_exam_valid_to: Expiration date of person's most recent Medical Examination.
        medical_exam_notes: Notes for the person's most recent Medical Examination.
        disability_information_data
        military_information_data
        uses_tobacco: True if the person uses tobacco.  To update a person's Tobacco Use, use the
            Put Worker Wellness Data web service.
    """

    class Meta:
        name = "Generic_Personal_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_death: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Death",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    birth_country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Birth_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    birth_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Birth_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth: Optional[str] = field(
        default=None,
        metadata={
            "name": "City_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    marital_status_reference: Optional[MaritalStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Marital_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    marital_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Marital_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ethnicity_reference: list[EthnicityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Ethnicity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hispanic_or_latino: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hispanic_or_Latino",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    religion_reference: Optional[ReligionObjectType] = field(
        default=None,
        metadata={
            "name": "Religion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_reference: list[CitizenshipStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    nationality_reference: Optional[CountryAndNationalityObjectType] = field(
        default=None,
        metadata={
            "name": "Nationality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_subregion_reference: Optional[CountrySubregionObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Subregion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_locality: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hukou_Locality",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_postal_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hukou_Postal_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_type_reference: Optional[HukouTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    native_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Native_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personnel_file_agency: Optional[str] = field(
        default=None,
        metadata={
            "name": "Personnel_File_Agency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    political_affiliation_reference: Optional[PoliticalAffiliationObjectType] = field(
        default=None,
        metadata={
            "name": "Political_Affiliation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    social_benefits_locality_reference: Optional[SocialBenefitsLocalityObjectType] = field(
        default=None,
        metadata={
            "name": "Social_Benefits_Locality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_medical_exam_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Medical_Exam_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_medical_exam_valid_to: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Medical_Exam_Valid_To",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    medical_exam_notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Medical_Exam_Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_information_data: list[GenericDisabilityInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Disability_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_information_data: list[GenericMilitaryInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Military_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    uses_tobacco: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Uses_Tobacco",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetApplicantsRequest(GetApplicantsRequestType):
    class Meta:
        name = "Get_Applicants_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCitizenshipStatusesResponseType:
    """
    Response Element for Get Citizenship Statuses.

    Attributes:
        request_references: The reference of the Citizenship Status requested.
        response_filter
        response_results
        response_data: Response Data for the Citizenship Status.
        version
    """

    class Meta:
        name = "Get_Citizenship_Statuses_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CitizenshipStatusRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CitizenshipStatusResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFseWorkerCategoryCriteriasResponseType:
    """
    The element containing all necessary information to retrieve FSE Worker Category Criteria for
    Worker Category Definition.

    Attributes:
        request_references: The FSE Worker Category Criteria References to extract
        response_filter
        response_results
        response_data: The element containing all necessary information to retrieve FSE Worker
            Category Criteria for Worker Category Definition
        version
    """

    class Meta:
        name = "Get_FSE_Worker_Category_Criterias_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[FseWorkerCategoryCriteriaRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[FseWorkerCategoryCriteriaResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFunctionalityForStaffingTransactionsResponseType:
    """
    The Functionality for Staffing Transactions configuration retrieved by the web service.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_group
        response_results
        response_data: Contains the data for Functionality for Staffing Transactions.
        version
    """

    class Meta:
        name = "Get_Functionality_for_Staffing_Transactions_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[FunctionalityForStaffingTransactionsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[FunctionalityForStaffingTransactionsRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[FunctionalityForStaffingTransactionsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[FunctionalityForStaffingTransactionsResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobFamiliesRequest(GetJobFamiliesRequestType):
    class Meta:
        name = "Get_Job_Families_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainJobOverlapRoutingExclusionRuleResponseType:
    """Contains Job Overlap Routing Exclusion Rules and their associated data."""

    class Meta:
        name = "Get_Maintain_Job_Overlap_Routing_Exclusion_Rule_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[MaintainJobOverlapRoutingExclusionRuleRequestReferencesType] = (
        field(
            default=None,
            metadata={
                "name": "Request_References",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_criteria: Optional[MaintainJobOverlapRoutingExclusionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[MaintainJobOverlapRoutingExclusionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[MaintainJobOverlapRoutingExclusionRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNatureOfActionsRequest(GetNatureOfActionsRequestType):
    class Meta:
        name = "Get_Nature_of_Actions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodsResponseDataType:
    """
    Contains the employer/employee Notice Period response data specific to the Notice Period Target
    request and As Of Effective Date.

    Attributes:
        notice_period_data_for_notice_period_target: Contains the employer/employee Notice Period
            response data specific to the Notice Period Target request and As Of Effective Date.
    """

    class Meta:
        name = "Get_Notice_Periods_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_data_for_notice_period_target: list[NoticePeriodDataForNoticePeriodTargetType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Notice_Period_Data_for_Notice_Period_Target",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class GetOrganizationsRequestType:
    """
    Root element for Get Organizations operation request.

    Attributes:
        request_references: Wrapper element containing references to specific organizations
        request_criteria: Wrapper element containing filtering criteria to subset the organizations
            to return in the response.
        response_filter
        response_group: The response group allows for the response data to be tailored to only
            included elements that the user is looking for.  If no response group is provided in the
            request, then only the following elements will be returned:  Reference, Organization
            Data, Hierarchy Data and if a Supervisory Organization Type the Supervisory Data.
        version
    """

    class Meta:
        name = "Get_Organizations_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ContextuallySecuredOrganizationRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[OrganizationRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[OrganizationResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetPersonnelActionRequestStatusOnMassActionResponse(
    GetPersonnelActionRequestStatusOnMassActionResponseType
):
    class Meta:
        name = "Get_Personnel_Action_Request_Status_on_Mass_Action_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPositionsRequestType:
    """
    Request element  to get position management positions and their associated data.

    Attributes:
        request_references: Utilize the Request References element to retrieve a specific
            instance(s) of  Position and its associated data.
        request_criteria: Utilize the Request Criteria element to search the transaction log for
            specific instance(s) of a Position.
        response_filter: The "Response_Filter" element contains common WWS information that allows
            you control the response data that you will be provided including As_Of_Date,
            As_Of_Entry_Moment, and Page attributes.
        response_group: The response group allows for the response data to be tailored to only
            included elements that the user is looking for.  If no response group is provided in the
            request the only the following elements will be returned:  Reference and Position
            Definition Data
        version
    """

    class Meta:
        name = "Get_Positions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[PositionRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[PositionRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[PositionResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodOutcomeResponseType:
    """Get Probation Period Outcome Response Element."""

    class Meta:
        name = "Get_Probation_Period_Outcome_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodOutcomeRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ProbationPeriodOutcomeRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ProbationPeriodOutcomeResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodsForWorkersResponseType:
    """Holds the Get Probation Periods For a Worker Response."""

    class Meta:
        name = "Get_Probation_Periods_For_Workers_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodsForWorkersRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[GetProbationPeriodsForWorkerResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStudentEmploymentEligibilityDataResponseType:
    """Response of Student Employment Eligibility with supporting information."""

    class Meta:
        name = "Get_Student_Employment_Eligibility_Data_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StudentEmploymentEligibilityEventRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StudentEmploymentEligibilityEventResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StudentEmploymentEligibilityEventResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetWorkerDocumentsResponseType:
    """
    Response element for Get Worker Documents.

    Attributes:
        request_references
        response_filter
        response_group
        response_results
        response_data: Worker Document Response Data containing the retrieved Worker Document
            information.
        version
    """

    class Meta:
        name = "Get_Worker_Documents_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkerDocumentRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[WorkerDocumentResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[WorkerDocumentResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetWorkersRequestType:
    """Request element used to find and get workers and their associated data."""

    class Meta:
        name = "Get_Workers_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkerRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[WorkerRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[WorkerResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GlobalStaffingEligibilityRuleDataType:
    """Global Staffing Eligibility Rule Get Data Element."""

    class Meta:
        name = "Global_Staffing_Eligibility_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_data: Optional[ConditionRuleDataWwstype] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HealthSavingsAccountCoverageDataType:
    """
    Contains the spending account coverage information (elections) for an employee.

    Attributes:
        benefit_election_data: The election information for the coverage.
        health_savings_account_election_info_data: More information on Health Savings Account
            Election such as coverage target.
        employee_contribution_data: Contains the health saving account election information
            including the contribution, payroll interface contribution, goal, and annual
            contribution information.
        employer_contribution_data: Contains the employer contribution amount information for the
            health saving election.
    """

    class Meta:
        name = "Health_Savings_Account_Coverage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_election_data: Optional[WorkerBenefitElectionDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Election_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    health_savings_account_election_info_data: Optional[
        HealthSavingsAccountElectionInfoDataType
    ] = field(
        default=None,
        metadata={
            "name": "Health_Savings_Account_Election_Info_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contribution_data: Optional[EmployeeContributionDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employer_contribution_data: Optional[EmployerContributionDataType] = field(
        default=None,
        metadata={
            "name": "Employer_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportMoveWorkersByOrganizationRequestType:
    """
    Root Element for the Import Move Workers by Organization Web Service.

    Attributes:
        move_workers_by_organization_hv: Move Worker By Organization Information
        version
    """

    class Meta:
        name = "Import_Move_Workers_By_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    move_workers_by_organization_hv: list[MoveWorkersByOrganizationRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Move_Workers_By_Organization_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportRemoveMatrixOrganizationRequestHvtype:
    """Request for each worker, position, matrix org in Remove Matrix Organization."""

    class Meta:
        name = "Import_Remove_Matrix_Organization_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_matrix_organization_business_process_data: Optional[
        RemoveMatrixOrganizationBusinessProcessDataType
    ] = field(
        default=None,
        metadata={
            "name": "Remove_Matrix_Organization_Business_Process_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class JobClassificationGroupNewType:
    """
    Response element containing an instance of Job Classification Group and its associated data.

    Attributes:
        job_classification_group_reference: A unique identifier for the Job Classification Group.
        job_classification_group_name_data: Encapsulating element containing Job Classification
            Group data.
        job_classification_group_data: Contains the detailed information about a Job Classification
            Group.
        as_of_date: Defines the As Of Date to be used for any application effective dated data
            within the Workday system.  For "Request" elements, the "As Of Date" determines what
            data is to be used within search logic or returned in a response.  For "Response"
            elements, this element will echo "As Of Date" entered in the "Request" element or the
            default "As Of Date" if omitted..
        as_of_moment: Defines the latest moment (e.g. datetime) data was entered into the Workday
            system.  For "Request" elements, the "As Of Moment" determines what data is to be used
            within search logic or returned in a response.  For "Response" elements, this element
            will echo "As Of Moment" entered in the "Request" element or the default "As Of Moment"
            if omitted.
    """

    class Meta:
        name = "Job_Classification_Group_NewType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_group_reference: Optional[JobClassificationGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_group_name_data: list[JobClassificationGroupReferenceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification_Group_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_group_data: list[JobClassificationGroupDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification_Group_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "As_Of_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_moment: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "As_Of_Moment",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyGroupJobFamilyType:
    """
    Job Family Data.

    Contains the references to Job Families contained in the group.
    Optionally contains other data about the contained families, however
    this extra data is for information only and cannot be updated here.

    Attributes:
        job_family_reference: Reference element representing a unique instance of Job Family.
        job_family_info_data: Optional, read-only, data about the job family.  This extra
            information is optionally provided on the Get operation.
        delete: Flag indicating that the association of the given Job Family should be removed from
            the group.
    """

    class Meta:
        name = "Job_Family_Group_Job_FamilyType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    job_family_info_data: Optional[JobFamilyGroupJobFamilyDataType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Info_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyResponseDataType:
    """
    Job Family Response Data containing the retrieved Job Family information.

    Attributes:
        job_family: contains the retrieved Job Family information
    """

    class Meta:
        name = "Job_Family_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_family: list[JobFamilyType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobOverlapRoutingExclusionRuleDataType:
    """Contains the Job Overlap Routing Exclusion Rule data."""

    class Meta:
        name = "Job_Overlap_Routing_Exclusion_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_data: list[ConditionRuleDataWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LegalAuthorityResponseDataType:
    """
    Legal Authority Response Data Element.

    Attributes:
        legal_authority: Legal Authority Element
    """

    class Meta:
        name = "Legal_Authority_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    legal_authority: list[LegalAuthorityType] = field(
        default_factory=list,
        metadata={
            "name": "Legal_Authority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class LocationSummaryDataType:
    """
    Encapsulating element containing a brief summary of Location data.

    Attributes:
        location_reference: A reference to a location.
        name: The name of the location.
        location_type_reference: The type(s) of a location.
        local_reference: The locale for the location.
        display_language_reference: The default user language for this location.
        time_profile_reference: The time profile for the location.
        scheduled_weekly_hours: The scheduled weekly hours from the location's time profile.
        address_data: Address information
    """

    class Meta:
        name = "Location_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_type_reference: list[LocationTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    local_reference: Optional[LocaleObjectType] = field(
        default=None,
        metadata={
            "name": "Local_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    display_language_reference: Optional[UserLanguageObjectType] = field(
        default=None,
        metadata={
            "name": "Display_Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    time_profile_reference: Optional[TimeProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Time_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scheduled_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    address_data: list[AddressInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Address_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class MaintainEmployeeContractsRequest(MaintainEmployeeContractsRequestType):
    class Meta:
        name = "Maintain_Employee_Contracts_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ManageEducationDataForRoleType:
    """
    Wrapper element for Education Data.

    Attributes:
        role_reference: Reference to a role
        source_reference: Reference to the source of the skill.
        education
    """

    class Meta:
        name = "Manage_Education_Data_for_RoleType"
        target_namespace = "urn:com.workday/bsvc"

    role_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    source_reference: Optional[PersonQualificationSourceCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education: list[EducationType] = field(
        default_factory=list,
        metadata={
            "name": "Education",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManageProbationPeriodSubBusinessProcessType:
    """Details of the Probation Period being added to the Worker."""

    class Meta:
        name = "Manage_Probation_Period_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_employee_probation_period_data: Optional[ManageEmployeeProbationPeriodSubDataType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Employee_Probation_Period_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class MoveWorkersByOrganizationRequest(MoveWorkersByOrganizationRequestType):
    class Meta:
        name = "Move_Workers_By_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class NatureOfActionResponseDataType:
    """Nature of Action Response Data element."""

    class Meta:
        name = "Nature_of_Action_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    nature_of_action: list[NatureOfActionType] = field(
        default_factory=list,
        metadata={
            "name": "Nature_of_Action",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoShowRequest(NoShowRequestType):
    class Meta:
        name = "No_Show_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class NoticePeriodEligibilityRuleDataType:
    """
    Notice Period Eligibility Rule Data Element.

    Attributes:
        condition_rule_data: Condition Rule Data WWS Element
    """

    class Meta:
        name = "Notice_Period_Eligibility_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_data: Optional[ConditionRuleDataWwstype] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodsForCountryResponseDataType:
    """
    Response Data element for Get Maintain Notice Periods for Country web service.

    Attributes:
        maintain_notice_periods_for_country: Notice Periods For Country Get Data
    """

    class Meta:
        name = "Notice_Periods_For_Country_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_notice_periods_for_country: list[NoticePeriodsForCountryGetDataType] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Notice_Periods_For_Country",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationSummaryDataType:
    """
    Contains the details about the organization.

    Attributes:
        organization_reference_id: The Organization Reference ID for the organization.
        organization_code: Text attribute identifying Organization Code. A new effective-dated
            organization name is automatically created if value for this field is different as of
            specified effective date.
        integration_id_data
        organization_name: The name of the organization.
        organization_type_reference: A unique identifier for the type of organization.
        organization_subtype_reference: A unique identifier for the subtype of the organization.
        primary_business_site_reference: A unique identifier for the primary location of the
            organization.
        organization_support_role_data
        date_of_pay_group_assignment: The Date the Pay Group was assigned to the Payee.
        used_in_change_organization_assignments: Returns true if this organization type is used in
            the Change Organizations business process.
    """

    class Meta:
        name = "Organization_Summary_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_reference_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Organization_Reference_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Organization_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    integration_id_data: list[ExternalIntegrationIdDataType] = field(
        default_factory=list,
        metadata={
            "name": "Integration_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Organization_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_type_reference: Optional[OrganizationTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_subtype_reference: Optional[OrganizationSubtypeObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Subtype_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_business_site_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Business_Site_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_support_role_data: Optional[OrganizationSupportRoleType] = field(
        default=None,
        metadata={
            "name": "Organization_Support_Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_pay_group_assignment: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Pay_Group_Assignment",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    used_in_change_organization_assignments: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Used_in_Change_Organization_Assignments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceImprovementPlanDataType:
    """
    Contains the latest completed performance improvement plan for the employee.

    Attributes:
        performance_improvement_plan_reference: Contains a reference to latest completed performance
            improvement plan for the employee.
        review_data: Contains the information about the performance improvement plan for the
            employee.
    """

    class Meta:
        name = "Performance_Improvement_Plan_DataType"
        target_namespace = "urn:com.workday/bsvc"

    performance_improvement_plan_reference: Optional[PerformanceImprovementPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Performance_Improvement_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_data: Optional[EmployeeReviewDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PerformanceReviewDataType:
    """
    Contains the latest completed performance review for the employee.

    Attributes:
        performance_review_reference: Contains a reference to latest completed performance review
            for the employee.
        review_data: Contains the information about the performance review for the employee.
    """

    class Meta:
        name = "Performance_Review_DataType"
        target_namespace = "urn:com.workday/bsvc"

    performance_review_reference: Optional[PerformanceReviewObjectType] = field(
        default=None,
        metadata={
            "name": "Performance_Review_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    review_data: Optional[EmployeeReviewDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonNameDataType:
    """
    Contains the legal, preferred, and additional names for a person.

    Attributes:
        legal_name_data: Contains the legal name for a person.  A person must name one and only one
            legal name.
        preferred_name_data: Contains the preferred name for a person. If no preferred name is
            returned then the legal name is assumed to be the preferred name.  If a preferred name
            is not provided in a request then the legal name is assumed to be the preferred name.
        additional_name_data: Contains the additional names for a person, other than their legal and
            preferred names.  Additional names are not valid for applicants.
    """

    class Meta:
        name = "Person_Name_DataType"
        target_namespace = "urn:com.workday/bsvc"

    legal_name_data: Optional[LegalNameDataType] = field(
        default=None,
        metadata={
            "name": "Legal_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    preferred_name_data: Optional[PreferredNameDataType] = field(
        default=None,
        metadata={
            "name": "Preferred_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_name_data: list[AdditionalNameDataType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonnelActionRequestSubBusinessProcessType:
    """Wrapper element for the PAR Sub Business Process."""

    class Meta:
        name = "Personnel_Action_Request_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personnel_action_request_data: Optional[PersonnelActionRequestDataType] = field(
        default=None,
        metadata={
            "name": "Personnel_Action_Request_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionManagementChainsDataType:
    """Contains the worker's organizations that they are a member of related to the position."""

    class Meta:
        name = "Position_Management_Chains_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_supervisory_management_chain_data: Optional[
        WorkerSupervisoryManagementChainDataType
    ] = field(
        default=None,
        metadata={
            "name": "Position_Supervisory_Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_matrix_management_chain_data: Optional[WorkerMatrixManagementChainDataType] = field(
        default=None,
        metadata={
            "name": "Position_Matrix_Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodEligibilityRuleDataType:
    """
    Probation Period Eligibility Rule Data Element.

    Attributes:
        condition_rule_data: Condition Rule Data WWS Element
    """

    class Meta:
        name = "Probation_Period_Eligibility_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_data: Optional[ConditionRuleDataWwstype] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodOutcomesForCountryResponseDataType:
    """Probation Period Outcomes For Country Response Data Element."""

    class Meta:
        name = "Probation_Period_Outcomes_For_Country_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_outcomes: list[ProbationPeriodOutcomeForCountryResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Outcomes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodsForCountryGetDataType:
    """
    Probation Periods For Country Get Data element.

    Attributes:
        maintain_probation_periods_for_country_reference: Country Reference
        maintain_probation_periods_for_country_data
    """

    class Meta:
        name = "Probation_Periods_For_Country_Get_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_probation_periods_for_country_reference: Optional[
        ProbationPeriodRulesTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Probation_Periods_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_probation_periods_for_country_data: Optional[
        MaintainProbationPeriodsForCountryDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Probation_Periods_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposeCompensationForEmploymentSubBusinessProcessType:
    """
    Wrapper element for the Propose Compensation for Hire and Offer sub business processes.

    If any errors are found during processing, the Auto Complete boolean will be set to False and
    manual processing will occur for these business processes.
    """

    class Meta:
        name = "Propose_Compensation_For_Employment_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    propose_compensation_for_hire_data: Optional[CompensationProposedForEmploymentDataType] = field(
        default=None,
        metadata={
            "name": "Propose_Compensation_for_Hire_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProposeCompensationForPositionSubBusinessProcessType:
    """
    Wrapper element for the Propose Compensation for Transfer sub business process.

    If any errors are found during processing, the Auto Complete boolean will be set to False and
    manual processing will occur for this business process.
    """

    class Meta:
        name = "Propose_Compensation_For_Position_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    propose_compensation_for_position_data: Optional[CompensationProposedForPositionDataType] = (
        field(
            default=None,
            metadata={
                "name": "Propose_Compensation_for_Position_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class PutAssignMatrixOrganizationRequestType:
    """Assigns a matrix organization to a worker position."""

    class Meta:
        name = "Put_Assign_Matrix_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_business_process_data: Optional[
        AssignMatrixOrganizationBusinessProcessDataType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Business_Process_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutCollectiveAgreementRequest(PutCollectiveAgreementRequestType):
    class Meta:
        name = "Put_Collective_Agreement_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutEditNoticePeriodsEventRequestType:
    """
    Request element for Put Edit Notice Periods Event.

    Attributes:
        business_process_parameters: Business Process Parameters
        put_edit_notice_periods_event_data: Put Edit Notice Periods Event Data
        version
    """

    class Meta:
        name = "Put_Edit_Notice_Periods_Event_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    put_edit_notice_periods_event_data: Optional[PutEditNoticePeriodsEventDataType] = field(
        default=None,
        metadata={
            "name": "Put_Edit_Notice_Periods_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobClassificationGroupRequestType:
    """
    Request Element for Put Job Classification Group.

    Attributes:
        job_classification_group_reference: A unique identifier used to reference a Job
            Classification Group.
        job_classification_group_data: Contains the detailed information about a Job Classification
            Group.
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Job_Classification_Group_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_group_reference: Optional[JobClassificationGroupObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_group_data: Optional[JobClassificationGroupDataType] = field(
        default=None,
        metadata={
            "name": "Job_Classification_Group_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobFamilyRequest(PutJobFamilyRequestType):
    class Meta:
        name = "Put_Job_Family_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutLegalAuthorityRequest(PutLegalAuthorityRequestType):
    class Meta:
        name = "Put_Legal_Authority_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainEmployeeContractRulesForCountryRequest(
    PutMaintainEmployeeContractRulesForCountryRequestType
):
    class Meta:
        name = "Put_Maintain_Employee_Contract_Rules_For_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainNoticePeriodsForCountryRequest(PutMaintainNoticePeriodsForCountryRequestType):
    class Meta:
        name = "Put_Maintain_Notice_Periods_for_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutMaintainProbationPeriodsForCountryRequestType:
    """
    Request element for Put Maintain Probation Periods for Country.

    Attributes:
        maintain_probation_periods_for_country_reference: Maintain Probation Periods For Country
            Reference
        maintain_probation_periods_for_country_data: Maintain Probation Periods For Country Data
        add_only: Add Only
        version
    """

    class Meta:
        name = "Put_Maintain_Probation_Periods_For_Country_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_probation_periods_for_country_reference: Optional[
        ProbationPeriodRulesTableObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Probation_Periods_For_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_probation_periods_for_country_data: Optional[
        MaintainProbationPeriodsForCountryDataType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Probation_Periods_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainWorkingTimeForCountryRequest(PutMaintainWorkingTimeForCountryRequestType):
    class Meta:
        name = "Put_Maintain_Working_Time_for_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutNatureOfActionRequest(PutNatureOfActionRequestType):
    class Meta:
        name = "Put_Nature_of_Action_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutProbationPeriodOutcomesRequest(PutProbationPeriodOutcomesRequestType):
    class Meta:
        name = "Put_Probation_Period_Outcomes_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutRemarkRequest(PutRemarkRequestType):
    class Meta:
        name = "Put_Remark_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutRemoveMatrixOrganizationRequestType:
    """
    Removes a matrix organization from a worker position.

    Attributes:
        business_process_parameters
        remove_matrix_organization_business_process_data: Worker, Position, and matrix organization
            to be inputted
        version
    """

    class Meta:
        name = "Put_Remove_Matrix_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_matrix_organization_business_process_data: Optional[
        RemoveMatrixOrganizationBusinessProcessDataType
    ] = field(
        default=None,
        metadata={
            "name": "Remove_Matrix_Organization_Business_Process_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStaffingFieldDefaultsRequestType:
    """
    Element containing the request to add, update, or delete a Staffing Field Defaults
    configuration.

    Attributes:
        staffing_field_defaults_reference: Contains a reference that identifies a specific Staffing
            Field Defaults instance.
        staffing_field_defaults_data: Contains the Staffing Field Defaults data.
        add_only: Specifies if the request is an add only, not an update.
        delete: If true, indicates a delete operation.
        version
    """

    class Meta:
        name = "Put_Staffing_Field_Defaults_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_reference: Optional[StaffingDefaultingFieldConfigurationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Staffing_Field_Defaults_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    staffing_field_defaults_data: Optional[StaffingFieldDefaultsDataType] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Defaults_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStudentEmploymentEligibilityRuleSetRequest(
    PutStudentEmploymentEligibilityRuleSetRequestType
):
    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_Set_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStudentEmploymentEligibilityRuleSetResponse(
    PutStudentEmploymentEligibilityRuleSetResponseType
):
    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_Set_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class QualificationDataForPositionRestrictionOrJobProfileType:
    """Element containing the qualification data for a Position Restriction or Job Profile."""

    class Meta:
        name = "Qualification_Data_for_Position_Restriction_or_Job_ProfileType"
        target_namespace = "urn:com.workday/bsvc"

    responsibility_qualification_replacement: Optional[
        ResponsibilityQualificationReplacementType
    ] = field(
        default=None,
        metadata={
            "name": "Responsibility_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_experience_qualification_replacement: Optional[
        WorkExperienceQualificationReplacementType
    ] = field(
        default=None,
        metadata={
            "name": "Work_Experience_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education_qualification_replacement: Optional[EducationQualificationReplacementType] = field(
        default=None,
        metadata={
            "name": "Education_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_qualification_replacement: Optional[LanguageQualificationReplacementType] = field(
        default=None,
        metadata={
            "name": "Language_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    competency_qualification_replacement: Optional[CompetencyQualificationReplacementType] = field(
        default=None,
        metadata={
            "name": "Competency_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_qualification_replacement: Optional[CertificationQualificationReplacementType] = (
        field(
            default=None,
            metadata={
                "name": "Certification_Qualification_Replacement",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    training_qualification_replacement: Optional[TrainingQualificationReplacementType] = field(
        default=None,
        metadata={
            "name": "Training_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_qualification_replacement: Optional[SkillQualificationReplacementType] = field(
        default=None,
        metadata={
            "name": "Skill_Qualification_Replacement",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class QualificationsFromPositionRestrictionsDataType:
    """
    Contains the position's and it's job profile's qualification information which includes the
    following: Competency, Certification, Education, Language, Responsibility, Training, and Work
    Experience.
    """

    class Meta:
        name = "Qualifications_from_Position_Restrictions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    competency_data: list[CompetencyProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Competency_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification_data: list[CertificationProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Certification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education_data: list[EducationProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Education_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language_data: list[LanguageProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    responsibility_data: list[ResponsibilityProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Responsibility_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training_data: list[TrainingProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Training_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_experience_data: list[WorkExperienceForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Work_Experience_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_data: list[SkillProfileForJobType] = field(
        default_factory=list,
        metadata={
            "name": "Skill_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RelativeNameInformationDataType:
    """
    Wrapper element for all relative names of a person.

    Attributes:
        relative_name_data
        replace_all: When this flag is set to false, existing Relative Name data for the Worker will
            be preserved. When true, it causes the web service to replace all Relative Name data for
            the Worker with the information in the request. (This is the default behavior when the
            entire tag is omitted.)
    """

    class Meta:
        name = "Relative_Name_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    relative_name_data: list[RelativeNameDataType] = field(
        default_factory=list,
        metadata={
            "name": "Relative_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemarkResponseDataType:
    """Remark Response Data element."""

    class Meta:
        name = "Remark_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    remark: list[RemarkType] = field(
        default_factory=list,
        metadata={
            "name": "Remark",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RemoveRetireeStatusRequest(RemoveRetireeStatusRequestType):
    class Meta:
        name = "Remove_Retiree_Status_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RequestCompensationDefaultSubBusinessProcessType:
    """Wrapper element for the Request Default Compensation sub business process."""

    class Meta:
        name = "Request_Compensation_Default_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_default_data: Optional[CompensationDefaultDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Default_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RequestCompensationForEditPositionSubBusinessProcessType:
    """
    Wrapper element for the Request Compensation change from the Edit Position business process.

    Attributes:
        business_sub_process_parameters: Parameters to indicate whether the subprocess should be
            completed automatically, initiated and left for manual completion, or skipped.  If skip
            is selected, the subprocess must be tagged as optional.
        request_compensation_change_data: Data element that contains the compensation change
            information for the edit position process.
    """

    class Meta:
        name = "Request_Compensation_For_Edit_Position_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_compensation_change_data: Optional[CompensationChangeDataType] = field(
        default=None,
        metadata={
            "name": "Request_Compensation_Change_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class RoleAssignerResponseDataType:
    """
    Role Assignments for Role Assigner References.

    Attributes:
        role_assigner: Role Assignments for Role Assigner Reference.
    """

    class Meta:
        name = "Role_Assigner_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    role_assigner: list[RoleAssignerType] = field(
        default_factory=list,
        metadata={
            "name": "Role_Assigner",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SpendingAccountCoverageDataType:
    """Contains the spending account coverage information (elections) for an employee."""

    class Meta:
        name = "Spending_Account_Coverage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_election_data: Optional[WorkerBenefitElectionDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Election_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contribution_data: Optional[EmployeeContributionDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employer_contribution_data: Optional[EmployerContributionDataType] = field(
        default=None,
        metadata={
            "name": "Employer_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsType:
    """
    Contains the data for Staffing Field Defaults.

    Attributes:
        staffing_field_defaults_reference: Contains a reference that identifies a specific Staffing
            Field Defaults instance.
        staffing_field_defaults_data: Contains the Staffing Field Defaults data.
    """

    class Meta:
        name = "Staffing_Field_DefaultsType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_reference: Optional[StaffingDefaultingFieldConfigurationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Staffing_Field_Defaults_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    staffing_field_defaults_data: Optional[StaffingFieldDefaultsDataType] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Defaults_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsConditionRuleDataType:
    """
    Contains the Staffing Field Defaults Condition Rule data.

    Attributes:
        business_process_type_reference: Contains the business process type which the Staffing Field
            Defaults Condition Rule supports.
        staffing_field_defaults_section_reference: Contains the staffing field defaults section
            which the Staffing Field Defaults Condition Rule supports.
        condition_rule_data
    """

    class Meta:
        name = "Staffing_Field_Defaults_Condition_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_type_reference: list[BusinessProcessTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Process_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    staffing_field_defaults_section_reference: Optional[StaffingFieldDefaultsSectionObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Staffing_Field_Defaults_Section_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    condition_rule_data: Optional[ConditionRuleDataWwstype] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class StudentApplicationDetailsPersonalInformationSubeditDataType:
    """
    Personal Information data for a Student Applicant.

    Attributes:
        marital_status_reference: Marital statuses for a person
        country_of_birth_reference: Country of birth for a person
        region_of_birth_reference: Country region of birth for a person
        city_of_birth: City of Birth for a Person
        generic_military_service_data
    """

    class Meta:
        name = "Student_Application_Details_Personal_Information_Subedit_DataType"
        target_namespace = "urn:com.workday/bsvc"

    marital_status_reference: list[MaritalStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Marital_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_of_birth_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_of_birth_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Region_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth: Optional[str] = field(
        default=None,
        metadata={
            "name": "City_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    generic_military_service_data: list[GenericMilitaryInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Generic_Military_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleDataType:
    """Contains the Data for Student Employment Eligibility Rule."""

    class Meta:
        name = "Student_Employment_Eligibility_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_data: list[ConditionRuleDataWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleSetResponseDataType:
    """
    Container Student Employment Eligibility Rule Set Response Data.

    Attributes:
        student_employment_eligibility_rule_set: Student Employment Eligibility Rule Set Reference
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Set_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_set: list[StudentEmploymentEligibilityRuleSetType] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Set",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SupervisoryOrgDataType:
    """
    Contains details specific to a Supervisory Organization.

    Attributes:
        staffing_model: The staffing model used for the organization.
        location_reference: Unique identifier for the primary Location for the organization.
        organization_assignments_data: Contain information for Staffing related Organizations;
            minimally for Company, Cost Center and Region.
        staffing_restrictions_data: For Supervisory Organizations, contain staffing restrictions.
        available_for_hire: Returns a true if this is able to be filled by a worker.
        hiring_freeze: Boolean attribute identifying whether a Hiring Freeze is currently in affect.
    """

    class Meta:
        name = "Supervisory_Org_DataType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_model: Optional[str] = field(
        default=None,
        metadata={
            "name": "Staffing_Model",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_assignments_data: list[OrganizationAssignmentsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Assignments_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    staffing_restrictions_data: Optional[PositionGroupRestrictionSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Staffing_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    available_for_hire: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Available_For_Hire",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hiring_freeze: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hiring_Freeze",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SwitchPrimaryJobRequest(SwitchPrimaryJobRequestType):
    class Meta:
        name = "Switch_Primary_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class SystemUserDataType:
    """
    The data necessary to create or update a user's account in the Workday system.

    Attributes:
        user_name: The user name the new user will use to sign on to Workday.
        session_timeout_minutes: The number of minutes the user may be idle before the system
            requires them to re-enter their user name and password.
        account_disabled: The user is prevented from signing on to the system.
        account_expiration_date: The user will be prevented from signing on to the system after this
            date (Pacific Time).
        account_locked: The user is prevented from signing on to the system until their account is
            unlocked.
        required_new_password_at_next_login: The user will be required to change their password upon
            initial sign on.
        show_user_name_in_browser_window: The web browser title will include the user name in
            parenthesis.
        display_xml_icon_on_reports: The user will be presented with an icon to view reports as an
            RSS feed.
        enable_workbox: The user will have the Workbox tab available in the right-side slide-out.
        locale_reference: The local defines the user's language and country which will affect their
            experience in the Workday system.
        user_language_reference: If set, specifies language for user. If not set, language
            specification taken from Locale_Reference parameter.
        preferred_search_scope_reference: If set, specifies the initial search category displayed to
            the user.
        delegated_authentication_integration_system_reference: The user will be authenticated via an
            external system.
        delegated_authentication_configuration_reference: The user will be authenticated using the
            delauth configuration.
        allow_mixed_language_transactions: The user is allowed to view mixed language transactions.
        notification_sub_type_configurations: Notification Type Configurations for a particular user
        password: The initial password the user will sign on with.
        generate_random_password: The system should generate a random password for the user.
        exempt_from_delegated_authentication: True when the user is exempt from Delegated
            Authentication, False otherwise.  Set this element to true if you want the user to be
            exempt from delegated authentication.
        passcode_exempt: True when the user is exempt from One-Time Passcode Authentication, False
            otherwise.  Set this element to true if you want the user to be exempt from one-time
            passcode authentication.
        passcode_grace_period_enabled: True when the user's One-Time Passcode grace period is
            enabled, False otherwise.  Set this element to false if you want the user's one-time
            passcode grace period to be disabled.
        passcode_grace_period_login_remaining_count: The remaining number of times the user can
            login without providing a one-time passcode. This cannot be higher than the configured
            tenant maximum grace period login count.
        open_id_identifier: This field is used for OpenID based authentication and contains the
            email address associated with the OpenID account.  This value needs to be provided to
            enable OpenID authentication for this user.
        open_id_internal_identifier: This field is used for OpenID based authentication and contains
            the OpenID GUID. It will be unpopulated until the user completes an initial successful
            OpenID authentication attempt.
        open_id_connect_internal_identifier: This field is used for OpenID Connect based
            authentication and contains the OpenID Connect subject. It will be unpopulated until the
            user completes an initial successful OpenID Connect authentication attempt.
        simplified_view: To enable user preferences that simplify the overall user experience.
    """

    class Meta:
        name = "System_User_DataType"
        target_namespace = "urn:com.workday/bsvc"

    user_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "User_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    session_timeout_minutes: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Session_Timeout_Minutes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 3,
            "fraction_digits": 0,
        },
    )
    account_disabled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Account_Disabled",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    account_expiration_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Account_Expiration_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    account_locked: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Account_Locked",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    required_new_password_at_next_login: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Required_New_Password_At_Next_Login",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    show_user_name_in_browser_window: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Show_User_Name_in_Browser_Window",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    display_xml_icon_on_reports: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Display_XML_Icon_on_Reports",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enable_workbox: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Enable_Workbox",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    locale_reference: Optional[LocaleObjectType] = field(
        default=None,
        metadata={
            "name": "Locale_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    user_language_reference: Optional[UserLanguageObjectType] = field(
        default=None,
        metadata={
            "name": "User_Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    preferred_search_scope_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Preferred_Search_Scope_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delegated_authentication_integration_system_reference: Optional[
        IntegrationSystemAuditedObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Delegated_Authentication_Integration_System_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delegated_authentication_configuration_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Delegated_Authentication_Configuration_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    allow_mixed_language_transactions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Allow_Mixed-Language_Transactions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notification_sub_type_configurations: list[
        NotificationSubCategoryConfigurationsForUsersType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Notification_Sub_Type_Configurations",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "name": "Password",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    generate_random_password: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Generate_Random_Password",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exempt_from_delegated_authentication: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exempt_from_Delegated_Authentication",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passcode_exempt: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Passcode_Exempt",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passcode_grace_period_enabled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Passcode_Grace_Period_Enabled",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    passcode_grace_period_login_remaining_count: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Passcode_Grace_Period_Login_Remaining_Count",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    open_id_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OpenID_Identifier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    open_id_internal_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OpenID_Internal_Identifier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    open_id_connect_internal_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "OpenID_Connect_Internal_Identifier",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    simplified_view: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Simplified_View",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class UpdateIdInformationSubBusinessProcessType:
    """
    The main element for the Change ID Business Process.

    This contains all the ID information  and Business Processing processing parameters.
    """

    class Meta:
        name = "Update_ID_Information_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_identification_data: list[PersonIdentificationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerAdditionalBenefitsCoverageDataType:
    """
    Contains the additional benefits coverage information (elections) for an employee.

    Attributes:
        additional_benefits_coverage_target_reference: A reference to the coverage target elected.
        original_coverage_begin_date_for_coverage_target: The first date that coverage began for
            this type of coverage.
        benefit_election_data: The election information for the coverage.
        percent_contribution_data
        amount_contribution_data
    """

    class Meta:
        name = "Worker_Additional_Benefits_Coverage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    additional_benefits_coverage_target_reference: Optional[
        AdditionalBenefitsCoverageTargetObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Additional_Benefits_Coverage_Target_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_coverage_begin_date_for_coverage_target: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date_for_Coverage_Target",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_election_data: Optional[WorkerBenefitElectionDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Election_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    percent_contribution_data: Optional[EmployeeContributionPercentageDataType] = field(
        default=None,
        metadata={
            "name": "Percent_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    amount_contribution_data: list[EmployeeContributionAmountDataType] = field(
        default_factory=list,
        metadata={
            "name": "Amount_Contribution_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerHealthCareCoverageDataType:
    """
    Contains the health care coverage information (elections) for an employee.

    Attributes:
        health_care_coverage_target_reference: A reference to the level of coverage elected.
        original_coverage_begin_date_for_coverage_target: The first date that coverage began for
            this type of coverage level.
        provider_id: The Provider ID of the Primary Care Physician for the employee.
        benefit_election_data: The election information for the coverage.
        dependent_coverage_data: Contains the dependents covered for the election.
    """

    class Meta:
        name = "Worker_Health_Care_Coverage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    health_care_coverage_target_reference: Optional[HealthCareCoverageTargetObjectType] = field(
        default=None,
        metadata={
            "name": "Health_Care_Coverage_Target_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    original_coverage_begin_date_for_coverage_target: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Original_Coverage_Begin_Date_for_Coverage_Target",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    provider_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Provider_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_election_data: Optional[WorkerBenefitElectionDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Election_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dependent_coverage_data: list[DependentCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Dependent_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerInsuranceCoverageDataType:
    """Contains the insurance election information for the employee."""

    class Meta:
        name = "Worker_Insurance_Coverage_DataType"
        target_namespace = "urn:com.workday/bsvc"

    insurance_coverage_level_data: Optional[InsuranceCoverageLevelDataType] = field(
        default=None,
        metadata={
            "name": "Insurance_Coverage_Level_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    benefit_election_data: Optional[WorkerBenefitElectionDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Election_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    dependent_coverage_data: list[DependentCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Dependent_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    beneficiary_designation_data: list[BeneficiaryDesignationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Beneficiary_Designation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerManagementChainDataType:
    """Contains the worker's management chain for supervisory and matrix organizations."""

    class Meta:
        name = "Worker_Management_Chain_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_supervisory_management_chain_data: Optional[WorkerSupervisoryManagementChainDataType] = (
        field(
            default=None,
            metadata={
                "name": "Worker_Supervisory_Management_Chain_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    worker_matrix_management_chain_data: Optional[WorkerMatrixManagementChainDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Matrix_Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerRetirementSavingsDataType:
    """Contains the retirement savings election information for the employee."""

    class Meta:
        name = "Worker_Retirement_Savings_DataType"
        target_namespace = "urn:com.workday/bsvc"

    benefit_election_data: Optional[WorkerBenefitElectionDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Election_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    employee_contribution_percentage_data: Optional[EmployeeContributionPercentageDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Contribution_Percentage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contribution_amount_data: Optional[EmployeeContributionAmountDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Contribution_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employer_contribution_percentage_data: Optional[EmployerContributionPercentageDataType] = field(
        default=None,
        metadata={
            "name": "Employer_Contribution_Percentage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employer_contribution_amount_data: Optional[EmployerContributionAmountDataType] = field(
        default=None,
        metadata={
            "name": "Employer_Contribution_Amount_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    beneficiary_designation_data: list[BeneficiaryDesignationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Beneficiary_Designation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerRoleDataType:
    """Contains the roles that a worker holds."""

    class Meta:
        name = "Worker_Role_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_role_data: Optional[WorkerOrganizationRoleDataType] = field(
        default=None,
        metadata={
            "name": "Organization_Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeEligibilityRuleDataType:
    """Working Time Eligibility Rule Data Element."""

    class Meta:
        name = "Working_Time_Eligibility_Rule_DataType"
        target_namespace = "urn:com.workday/bsvc"

    condition_rule_data: Optional[ConditionRuleDataWwstype] = field(
        default=None,
        metadata={
            "name": "Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeRulesForResponseDataType:
    """
    Working Time Rules for Response Data.

    Attributes:
        maintain_working_time_for_country: Working Time Rules For Country Get Data
    """

    class Meta:
        name = "Working_Time_Rules_for_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_working_time_for_country: list[MaintainWorkingTimeForCountryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Working_Time_For_Country",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortAddRetireeStatusInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAddRetireeStatusInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortAddRetireeStatusInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        add_retiree_status_request: Optional[AddRetireeStatusRequest] = field(
            default=None,
            metadata={
                "name": "Add_Retiree_Status_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortAssignRolesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAssignRolesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortAssignRolesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_roles_request: Optional[AssignRolesRequest] = field(
            default=None,
            metadata={
                "name": "Assign_Roles_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortChangeWorkSpaceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangeWorkSpaceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortChangeWorkSpaceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_work_space_request: Optional[ChangeWorkSpaceRequest] = field(
            default=None,
            metadata={
                "name": "Change_Work_Space_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortClosePositionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortClosePositionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortClosePositionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        close_position_request: Optional[ClosePositionRequest] = field(
            default=None,
            metadata={
                "name": "Close_Position_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortDeleteWorkerDocument:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortDeleteWorkerDocumentInput
    output = StaffingPortDeleteWorkerDocumentOutput


@dataclass
class StaffingPortEditCreditableServiceInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditCreditableServiceInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditCreditableServiceInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_creditable_service_request: Optional[EditCreditableServiceRequest] = field(
            default=None,
            metadata={
                "name": "Edit_Creditable_Service_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEditEmployeeContractAdditionalDataInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditEmployeeContractAdditionalDataInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditEmployeeContractAdditionalDataInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_employee_contract_additional_data_request: Optional[
            EditEmployeeContractAdditionalDataRequest
        ] = field(
            default=None,
            metadata={
                "name": "Edit_Employee_Contract_Additional_Data_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEditPositionRestrictionsAdditionalDataInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditPositionRestrictionsAdditionalDataInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditPositionRestrictionsAdditionalDataInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_position_restrictions_additional_data_request: Optional[
            EditPositionRestrictionsAdditionalDataRequest
        ] = field(
            default=None,
            metadata={
                "name": "Edit_Position_Restrictions_Additional_Data_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEditServiceDatesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditServiceDatesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditServiceDatesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_service_dates_request: Optional[EditServiceDatesRequest] = field(
            default=None,
            metadata={
                "name": "Edit_Service_Dates_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEditWorkerAdditionalDataInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditWorkerAdditionalDataInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditWorkerAdditionalDataInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_worker_additional_data_request: Optional[EditWorkerAdditionalDataRequest] = field(
            default=None,
            metadata={
                "name": "Edit_Worker_Additional_Data_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortFreezePositionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortFreezePositionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortFreezePositionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        freeze_position_request: Optional[FreezePositionRequest] = field(
            default=None,
            metadata={
                "name": "Freeze_Position_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetApplicantsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetApplicantsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetApplicantsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_applicants_request: Optional[GetApplicantsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Applicants_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetJobFamiliesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobFamiliesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetJobFamiliesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_families_request: Optional[GetJobFamiliesRequest] = field(
            default=None,
            metadata={
                "name": "Get_Job_Families_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetNatureOfActionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNatureOfActionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetNatureOfActionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_nature_of_actions_request: Optional[GetNatureOfActionsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Nature_of_Actions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetPersonnelActionRequestStatusOnMassActionOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetPersonnelActionRequestStatusOnMassActionOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_personnel_action_request_status_on_mass_action_response: Optional[
            GetPersonnelActionRequestStatusOnMassActionResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Personnel_Action_Request_Status_on_Mass_Action_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetPersonnelActionRequestStatusOnMassActionOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetPersonnelActionRequestStatusOnMassActionOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortMaintainEmployeeContractsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortMaintainEmployeeContractsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortMaintainEmployeeContractsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        maintain_employee_contracts_request: Optional[MaintainEmployeeContractsRequest] = field(
            default=None,
            metadata={
                "name": "Maintain_Employee_Contracts_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortMoveWorkersByOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortMoveWorkersByOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortMoveWorkersByOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        move_workers_by_organization_request: Optional[MoveWorkersByOrganizationRequest] = field(
            default=None,
            metadata={
                "name": "Move_Workers_By_Organization_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortNoShowInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortNoShowInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortNoShowInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        no_show_request: Optional[NoShowRequest] = field(
            default=None,
            metadata={
                "name": "No_Show_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutCitizenshipStatus:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutCitizenshipStatusInput
    output = StaffingPortPutCitizenshipStatusOutput


@dataclass
class StaffingPortPutCollectiveAgreementInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutCollectiveAgreementInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutCollectiveAgreementInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_collective_agreement_request: Optional[PutCollectiveAgreementRequest] = field(
            default=None,
            metadata={
                "name": "Put_Collective_Agreement_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutFseWorkerCategoryCriteria:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutFseWorkerCategoryCriteriaInput
    output = StaffingPortPutFseWorkerCategoryCriteriaOutput


class StaffingPortPutFunctionalityForStaffingTransactions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutFunctionalityForStaffingTransactionsInput
    output = StaffingPortPutFunctionalityForStaffingTransactionsOutput


@dataclass
class StaffingPortPutJobFamilyInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobFamilyInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutJobFamilyInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_family_request: Optional[PutJobFamilyRequest] = field(
            default=None,
            metadata={
                "name": "Put_Job_Family_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutLegalAuthorityInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutLegalAuthorityInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutLegalAuthorityInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_legal_authority_request: Optional[PutLegalAuthorityRequest] = field(
            default=None,
            metadata={
                "name": "Put_Legal_Authority_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutMaintainEmployeeContractRulesForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainEmployeeContractRulesForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutMaintainEmployeeContractRulesForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_employee_contract_rules_for_country_request: Optional[
            PutMaintainEmployeeContractRulesForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Employee_Contract_Rules_For_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutMaintainJobOverlapRoutingExclusionRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutMaintainJobOverlapRoutingExclusionRuleInput
    output = StaffingPortPutMaintainJobOverlapRoutingExclusionRuleOutput


@dataclass
class StaffingPortPutMaintainNoticePeriodsForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainNoticePeriodsForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutMaintainNoticePeriodsForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_notice_periods_for_country_request: Optional[
            PutMaintainNoticePeriodsForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Notice_Periods_for_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutMaintainWorkingTimeForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainWorkingTimeForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutMaintainWorkingTimeForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_working_time_for_country_request: Optional[
            PutMaintainWorkingTimeForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Working_Time_for_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutNatureOfActionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutNatureOfActionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutNatureOfActionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_nature_of_action_request: Optional[PutNatureOfActionRequest] = field(
            default=None,
            metadata={
                "name": "Put_Nature_of_Action_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutProbationPeriodOutcome:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutProbationPeriodOutcomeInput
    output = StaffingPortPutProbationPeriodOutcomeOutput


@dataclass
class StaffingPortPutProbationPeriodOutcomesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutProbationPeriodOutcomesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutProbationPeriodOutcomesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_probation_period_outcomes_request: Optional[PutProbationPeriodOutcomesRequest] = field(
            default=None,
            metadata={
                "name": "Put_Probation_Period_Outcomes_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutRemarkInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutRemarkInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutRemarkInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_remark_request: Optional[PutRemarkRequest] = field(
            default=None,
            metadata={
                "name": "Put_Remark_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutStudentEmploymentEligibilityRuleSetInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStudentEmploymentEligibilityRuleSetInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutStudentEmploymentEligibilityRuleSetInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_student_employment_eligibility_rule_set_request: Optional[
            PutStudentEmploymentEligibilityRuleSetRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Student_Employment_Eligibility_Rule_Set_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutStudentEmploymentEligibilityRuleSetOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStudentEmploymentEligibilityRuleSetOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_student_employment_eligibility_rule_set_response: Optional[
            PutStudentEmploymentEligibilityRuleSetResponse
        ] = field(
            default=None,
            metadata={
                "name": "Put_Student_Employment_Eligibility_Rule_Set_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortPutStudentEmploymentEligibilityRuleSetOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortPutStudentEmploymentEligibilityRuleSetOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortPutWorkerDocument:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutWorkerDocumentInput
    output = StaffingPortPutWorkerDocumentOutput


@dataclass
class StaffingPortRemoveRetireeStatusInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortRemoveRetireeStatusInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortRemoveRetireeStatusInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        remove_retiree_status_request: Optional[RemoveRetireeStatusRequest] = field(
            default=None,
            metadata={
                "name": "Remove_Retiree_Status_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortSwitchPrimaryJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortSwitchPrimaryJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortSwitchPrimaryJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        switch_primary_job_request: Optional[SwitchPrimaryJobRequest] = field(
            default=None,
            metadata={
                "name": "Switch_Primary_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class AssignCostingAllocationSubBusinessProcessType:
    """Contains optional costing allocation override values."""

    class Meta:
        name = "Assign_Costing_Allocation_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_costing_allocation_assignment_data: Optional[AssignCostingAllocationEventDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_Costing_Allocation_Assignment_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class AssignOrganizationRequestType:
    """
    This operation will assign company, cost center, region, and custom organizations (that are
    configured for staffing usage) to a position using the Assign Organization business process
    event.

    Attributes:
        business_process_parameters: Container for the processing options for a business process. If
            no options are submitted (or the options are submitted as 'false') then the business
            process is simply initiated as if it where submitted on-line with approvals, reviews,
            notifications and to-do's in place. If the Initiator is an Integration System User, any
            validations you configured on the Initiation step are ignored.
        assign_organization_data: Wrapper element for the Assign Organization web service.
        version
    """

    class Meta:
        name = "Assign_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_organization_data: Optional[AssignOrganizationEventDataType] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AssignOrganizationRolesRequest(AssignOrganizationRolesRequestType):
    class Meta:
        name = "Assign_Organization_Roles_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangeGovernmentIdsResponseWrapperType:
    """
    Wrapper element for the Change Government IDs Business Process Data element.

    This is the element that contains the data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_government_ids_data
    """

    class Meta:
        name = "Change_Government_IDs_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_government_ids_data: list[ChangeGovernmentIdsBusinessProcessDataType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Government_IDs_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeLegalNameResponseDataType:
    """Element containing the worker data for the Get Change Legal Name response."""

    class Meta:
        name = "Change_Legal_Name_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_legal_name: list[ChangeLegalNameResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Legal_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeLicensesResponseWrapperType:
    """
    Wrapper element for the Change Licenses Business Process Data element.

    This is the element that contains the data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_licenses_data
    """

    class Meta:
        name = "Change_Licenses_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_licenses_data: list[ChangeLicensesBusinessProcessDataType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Licenses_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeOrganizationAssignmentsRequestType:
    """
    This operation will assign company, cost center, region, and custom organizations (that are
    configured for staffing usage) to a position using the Change Organization Assignments business
    process.

    Attributes:
        business_process_parameters
        change_organization_assignments_data: Wrapper element for the Change Organization
            Assignments web service.
        version
    """

    class Meta:
        name = "Change_Organization_Assignments_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_organization_assignments_data: Optional[ChangeOrganizationAssignmentsDataType] = field(
        default=None,
        metadata={
            "name": "Change_Organization_Assignments_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeOrganizationAssignmentsRequestHvtype:
    """This operation will assign company, cost center, region, and custom organizations (that are
    configured for staffing usage) to a position using the Change Organization Assignments business
    process."""

    class Meta:
        name = "Change_Organization_Assignments_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_organization_assignments_data: Optional[ChangeOrganizationAssignmentsDataType] = field(
        default=None,
        metadata={
            "name": "Change_Organization_Assignments_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangeOtherIdsResponseWrapperType:
    """
    Wrapper element for the Change Other IDs Business Process Data element.

    This is the element that contains the data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_other_ids_data: Reference to the Worker that the government identifier(s) will be
            applied to.
    """

    class Meta:
        name = "Change_Other_IDs_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_other_ids_data: list[ChangeOtherIdsBusinessProcessDataType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Other_IDs_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePassportsAndVisasResponseWrapperType:
    """
    Wrapper element for the Change Passports and Visas Business Process Data element.

    This is the element that contains the data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_passports_and_visas_data: Reference to the Worker that the government identifier(s)
            will be applied to.
    """

    class Meta:
        name = "Change_Passports_and_Visas_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_passports_and_visas_data: list[ChangePassportsAndVisasBusinessProcessDataType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Passports_and_Visas_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePersonalInformationDataType:
    """
    Container for the data changed in the Change Personal Information business process.

    Attributes:
        date_of_birth: Person's Date of Birth.
        birth_country_reference: Country where the person was born.
        birth_region_reference: Country Region where the person was born.
        gender_reference: Reference to the Gender of the person.
        reporting_gender_reference: Reference for the person's Reporting Gender.
        disability_information_data
        marital_status_reference: Reference for the person's Marital Status.
        citizenship_reference: Reference for the person's Citizenship Status.
        primary_nationality_reference: Reference for the person's Country of Nationality
        additional_nationality_reference: List of Additional Nationalities for the person. This is a
            list of countries.
        ethnicity_reference: Reference for the person's Ethnicities.
        race_ethnicity_details_reference: Reference for the person's Ethnicity Details.
        hispanic_or_latino: Boolean to indicate if a person is Hispanic or Latino.
        visual_survey_ethnicity_reference: Reference to person's Visual Survey Ethnicities.
        hispanic_or_latino_for_visual_survey: Boolean reference to person's Visual Survey for
            Hispanic or Latino.
        aboriginal_indigenous_identification_reference: Reference for a person's
            Aboriginal/Indigenous Identification.
        aboriginal_indigenous_identification_details_reference: Reference for a person's
            Aboriginal/Indigenous Identification Details.
        religion_reference: Reference for a person's Religions.
        hukou_region_reference: Country region on the Hukou of the person. This field is only
            available for the country China and the person with citizenship status of China.
        hukou_subregion_reference: Country subregion on the Hukou of the person. This field is only
            available for the country China and the person with citizenship status of China.
        hukou_locality: Locality on the Hukou of the person. This field is only available for the
            country China and the person with citizenship status of China.
        hukou_postal_code: Hukou postal code for the person. This field is only available for the
            country China and the person with citizenship status of China.
        hukou_type_reference: Hukou type on the Hukou of the person. This field is only available
            for the country China and the person with citizenship status of China.
        native_region_reference: Native region on the Hukou of the person. This field is only
            available for the country China and the person with citizenship status of China.
        personnel_file_agency: Personnel File Agency is used in China to indicate where workers have
            their personnel file stored.
        military_information_data
        political_affiliation_reference: Person's Political Affiliation.
        date_of_death: Person's Date of Death.
        city_of_birth: Person's City of Birth (Text Only).
        city_of_birth_reference: Person's City of Birth (Prompt Value).
        marital_status_date: Person's Marital Status Date.
        last_medical_exam_date: Date of person's most recent Medical Examination.
        last_medical_exam_valid_to: Expiration date of person's most recent Medical Examination.
        medical_exam_notes: Notes for the person's most recent Medical Examination.
        blood_type_reference: Person's Blood Type.
        uses_tobacco: True if the person uses tobacco.  To update a person's Tobacco Use, use the
            Put Worker Wellness Data web service.
        social_benefits_locality_reference: Person's social benefits locality.
        lgbt_identification_reference: Person's sexual orientation and gender identity.
        sexual_orientation_reference: Reference to the sexual orientation of the person.
        gender_identity_reference: Reference to the gender identity of the person.
        pronoun_reference: Reference to the Pronoun of the person.
        relative_name_information_data
        veterans_preference_for_rif_reference: Put Veteran's Preference for RIF
        selective_service_registration_reference: Put Selective Service Registration
        veterans_preference_reference: Put Veteran's Preference
        active_military_uniformed_service_reference: Put Active Military Uniformed Service field.
        disabled_veteran_leave_date_reference: Put Disabled Veteran Leave Date field.
        uniform_service_reserve_status_reference: Put Uniform Service Reserve Status.
    """

    class Meta:
        name = "Change_Personal_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    birth_country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Birth_Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    birth_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Birth_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    reporting_gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Reporting_Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disability_information_data: Optional[DisabilityInformationDataType] = field(
        default=None,
        metadata={
            "name": "Disability_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    marital_status_reference: Optional[MaritalStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Marital_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_reference: list[CitizenshipStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_nationality_reference: Optional[CountryAndNationalityObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Nationality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_nationality_reference: list[CountryAndNationalityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Nationality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    ethnicity_reference: list[EthnicityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Ethnicity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    race_ethnicity_details_reference: list[EthnicityDetailsObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Race_Ethnicity_Details_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hispanic_or_latino: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hispanic_or_Latino",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    visual_survey_ethnicity_reference: list[EthnicityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Visual_Survey_Ethnicity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hispanic_or_latino_for_visual_survey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Hispanic_or_Latino_for_Visual_Survey",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aboriginal_indigenous_identification_reference: Optional[
        AboriginalIndigenousIdentificationSelectionObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Aboriginal_Indigenous_Identification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    aboriginal_indigenous_identification_details_reference: list[
        AboriginalIndigenousDetailsObjectType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Aboriginal_Indigenous_Identification_Details_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    religion_reference: Optional[ReligionObjectType] = field(
        default=None,
        metadata={
            "name": "Religion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_subregion_reference: Optional[CountrySubregionObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Subregion_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_locality: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hukou_Locality",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_postal_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Hukou_Postal_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hukou_type_reference: Optional[HukouTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Hukou_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    native_region_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Native_Region_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personnel_file_agency: Optional[str] = field(
        default=None,
        metadata={
            "name": "Personnel_File_Agency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_information_data: Optional[MilitaryInformationDataType] = field(
        default=None,
        metadata={
            "name": "Military_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    political_affiliation_reference: Optional[PoliticalAffiliationObjectType] = field(
        default=None,
        metadata={
            "name": "Political_Affiliation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_death: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Death",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth: Optional[str] = field(
        default=None,
        metadata={
            "name": "City_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth_reference: Optional[CountryCityObjectType] = field(
        default=None,
        metadata={
            "name": "City_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    marital_status_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Marital_Status_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_medical_exam_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Medical_Exam_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_medical_exam_valid_to: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Medical_Exam_Valid_To",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    medical_exam_notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Medical_Exam_Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    blood_type_reference: Optional[BloodTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Blood_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    uses_tobacco: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Uses_Tobacco",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    social_benefits_locality_reference: Optional[SocialBenefitsLocalityObjectType] = field(
        default=None,
        metadata={
            "name": "Social_Benefits_Locality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    lgbt_identification_reference: list[LgbtIdentificationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "LGBT_Identification_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sexual_orientation_reference: list[SexualOrientationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Sexual_Orientation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gender_identity_reference: list[GenderIdentityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Gender_Identity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pronoun_reference: list[PronounObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Pronoun_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    relative_name_information_data: Optional[RelativeNameInformationDataType] = field(
        default=None,
        metadata={
            "name": "Relative_Name_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    veterans_preference_for_rif_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Veterans_Preference_For_RIF_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    selective_service_registration_reference: Optional[CommonBooleanEnumerationObjectType] = field(
        default=None,
        metadata={
            "name": "Selective_Service_Registration_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    veterans_preference_reference: list[VeteransPreferenceObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Veterans_Preference_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    active_military_uniformed_service_reference: Optional[CommonBooleanEnumerationObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Active_Military_Uniformed_Service_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    disabled_veteran_leave_date_reference: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Disabled_Veteran_Leave_Date_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    uniform_service_reserve_status_reference: Optional[UniformServiceReserveStatusObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Uniform_Service_Reserve_Status_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class ChangePreferredNameResponseDataType:
    """Element containing the worker data for the Get Change Preferred Name response."""

    class Meta:
        name = "Change_Preferred_Name_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_preferred_name: list[ChangePreferredNameResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Preferred_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateAcademicAffiliateDataType:
    """
    Data for a new Academic Affiliate if an affiliate is to be created as part of the appointment.

    Attributes:
        id: Reference ID for the academic affiliate.
        person_name_data: Contains the components of a name, such as the First Name and Last Name.
        contact_information_data: All of the person's contact data (address, phone, email, instant
            messenger, web address).
        personal_information_data: Encapsulating element containing all Personal Information for a
            new Academic Affiliate.
        person_identification_data: Wrapper for Person Identification Data. Includes National
            Identifiers, Government Identifiers, Visa Identifiers, Passport Identifiers, License
            Identifiers and Custom Identifiers.
        person_photo_data
        location_contexts_reference: Reference to the location context for the Affiliate. Auto-
            populated from the country from the person's legal name.
    """

    class Meta:
        name = "Create_Academic_Affiliate_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_name_data: Optional[PersonNameDataType] = field(
        default=None,
        metadata={
            "name": "Person_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact_information_data: Optional[ContactInformationDataType] = field(
        default=None,
        metadata={
            "name": "Contact_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_information_data: Optional[GenericPersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_identification_data: Optional[PersonIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "Person_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_photo_data: Optional[PersonPhotoDataType] = field(
        default=None,
        metadata={
            "name": "Person_Photo_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    location_contexts_reference: list[LocationContextObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Location_Contexts_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateWorkdayAccountSubBusinessProcessType:
    """
    Wrapper to hold the business process configuration and user account details.

    Attributes:
        business_sub_process_parameters: Wrapper element for web services sub business process
            parameters.
        create_workday_account_data: Wrapper element for workday account data
    """

    class Meta:
        name = "Create_Workday_Account_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_workday_account_data: Optional[SystemUserDataType] = field(
        default=None,
        metadata={
            "name": "Create_Workday_Account_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class DependentType:
    """
    Encapsulating element containing all Dependent data.

    Attributes:
        dependent_reference: A reference to the dependent.
        dependent_data: Contains the detailed information for a dependent.
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    dependent_reference: Optional[DependentObjectType] = field(
        default=None,
        metadata={
            "name": "Dependent_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    dependent_data: Optional[DependentDataType] = field(
        default=None,
        metadata={
            "name": "Dependent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class DependentPersonalInformationDataType:
    """
    Wrapper element for this dependent's personal information.

    Attributes:
        person_name_data: Wrapper element for this dependent's name data.
        contact_information_data: Wrapper element for this dependent's contact information.
        person_identification_data: Wrapper element for this dependent's ID data.
        date_of_birth: The date of birth of the dependent.
        date_of_death: The date of death of the dependent.
        gender_reference: The gender of the dependent.
        uses_tobacco: Boolean representing whether or not this dependent uses tobacco.
        full_time_student: Boolean representing whether or not this dependent is a full-time
            student.
        student_status_start_date: The date the dependent became a full-time student.
        student_status_end_date: The date the dependent's student status ended (no longer a full-
            time student)
        disabled: Boolean representing whether or not this dependent is disabled.
        inactive_date: If inactive, the date from which dependent is inactive.
    """

    class Meta:
        name = "Dependent_Personal_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_name_data: Optional[PersonNameDataType] = field(
        default=None,
        metadata={
            "name": "Person_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact_information_data: Optional[ContactInformationDataType] = field(
        default=None,
        metadata={
            "name": "Contact_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_identification_data: Optional[PersonIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "Person_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_death: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Death",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gender_reference: Optional[GenderObjectType] = field(
        default=None,
        metadata={
            "name": "Gender_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    uses_tobacco: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Uses_Tobacco",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    full_time_student: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Full-Time_Student",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_status_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Student_Status_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_status_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Student_Status_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disabled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Disabled",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Inactive_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditHiringRestrictionsDataType:
    """
    Wrapper element for editting hiring restrictions.

    Attributes:
        supervisory_organization_reference: Reference to the supervisory organization to edit the
            hiring restrictions for
        hiring_restrictions_edit_reason_reference: Reference to the reason the hiring restrictions
            are being edited
        position_group_restrictions_data
        request_default_compensation_sub_process
    """

    class Meta:
        name = "Edit_Hiring_Restrictions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    hiring_restrictions_edit_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Hiring_Restrictions_Edit_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_group_restrictions_data: Optional[PositionGroupRestrictionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Group_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_default_compensation_sub_process: Optional[
        RequestCompensationDefaultSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRestrictionEventDataType:
    """
    Wrapper for the details of the Edit Position Restriction transaction.

    Attributes:
        position_edit_reason_reference: Reference to the reason the position is being updated.
        position_data
        position_group_restrictions_data
        position_restriction_working_hours_details_data
        qualification_replacement_data
    """

    class Meta:
        name = "Edit_Position_Restriction_Event_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_edit_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Edit_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_data: Optional[PositionDefinitionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_group_restrictions_data: Optional[PositionGroupRestrictionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Group_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restriction_working_hours_details_data: Optional[WorkingHoursDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Position_Restriction_Working_Hours_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_replacement_data: Optional[
        QualificationDataForPositionRestrictionOrJobProfileType
    ] = field(
        default=None,
        metadata={
            "name": "Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmergencyContactPersonalInformationDataType:
    """Wrapper element to hold the name and contact information of the emergency contact."""

    class Meta:
        name = "Emergency_Contact_Personal_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_name_data: list[PersonNameDataType] = field(
        default_factory=list,
        metadata={
            "name": "Person_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact_information_data: list[ContactInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Contact_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EmployeeReviewDataType:
    """
    Contains the latest completed performance review for the employee.

    Attributes:
        performance_review_data: Contains the latest completed performance review for the employee.
        performance_improvement_plan_data: Contains the latest completed performance improvement
            plan for the employee.
        development_plan_data: Contains the latest completed development plan for the employee.
        disciplinary_action_data: Contains the latest completed disciplinary action for the
            employee.
    """

    class Meta:
        name = "Employee_Review_DataType"
        target_namespace = "urn:com.workday/bsvc"

    performance_review_data: Optional[PerformanceReviewDataType] = field(
        default=None,
        metadata={
            "name": "Performance_Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    performance_improvement_plan_data: Optional[PerformanceImprovementPlanDataType] = field(
        default=None,
        metadata={
            "name": "Performance_Improvement_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    development_plan_data: Optional[DevelopmentPlanDataType] = field(
        default=None,
        metadata={
            "name": "Development_Plan_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    disciplinary_action_data: Optional[DisciplinaryActionDataType] = field(
        default=None,
        metadata={
            "name": "Disciplinary_Action_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalStudentPersonDataType:
    """Element containing the Person data for the Student."""

    class Meta:
        name = "External_Student_Person_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_name_data: Optional[PersonNameDataType] = field(
        default=None,
        metadata={
            "name": "Person_Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact_information_data: Optional[ContactInformationDataType] = field(
        default=None,
        metadata={
            "name": "Contact_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_profile_data: Optional[StudentPersonalProfileDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_identification_data: Optional[PersonIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "Person_Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_information_data: Optional[
        StudentApplicationDetailsPersonalInformationSubeditDataType
    ] = field(
        default=None,
        metadata={
            "name": "Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCitizenshipStatusesResponse(GetCitizenshipStatusesResponseType):
    class Meta:
        name = "Get_Citizenship_Statuses_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCollectiveAgreementsResponseType:
    """Get Collective Agreements Response Element."""

    class Meta:
        name = "Get_Collective_Agreements_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CollectiveAgreementRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CollectiveAgreementRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[CollectiveAgreementResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CollectiveAgreementResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCreditableServiceResponseType:
    """
    Get Creditable Service Response.

    Attributes:
        request_references: Creditable Service Change Request References
        request_criteria: Creditable Service Change Request Criteria
        response_filter
        response_results
        response_data: Creditable Service Change Response Data
        version
    """

    class Meta:
        name = "Get_Creditable_Service_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[CreditableServiceRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[CreditableServiceRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[CreditableServiceResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetFseWorkerCategoryCriteriasResponse(GetFseWorkerCategoryCriteriasResponseType):
    class Meta:
        name = "Get_FSE_Worker_Category_Criterias_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetFunctionalityForStaffingTransactionsResponse(
    GetFunctionalityForStaffingTransactionsResponseType
):
    class Meta:
        name = "Get_Functionality_for_Staffing_Transactions_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobFamiliesResponseType:
    """Response element for Get Job Families."""

    class Meta:
        name = "Get_Job_Families_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobFamilyRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[JobFamiliesRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobFamilyResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[JobFamilyResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetLegalAuthoritiesResponseType:
    """
    Get Legal Authorities Response Element.

    Attributes:
        request_references
        response_filter
        response_results
        response_data: Contains Legal Authority data based on the Request References.
        version
    """

    class Meta:
        name = "Get_Legal_Authorities_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[LegalAuthorityRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[LegalAuthorityResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainEmployeeContractRulesForCountryResponseType:
    """
    Get Maintain Employee Contract Rules For Country Response.

    Attributes:
        request_references: Employee Contract Rules Table References
        request_criteria
        response_data: Employee Contract Rules for Country Data
        response_filter
        response_results
        version
    """

    class Meta:
        name = "Get_Maintain_Employee_Contract_Rules_For_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[EmployeeContractRulesForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[EmployeeContractRulesForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[EmployeeContractRulesForCountryResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainJobOverlapRoutingExclusionRuleResponse(
    GetMaintainJobOverlapRoutingExclusionRuleResponseType
):
    class Meta:
        name = "Get_Maintain_Job_Overlap_Routing_Exclusion_Rule_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainNoticePeriodsForCountryResponseType:
    """
    Response contain all Notice Periods what met Request Criteria.

    Attributes:
        request_references
        request_criteria
        response_data: Notice Periods For Country Response Data
        response_filter
        response_results
        version
    """

    class Meta:
        name = "Get_Maintain_Notice_Periods_For_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NoticePeriodsForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[NoticePeriodsForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[NoticePeriodsForCountryResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainWorkingTimeForCountryResponseType:
    """Response contains all Working Times that met Request Criteria."""

    class Meta:
        name = "Get_Maintain_Working_Time_for_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkingTimeForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[WorkingTimeForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[WorkingTimeRulesForResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNatureOfActionsResponseType:
    """
    Get Nature of Actions Response element.

    Attributes:
        request_references: Text
        response_filter
        response_results
        response_data
        version
    """

    class Meta:
        name = "Get_Nature_of_Actions_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NatureOfActionsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[NatureOfActionResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodsForWorkerResponseType:
    """
    Contains the employer/employee Notice Period response data specific to the Notice Period Target
    request and As Of Effective Date.

    Attributes:
        request_references
        response_filter
        response_results
        response_data: Contains the employer/employee Notice Period response data specific to the
            Notice Period Target request and As Of Effective Date.
        version
    """

    class Meta:
        name = "Get_Notice_Periods_for_Worker_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetNoticePeriodsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[GetNoticePeriodsResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetOrganizationsRequest(GetOrganizationsRequestType):
    class Meta:
        name = "Get_Organizations_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPositionsRequest(GetPositionsRequestType):
    class Meta:
        name = "Get_Positions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodOutcomeResponse(GetProbationPeriodOutcomeResponseType):
    class Meta:
        name = "Get_Probation_Period_Outcome_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodOutcomesResponseType:
    """Response containing all Probation Period Outcomes which met the Request Criteria."""

    class Meta:
        name = "Get_Probation_Period_Outcomes_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodOutcomesForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ProbationPeriodOutcomesForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ProbationPeriodOutcomesForCountryResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodsForWorkersResponse(GetProbationPeriodsForWorkersResponseType):
    class Meta:
        name = "Get_Probation_Periods_For_Workers_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetRemarksResponseType:
    """
    Root element for Get Remarks Response.

    Attributes:
        request_references: Utilize the Request References element to retrieve a specific
            instance(s) of Get Remarks and its associated data.
        response_filter
        response_results
        response_data: Remark Response Data element
        version
    """

    class Meta:
        name = "Get_Remarks_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[RemarkRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[RemarkResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetRoleAssignmentsForRoleAssignersResponseType:
    """
    Get Role Assignments Response.

    Attributes:
        request_references: Role Assigner References for Get Role Assignments Request.
        request_criteria: Request Criteria for Role Assignments of Role Assigner References.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group
        response_results
        response_data: Role Assignments for Role Assigner References.
        version
    """

    class Meta:
        name = "Get_Role_Assignments_For_Role_Assigners_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[RoleAssignerRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[RoleAssignmentsRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[RoleAssignerResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[RoleAssignerResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStudentEmploymentEligibilityDataResponse(GetStudentEmploymentEligibilityDataResponseType):
    class Meta:
        name = "Get_Student_Employment_Eligibility_Data_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStudentEmploymentEligibilityRuleSetResponseType:
    """
    Container for Get Student Employment Eligibility Rule Sets Response.

    Attributes:
        request_criteria: Reference  Student Employment Eligibility Rule Set Request
        response_filter: Reference Student Employment Eligibility Response Filter
        response_group: Reference Student Employment Eligibility Response Group
        response_results: Response Result
        response_data: Reference Student Employment Eligibility Rule Data Element
        version
    """

    class Meta:
        name = "Get_Student_Employment_Eligibility_Rule_Set_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_criteria: Optional[StudentEmploymentEligibilityRuleSetRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StudentEmploymentEligibilityRuleSetResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StudentEmploymentEligibilityRuleSetResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetWorkerDocumentsResponse(GetWorkerDocumentsResponseType):
    class Meta:
        name = "Get_Worker_Documents_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetWorkersRequest(GetWorkersRequestType):
    class Meta:
        name = "Get_Workers_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GlobalStaffingEligibilityRuleType:
    """
    Global Staffing Eligibility Rule Get Data Element.

    Attributes:
        global_staffing_eligibility_rule_reference: Global Staffing Eligibility Rule Workset
        global_staffing_eligibility_rule_data
    """

    class Meta:
        name = "Global_Staffing_Eligibility_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    global_staffing_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    global_staffing_eligibility_rule_data: list[GlobalStaffingEligibilityRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImplementationEmployeeDataType:
    """
    This element is designed to hire an existing applicant into an Employee position.

    Attributes:
        employee_id: Employee ID
        applicant_reference: The pre-hire that you plan to hire. The pre-hire must have a Workday
            profile and be eligible for hire. To hire an employee, you must enter an applicant,
            former worker, student, or academic affiliate, or create a new pre-hire. To create a new
            pre-hire, enter information into the Applicant Data section.a
        former_worker_reference: The former worker that you plan to hire. The former worker must
            have a Workday profile and be eligible for hire. To hire an employee, you must enter an
            applicant, former worker, student, or academic affiliate, or create a new pre-hire. To
            create a new pre-hire, enter information into the Applicant Data section.
        employee_type_reference: Reference to the employee type for this employee.
        hire_reason_reference: Employee Hire Reason
        first_day_of_work: The date of the employee's first day of work. If left empty, Workday uses
            the Hire Date.
        hire_date: The worker's Hire Date. The Hire Date must be on or after the effective date of
            any changes to the position or location.
        continuous_service_date: Date that service calculations will use as the start of service. If
            empty, Workday will use the existing date. When rehiring workers, if you run the Hire
            Employee and Edit Service Dates EIBs concurrently, you must enter the same Continuous
            Service Date in both EIBs for each worker.
        probation_start_date: The Probation Period Start Date.
        probation_end_date: The Probation Period End Date.
        end_employment_date: Termination Date
        position_start_date_for_conversion: Conversion Position Start Date
        job_profile_start_date_for_conversion: Conversion Position Job Profile Start Date
        benefits_service_date: The Benefits Service Date in the employee's service dates. If empty,
            Workday will use the existing date. When rehiring workers, if you run the Hire Employee
            and Edit Service Dates EIBs concurrently, you must enter the same Benefit Service Date
            in both EIBs for each worker.
        company_service_date: The Company Service Date in the employee's service dates. If empty,
            Workday will use the existing date. When rehiring workers, if you run the Hire Employee
            and Edit Service Dates EIBs concurrently, you must enter the same Company Service Date
            in both EIBs for each worker.
        position_for_worker_staffing_event_data: The position restriction ID into which the employee
            will be hired. Only used for a position management supervisory organization. If the hire
            event is for a job management organization, Workday ignores this value.
        compensation_detail_data: Wrapper element for the Propose Compensation for Hire and Offer
            sub business processes.  If any errors are found during processing, the Auto Complete
            boolean will be set to False and manual processing will occur for these business
            processes.
        create_payroll_extract: Create Payroll Extract
        position_organization_assignments_data: Wrapper element for the Assign Organizations to
            Position sub business process. If this element is submitted (Auto or Manual) as part of
            a Staffing event and the Position_Organization_Assignment  wrapper is not submitted,
            then the position's organization assignments will default from the supervisory
            organization.
        system_user_data
        worker_document_data: Worker Document Data for Staffing Event
        employee_external_id_data
    """

    class Meta:
        name = "Implementation_Employee_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Employee_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    former_worker_reference: Optional[FormerWorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Former_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_type_reference: Optional[EmployeeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    hire_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Hire_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    first_day_of_work: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "First_Day_of_Work",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    continuous_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Continuous_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Probation_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_start_date_for_conversion: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Position_Start_Date_for_Conversion",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_start_date_for_conversion: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Start_Date_for_Conversion",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefits_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Benefits_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_service_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Company_Service_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_for_worker_staffing_event_data: Optional[PositionForWorkerStaffingEventIDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_for_Worker_Staffing_Event_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    compensation_detail_data: Optional[EmployeeCompensationDetailDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_payroll_extract: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Create_Payroll_Extract",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_organization_assignments_data: Optional[PositionOrganizationAssignmentsDataType] = (
        field(
            default=None,
            metadata={
                "name": "Position_Organization_Assignments_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    system_user_data: Optional[SystemUserDataType] = field(
        default=None,
        metadata={
            "name": "System_User_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: list[WorkerDocumentIDataForStaffingEventType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_external_id_data: Optional[ExternalIdDataType] = field(
        default=None,
        metadata={
            "name": "Employee_External_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportAssignMatrixOrganizationRequestType:
    """
    High Volume request to process each worker, position, and matrix organization.

    Attributes:
        assign_matrix_organization_information_hv: element containing request for assign matrix
            organization
        version
    """

    class Meta:
        name = "Import_Assign_Matrix_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    assign_matrix_organization_information_hv: list[AssignMatrixOrganizationRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Assign_Matrix_Organization_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportMoveWorkersByOrganizationRequest(ImportMoveWorkersByOrganizationRequestType):
    class Meta:
        name = "Import_Move_Workers_By_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportRemoveMatrixOrganizationRequestType:
    """High Volume request to process each worker, position, and matrix organization."""

    class Meta:
        name = "Import_Remove_Matrix_Organization_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    remove_matrix_organization_information_hv: list[ImportRemoveMatrixOrganizationRequestHvtype] = (
        field(
            default_factory=list,
            metadata={
                "name": "Remove_Matrix_Organization_Information_HV",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobClassificationGroupResponseDataType:
    """
    Element containing the Job Classification Group response data.

    Attributes:
        job_classification_group: Encapsulating element containing all Job Classification Group
            data.
    """

    class Meta:
        name = "Job_Classification_Group_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_classification_group: list[JobClassificationGroupNewType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyGroupDataType:
    """
    Encapsulating element containing all Job Family Group data.

    Attributes:
        id: This is the reference id of the Job Family Group (Job_Family_Group_ID).
        effective_date: Effective date of Job Family Group
        name: Text attribute identifying Job Family Group Name.  This can be used for compensation
            and benefits eligibility rules.
        summary: Text attribute identifying Job Family Group Summary.
        inactive: Boolean attribute indicating if a Job Family/Job Family Group is Inactive or not.
            Inactive Job Families/Groups will not appear in prompts.
        job_family_data: Job Family Data.  Contains the references to Job Families contained in the
            group.  Optionally contains other data about the contained families, however this extra
            data is for information only and cannot be updated here.
    """

    class Meta:
        name = "Job_Family_Group_DataType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_data: list[JobFamilyGroupJobFamilyType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobOverlapRoutingExclusionRuleType:
    """
    Contains each Job Overlap Routing Exclusion Rule based on the Request References or Request
    Criteria.

    Attributes:
        job_overlap_routing_exclusion_rule_reference: Contains a unique identifier for an instance
            of an object.
        job_overlap_routing_exclusion_rule_data
    """

    class Meta:
        name = "Job_Overlap_Routing_Exclusion_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    job_overlap_routing_exclusion_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_routing_exclusion_rule_data: list[JobOverlapRoutingExclusionRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Overlap_Routing_Exclusion_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionDataType:
    """
    Wrapper Element for a Job Requisition.

    Attributes:
        job_requisition_reference: A unique identifier used to reference a job requisition.
        job_requisition_id: The ID of the Job Requisition.
        job_requisition_status_reference: Reference to the Job Requisition Status.  The effective
            job requisition for a position restriction may have a status of Open or Frozen. If it is
            Frozen, then the position cannot be filled.
        job_posting_title: The Job Posting Title of the Job Requisition.
        recruiting_instruction_data
        academic_tenure_eligible: Indicates if the Job Requisition is for a position that is
            academic tenure eligible.
        number_of_openings: The number of positions made available by the job requisition.  This
            number can only be greater than 1 for job requisitions created with the "new position"
            option.  A value of greater than 1 was only allowed starting in W16.  This element must
            be omitted for the Create Job Requisition and Edit Job Requisition operations.
        job_description_summary: The job description summary (plain text) for the job requisition.
        justification: The Justification for the Job Requisition.
        job_requisition_attachments: File Attachments for the Job Requisition
        recruiting_start_date: The Recruiting Start Date for the Job Requisition.  Recruiting cannot
            be done for the position prior to this date.
        target_hire_date: The Target Hire Date for the Job Requisition.
        target_end_date: The Target End Date for the Job Requisition is required for fixed term
            employees and contingent worker sub- types that are specified as requiring cost
            information.
        job_profile_reference: The Job Profile for the Job Requisition.
        worker_type_reference: The Worker Type for the Job Requisition.
        position_worker_type_reference: The Worker Sub-Type for the Job Requisition.
        primary_location_reference: The Primary Location for the Job Requisition.
        additional_locations_reference: The Additional Location(s) for the Job Requisition.
        position_time_type_reference: The Position Time Type for the Job Requisition.
        scheduled_weekly_hours: The Schedule Hours for the Job Requisition.
        work_shift_reference: The Work Shift for the Job Requisition.
        spotlight_job: If Y, indicates that this is a highlighted job requisition.
        qualification_data: Element containing the qualification data for the Job Requisition.
        replacement_for_worker_reference: If the job requisition exists with the purpose of
            replacing workers, specify the reference workers.
    """

    class Meta:
        name = "Job_Requisition_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_status_reference: Optional[JobRequisitionStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_posting_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Posting_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recruiting_instruction_data: Optional[RecruitingInstructionDataType] = field(
        default=None,
        metadata={
            "name": "Recruiting_Instruction_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_tenure_eligible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Academic_Tenure_Eligible",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    number_of_openings: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Openings",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 7,
            "fraction_digits": 0,
        },
    )
    job_description_summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description_Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    justification: Optional[str] = field(
        default=None,
        metadata={
            "name": "Justification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_attachments: Optional[JobRequisitionAttachmentsType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Attachments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recruiting_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Recruiting_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Target_Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Target_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_type_reference: Optional[WorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_worker_type_reference: Optional[PositionWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_locations_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Locations_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scheduled_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    work_shift_reference: Optional[WorkShiftObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    spotlight_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Spotlight_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_data: Optional[QualificationDataForPositionRestrictionOrJobProfileType] = field(
        default=None,
        metadata={
            "name": "Qualification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replacement_for_worker_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Replacement_for_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobRequisitionDataForCreateAndEditType:
    """
    Wrapper for Job Requisition data common to create and edit requests.

    Attributes:
        job_requisition_id: The ID for the job requisition.
        job_posting_title: The job posting title for the job requisition.
        recruiting_instruction_reference: Define an optional recruiting instruction on the Maintain
            External Recruiting Instructions task.
        job_description_summary: The job description summary (plain text) for the job requisition.
        job_description: The job description (rich text) for the job requisition.
        additional_job_description: The Additional Job Description is only available when the
            Recruiting functional area is enabled. Use job posting templates to control where the
            Additional Job Description displays. Example: Define a Job Description for external job
            postings and an Additional Job Description for internal job postings.
        justification: The justification for the job requisition.
        job_requisition_attachments: Attachment can be added here.
        recruiting_start_date: The date from which pre-hires can be considered for this job
            requisition.
        target_hire_date: The date from which pre-hires can be hired or contracted for this job
            requisition.
        target_end_date: The date when recruiting ends.
        job_profile_reference: The job profile for the job requisition. If empty, Workday
            automatically populates this value from the position restrictions.
        additional_job_profiles_reference: Reference to Additional Job Profiles for the job
            requisition. Cannot contain the Primary Job Profile.
        referral_payment_plan_reference: The active one-time payment plan for a successful referral
            to this job requisition.
        worker_type_reference: The worker type for the job requisition. If empty, Workday
            automatically populates this value from the position restrictions.
        worker_sub_type_reference: The worker sub-type for the job requisition. If empty, Workday
            automatically populates this value from the position restrictions.
        remote_type_reference: The active Remote Type for the Job Requisition.
        primary_location_reference: The primary location for the job requisition. When creating a
            job requisition, if empty, Workday automatically populates this value from the position
            restrictions.
        primary_job_posting_location_reference: The primary job posting location for the job
            requisition. When creating a job requisition, if empty, Workday automatically populates
            this value from the primary location of the job requisition.
        additional_locations_reference: The additional locations for the job requisition.
        additional_job_posting_locations_reference: The additional job posting location(s) for the
            job requisition. When creating a job requisition, if empty, Workday automatically
            populates this value from the additional location(s) of the job requisition.
        position_time_type_reference: The position time type for the job requisition. If empty,
            Workday automatically populates this value from the position restrictions.
        employee_contract_type_reference: The Employee Contract Type for the Job Requisition.
        scheduled_weekly_hours: The scheduled weekly hours for the job requisition. If empty,
            Workday automatically populates this value from the position restrictions.
        work_shift_reference: The worker type for the job requisition. If empty, Workday
            automatically populates this value from the position restrictions.
        spotlight_job: If Y, indicates that this is a highlighted job requisition.
        confidential_job_requisition: If Y, indicates that this is a confidential job requisition.
        link_to_evergreen_requisition_reference: The evergreen requisition that this job requisition
            is linked to.
        questionnaire_data: Questionnaires for the Job Requisition. For use by Recruiting customers
            only.
        assessment_data: Assessments for the Job Requisition. For use by Recruiting customers only.
        qualification_replacement_data: Element containing the qualification data for the job
            requisition.
        contingent_worker_cost_information: Contingent Worker Cost Information for the Job
            Requisition
        replacement_for_worker_reference: If the job requisition exists with the purpose of
            replacing workers, specify the reference workers.
        organization_data: Element containing the organization data for the Job Requisition.
            Organizations can only be assigned to Job Requisitions for Supervisory Organization
            using the Job Management staffing model.
        use_updated_template_version: If yes, this updates the existing template on job requisition
            to the most recent version.
        job_application_template_reference: You can only add a job application template when editing
            a job requisition.
    """

    class Meta:
        name = "Job_Requisition_Data_for_Create_and_EditType"
        target_namespace = "urn:com.workday/bsvc"

    job_requisition_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_posting_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Posting_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recruiting_instruction_reference: Optional[RecruitingInstructionObjectType] = field(
        default=None,
        metadata={
            "name": "Recruiting_Instruction_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description_summary: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description_Summary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Job_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_job_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Additional_Job_Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    justification: Optional[str] = field(
        default=None,
        metadata={
            "name": "Justification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_attachments: list[JobRequisitionAttachmentsType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Requisition_Attachments",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recruiting_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Recruiting_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Target_Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    target_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Target_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_reference: Optional[JobProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_job_profiles_reference: list[JobProfileObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Job_Profiles_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    referral_payment_plan_reference: Optional[OneTimePaymentPlanObjectType] = field(
        default=None,
        metadata={
            "name": "Referral_Payment_Plan_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_type_reference: Optional[WorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_sub_type_reference: Optional[PositionWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Sub-Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remote_type_reference: Optional[JobRequisitionRemoteTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Remote_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_job_posting_location_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Job_Posting_Location_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_locations_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Locations_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_job_posting_locations_reference: list[LocationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Job_Posting_Locations_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contract_type_reference: Optional[EmployeeContractTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Contract_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scheduled_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 14,
            "fraction_digits": 2,
        },
    )
    work_shift_reference: Optional[WorkShiftObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    spotlight_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Spotlight_Job",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    confidential_job_requisition: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Confidential_Job_Requisition",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    link_to_evergreen_requisition_reference: Optional[EvergreenJobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Link_to_Evergreen_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    questionnaire_data: Optional[JobRequisitionQuestionnaireDataType] = field(
        default=None,
        metadata={
            "name": "Questionnaire_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assessment_data: Optional[JobRequisitionAssessmentDataType] = field(
        default=None,
        metadata={
            "name": "Assessment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_replacement_data: Optional[
        QualificationDataForPositionRestrictionOrJobProfileType
    ] = field(
        default=None,
        metadata={
            "name": "Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contingent_worker_cost_information: Optional[ContingentWorkerCostInformationDataType] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_Cost_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    replacement_for_worker_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Replacement_for_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_data: Optional[JobRequisitionOrganizationsDataForBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_updated_template_version: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Updated_Template_Version",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_application_template_reference: Optional[JobApplicationTemplateObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Application_Template_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManageEducationSubBusinessProcessDataType:
    """
    Manage Education Sub Business Process Data.

    Attributes:
        business_sub_process_parameters: Manage Education Sub Business Process Data
        manage_education_data: Manage Education Sub Business Process Data
    """

    class Meta:
        name = "Manage_Education_Sub_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: list[BusinessSubProcessParametersType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_education_data: list[ManageEducationDataForRoleType] = field(
        default_factory=list,
        metadata={
            "name": "Manage_Education_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodEligibilityRuleType:
    """
    Notice Period Eligibility Rule.

    Attributes:
        notice_period_eligibility_rule_reference: Notice Period Eligibility Rule
        notice_period_eligibility_rule_data: Notice Period Eligibility Rule Data
    """

    class Meta:
        name = "Notice_Period_Eligibility_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notice_period_eligibility_rule_data: list[NoticePeriodEligibilityRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Notice_Period_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationWwsDataType:
    """
    Contains the detailed information about an Organization.

    Attributes:
        reference_id: Integration Reference ID used for integration purposes; This is also the
            Organization ID
        name: The name of the Organization that appears on pages and reports. A new effective-dated
            organization name is automatically created if value for this field is different as of
            specified effective date.
        description: A long description of the Organization.
        organization_code: Text attribute identifying Organization Code. A new effective-dated
            organization name is automatically created if value for this field is different as of
            specified effective date.
        include_manager_in_name: Boolean choice to include the Manager/Leader Name in the
            Organization Name display.
        include_organization_code_in_name: Boolean attribute identifying whether to include the
            Organization Code within the name (Display ID within Workday). A new effective-dated
            organization name is automatically created if value for this field is different as of
            specified effective date.
        organization_type_reference: A unique identifier for the type of organization.
        organization_subtype_reference: A unique identifier for the subtype of the organization.
        availibility_date: Date the Organization is available for use.
        last_updated_date_time: Date/Time for the last update.
        inactive: Inactive indicator for the Organization.
        inactive_date: Date the Organization was made Inactive.
        manager_reference: Unique identifier for the manager for the organization.
        leadership_reference: Manager(s) of this organization. If there is a position restriction
            with an overlap, both are returned.
        organization_owner_reference: A unique identifier for the worker that owns the Organization.
        organization_visibility_reference: A unique identifier for the scope of visibility for the
            Organization.
        external_url_reference: Non-Workday URL link for more Organizational information.
        external_ids_data: Contains external system name and its corresponding ID that can be used
            to match data between systems during an integration.
        roles_data: Contains information about an Organization Role and incumbent worker(s).
        hierarchy_data: Contains the top-level organization, the immediate superior organization,
            and all immediate subordinate organization references.
        supervisory_data: For Organizations of type Supervisory, contains staffing model and
            restrictions, location and other organizational assignments.
        integration_field_override_data
    """

    class Meta:
        name = "Organization_WWS_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reference_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reference_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "Organization_Code",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_manager_in_name: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Manager_in_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    include_organization_code_in_name: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Include_Organization_Code_in_Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_type_reference: Optional[OrganizationTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_subtype_reference: Optional[OrganizationSubtypeObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Subtype_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    availibility_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Availibility_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_updated_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "Last_Updated_DateTime",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Inactive",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    inactive_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Inactive_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manager_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Manager_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    leadership_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Leadership_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_owner_reference: Optional[OrganizationOwnerObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Owner_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_visibility_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Visibility_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_url_reference: Optional[ExternalUrlobjectType] = field(
        default=None,
        metadata={
            "name": "External_URL_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_ids_data: Optional[ExternalIntegrationIdDataType] = field(
        default=None,
        metadata={
            "name": "External_IDs_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    roles_data: Optional[OrganizationRolesWwsDataType] = field(
        default=None,
        metadata={
            "name": "Roles_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hierarchy_data: Optional[OrganizationHierarchyDataType] = field(
        default=None,
        metadata={
            "name": "Hierarchy_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    supervisory_data: Optional[SupervisoryOrgDataType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    integration_field_override_data: list[DocumentFieldResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Integration_Field_Override_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonalInformationForCountryDataType:
    """
    Personal Information by Country.

    Attributes:
        country_reference: Country for Personal Information.
        country_personal_information_data: Country Specific Personal Information
    """

    class Meta:
        name = "Personal_Information_For_Country_DataType"
        target_namespace = "urn:com.workday/bsvc"

    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    country_personal_information_data: list[CountryPersonalInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Country_Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionDetailDataType:
    """
    Encapsulating element containg all Payroll Interface Processing data.

    Attributes:
        position_reference: Reference to the position.
        headcount_reference: An unique identifier for the Headcount Group that the Position belongs
            to. This will return a value only if the Position belongs to a headcount. Any value put
            in this field for inbound web services will be ignored.
        position_id: Text attribute identifying Position ID.
        position_title: Text attribute identifying Position Title.
        business_title: Business title for the position.
        start_date: Date the Worker first started work in this Position.  Will be the same value as
            the Hire Date in the Worker Status Section for the Primary Position.
        end_employment_date: Expected end of employment for this position. Will be the same value as
            the End Employment Date in the Worker Status Section for the Primary Position.
        end_employment_reason_reference: Termination/End Additional Job Reason
        worker_type_reference: The worker type for the position.
        position_time_type_reference: Reference to the position time type.
        job_exempt: Boolean attribute identifying whether Position is Exempt.
        scheduled_weekly_hours: Scheduled Weekly Hours for Position.
        default_weekly_hours: Standard Weekly Hours for Position.
        working_time_frequency_reference: You can record details about a worker's expected schedule
            using the Working Time section. Enable Working Time in the Maintain Localization
            Settings task. Set the Working Time Frequency values in the Maintain Frequencies task.
        working_time_unit_reference: The Working Time Unit can be in hours or days. Enable Working
            Time in the Maintain Localization Settings task. Enable units in the Maintain Unit of
            Time task.
        working_time_value: The numeric value of the Working Time Unit. Enable Working Time in the
            Maintain Localization Settings task.
        full_time_equivalent_percentage: Full Time Equivalent Percentage for Position.
        specify_paid_fte: True if Paid FTE Percentage is specified on the position.
        paid_fte: The paid full time equivalent percentage for the position, entered as a decimal
            value. This overrides the calculated full time equivalent.
        specify_working_fte: True if Working FTE Percentage is specified on the position.
        working_fte: The working full time equivalent percentage for the position, entered as a
            decimal value. This overrides the calculated full time equivalent.
        exclude_from_headcount: If Y, the position will be excluded from headcount reporting.
        pay_rate_type_reference: Reference to the pay rate type for the position.
        job_classification_summary_data
        company_insider_reference: Reference to a company insider type.
        work_shift_reference: Reference to the work shift for the position.
        work_hours_profiles_reference: The work hour profile(s) for the position.
        federal_withholding_fein: The employee's company Federal Employer Identification Number.
        worker_compensation_code_data: The worker's compensation code for this position - based on
            the location and job profile.
        position_payroll_reporting_code_data
        job_profile_summary_data: Contains the job profile for the position.
        business_site_summary_data: Encapsulating element containing a brief summary of Location
            data.
        payroll_interface_processing_data: Encapsulating element containg all Payroll Interface
            Processing data.
        regular_paid_equivalent_hours: Numeric value for number of equivalent regular paid hours for
            the work hours profile.
        worker_hours_profile_classification: The Worker Hours Profile Classification.
        international_assignment_data
        work_space_reference: The work space (worker's physical location) for the position.
        academic_pay_setup_data: Wrapper element that contains position's academic pay setup
            information if it is configured.
        end_date: The effective date of the end employment business process
        pay_through_date: The pay through date for the end of employment
        collective_agreement_summary_data: Encapsulating element containing all Collective Agreement
            data. Including Corrected data.
        employee_probation_period_summary_data: Encapsulating element containing all Probation
            Period data.
        manager_as_of_last_detected_manager_change_reference: Return the worker's new manager(s)
            during the most recent manager change event detected by manager compare background
            process. The background process may detect manager changes at a later time then when the
            manager change actually occurred. This field only applies for the primary job of the
            worker.
        effective_date: Effective Date for Position.
    """

    class Meta:
        name = "Position_Detail_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    headcount_reference: Optional[HeadcountRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Headcount_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Position_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "Business_Title",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Employment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_employment_reason_reference: list[EventClassificationSubcategoryObjectType] = field(
        default_factory=list,
        metadata={
            "name": "End_Employment_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_type_reference: Optional[PositionWorkerTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_time_type_reference: Optional[PositionTimeTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Time_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_exempt: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Job_Exempt",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    scheduled_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Scheduled_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    default_weekly_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Default_Weekly_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    working_time_frequency_reference: Optional[FrequencyObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Frequency_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_unit_reference: Optional[WorkingTimeUnitObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_value: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_Time_Value",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 6,
            "fraction_digits": 2,
        },
    )
    full_time_equivalent_percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Full_Time_Equivalent_Percentage",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 12,
            "fraction_digits": 2,
        },
    )
    specify_paid_fte: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Specify_Paid_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    paid_fte: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Paid_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 12,
        },
    )
    specify_working_fte: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Specify_Working_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_fte: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Working_FTE",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 22,
            "fraction_digits": 12,
        },
    )
    exclude_from_headcount: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_from_Headcount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_rate_type_reference: Optional[PayRateTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Pay_Rate_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_classification_summary_data: list[JobClassificationSummaryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Classification_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    company_insider_reference: list[CompanyInsiderTypeObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Company_Insider_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_shift_reference: Optional[WorkShiftObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Shift_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_hours_profiles_reference: Optional[WorkHoursProfileObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Hours_Profiles_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    federal_withholding_fein: Optional[str] = field(
        default=None,
        metadata={
            "name": "Federal_Withholding_FEIN",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_compensation_code_data: list[WorkerCompensationCodeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Compensation_Code_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_payroll_reporting_code_data: list[PositionPayrollReportingCodeDataType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Payroll_Reporting_Code_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_profile_summary_data: Optional[JobProfileInPositionSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Job_Profile_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    business_site_summary_data: Optional[LocationSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Business_Site_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    payroll_interface_processing_data: Optional[PositionPayrollInterfaceDetailDataType] = field(
        default=None,
        metadata={
            "name": "Payroll_Interface_Processing_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    regular_paid_equivalent_hours: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Regular_Paid_Equivalent_Hours",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    worker_hours_profile_classification: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_Hours_Profile_Classification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "max_length": 1,
        },
    )
    international_assignment_data: Optional[InternationalAssignmentDataType] = field(
        default=None,
        metadata={
            "name": "International_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_space_reference: Optional[LocationObjectType] = field(
        default=None,
        metadata={
            "name": "Work_Space__Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_pay_setup_data: Optional[AcademicPaySetupDataType] = field(
        default=None,
        metadata={
            "name": "Academic_Pay_Setup_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_through_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Pay_Through_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    collective_agreement_summary_data: list[CollectiveAgreementSummaryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Collective_Agreement_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_probation_period_summary_data: Optional[EmployeeProbationPeriodSummaryDataType] = (
        field(
            default=None,
            metadata={
                "name": "Employee_Probation_Period_Summary_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    manager_as_of_last_detected_manager_change_reference: list[WorkerObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Manager_as_of_last_detected_manager_change_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodEligibilityRuleGetDataType:
    """
    Probation Period Eligibility Rule Get Data Element.

    Attributes:
        probation_period_eligibility_rule_reference: Probation Period Eligibility Rule Reference
        probation_period_eligibility_rule_data: Probation Period Eligibility Rule Data
    """

    class Meta:
        name = "Probation_Period_Eligibility_Rule_Get_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_eligibility_rule_data: list[ProbationPeriodEligibilityRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodsForCountryResponseDataType:
    """Probation Periods For Country Response Data element."""

    class Meta:
        name = "Probation_Periods_For_Country_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    maintain_probation_periods_for_country: list[ProbationPeriodsForCountryGetDataType] = field(
        default_factory=list,
        metadata={
            "name": "Maintain_Probation_Periods_For_Country",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfessionalAffiliationOrganizationDataType:
    """
    Wrapper element for the Organization Professional Affiliation information.

    Attributes:
        professional_affiliation_id: Membership ID. If no value is provided, a new membership will
            be created. If a value is passed in an a corresponding membership is not found, a new
            membership will be created with the provided id.
        remove_professional_affiliation: Used for inbound operations to indicate that the membership
            should be removed for the person.  Will always return false for outbound operations.
        professional_affiliation_reference: The Professional Affiliation that this achievement is
            representing a relationship with.
        professional_affiliation: The name of the organization the person is an affiliate of.
            Required unless the professional affiliation is being removed.
        professional_affiliation_type_reference: The type of Professional Affiliation.
        affiliation: Any organization that the membership is affiliated to.
        professional_affiliation_relationship_type_reference: The Relationship that this Person has
            to this Organization.
        begin_date: The date when the membership was started.
        end_date: The date when the membership was ended.
        contact_information_data
    """

    class Meta:
        name = "Professional_Affiliation_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    professional_affiliation_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Professional_Affiliation_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_professional_affiliation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Remove_Professional_Affiliation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    professional_affiliation_reference: Optional[ProfessionalAffiliationReferenceObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Professional_Affiliation_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    professional_affiliation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Professional_Affiliation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    professional_affiliation_type_reference: Optional[ProfessionalAffiliationTypeAllObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Professional_Affiliation_Type_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    affiliation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Affiliation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    professional_affiliation_relationship_type_reference: Optional[
        ProfessionalAffiliationRelationshipTypeObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Professional_Affiliation_Relationship_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    begin_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Begin_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact_information_data: list[ContactInformationDataType] = field(
        default_factory=list,
        metadata={
            "name": "Contact_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutAssignMatrixOrganizationRequest(PutAssignMatrixOrganizationRequestType):
    class Meta:
        name = "Put_Assign_Matrix_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutEditNoticePeriodsEventRequest(PutEditNoticePeriodsEventRequestType):
    class Meta:
        name = "Put_Edit_Notice_Periods_Event_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutGlobalStaffingEligibilityRuleRequestType:
    """
    Put Global Staffing Eligibility Rule Request Element.

    Attributes:
        global_staffing_eligibility_rule_reference: Global Staffing Eligibility Rule Reference
        global_staffing_eligibility_rule_data: Global Staffing Eligibility Rule Data Element
        add_only: Add Only
        delete: If True is entered, the Global Staffing Eligibility Rule will be deleted.
        version
    """

    class Meta:
        name = "Put_Global_Staffing_Eligibility_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    global_staffing_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    global_staffing_eligibility_rule_data: Optional[GlobalStaffingEligibilityRuleDataType] = field(
        default=None,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobClassificationGroupRequest(PutJobClassificationGroupRequestType):
    class Meta:
        name = "Put_Job_Classification_Group_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobOverlapRoutingExclusionRuleRequestType:
    """
    Element containing Job Overlap Routing Exclusion Rule for update.

    Attributes:
        job_overlap_routing_exclusion_rule_reference: Contains a reference that identifies a
            specific Job Overlap Routing Exclusion Rule instance.
        job_overlap_routing_exclusion_rule_data
        version
    """

    class Meta:
        name = "Put_Job_Overlap_Routing_Exclusion_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    job_overlap_routing_exclusion_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Overlap_Routing_Exclusion_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_overlap_routing_exclusion_rule_data: Optional[JobOverlapRoutingExclusionRuleDataType] = (
        field(
            default=None,
            metadata={
                "name": "Job_Overlap_Routing_Exclusion_Rule_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutMaintainProbationPeriodsForCountryRequest(
    PutMaintainProbationPeriodsForCountryRequestType
):
    class Meta:
        name = "Put_Maintain_Probation_Periods_For_Country_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutNoticePeriodEligibilityRuleRequestType:
    """
    Request element for Put Notice Period Eligibility Rule.

    Attributes:
        notice_period_eligibility_rule_reference: Notice Period Eligibility Rule Reference
        notice_period_eligibility_rule_data
        add_only: Add Only
        delete: If True is entered, the Notice Period Eligibility Rule will be deleted.
        version
    """

    class Meta:
        name = "Put_Notice_Period_Eligibility_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    notice_period_eligibility_rule_data: Optional[NoticePeriodEligibilityRuleDataType] = field(
        default=None,
        metadata={
            "name": "Notice_Period_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutProbationPeriodEligibilityRuleRequestType:
    """
    Put Probation Period Eligibility Rule Request Element.

    Attributes:
        probation_period_eligibility_rule_reference: Probation Period Eligibility Rule Reference
        probation_period_eligibility_rule_data: Probation Period Eligibility Rule Data
        add_only: Add Only
        delete: If True is entered, the Probation Period Eligibility Rule will be deleted.
        version
    """

    class Meta:
        name = "Put_Probation_Period_Eligibility_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Probation_Period_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    probation_period_eligibility_rule_data: Optional[ProbationPeriodEligibilityRuleDataType] = (
        field(
            default=None,
            metadata={
                "name": "Probation_Period_Eligibility_Rule_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutRemoveMatrixOrganizationRequest(PutRemoveMatrixOrganizationRequestType):
    class Meta:
        name = "Put_Remove_Matrix_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStaffingFieldDefaultsConditionRulesRequestType:
    """
    Element containing Staffing Defaulting Condition Rule for update.

    Attributes:
        staffing_field_defaults_condition_rule_reference: Contains a reference that identifies a
            specific Staffing Field Defaults Condition Rule instance.
        staffing_field_defaults_condition_rule_data
        version
    """

    class Meta:
        name = "Put_Staffing_Field_Defaults_Condition_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_condition_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Defaults_Condition_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    staffing_field_defaults_condition_rule_data: Optional[
        StaffingFieldDefaultsConditionRuleDataType
    ] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Defaults_Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutStaffingFieldDefaultsRequest(PutStaffingFieldDefaultsRequestType):
    class Meta:
        name = "Put_Staffing_Field_Defaults_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStudentEmploymentEligibilityRuleRequestType:
    """
    Creates a Student Employment Eligibility Rule to be used in a Student Employment Eligibility
    Rule Set.

    Attributes:
        student_employment_eligibility_rule_reference: The Reference provided here will indicate
            that we are updating the Student Employment Eligibility Rule
        student_employment_eligibility_rule_data: Contains the data for the Student Employment
            Eligibility Rule
        add_only: Add Only specifies that we will only create a new instance of Student Employment
            Eligibility Rule
        version
    """

    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_data: Optional[StudentEmploymentEligibilityRuleDataType] = (
        field(
            default=None,
            metadata={
                "name": "Student_Employment_Eligibility_Rule_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutWorkingTimeEligibilityRulesRequestType:
    """
    Initiating Element of Put Working Time Eligibility Rules Request.

    Attributes:
        working_time_eligibility_rule_reference: Working Time Eligibility Rule Reference Work set
        working_time_eligibility_rule_data: Working Time Eligibility Rule Data Element
        add_only: Add Only
        delete: If True is entered, the Working Time Eligibility Rule will be deleted.
        version
    """

    class Meta:
        name = "Put_Working_Time_Eligibility_Rules_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    working_time_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_eligibility_rule_data: Optional[WorkingTimeEligibilityRuleDataType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SetHiringRestrictionsDataType:
    """
    Wrapper element for setting hiring restrictions.

    Attributes:
        supervisory_organization_reference: Reference to the supervisory organization to set hiring
            restrictions for
        hiring_restrictions_request_reason_reference: Reference to the reason the hiring
            restrictions are being set
        position_group_restrictions_data
        request_default_compensation_sub_process
    """

    class Meta:
        name = "Set_Hiring_Restrictions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    hiring_restrictions_request_reason_reference: Optional[GeneralEventSubcategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Hiring_Restrictions_Request_Reason_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    position_group_restrictions_data: Optional[PositionGroupRestrictionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Group_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_default_compensation_sub_process: Optional[
        RequestCompensationDefaultSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsConditionRuleType:
    """
    Contains each Staffing Defaulting Condition Rule based on the Request References or Request
    Criteria.

    Attributes:
        staffing_field_defaults_rule_reference: Contains a reference that identifies a specific
            Staffing Field Defaults Condition Rule instance.
        staffing_field_defaults_condition_rule_data
    """

    class Meta:
        name = "Staffing_Field_Defaults_Condition_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Staffing_Field_Defaults_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    staffing_field_defaults_condition_rule_data: list[
        StaffingFieldDefaultsConditionRuleDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Staffing_Field_Defaults_Condition_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsResponseDataType:
    """
    Contains the data for Staffing Field Defaults.

    Attributes:
        staffing_field_defaults: Contains the data for Staffing Field Defaults.
    """

    class Meta:
        name = "Staffing_Field_Defaults_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults: list[StaffingFieldDefaultsType] = field(
        default_factory=list,
        metadata={
            "name": "Staffing_Field_Defaults",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleType:
    """
    Container for Student Employment Eligibility Condition Rule Data.

    Attributes:
        student_employment_eligibility_rule_reference: Reference of the Student Employment
            Eligibility Rule
        student_employment_eligibility_rule_data
    """

    class Meta:
        name = "Student_Employment_Eligibility_RuleType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_rule_data: list[StudentEmploymentEligibilityRuleDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Student_Employment_Eligibility_Rule_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class WorkerAdditionalBenefitsPeriodDataType:
    """
    Contains the additional benefits period data for an employee based on the benefit plan year.

    Attributes:
        enrollment_period_data: Contains the benefit plan year information.
        additional_benefits_coverage_data: Contains the additional benefits coverage information
            (elections) for an employee.
    """

    class Meta:
        name = "Worker_Additional_Benefits_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enrollment_period_data: Optional[EnrollmentPeriodDataType] = field(
        default=None,
        metadata={
            "name": "Enrollment_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_benefits_coverage_data: list[WorkerAdditionalBenefitsCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Benefits_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerHealthCarePeriodDataType:
    """
    Contains the health care period data for an employee based on the benefit plan year.

    Attributes:
        enrollment_period_data: Contains the benefit plan year information.
        health_care_coverage_data: Contains the health care coverage information (elections) for an
            employee.
    """

    class Meta:
        name = "Worker_Health_Care_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enrollment_period_data: Optional[EnrollmentPeriodDataType] = field(
        default=None,
        metadata={
            "name": "Enrollment_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    health_care_coverage_data: list[WorkerHealthCareCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Health_Care_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerHealthSavingsAccountPeriodDataType:
    """
    Contains the health saving account period data for an employee based on the benefit plan year.

    Attributes:
        enrollment_period_data: Contains the benefit plan year information.
        health_savings_account_coverage_data: Contains the health saving account coverage
            information (elections) for an employee.
    """

    class Meta:
        name = "Worker_Health_Savings_Account_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enrollment_period_data: Optional[EnrollmentPeriodDataType] = field(
        default=None,
        metadata={
            "name": "Enrollment_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    health_savings_account_coverage_data: list[HealthSavingsAccountCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Health_Savings_Account_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerInsurancePeriodDataType:
    """
    Contains the insurance period data for an employee based on the benefit plan year.

    Attributes:
        enrollment_period_data: Contains the benefit plan year information.
        insurance_coverage_data: Contains the insurance coverage information (elections) for an
            employee.
    """

    class Meta:
        name = "Worker_Insurance_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enrollment_period_data: Optional[EnrollmentPeriodDataType] = field(
        default=None,
        metadata={
            "name": "Enrollment_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    insurance_coverage_data: list[WorkerInsuranceCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Insurance_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerOrganizationMembershipDataType:
    """
    Contains the organization reference and details about an organization.

    Attributes:
        organization_reference: A unique identifier for the organization.
        organization_data
    """

    class Meta:
        name = "Worker_Organization_Membership_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization_reference: Optional[PositionSetObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    organization_data: Optional[OrganizationSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerRetirementSavingsPeriodDataType:
    """Contains the retirement savings election information for the benefit plan year period."""

    class Meta:
        name = "Worker_Retirement_Savings_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enrollment_period_data: Optional[EnrollmentPeriodDataType] = field(
        default=None,
        metadata={
            "name": "Enrollment_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_savings_coverage_data: list[WorkerRetirementSavingsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Retirement_Savings_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerSpendingAccountPeriodDataType:
    """
    Contains the spending account period data for an employee based on the benefit plan year.

    Attributes:
        enrollment_period_data
        spending_account_coverage_data: Contains the spending account coverage information
            (elections) for an employee.
    """

    class Meta:
        name = "Worker_Spending_Account_Period_DataType"
        target_namespace = "urn:com.workday/bsvc"

    enrollment_period_data: Optional[EnrollmentPeriodDataType] = field(
        default=None,
        metadata={
            "name": "Enrollment_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    spending_account_coverage_data: list[SpendingAccountCoverageDataType] = field(
        default_factory=list,
        metadata={
            "name": "Spending_Account_Coverage_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeEligibilityRuleGetDataType:
    """
    Working Time Eligibility Rule Get Data Element.

    Attributes:
        working_time_eligibility_rule_reference: Working Time Eligibility Rule Work Set
        working_time_eligibility_rule_data: Working Time Eligibility Rule Data Element
    """

    class Meta:
        name = "Working_Time_Eligibility_Rule_Get_DataType"
        target_namespace = "urn:com.workday/bsvc"

    working_time_eligibility_rule_reference: Optional[ConditionRuleObjectType] = field(
        default=None,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    working_time_eligibility_rule_data: list[WorkingTimeEligibilityRuleDataType] = field(
        default_factory=list,
        metadata={
            "name": "Working_Time_Eligibility_Rule_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


class StaffingPortAddRetireeStatus:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortAddRetireeStatusInput
    output = StaffingPortAddRetireeStatusOutput


@dataclass
class StaffingPortAssignOrganizationRolesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAssignOrganizationRolesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortAssignOrganizationRolesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_organization_roles_request: Optional[AssignOrganizationRolesRequest] = field(
            default=None,
            metadata={
                "name": "Assign_Organization_Roles_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortAssignRoles:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortAssignRolesInput
    output = StaffingPortAssignRolesOutput


class StaffingPortChangeWorkSpace:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortChangeWorkSpaceInput
    output = StaffingPortChangeWorkSpaceOutput


class StaffingPortClosePosition:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortClosePositionInput
    output = StaffingPortClosePositionOutput


class StaffingPortEditCreditableService:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditCreditableServiceInput
    output = StaffingPortEditCreditableServiceOutput


class StaffingPortEditEmployeeContractAdditionalData:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditEmployeeContractAdditionalDataInput
    output = StaffingPortEditEmployeeContractAdditionalDataOutput


class StaffingPortEditPositionRestrictionsAdditionalData:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditPositionRestrictionsAdditionalDataInput
    output = StaffingPortEditPositionRestrictionsAdditionalDataOutput


class StaffingPortEditServiceDates:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditServiceDatesInput
    output = StaffingPortEditServiceDatesOutput


class StaffingPortEditWorkerAdditionalData:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditWorkerAdditionalDataInput
    output = StaffingPortEditWorkerAdditionalDataOutput


class StaffingPortFreezePosition:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortFreezePositionInput
    output = StaffingPortFreezePositionOutput


@dataclass
class StaffingPortGetCitizenshipStatusesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetCitizenshipStatusesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_citizenship_statuses_response: Optional[GetCitizenshipStatusesResponse] = field(
            default=None,
            metadata={
                "name": "Get_Citizenship_Statuses_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetCitizenshipStatusesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetCitizenshipStatusesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetFseWorkerCategoryCriteriasOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetFseWorkerCategoryCriteriasOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_fse_worker_category_criterias_response: Optional[
            GetFseWorkerCategoryCriteriasResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_FSE_Worker_Category_Criterias_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetFseWorkerCategoryCriteriasOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetFseWorkerCategoryCriteriasOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetFunctionalityForStaffingTransactionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetFunctionalityForStaffingTransactionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_functionality_for_staffing_transactions_response: Optional[
            GetFunctionalityForStaffingTransactionsResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Functionality_for_Staffing_Transactions_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetFunctionalityForStaffingTransactionsOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetFunctionalityForStaffingTransactionsOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetMaintainJobOverlapRoutingExclusionRuleOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainJobOverlapRoutingExclusionRuleOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_job_overlap_routing_exclusion_rule_response: Optional[
            GetMaintainJobOverlapRoutingExclusionRuleResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Job_Overlap_Routing_Exclusion_Rule_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetMaintainJobOverlapRoutingExclusionRuleOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetMaintainJobOverlapRoutingExclusionRuleOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetOrganizationsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetOrganizationsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetOrganizationsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_organizations_request: Optional[GetOrganizationsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Organizations_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortGetPersonnelActionRequestStatusOnMassAction:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetPersonnelActionRequestStatusOnMassActionInput
    output = StaffingPortGetPersonnelActionRequestStatusOnMassActionOutput


@dataclass
class StaffingPortGetPositionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetPositionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetPositionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_positions_request: Optional[GetPositionsRequest] = field(
            default=None,
            metadata={
                "name": "Get_Positions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetProbationPeriodOutcomeOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodOutcomeOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_outcome_response: Optional[GetProbationPeriodOutcomeResponse] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Outcome_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetProbationPeriodOutcomeOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetProbationPeriodOutcomeOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetProbationPeriodsForWorkersOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodsForWorkersOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_periods_for_workers_response: Optional[
            GetProbationPeriodsForWorkersResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Periods_For_Workers_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetProbationPeriodsForWorkersOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetProbationPeriodsForWorkersOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetStudentEmploymentEligibilityDataOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStudentEmploymentEligibilityDataOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_student_employment_eligibility_data_response: Optional[
            GetStudentEmploymentEligibilityDataResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Student_Employment_Eligibility_Data_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetStudentEmploymentEligibilityDataOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetStudentEmploymentEligibilityDataOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetWorkerDocumentsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetWorkerDocumentsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_worker_documents_response: Optional[GetWorkerDocumentsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Worker_Documents_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetWorkerDocumentsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetWorkerDocumentsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetWorkersInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetWorkersInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortGetWorkersInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_workers_request: Optional[GetWorkersRequest] = field(
            default=None,
            metadata={
                "name": "Get_Workers_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortImportMoveWorkersByOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportMoveWorkersByOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportMoveWorkersByOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_move_workers_by_organization_request: Optional[
            ImportMoveWorkersByOrganizationRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Move_Workers_By_Organization_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortMaintainEmployeeContracts:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortMaintainEmployeeContractsInput
    output = StaffingPortMaintainEmployeeContractsOutput


class StaffingPortMoveWorkersByOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortMoveWorkersByOrganizationInput
    output = StaffingPortMoveWorkersByOrganizationOutput


class StaffingPortNoShow:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortNoShowInput
    output = StaffingPortNoShowOutput


@dataclass
class StaffingPortPutAssignMatrixOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutAssignMatrixOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutAssignMatrixOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_assign_matrix_organization_request: Optional[PutAssignMatrixOrganizationRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Assign_Matrix_Organization_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutCollectiveAgreement:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutCollectiveAgreementInput
    output = StaffingPortPutCollectiveAgreementOutput


@dataclass
class StaffingPortPutEditNoticePeriodsEventInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutEditNoticePeriodsEventInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutEditNoticePeriodsEventInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_edit_notice_periods_event_request: Optional[PutEditNoticePeriodsEventRequest] = field(
            default=None,
            metadata={
                "name": "Put_Edit_Notice_Periods_Event_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutJobClassificationGroupInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobClassificationGroupInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutJobClassificationGroupInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_classification_group_request: Optional[PutJobClassificationGroupRequest] = field(
            default=None,
            metadata={
                "name": "Put_Job_Classification_Group_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutJobFamily:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutJobFamilyInput
    output = StaffingPortPutJobFamilyOutput


class StaffingPortPutLegalAuthority:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutLegalAuthorityInput
    output = StaffingPortPutLegalAuthorityOutput


class StaffingPortPutMaintainEmployeeContractRulesForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutMaintainEmployeeContractRulesForCountryInput
    output = StaffingPortPutMaintainEmployeeContractRulesForCountryOutput


class StaffingPortPutMaintainNoticePeriodsForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutMaintainNoticePeriodsForCountryInput
    output = StaffingPortPutMaintainNoticePeriodsForCountryOutput


@dataclass
class StaffingPortPutMaintainProbationPeriodsForCountryInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutMaintainProbationPeriodsForCountryInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutMaintainProbationPeriodsForCountryInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_maintain_probation_periods_for_country_request: Optional[
            PutMaintainProbationPeriodsForCountryRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Maintain_Probation_Periods_For_Country_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutMaintainWorkingTimeForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutMaintainWorkingTimeForCountryInput
    output = StaffingPortPutMaintainWorkingTimeForCountryOutput


class StaffingPortPutNatureOfAction:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutNatureOfActionInput
    output = StaffingPortPutNatureOfActionOutput


class StaffingPortPutProbationPeriodOutcomes:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutProbationPeriodOutcomesInput
    output = StaffingPortPutProbationPeriodOutcomesOutput


class StaffingPortPutRemark:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutRemarkInput
    output = StaffingPortPutRemarkOutput


@dataclass
class StaffingPortPutRemoveMatrixOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutRemoveMatrixOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutRemoveMatrixOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_remove_matrix_organization_request: Optional[PutRemoveMatrixOrganizationRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Put_Remove_Matrix_Organization_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutStaffingFieldDefaultsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStaffingFieldDefaultsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutStaffingFieldDefaultsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_staffing_field_defaults_request: Optional[PutStaffingFieldDefaultsRequest] = field(
            default=None,
            metadata={
                "name": "Put_Staffing_Field_Defaults_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutStudentEmploymentEligibilityRuleSet:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutStudentEmploymentEligibilityRuleSetInput
    output = StaffingPortPutStudentEmploymentEligibilityRuleSetOutput


class StaffingPortRemoveRetireeStatus:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortRemoveRetireeStatusInput
    output = StaffingPortRemoveRetireeStatusOutput


class StaffingPortSwitchPrimaryJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortSwitchPrimaryJobInput
    output = StaffingPortSwitchPrimaryJobOutput


@dataclass
class AssignOrganizationRequest(AssignOrganizationRequestType):
    class Meta:
        name = "Assign_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangeEmergencyContactDataType:
    """
    Wrapper element for the emergency contact.

    Attributes:
        emergency_contact_id: The new Reference ID for Emergency Contact
        primary: Flag to specify the emergency contact is primary or not.
        priority: The order of the priority of the emergency contact
        related_person_relationship_reference: Relationship of the emergency contact to the person.
        language_reference: The preferred language for the emergency contact.
        emergency_contact_personal_information_data: The name and contact information of the
            emergency contact
    """

    class Meta:
        name = "Change_Emergency_Contact_DataType"
        target_namespace = "urn:com.workday/bsvc"

    emergency_contact_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Primary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    priority: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Priority",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
            "total_digits": 12,
            "fraction_digits": 0,
        },
    )
    related_person_relationship_reference: list[RelatedPersonRelationshipObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Related_Person_Relationship_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_occurs": 1,
        },
    )
    language_reference: list[LanguageObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Language_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    emergency_contact_personal_information_data: Optional[
        EmergencyContactPersonalInformationDataType
    ] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeGovernmentIdsResponseDataType:
    """Element containing the worker data for the Get Change Government IDs response."""

    class Meta:
        name = "Change_Government_IDs_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_government_ids: list[ChangeGovernmentIdsResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Government_IDs",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeLicensesResponseDataType:
    """Element containing the worker data for the Get Change Licenses response."""

    class Meta:
        name = "Change_Licenses_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_licenses: list[ChangeLicensesResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Licenses",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeOrganizationAssignmentsRequest(ChangeOrganizationAssignmentsRequestType):
    class Meta:
        name = "Change_Organization_Assignments_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangeOtherIdsResponseDataType:
    """Element containing the worker data for the Get Change Other IDs response."""

    class Meta:
        name = "Change_Other_IDs_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_other_ids: list[ChangeOtherIdsResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Other_IDs",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePassportsAndVisasResponseDataType:
    """Element containing the worker data for the Get Change Passports and Visas response."""

    class Meta:
        name = "Change_Passports_and_Visas_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_passports_and_visas: list[ChangePassportsAndVisasResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Passports_and_Visas",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePersonalInformationBusinessProcessDataType:
    """
    Wrapper element for the Change Personal Information business process web service.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        universal_id_reference: Universal ID reference for the person that the personal information
            will be applied to.
        country_reference: Country Reference for the Country the Personal Information will be tied
            to. If none is passed, the primary position location will be used.
        personal_information_data
    """

    class Meta:
        name = "Change_Personal_Information_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_ID_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_information_data: Optional[ChangePersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ChangePersonalInformationResponseType:
    """
    Responds with the Event ID for the Personal Information Change Event.

    Attributes:
        personal_information_change_event_reference: Event ID of the Personal Information Change
            Event.
        personal_information_data
        version
    """

    class Meta:
        name = "Change_Personal_Information_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    personal_information_change_event_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Personal_Information_Change_Event_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_information_data: Optional[ChangePersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePersonalInformationSubBusinessProcessType:
    """Wrapper for the Change Personal data sub business process that is part of the Hire and Edit
    Position business processes."""

    class Meta:
        name = "Change_Personal_Information_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_data: Optional[ChangePersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Change_Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateJobRequisitionSubProcessDataType:
    """
    Wrapper element for the sub-process data and Job Requisition data.

    Attributes:
        additional_positions_reference: Contains a reference to the ID of the additional position.
            The additional position must be in a position management organization.
        create_job_requisition_reason_reference: The reason for creating a job requisition.
        job_requisition_data: Wrapper element for the Job Requisition data.
        check_position_budget_sub_process_for_create_job_requisition
    """

    class Meta:
        name = "Create_Job_Requisition_Sub_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    additional_positions_reference: list[PositionRestrictionsObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Positions_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_job_requisition_reason_reference: Optional[EventClassificationSubcategoryObjectType] = (
        field(
            default=None,
            metadata={
                "name": "Create_Job_Requisition_Reason_Reference",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    job_requisition_data: Optional[JobRequisitionDataForCreateAndEditType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process_for_create_job_requisition: Optional[
        CheckPositionBudgetSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process_for_Create_Job_Requisition",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreatePositionDataType:
    """
    Wrapper element for the creation of a new position opening for a supervisory organization using
    position management.

    Attributes:
        supervisory_organization_reference: Reference to the supervisory organization this position
            is being created for. This supervisory organization must be using the position
            management staffing model.
        position_request_reason_reference: Reference to the reason the position is being created.
        position_data
        qualification_replacement_data
        position_group_restrictions_data
        position_restriction_working_hours_details_data
        edit_assign_organization_sub_process
        request_default_compensation_sub_process
        assign_pay_group_sub_process: Contains the Assign Pay Group for Position Restriction sub
            business process attributes and data needed to complete that sub process in the Create
            Position parent business process. This is currently only required to enable commitment
            accounting for open positions.
        assign_costing_allocation_sub_process: Specifies the costing allocation overrides for the
            position.
    """

    class Meta:
        name = "Create_Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_request_reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Request_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_data: Optional[PositionDefinitionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    qualification_replacement_data: Optional[
        QualificationDataForPositionRestrictionOrJobProfileType
    ] = field(
        default=None,
        metadata={
            "name": "Qualification_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_group_restrictions_data: Optional[PositionGroupRestrictionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Group_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restriction_working_hours_details_data: Optional[WorkingHoursDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Position_Restriction_Working_Hours_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_default_compensation_sub_process: Optional[
        RequestCompensationDefaultSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[
        AssignPayGroupForPositionRestrictionsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditHiringRestrictionsRequestType:
    """Wrapper element for edit hiring restrictions web service."""

    class Meta:
        name = "Edit_Hiring_Restrictions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_hiring_restrictions_data: Optional[EditHiringRestrictionsDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Hiring_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditHiringRestrictionsRequestHvtype:
    """High Volume Edit Hiring Restrictions Request for Import Web Services."""

    class Meta:
        name = "Edit_Hiring_Restrictions_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_hiring_restrictions_data: Optional[EditHiringRestrictionsDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Hiring_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EditPositionRestrictionsDataType:
    """
    Wrapper element for the editing of a position restriction.

    Attributes:
        position_reference: Unique identifier for the Position
        edit_position_restriction_event_data
        edit_assign_organization_sub_process
        request_default_compensation_sub_process
        assign_pay_group_sub_process: Contains the Assign Pay Group for Position Restriction sub
            business process attributes and data needed to complete that sub process in the Create
            Position parent business process. This is currently only required to enable commitment
            accounting for open positions.
    """

    class Meta:
        name = "Edit_Position_Restrictions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    edit_position_restriction_event_data: Optional[EditPositionRestrictionEventDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Position_Restriction_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_default_compensation_sub_process: Optional[
        RequestCompensationDefaultSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[
        AssignPayGroupForPositionRestrictionsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalStudentStudentSubeditDataType:
    """
    Element containing Student data.

    Attributes:
        student_id: The Student ID for this Student
        worker_reference: The reference to the existing Worker for this Student
        pre_hire_reference: The reference to an existing Pre-Hire for Student
        student_person_data: Element containing the Person data for the Student.
        student_photo_data
    """

    class Meta:
        name = "External_Student_Student_Subedit_DataType"
        target_namespace = "urn:com.workday/bsvc"

    student_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Student_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pre_hire_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Pre_Hire_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_person_data: Optional[ExternalStudentPersonDataType] = field(
        default=None,
        metadata={
            "name": "Student_Person_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_photo_data: Optional[StudentPhotoDataType] = field(
        default=None,
        metadata={
            "name": "Student_Photo_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeLegalNameResponseType:
    """Element containing the Get Change Legal Name response elements including echoed request data
    and request references."""

    class Meta:
        name = "Get_Change_Legal_Name_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangeLegalNameRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ChangeLegalNameResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePreferredNameResponseType:
    """Element containing the Get Change Preferred Name response elements including echoed request
    data and request references."""

    class Meta:
        name = "Get_Change_Preferred_Name_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GetChangePreferredNameRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ChangePreferredNameResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetCollectiveAgreementsResponse(GetCollectiveAgreementsResponseType):
    class Meta:
        name = "Get_Collective_Agreements_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetCreditableServiceResponse(GetCreditableServiceResponseType):
    class Meta:
        name = "Get_Creditable_Service_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobClassificationGroupsResponseType:
    """Response Element for Get Job Classification Groups."""

    class Meta:
        name = "Get_Job_Classification_Groups_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobClassificationGroupRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobClassificationGroupResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[JobClassificationGroupResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobFamiliesResponse(GetJobFamiliesResponseType):
    class Meta:
        name = "Get_Job_Families_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetLegalAuthoritiesResponse(GetLegalAuthoritiesResponseType):
    class Meta:
        name = "Get_Legal_Authorities_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainEmployeeContractRulesForCountryResponse(
    GetMaintainEmployeeContractRulesForCountryResponseType
):
    class Meta:
        name = "Get_Maintain_Employee_Contract_Rules_For_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainNoticePeriodsForCountryResponse(GetMaintainNoticePeriodsForCountryResponseType):
    class Meta:
        name = "Get_Maintain_Notice_Periods_For_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetMaintainProbationPeriodsForCountryResponseType:
    """
    Response contains all Probation Periods that met Request Criteria.

    Attributes:
        request_references
        request_criteria
        response_data: Probation Periods For Country Details
        response_filter
        response_results
        version
    """

    class Meta:
        name = "Get_Maintain_Probation_Periods_For_Country_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodsForCountryRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ProbationPeriodsForCountryRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ProbationPeriodsForCountryResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainWorkingTimeForCountryResponse(GetMaintainWorkingTimeForCountryResponseType):
    class Meta:
        name = "Get_Maintain_Working_Time_for_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNatureOfActionsResponse(GetNatureOfActionsResponseType):
    class Meta:
        name = "Get_Nature_of_Actions_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodsForWorkerResponse(GetNoticePeriodsForWorkerResponseType):
    class Meta:
        name = "Get_Notice_Periods_for_Worker_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodOutcomesResponse(GetProbationPeriodOutcomesResponseType):
    class Meta:
        name = "Get_Probation_Period_Outcomes_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetRemarksResponse(GetRemarksResponseType):
    class Meta:
        name = "Get_Remarks_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetRoleAssignmentsForRoleAssignersResponse(GetRoleAssignmentsForRoleAssignersResponseType):
    class Meta:
        name = "Get_Role_Assignments_For_Role_Assigners_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStaffingFieldDefaultsResponseType:
    """
    Element containing the Staffing Field Defaults retrieved by the web service.

    Attributes:
        request_references: Contains references that identify specific Staffing Field Defaults to
            retrieve.
        request_criteria: Contains additional criteria for identifying specific Staffing Field
            Defaults instances.
        response_filter: Parameters that let you filter the data returned in the response. You can
            filter returned data by dates and page attributes.
        response_group: Defines the data to include in the response. By default, the response
            includes: Response.
        response_results: The "Response_Results" element contains summary information about the data
            that has been returned from your request including "Total_Results", "Total_Pages", and
            the current "Page" returned.
        response_data: Contains the data for Staffing Field Defaults.
        version
    """

    class Meta:
        name = "Get_Staffing_Field_Defaults_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StaffingFieldDefaultsRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StaffingFieldDefaultsRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StaffingFieldDefaultsResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StaffingFieldDefaultsResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStudentEmploymentEligibilityRuleSetResponse(
    GetStudentEmploymentEligibilityRuleSetResponseType
):
    class Meta:
        name = "Get_Student_Employment_Eligibility_Rule_Set_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GlobalStaffingEligibilityRuleResponseDataType:
    """Global Staffing Eligibility Rule Response Data Element."""

    class Meta:
        name = "Global_Staffing_Eligibility_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    global_staffing_eligibility_rule: list[GlobalStaffingEligibilityRuleType] = field(
        default_factory=list,
        metadata={
            "name": "Global_Staffing_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImplementationEmployeeDataRootType(ImplementationEmployeeDataType):
    class Meta:
        name = "Implementation_Employee_DataRootType"
        target_namespace = "urn:com.workday/bsvc"

    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportAssignMatrixOrganizationRequest(ImportAssignMatrixOrganizationRequestType):
    class Meta:
        name = "Import_Assign_Matrix_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportChangeOrganizationAssignmentRequestType:
    """
    Root Element for the Import Change Organization Assignment Web Service.

    Attributes:
        change_organizaton_assignments_hv: Change Organization Assignment Information
        version
    """

    class Meta:
        name = "Import_Change_Organization_Assignment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    change_organizaton_assignments_hv: list[ChangeOrganizationAssignmentsRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Change_Organizaton_Assignments_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportRemoveMatrixOrganizationRequest(ImportRemoveMatrixOrganizationRequestType):
    class Meta:
        name = "Import_Remove_Matrix_Organization_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class JobFamilyGroupNewType:
    """
    Encapsulating element containing all Job Family Group data.

    Attributes:
        job_family_group_reference: A unique identifier used to reference a Job Family Group.
        job_family_group_data: Contains the detailed information about an Job Family Group.
        as_of_date: Defines the As Of Date to be used for any application effective dated data
            within the Workday system.  For "Request" elements, the "As Of Date" determines what
            data is to be used within search logic or returned in a response.  For "Response"
            elements, this element will echo "As Of Date" entered in the "Request" element or the
            default "As Of Date" if omitted..
        as_of_moment: Defines the latest moment (e.g. datetime) data was entered into the Workday
            system.  For "Request" elements, the "As Of Moment" determines what data is to be used
            within search logic or returned in a response.  For "Response" elements, this element
            will echo "As Of Moment" entered in the "Request" element or the default "As Of Moment"
            if omitted.
    """

    class Meta:
        name = "Job_Family_Group_NewType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_group_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_group_data: Optional[JobFamilyGroupDataType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Group_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "As_Of_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    as_of_moment: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "As_Of_Moment",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobOverlapRoutingExclusionRuleResponseDataType:
    """Contains each Job Overlap Routing Exclusion Rule based on the Request References or Request
    Criteria."""

    class Meta:
        name = "Job_Overlap_Routing_Exclusion_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_overlap_routing_exclusion_rule: list[JobOverlapRoutingExclusionRuleType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Overlap_Routing_Exclusion_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class NoticePeriodEligibilityRuleResponseDataType:
    """Notice Period Eligibility Rule Response Data."""

    class Meta:
        name = "Notice_Period_Eligibility_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    notice_period_eligibility_rule: list[NoticePeriodEligibilityRuleType] = field(
        default_factory=list,
        metadata={
            "name": "Notice_Period_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationWwstype:
    """
    Response element containing an instance of Organization and its associated data.

    Attributes:
        organization_reference: A unique identifier to reference an Organization.  (Not the business
            based Organization ID.)
        organization_data
    """

    class Meta:
        name = "Organization_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    organization_reference: Optional[OrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_data: Optional[OrganizationWwsDataType] = field(
        default=None,
        metadata={
            "name": "Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonalInformationCommonDataType:
    """
    Personal Information Data.

    Attributes:
        personal_information_for_country_data: Country Specific Personal Information
        birth_date: Date of Birth
        date_of_death: Date of Death
        country_of_birth_reference: Country of Birth
        country_region_of_birth_reference: Country Region of Birth
        region_of_birth_descriptor: Birth Country Region Name
        city_of_birth: City of Birth
        city_of_birth_reference: City of Birth
        citizenship_status_reference: Citizenship Status
        primary_nationality_reference: Primary Nationality
        additional_nationalities_reference: Additional Nationalities
        last_medical_exam_valid_to: Last Medical Exam Valid to
        last_medical_exam_date: Last Medical Exam Date
        medical_exam_notes: Medical Exam Notes
        blood_type_reference: Blood Type
        military_service_data: Military Service Data
        sexual_orientation_reference: Sexual Orientation
        gender_identity_reference: Gender Identity
        pronoun_reference: Pronoun
    """

    class Meta:
        name = "Personal_Information_Common_DataType"
        target_namespace = "urn:com.workday/bsvc"

    personal_information_for_country_data: list[PersonalInformationForCountryDataType] = field(
        default_factory=list,
        metadata={
            "name": "Personal_Information_For_Country_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    birth_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Birth_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    date_of_death: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Date_of_Death",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_of_birth_reference: Optional[CountryObjectType] = field(
        default=None,
        metadata={
            "name": "Country_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    country_region_of_birth_reference: Optional[CountryRegionObjectType] = field(
        default=None,
        metadata={
            "name": "Country_Region_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    region_of_birth_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Region_of_Birth_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth: Optional[str] = field(
        default=None,
        metadata={
            "name": "City_of_Birth",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    city_of_birth_reference: Optional[CountryCityObjectType] = field(
        default=None,
        metadata={
            "name": "City_of_Birth_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    citizenship_status_reference: list[CitizenshipStatusObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Citizenship_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_nationality_reference: Optional[CountryAndNationalityObjectType] = field(
        default=None,
        metadata={
            "name": "Primary_Nationality_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_nationalities_reference: list[CountryAndNationalityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Nationalities_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_medical_exam_valid_to: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Medical_Exam_Valid_To",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    last_medical_exam_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Last_Medical_Exam_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    medical_exam_notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Medical_Exam_Notes",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    blood_type_reference: Optional[BloodTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Blood_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    military_service_data: list[PersonMilitaryServiceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Military_Service_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    sexual_orientation_reference: list[SexualOrientationObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Sexual_Orientation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gender_identity_reference: list[GenderIdentityObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Gender_Identity_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pronoun_reference: list[PronounObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Pronoun_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionDataType:
    """
    Contains the detailed information about a Position.

    Attributes:
        supervisory_organization_reference: Reference to the supervisory organization on the
            position.
        effective_date: Date this position is effective.
        position_definition_data
        position_restrictions_data
        position_restriction_working_hours_details_data
        default_compensation_data
        default_position_organization_assignments_data
        worker_for_filled_position
        qualification_data
        integration_field_override_data: Position External Field Result Data
        job_requisition_data: Returns the effective Job Requisition for the Position.  Starting in
            WD22, this requisition can have a status of 'Open' or 'Frozen'.  If you need to see that
            status, please use the v22.0 version of the web service.
        closed: Returns true of the position is closed.
    """

    class Meta:
        name = "Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    supervisory_organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Supervisory_Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_definition_data: Optional[PositionDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Position_Definition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restrictions_data: Optional[PositionGroupRestrictionSummaryDataType] = field(
        default=None,
        metadata={
            "name": "Position_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_restriction_working_hours_details_data: Optional[WorkingHoursDetailsDataType] = field(
        default=None,
        metadata={
            "name": "Position_Restriction_Working_Hours_Details_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_compensation_data: Optional[CompensationDefaultDataType] = field(
        default=None,
        metadata={
            "name": "Default_Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    default_position_organization_assignments_data: Optional[
        DefaultPositionOrganizationAssignmentsDataType
    ] = field(
        default=None,
        metadata={
            "name": "Default_Position_Organization_Assignments_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_for_filled_position: Optional[WorkerForFilledPositionType] = field(
        default=None,
        metadata={
            "name": "Worker_For_Filled_Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_data: Optional[QualificationsFromPositionRestrictionsDataType] = field(
        default=None,
        metadata={
            "name": "Qualification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    integration_field_override_data: list[DocumentFieldResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Integration_Field_Override_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_data: Optional[JobRequisitionDataType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    closed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Closed",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionOrganizationDataType:
    """
    Contains the position's organization that it is part of.

    Attributes:
        position_organization_data
        pay_group_assignment_correct_or_rescind_data: Provides additional information on Pay Group
            Assignment corrections or rescinds.  This element only reports Pay Group Assignment
            Rescind events.
    """

    class Meta:
        name = "Position_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_organization_data: list[WorkerOrganizationMembershipDataType] = field(
        default_factory=list,
        metadata={
            "name": "Position_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    pay_group_assignment_correct_or_rescind_data: list[
        PayGroupAssignmentCorrectOrRescindedOrganizationDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Pay_Group_Assignment_Correct_or_Rescind_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProbationPeriodEligibilityRuleResponseDataType:
    """
    Probation Period Eligibility Rule Response Data.

    Attributes:
        probation_period_eligibility_rule: Probation Period Eligibility Rule Get Data Element
    """

    class Meta:
        name = "Probation_Period_Eligibility_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    probation_period_eligibility_rule: list[ProbationPeriodEligibilityRuleGetDataType] = field(
        default_factory=list,
        metadata={
            "name": "Probation_Period_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ProfessionalAffiliationSkillType:
    """
    Wrapper element for the Organization Professional Affiliation information.

    Attributes:
        organization_professional_affiliation_reference: Reference to the membership profile.
        organization_professional_affiliation_data: Wrapper element for the Organization
            Professional Affiliation information.
    """

    class Meta:
        name = "Professional_Affiliation_SkillType"
        target_namespace = "urn:com.workday/bsvc"

    organization_professional_affiliation_reference: Optional[
        ProfessionalAffiliationQualificationObjectType
    ] = field(
        default=None,
        metadata={
            "name": "Organization_Professional_Affiliation_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_professional_affiliation_data: list[
        ProfessionalAffiliationOrganizationDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Professional_Affiliation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutDependentDataType:
    """
    The Wrapper data element for the Put Dependent Web Service.

    Attributes:
        dependent_id: The Reference ID for the Dependent. This field can be used to fill in the ID
            value for a newly created Dependent, or to update the ID of an existing Dependent.
        employee_reference: A reference to the Employee for the Dependent.
        existing_related_person_reference: Reference to an existing related person for the
            Dependent. If this field is populated, this dependent's personal information data will
            be shared with the person specified.
        related_person_relationship_reference: Reference to the relationship between the dependent
            and the related person.
        use_employee_address: If this field is marked true, then the dependent will share the
            specified employee's primary home address.
        use_employee_phone: If this field is marked true, then the dependent will share the
            specified employee's primary home phone data.
        irrevocable: If this field is marked true, any new beneficiaries that are created will be
            marked as "Irrevocable".
        dependent_personal_information_data: Wrapper element for this dependent's personal
            information.
        court_order_replacement_data
    """

    class Meta:
        name = "Put_Dependent_DataType"
        target_namespace = "urn:com.workday/bsvc"

    dependent_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Dependent_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    existing_related_person_reference: Optional[RelatedPersonForWorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Existing_Related_Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    related_person_relationship_reference: Optional[RelatedPersonRelationshipObjectType] = field(
        default=None,
        metadata={
            "name": "Related_Person_Relationship_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_employee_address: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Employee_Address",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    use_employee_phone: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Use_Employee_Phone",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    irrevocable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Irrevocable",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dependent_personal_information_data: Optional[DependentPersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Dependent_Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    court_order_replacement_data: list[QualifiedDomesticRelationsOrderReplacementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Court_Order_Replacement_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutGlobalStaffingEligibilityRuleRequest(PutGlobalStaffingEligibilityRuleRequestType):
    class Meta:
        name = "Put_Global_Staffing_Eligibility_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutJobFamilyGroupRequestType:
    """
    Request element for  Put Job Family Group.

    Attributes:
        job_family_group_reference: A unique identifier used to reference a Job Family Group.
        job_family_group_data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Job_Family_Group_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_group_reference: Optional[JobFamilyObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Group_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_family_group_data: Optional[JobFamilyGroupDataType] = field(
        default=None,
        metadata={
            "name": "Job_Family_Group_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobOverlapRoutingExclusionRuleRequest(PutJobOverlapRoutingExclusionRuleRequestType):
    class Meta:
        name = "Put_Job_Overlap_Routing_Exclusion_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutNoticePeriodEligibilityRuleRequest(PutNoticePeriodEligibilityRuleRequestType):
    class Meta:
        name = "Put_Notice_Period_Eligibility_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutProbationPeriodEligibilityRuleRequest(PutProbationPeriodEligibilityRuleRequestType):
    class Meta:
        name = "Put_Probation_Period_Eligibility_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStaffingFieldDefaultsConditionRulesRequest(
    PutStaffingFieldDefaultsConditionRulesRequestType
):
    class Meta:
        name = "Put_Staffing_Field_Defaults_Condition_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutStudentEmploymentEligibilityRuleRequest(PutStudentEmploymentEligibilityRuleRequestType):
    class Meta:
        name = "Put_Student_Employment_Eligibility_Rule_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class PutWorkingTimeEligibilityRulesRequest(PutWorkingTimeEligibilityRulesRequestType):
    class Meta:
        name = "Put_Working_Time_Eligibility_Rules_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RetirementSavingsDataType:
    """Contains the retirement savings election information for the benefit plan year period."""

    class Meta:
        name = "Retirement_Savings_DataType"
        target_namespace = "urn:com.workday/bsvc"

    retirement_savings_period_data: list[WorkerRetirementSavingsPeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Retirement_Savings_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class SetHiringRestrictionsRequestType:
    """
    Wrapper element for set hiring restrictions web service.

    Attributes:
        business_process_parameters
        set_hiring_restrictions_data: Wrapper element for the creation of Hiring Restrictions
        version
    """

    class Meta:
        name = "Set_Hiring_Restrictions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    set_hiring_restrictions_data: Optional[SetHiringRestrictionsDataType] = field(
        default=None,
        metadata={
            "name": "Set_Hiring_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingFieldDefaultsConditionRuleResponseDataType:
    """Contains Staffing Field Defaults Condition Rule data based on the Request References or
    Request Criteria."""

    class Meta:
        name = "Staffing_Field_Defaults_Condition_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    staffing_field_defaults_condition_rule: list[StaffingFieldDefaultsConditionRuleType] = field(
        default_factory=list,
        metadata={
            "name": "Staffing_Field_Defaults_Condition_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StartInternationalAssignmentDataType:
    """
    Wrapper Element for the Start International Assignment business process web service and its sub
    business process.

    Attributes:
        employee_reference: Reference to the employee that will get an international assignment job.
            Must be an active employee or have a completed hire event as of the start date.
        organization_reference: Reference to the supervisory organization the worker's international
            assignment job will be in.
        position_reference: Reference to the Headcount Management group to add the worker into. This
            must be an existing headcount group that is for the supervisory organization. Leave
            blank if the worker is being hired into a Position Group or a supervisory organization
            using the Job Management staffing policy.
        job_requisition_reference: Job requisition reference for the position to move the worker
            into.
        start_international_assignment_event_data: Wrapper element that contains international
            assignment job related information
        edit_assign_organization_sub_process
        assign_matrix_organization_sub_process
        assign_pay_group_sub_process
        propose_compensation_for_additional_job_sub_process
        maintain_employee_contracts_sub_business_process
        update_id_information_sub_process
        edit_government_ids_sub_process
        edit_passports_and_visas_sub_process
        edit_license_sub_process
        edit_custom_ids_sub_process
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        onboarding_setup_sub_process
        add_flexible_work_arrangement_sub_process
        assign_costing_allocation_sub_process
        start_date: The date the worker will start work in this international assignment. Must be
            equal to or greater than their latest hire (contract start) date. Will default to
            today's date if not sent.
    """

    class Meta:
        name = "Start_International_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_international_assignment_event_data: Optional[
        StartInternationalAssignmentEventDataType
    ] = field(
        default=None,
        metadata={
            "name": "Start_International_Assignment_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[AssignPayGroupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    propose_compensation_for_additional_job_sub_process: Optional[
        ProposeCompensationForEmploymentSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Propose_Compensation_for_Additional_Job_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_business_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_id_information_sub_process: Optional[UpdateIdInformationSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Update_ID_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_government_ids_sub_process: Optional[EditGovernmentIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Government_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_passports_and_visas_sub_process: Optional[EditPassportsAndVisasSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Edit_Passports_and_Visas_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    edit_license_sub_process: Optional[EditLicensesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_License_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_custom_ids_sub_process: Optional[EditCustomIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Custom_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_sub_process: Optional[OnboardingSetupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_flexible_work_arrangement_sub_process: Optional[
        AddFlexibleWorkArrangementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Add_Flexible_Work_Arrangement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StudentEmploymentEligibilityRuleResponseDataType:
    """
    Container for Student Employment Eligibility Rule Data.

    Attributes:
        student_employment_eligibility_rule: Container for Student Employment Eligibility Condition
            Rule Data
    """

    class Meta:
        name = "Student_Employment_Eligibility_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    student_employment_eligibility_rule: list[StudentEmploymentEligibilityRuleType] = field(
        default_factory=list,
        metadata={
            "name": "Student_Employment_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerAdditionalBenefitsDataType:
    """
    Contains the additional benefits data for an employee.

    Attributes:
        additional_benefits_period_data: Contains the additional benefits period data for an
            employee based on the benefit plan year.
    """

    class Meta:
        name = "Worker_Additional_Benefits_DataType"
        target_namespace = "urn:com.workday/bsvc"

    additional_benefits_period_data: list[WorkerAdditionalBenefitsPeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Additional_Benefits_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerHealthCareDataType:
    """
    Contains the health care data for an employee.

    Attributes:
        health_care_period_data: Contains the health care period data for an employee based on the
            benefit plan year.
    """

    class Meta:
        name = "Worker_Health_Care_DataType"
        target_namespace = "urn:com.workday/bsvc"

    health_care_period_data: list[WorkerHealthCarePeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Health_Care_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerHealthSavingsAccountDataType:
    """
    Contains the health savings account information for an employee.

    Attributes:
        health_savings_account_period_data: Contains the health savings account period data for an
            employee based on the benefit plan year.
    """

    class Meta:
        name = "Worker_Health_Savings_Account_DataType"
        target_namespace = "urn:com.workday/bsvc"

    health_savings_account_period_data: list[WorkerHealthSavingsAccountPeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Health_Savings_Account_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerInsuranceDataType:
    """Contains the insurance information for an employee."""

    class Meta:
        name = "Worker_Insurance_DataType"
        target_namespace = "urn:com.workday/bsvc"

    insurance_period_data: list[WorkerInsurancePeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Insurance_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerOrganizationDataType:
    """Contains the worker's organizations that they are a member of."""

    class Meta:
        name = "Worker_Organization_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_organization_data: list[WorkerOrganizationMembershipDataType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerSpendingAccountDataType:
    """
    Contains the spending account information for an employee.

    Attributes:
        spending_account_period_data: Contains the spending account period data for an employee
            based on the benefit plan year.
    """

    class Meta:
        name = "Worker_Spending_Account_DataType"
        target_namespace = "urn:com.workday/bsvc"

    spending_account_period_data: list[WorkerSpendingAccountPeriodDataType] = field(
        default_factory=list,
        metadata={
            "name": "Spending_Account_Period_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkingTimeEligibilityRuleResponseDataType:
    """
    Working Time Eligibility Rule Response Data.

    Attributes:
        working_time_eligibility_rule: Working Time Eligibility Rule Get Data Element
    """

    class Meta:
        name = "Working_Time_Eligibility_Rule_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    working_time_eligibility_rule: list[WorkingTimeEligibilityRuleGetDataType] = field(
        default_factory=list,
        metadata={
            "name": "Working_Time_Eligibility_Rule",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


class StaffingPortAssignOrganizationRoles:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortAssignOrganizationRolesInput
    output = StaffingPortAssignOrganizationRolesOutput


@dataclass
class StaffingPortAssignOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAssignOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortAssignOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        assign_organization_request: Optional[AssignOrganizationRequest] = field(
            default=None,
            metadata={
                "name": "Assign_Organization_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortChangeOrganizationAssignmentsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangeOrganizationAssignmentsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortChangeOrganizationAssignmentsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_organization_assignments_request: Optional[ChangeOrganizationAssignmentsRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Change_Organization_Assignments_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortGetCitizenshipStatuses:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetCitizenshipStatusesInput
    output = StaffingPortGetCitizenshipStatusesOutput


@dataclass
class StaffingPortGetCollectiveAgreementsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetCollectiveAgreementsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_collective_agreements_response: Optional[GetCollectiveAgreementsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Collective_Agreements_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetCollectiveAgreementsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetCollectiveAgreementsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetCreditableServiceOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetCreditableServiceOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_creditable_service_response: Optional[GetCreditableServiceResponse] = field(
            default=None,
            metadata={
                "name": "Get_Creditable_Service_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetCreditableServiceOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetCreditableServiceOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetFseWorkerCategoryCriterias:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetFseWorkerCategoryCriteriasInput
    output = StaffingPortGetFseWorkerCategoryCriteriasOutput


class StaffingPortGetFunctionalityForStaffingTransactions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetFunctionalityForStaffingTransactionsInput
    output = StaffingPortGetFunctionalityForStaffingTransactionsOutput


@dataclass
class StaffingPortGetJobFamiliesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobFamiliesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_families_response: Optional[GetJobFamiliesResponse] = field(
            default=None,
            metadata={
                "name": "Get_Job_Families_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetJobFamiliesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetJobFamiliesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetLegalAuthoritiesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetLegalAuthoritiesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_legal_authorities_response: Optional[GetLegalAuthoritiesResponse] = field(
            default=None,
            metadata={
                "name": "Get_Legal_Authorities_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetLegalAuthoritiesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetLegalAuthoritiesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetMaintainEmployeeContractRulesForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainEmployeeContractRulesForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_employee_contract_rules_for_country_response: Optional[
            GetMaintainEmployeeContractRulesForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Employee_Contract_Rules_For_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetMaintainEmployeeContractRulesForCountryOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetMaintainEmployeeContractRulesForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetMaintainJobOverlapRoutingExclusionRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetMaintainJobOverlapRoutingExclusionRuleInput
    output = StaffingPortGetMaintainJobOverlapRoutingExclusionRuleOutput


@dataclass
class StaffingPortGetMaintainNoticePeriodsForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainNoticePeriodsForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_notice_periods_for_country_response: Optional[
            GetMaintainNoticePeriodsForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Notice_Periods_For_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetMaintainNoticePeriodsForCountryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetMaintainNoticePeriodsForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetMaintainWorkingTimeForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainWorkingTimeForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_working_time_for_country_response: Optional[
            GetMaintainWorkingTimeForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Working_Time_for_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetMaintainWorkingTimeForCountryOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetMaintainWorkingTimeForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetNatureOfActionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNatureOfActionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_nature_of_actions_response: Optional[GetNatureOfActionsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Nature_of_Actions_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetNatureOfActionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetNatureOfActionsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetNoticePeriodsForWorkerOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNoticePeriodsForWorkerOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_notice_periods_for_worker_response: Optional[GetNoticePeriodsForWorkerResponse] = field(
            default=None,
            metadata={
                "name": "Get_Notice_Periods_for_Worker_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetNoticePeriodsForWorkerOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetNoticePeriodsForWorkerOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetProbationPeriodOutcome:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetProbationPeriodOutcomeInput
    output = StaffingPortGetProbationPeriodOutcomeOutput


@dataclass
class StaffingPortGetProbationPeriodOutcomesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodOutcomesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_outcomes_response: Optional[GetProbationPeriodOutcomesResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Probation_Period_Outcomes_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortGetProbationPeriodOutcomesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetProbationPeriodOutcomesOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetProbationPeriodsForWorkers:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetProbationPeriodsForWorkersInput
    output = StaffingPortGetProbationPeriodsForWorkersOutput


@dataclass
class StaffingPortGetRemarksOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetRemarksOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_remarks_response: Optional[GetRemarksResponse] = field(
            default=None,
            metadata={
                "name": "Get_Remarks_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetRemarksOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetRemarksOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetRoleAssignmentsForRoleAssignersOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetRoleAssignmentsForRoleAssignersOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_role_assignments_for_role_assigners_response: Optional[
            GetRoleAssignmentsForRoleAssignersResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Role_Assignments_For_Role_Assigners_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetRoleAssignmentsForRoleAssignersOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetRoleAssignmentsForRoleAssignersOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetStudentEmploymentEligibilityData:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetStudentEmploymentEligibilityDataInput
    output = StaffingPortGetStudentEmploymentEligibilityDataOutput


@dataclass
class StaffingPortGetStudentEmploymentEligibilityRuleSetOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStudentEmploymentEligibilityRuleSetOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_student_employment_eligibility_rule_set_response: Optional[
            GetStudentEmploymentEligibilityRuleSetResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Student_Employment_Eligibility_Rule_Set_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetStudentEmploymentEligibilityRuleSetOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetStudentEmploymentEligibilityRuleSetOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetWorkerDocuments:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetWorkerDocumentsInput
    output = StaffingPortGetWorkerDocumentsOutput


@dataclass
class StaffingPortImportAssignMatrixOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportAssignMatrixOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportAssignMatrixOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_assign_matrix_organization_request: Optional[
            ImportAssignMatrixOrganizationRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Assign_Matrix_Organization_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportMoveWorkersByOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportMoveWorkersByOrganizationInput
    output = StaffingPortImportMoveWorkersByOrganizationOutput


@dataclass
class StaffingPortImportRemoveMatrixOrganizationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportRemoveMatrixOrganizationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportRemoveMatrixOrganizationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_remove_matrix_organization_request: Optional[
            ImportRemoveMatrixOrganizationRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Remove_Matrix_Organization_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutAssignMatrixOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutAssignMatrixOrganizationInput
    output = StaffingPortPutAssignMatrixOrganizationOutput


class StaffingPortPutEditNoticePeriodsEvent:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutEditNoticePeriodsEventInput
    output = StaffingPortPutEditNoticePeriodsEventOutput


@dataclass
class StaffingPortPutGlobalStaffingEligibilityRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutGlobalStaffingEligibilityRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutGlobalStaffingEligibilityRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_global_staffing_eligibility_rule_request: Optional[
            PutGlobalStaffingEligibilityRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Global_Staffing_Eligibility_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutJobClassificationGroup:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutJobClassificationGroupInput
    output = StaffingPortPutJobClassificationGroupOutput


@dataclass
class StaffingPortPutJobOverlapRoutingExclusionRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobOverlapRoutingExclusionRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutJobOverlapRoutingExclusionRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_overlap_routing_exclusion_rule_request: Optional[
            PutJobOverlapRoutingExclusionRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Job_Overlap_Routing_Exclusion_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutMaintainProbationPeriodsForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutMaintainProbationPeriodsForCountryInput
    output = StaffingPortPutMaintainProbationPeriodsForCountryOutput


@dataclass
class StaffingPortPutNoticePeriodEligibilityRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutNoticePeriodEligibilityRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutNoticePeriodEligibilityRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_notice_period_eligibility_rule_request: Optional[
            PutNoticePeriodEligibilityRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Notice_Period_Eligibility_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutProbationPeriodEligibilityRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutProbationPeriodEligibilityRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutProbationPeriodEligibilityRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_probation_period_eligibility_rule_request: Optional[
            PutProbationPeriodEligibilityRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Probation_Period_Eligibility_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutRemoveMatrixOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutRemoveMatrixOrganizationInput
    output = StaffingPortPutRemoveMatrixOrganizationOutput


class StaffingPortPutStaffingFieldDefaults:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutStaffingFieldDefaultsInput
    output = StaffingPortPutStaffingFieldDefaultsOutput


@dataclass
class StaffingPortPutStaffingFieldDefaultsConditionRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStaffingFieldDefaultsConditionRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutStaffingFieldDefaultsConditionRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_staffing_field_defaults_condition_rules_request: Optional[
            PutStaffingFieldDefaultsConditionRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Staffing_Field_Defaults_Condition_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutStudentEmploymentEligibilityRuleInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutStudentEmploymentEligibilityRuleInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutStudentEmploymentEligibilityRuleInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_student_employment_eligibility_rule_request: Optional[
            PutStudentEmploymentEligibilityRuleRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Student_Employment_Eligibility_Rule_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutWorkingTimeEligibilityRulesInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutWorkingTimeEligibilityRulesInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutWorkingTimeEligibilityRulesInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_working_time_eligibility_rules_request: Optional[
            PutWorkingTimeEligibilityRulesRequest
        ] = field(
            default=None,
            metadata={
                "name": "Put_Working_Time_Eligibility_Rules_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class ChangeEmergencyContactsDataType:
    """
    Wrapper element to hold reference and data for an emergency contact.

    Attributes:
        emergency_contact_reference: Reference to the emergency contact that the data will be
            applied to
        delete: Flag indicating that the referenced data should be deleted.
        emergency_contact_data
    """

    class Meta:
        name = "Change_Emergency_Contacts_DataType"
        target_namespace = "urn:com.workday/bsvc"

    emergency_contact_reference: Optional[EmergencyContactObjectType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    delete: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Delete",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    emergency_contact_data: Optional[ChangeEmergencyContactDataType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobDataForMassPositionSwapType:
    """
    Contains the Change Job web service and its sub business processes.

    Attributes:
        worker_reference: Reference to an Employee or Contingent Worker to do the job change on.
            Must be active (as of the effective date) and must not have any future approved or
            pending staffing actions.
        current_position_reference: The worker's Current Position.
        proposed_position_reference: The worker's Proposed Position. Must be another worker's
            Position within this position swap.
        propose_compensation_sub_process
        request_one_time_payment_sub_process
        request_stock_grant_sub_process
        assign_pay_group_sub_process
        assign_matrix_organization_sub_process
        change_personal_information_sub_process
        maintain_employee_contracts_sub_process
        assign_organization_roles_sub_process
        assign_roles_sub_process
        assign_superior_organization_sub_process
        assign_costing_allocation_sub_process
        create_subordinate_sub_process
        onboarding_setup_sub_process
        manage_union_membership_sub_process
    """

    class Meta:
        name = "Change_Job_Data_for_Mass_Position_SwapType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    current_position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Current_Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    proposed_position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Proposed_Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    propose_compensation_sub_process: Optional[
        ProposeCompensationForPositionSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Propose_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_one_time_payment_sub_process: Optional[RequestOneTimePaymentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Request_One_Time_Payment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_stock_grant_sub_process: Optional[RequestStockSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Request_Stock_Grant_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[AssignPayGroupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_sub_process: Optional[
        ChangePersonalInformationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Change_Personal_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_organization_roles_sub_process: Optional[
        AssignOrganizationRolesSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles_sub_process: Optional[AssignRolesSubProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_superior_organization_sub_process: Optional[AssignSuperiorOrganizationSubProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Assign_Superior_Organization_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_subordinate_sub_process: Optional[CreateSubordinateSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Subordinate_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_sub_process: Optional[OnboardingSetupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class ChangePersonalInformationRequestType:
    """This web service allows updates to the personal information of a worker."""

    class Meta:
        name = "Change_Personal_Information_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_data: Optional[ChangePersonalInformationBusinessProcessDataType] = (
        field(
            default=None,
            metadata={
                "name": "Change_Personal_Information_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePersonalInformationResponse(ChangePersonalInformationResponseType):
    class Meta:
        name = "Change_Personal_Information_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangePersonalInformationResponseWrapperType:
    """
    Wrapper element for the Change Personal Information Business Process Data element.

    This is the element that contains the data to load.

    Attributes:
        person_reference: A reference to the ID of the person through one of its active person
            types, such as worker, student, affiliate, external committee member, and so on. The ID
            consists of a type attribute, which should be set to one of either "Employee_ID",
            "Contingent_Worker_ID", "Student_ID", etc, and a value attribute, such as "04345".
        change_personal_information_data
    """

    class Meta:
        name = "Change_Personal_Information_Response_WrapperType"
        target_namespace = "urn:com.workday/bsvc"

    person_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_data: list[ChangePersonalInformationBusinessProcessDataType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Change_Personal_Information_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class CreateJobRequisitionSubProcessType:
    """Wrapper element for the Create Job Requisition Business Process Parameters and Data."""

    class Meta:
        name = "Create_Job_Requisition_Sub_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_job_requisition_data: Optional[CreateJobRequisitionSubProcessDataType] = field(
        default=None,
        metadata={
            "name": "Create_Job_Requisition_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreatePositionRequestType:
    """Wrapper for Create Open Position Web Service."""

    class Meta:
        name = "Create_Position_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_position_data: Optional[CreatePositionDataType] = field(
        default=None,
        metadata={
            "name": "Create_Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreatePositionRequestHvtype:
    """High Volume Create Position Request for Import Web Services."""

    class Meta:
        name = "Create_Position_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_position_data: Optional[CreatePositionDataType] = field(
        default=None,
        metadata={
            "name": "Create_Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EditHiringRestrictionsRequest(EditHiringRestrictionsRequestType):
    class Meta:
        name = "Edit_Hiring_Restrictions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditPositionDataType:
    """
    Wrapper for the Edit Position Business Process Web Service and its sub business processes.

    Attributes:
        worker_reference: The Employee ID, Contingent Worker ID, or Workday ID for the position. If
            you enter the Position ID and leave the Worker field empty, Workday will use Worker in
            the filled Position.
        position_reference: The position ID or Workday ID of the position. If the worker has more
            than 1 position, enter the value that indicates the position that is being changed. If
            the worker has only 1 position, this field can be left blank.
        effective_date: The Effective Date of the position change.
        edit_position_event_data
        request_compensation_change_sub_process: Wrapper element for Request Compensation Change sub
            business process. Make ad hoc changes to an individual employee's compensation.
        edit_assign_organization_sub_process: Wrapper element for assigning organization assignments
            to a position. The Assign Organization sub business process is used.
        assign_pay_group_sub_process: Wrapper element for Assign Pay Group sub business process.
            Assign pay group to an employee. This is used only for the Workday Payroll solution.
        assign_matrix_organization_sub_process: Wrapper element for adding matrix organization
            assignments to a filled position within the Edit Position business process. The Assign
            Matrix Organization sub business process will be used.
        change_personal_information_sub_process: Wrapper element for Change Personal Information sub
            business process. Update a worker's personal information including gender, date of
            birth, disabilities, marital status, citizenship status, ethnicity, religion and
            military service.
        request_default_compensation_sub_process
        edit_service_dates_sub_process
        remove_retiree_status_sub_process
        maintain_employee_contracts_sub_business_process
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        update_academic_appointment_sub_process
        assign_costing_allocation_sub_process
        manage_union_membership_sub_process
        assign_establishment_sub_process: The proposed establishment.
    """

    class Meta:
        name = "Edit_Position_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    edit_position_event_data: Optional[EditPositionEventDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Position_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_compensation_change_sub_process: Optional[
        RequestCompensationForEditPositionSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_Compensation_Change_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[AssignPayGroupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_sub_process: Optional[
        ChangePersonalInformationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Change_Personal_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_default_compensation_sub_process: Optional[
        RequestCompensationDefaultSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_Default_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_service_dates_sub_process: Optional[EditServiceDatesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_retiree_status_sub_process: Optional[RemoveRetireeStatusSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Remove_Retiree_Status_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_business_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_academic_appointment_sub_process: Optional[UpdateAcademicAppointmentSubProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Update_Academic_Appointment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_establishment_sub_process: Optional[AssignEstablishmentSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Establishment_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRestrictionsRequestType:
    """Wrapper element for Edit Position Restrictions Web Service."""

    class Meta:
        name = "Edit_Position_Restrictions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_position_restrictions_data: Optional[EditPositionRestrictionsDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Position_Restrictions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalStudentStudentDataType:
    """
    Element containing information about the Student to whom this External Student Record belongs.

    Attributes:
        student_reference: Reference to the existing Student that owns this External Student Record
        external_student_student_subedit_data: Element containing Student data
    """

    class Meta:
        name = "External_Student_Student_DataType"
        target_namespace = "urn:com.workday/bsvc"

    student_reference: Optional[StudentObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_student_student_subedit_data: Optional[ExternalStudentStudentSubeditDataType] = field(
        default=None,
        metadata={
            "name": "External_Student_Student_Subedit_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeGovernmentIdsResponseType:
    """Element containing the Get Change Government IDs response elements including echoed request
    data and request references."""

    class Meta:
        name = "Get_Change_Government_IDs_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[GetChangeGovernmentIdsRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[ChangeGovernmentIdsResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeLegalNameResponse(GetChangeLegalNameResponseType):
    class Meta:
        name = "Get_Change_Legal_Name_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangeLicensesResponseType:
    """Response element containing a worker's licenses."""

    class Meta:
        name = "Get_Change_Licenses_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[GetChangeLicensesRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[ChangeLicensesResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangeOtherIdsResponseType:
    """Response element containing a worker's other IDs."""

    class Meta:
        name = "Get_Change_Other_IDs_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[GetChangeOtherIdsRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[ChangeOtherIdsResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePassportsAndVisasResponseType:
    """Response element containing a worker's passports and visas."""

    class Meta:
        name = "Get_Change_Passports_and_Visas_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[GetChangePassportsAndVisasRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[ChangePassportsAndVisasResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePreferredNameResponse(GetChangePreferredNameResponseType):
    class Meta:
        name = "Get_Change_Preferred_Name_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetGlobalStaffingEligibilityRulesResponseType:
    """Get Global Staffing Eligibility Rules Response Element."""

    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[GlobalStaffingEligibilityRulesRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[GlobalStaffingEligibilityRuleResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetGlobalStaffingEligibilityRulesWithoutDependenciesResponseType:
    """Get Global Staffing Eligibility Rules Without Dependencies Response."""

    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_Without_Dependencies_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[GlobalStaffingEligibilityRulesRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[GlobalStaffingEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobClassificationGroupsResponse(GetJobClassificationGroupsResponseType):
    class Meta:
        name = "Get_Job_Classification_Groups_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobOverlapRoutingExclusionRulesResponseType:
    """Contains the Job Overlap Routing Exclusion Rules."""

    class Meta:
        name = "Get_Job_Overlap_Routing_Exclusion_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobOverlapRoutingExclusionRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[JobOverlapRoutingExclusionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobOverlapRoutingExclusionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[JobOverlapRoutingExclusionRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetMaintainProbationPeriodsForCountryResponse(
    GetMaintainProbationPeriodsForCountryResponseType
):
    class Meta:
        name = "Get_Maintain_Probation_Periods_For_Country_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodEligibilityRulesResponseType:
    """
    Notice Period Eligibility Rules Response.

    Attributes:
        request_references: Notice Period Eligibility Rule Request References Element
        response_filter: Response Filter Element
        response_results: Response Results Element
        response_data: Notice Period Eligibility Rule Response Data Element
        version
    """

    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NoticePeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[NoticePeriodEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetNoticePeriodEligibilityRulesWithoutDependenciesResponseType:
    """Get Notice Period Eligibility Rules Without Dependencies Response."""

    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_Without_Dependencies_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[NoticePeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[NoticePeriodEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodEligibilityRulesResponseType:
    """Get Probation Period Eligibility Rules Response Element."""

    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ProbationPeriodEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ProbationPeriodEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodEligibilityRulesWithoutDependenciesResponseType:
    """Get Probation Period Eligibility Rules Without Dependencies Response Element."""

    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_Without_Dependencies_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[ProbationPeriodEligibilityRuleRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[ProbationPeriodEligibilityRuleResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStaffingFieldDefaultsConditionRulesResponseType:
    """Response element containing instances of Staffing Defaulting Condition Rule and associated
    data."""

    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StaffingFieldDefaultsConditionRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StaffingFieldDefaultsConditionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StaffingFieldDefaultsConditionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StaffingFieldDefaultsConditionRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStaffingFieldDefaultsConditionRulesWithoutDependenciesResponseType:
    """Response element containing instances of Staffing Defaulting Condition Rule and associated
    data."""

    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_without_Dependencies_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StaffingFieldDefaultsConditionRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[StaffingFieldDefaultsConditionRuleRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StaffingFieldDefaultsConditionRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StaffingFieldDefaultsConditionRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetStaffingFieldDefaultsResponse(GetStaffingFieldDefaultsResponseType):
    class Meta:
        name = "Get_Staffing_Field_Defaults_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStudentEmploymentEligibilityRulesResponseType:
    """
    Container for the Student Employment Eligibility Rules Response.

    Attributes:
        request_references
        response_filter
        response_group
        response_results
        response_data: Container for the data included in Student Employment Eligibility Rule
        version
    """

    class Meta:
        name = "Get_Student_Employment_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[StudentEmploymentEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[StudentEmploymentEligibilityRuleResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[StudentEmploymentEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetWorkingTimeEligibilityRulesResponseType:
    """
    Get Working Time Eligibility Rules Response Element.

    Attributes:
        request_references
        response_filter
        response_results
        response_data: Working Time Eligibility Rule Response Data
        version
    """

    class Meta:
        name = "Get_Working_Time_Eligibility_Rules_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkingTimeEligibilityRuleRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[WorkingTimeEligibilityRuleResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImplementationEmployeeData(ImplementationEmployeeDataRootType):
    class Meta:
        name = "Implementation_Employee_Data"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportChangeOrganizationAssignmentRequest(ImportChangeOrganizationAssignmentRequestType):
    class Meta:
        name = "Import_Change_Organization_Assignment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportEditHiringRestrictionsRequestType:
    """Root Import Edit Hiring Restrictions Request Element."""

    class Meta:
        name = "Import_Edit_Hiring_Restrictions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    edit_hiring_restrictions_request_hv: list[EditHiringRestrictionsRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Edit_Hiring_Restrictions_Request_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class JobFamilyGroupResponseDataType:
    """Response element for the Get Job Family request."""

    class Meta:
        name = "Job_Family_Group_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    job_family_group: list[JobFamilyGroupNewType] = field(
        default_factory=list,
        metadata={
            "name": "Job_Family_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ManageProfessionalAffiliationDataForRoleType:
    """
    Wrapper element for Professional Affiliation Data.

    Attributes:
        role_reference: Role Reference
        source_reference: Reference to the source of the skill.
        professional_affiliation
    """

    class Meta:
        name = "Manage_Professional_Affiliation_Data_for_RoleType"
        target_namespace = "urn:com.workday/bsvc"

    role_reference: Optional[RoleObjectType] = field(
        default=None,
        metadata={
            "name": "Role_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    source_reference: Optional[PersonQualificationSourceCategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Source_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    professional_affiliation: list[ProfessionalAffiliationSkillType] = field(
        default_factory=list,
        metadata={
            "name": "Professional_Affiliation",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class OrganizationResponseDataType:
    """Response element containing an instance of Organization and its associated data."""

    class Meta:
        name = "Organization_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    organization: list[OrganizationWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Organization",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonQualificationDataType:
    """
    Contains the worker's skills and experience.

    Security Note: This element is secured to the following domains:  Self Service: Skills and Experience; Worker: Skills and Experience

    Attributes:
        external_job_history: Wrapper element for job history.
        competency: Wrapper element for Competency information.
        certification: Wrapper element for Certification information.
        training: Wrapper element for Training information.
        award_and_activity
        organization_membership: Wrapper element for Organization Membership information.
        education: Wrapper element for Education information.
        work_experience: Wrapper element for work experience.
        language: Wrapper element for Language information.
        internal_project_experience: Wrapper element for Internal Project Experience information.
    """

    class Meta:
        name = "Person_Qualification_DataType"
        target_namespace = "urn:com.workday/bsvc"

    external_job_history: list[JobHistoryType] = field(
        default_factory=list,
        metadata={
            "name": "External_Job_History",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    competency: list[CompetencyAchievementDataV10Type] = field(
        default_factory=list,
        metadata={
            "name": "Competency",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    certification: list[CertificationAchievementType] = field(
        default_factory=list,
        metadata={
            "name": "Certification",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    training: list[TrainingType] = field(
        default_factory=list,
        metadata={
            "name": "Training",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    award_and_activity: list[AwardAndActivityType] = field(
        default_factory=list,
        metadata={
            "name": "Award_and_Activity",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_membership: list[ProfessionalAffiliationSkillType] = field(
        default_factory=list,
        metadata={
            "name": "Organization_Membership",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    education: list[EducationType] = field(
        default_factory=list,
        metadata={
            "name": "Education",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_experience: list[WorkExperienceDataType] = field(
        default_factory=list,
        metadata={
            "name": "Work_Experience",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    language: list[LanguageAchievementDataType] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    internal_project_experience: list[InternalProjectExperienceType] = field(
        default_factory=list,
        metadata={
            "name": "Internal_Project_Experience",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PersonalInformationDataType:
    """
    Wrapper element for Personal Data.

    Attributes:
        universal_id: The universal ID uniquely identifies the Person. It remains the same for a
            person regardless of what roles they have.  This field will be automatically populated
            if a sequence generator is configured in Edit Tenant Setup-System.
        name_data: Contains the legal, preferred, and additional names for a person.
        personal_information_data
        identification_data: The id information for the person (national ids, government ids,
            passport ids, visa ids, license ids, custom ids). Security Note: This is secured to the
            following domains:  My ID Information, Worker ID Information, Applicant Personal Data:
            ID Information
        contact_data: All of the person's contact data (address, phone, email, instant messenger,
            web address). Security Note: The response for Contact information is secured to the My
            Contact Information and Worker Private Contact Information domains for Get Workers and
            Get Payees and secured to the Applicant Data: Contact Information domain for Get
            Applicants web service.
        tobacco_use: True if the person uses tobacco.  To update a person's Tobacco Use, use the Put
            Worker Wellness Data web service.
    """

    class Meta:
        name = "Personal_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    universal_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Universal_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    name_data: Optional[PersonNameDataType] = field(
        default=None,
        metadata={
            "name": "Name_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_information_data: list[PersonalInformationCommonDataType] = field(
        default_factory=list,
        metadata={
            "name": "Personal_Information_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    identification_data: Optional[PersonIdentificationDataType] = field(
        default=None,
        metadata={
            "name": "Identification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contact_data: Optional[ContactInformationDataType] = field(
        default=None,
        metadata={
            "name": "Contact_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    tobacco_use: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Tobacco_Use",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionRestrictionType:
    """
    Contains each Position based on the Request References or Request Criteria.

    The data returned is the current information as of the dates in the
    response filter, and does not include all historical information
    about the  position.

    Attributes:
        position_reference: A unique identifier to reference a Position.
        position_data: Contains the detailed information about a Position.
    """

    class Meta:
        name = "Position_RestrictionType"
        target_namespace = "urn:com.workday/bsvc"

    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_data: Optional[PositionDataType] = field(
        default=None,
        metadata={
            "name": "Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutDependentRequestType:
    """
    Wrapper element for the Put Dependent Request Information.

    Attributes:
        dependent_reference: The reference to the Dependent being updated. For new Dependents, this
            reference will not exist.
        dependent_data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Dependent_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    dependent_reference: Optional[DependentObjectType] = field(
        default=None,
        metadata={
            "name": "Dependent_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dependent_data: Optional[PutDependentDataType] = field(
        default=None,
        metadata={
            "name": "Dependent_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutJobFamilyGroupRequest(PutJobFamilyGroupRequestType):
    class Meta:
        name = "Put_Job_Family_Group_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class SetHiringRestrictionsRequest(SetHiringRestrictionsRequestType):
    class Meta:
        name = "Set_Hiring_Restrictions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class StartInternationalAssignmentRequestType:
    """
    This web service operation is designed to allow an international assignment to be added to an
    existing active employee.

    Attributes:
        business_process_parameters
        start_international_assignment_data: Wrapper Element for the Start International Assignment
            business process web service and its sub business processes.
        version
    """

    class Meta:
        name = "Start_International_Assignment_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_international_assignment_data: Optional[StartInternationalAssignmentDataType] = field(
        default=None,
        metadata={
            "name": "Start_International_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerBenefitEnrollmentDataType:
    """
    Contains the worker's benefits information.

    Security Note: This element is secured to the following domains:  Self Service: Benefit Elections; Worker Data: Benefit Elections

    Attributes:
        health_care_data: Contains the health care data for an employee.
        health_savings_account_data: Contains the health savings account information for an
            employee.
        spending_account_data: Contains the spending account information for an employee.
        insurance_data
        retirement_savings_data
        additional_benefits_data: Contains the additional benefits data for an employee.
        cobra_eligibility_data: Contains COBRA Eligibility detail for a participant.  If this
            element is not populated then the participant is assumed to not be COBRA eligible.
    """

    class Meta:
        name = "Worker_Benefit_Enrollment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    health_care_data: Optional[WorkerHealthCareDataType] = field(
        default=None,
        metadata={
            "name": "Health_Care_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    health_savings_account_data: Optional[WorkerHealthSavingsAccountDataType] = field(
        default=None,
        metadata={
            "name": "Health_Savings_Account_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    spending_account_data: Optional[WorkerSpendingAccountDataType] = field(
        default=None,
        metadata={
            "name": "Spending_Account_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    insurance_data: Optional[WorkerInsuranceDataType] = field(
        default=None,
        metadata={
            "name": "Insurance_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    retirement_savings_data: Optional[RetirementSavingsDataType] = field(
        default=None,
        metadata={
            "name": "Retirement_Savings_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    additional_benefits_data: Optional[WorkerAdditionalBenefitsDataType] = field(
        default=None,
        metadata={
            "name": "Additional_Benefits_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    cobra_eligibility_data: list[CobraEligibilityDataType] = field(
        default_factory=list,
        metadata={
            "name": "COBRA_Eligibility_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerJobDataType:
    """
    Contains the Position-level data for a Worker.

    The primary position is always the first element.

    Attributes:
        position_data: Contains the worker's employment information, such as their position and job
            information. Security Note: This element is secured to the following domains:  Self-
            Service: Current Staffing Information, Worker Data: Current Staffing Information
        position_organizations_data: Contains the worker's organizations that they are a member of
            related to the position.
        position_management_chains_data: Contains the worker's management chains related to the
            position.
        primary_job: Indicates whether the position is the primary position for a worker.
    """

    class Meta:
        name = "Worker_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position_data: Optional[PositionDetailDataType] = field(
        default=None,
        metadata={
            "name": "Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_organizations_data: Optional[PositionOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Position_Organizations_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_management_chains_data: Optional[PositionManagementChainsDataType] = field(
        default=None,
        metadata={
            "name": "Position_Management_Chains_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    primary_job: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Primary_Job",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortAddOnlyEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAddOnlyEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortAddOnlyEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        implementation_employee_data: Optional[ImplementationEmployeeData] = field(
            default=None,
            metadata={
                "name": "Implementation_Employee_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortAssignOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortAssignOrganizationInput
    output = StaffingPortAssignOrganizationOutput


class StaffingPortChangeOrganizationAssignments:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortChangeOrganizationAssignmentsInput
    output = StaffingPortChangeOrganizationAssignmentsOutput


@dataclass
class StaffingPortChangePersonalInformationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangePersonalInformationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_personal_information_response: Optional[ChangePersonalInformationResponse] = field(
            default=None,
            metadata={
                "name": "Change_Personal_Information_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortChangePersonalInformationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortChangePersonalInformationOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortEditHiringRestrictionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditHiringRestrictionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditHiringRestrictionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_hiring_restrictions_request: Optional[EditHiringRestrictionsRequest] = field(
            default=None,
            metadata={
                "name": "Edit_Hiring_Restrictions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangeLegalNameOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeLegalNameOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_legal_name_response: Optional[GetChangeLegalNameResponse] = field(
            default=None,
            metadata={
                "name": "Get_Change_Legal_Name_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetChangeLegalNameOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangeLegalNameOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetChangePreferredNameOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangePreferredNameOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_preferred_name_response: Optional[GetChangePreferredNameResponse] = field(
            default=None,
            metadata={
                "name": "Get_Change_Preferred_Name_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetChangePreferredNameOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangePreferredNameOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetCollectiveAgreements:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetCollectiveAgreementsInput
    output = StaffingPortGetCollectiveAgreementsOutput


class StaffingPortGetCreditableService:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetCreditableServiceInput
    output = StaffingPortGetCreditableServiceOutput


@dataclass
class StaffingPortGetJobClassificationGroupsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobClassificationGroupsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_classification_groups_response: Optional[GetJobClassificationGroupsResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Job_Classification_Groups_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortGetJobClassificationGroupsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetJobClassificationGroupsOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetJobFamilies:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetJobFamiliesInput
    output = StaffingPortGetJobFamiliesOutput


class StaffingPortGetLegalAuthorities:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetLegalAuthoritiesInput
    output = StaffingPortGetLegalAuthoritiesOutput


class StaffingPortGetMaintainEmployeeContractRulesForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetMaintainEmployeeContractRulesForCountryInput
    output = StaffingPortGetMaintainEmployeeContractRulesForCountryOutput


class StaffingPortGetMaintainNoticePeriodsForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetMaintainNoticePeriodsForCountryInput
    output = StaffingPortGetMaintainNoticePeriodsForCountryOutput


@dataclass
class StaffingPortGetMaintainProbationPeriodsForCountryOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetMaintainProbationPeriodsForCountryOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_maintain_probation_periods_for_country_response: Optional[
            GetMaintainProbationPeriodsForCountryResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Maintain_Probation_Periods_For_Country_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetMaintainProbationPeriodsForCountryOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetMaintainProbationPeriodsForCountryOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetMaintainWorkingTimeForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetMaintainWorkingTimeForCountryInput
    output = StaffingPortGetMaintainWorkingTimeForCountryOutput


class StaffingPortGetNatureOfActions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetNatureOfActionsInput
    output = StaffingPortGetNatureOfActionsOutput


class StaffingPortGetNoticePeriodsForWorker:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetNoticePeriodsForWorkerInput
    output = StaffingPortGetNoticePeriodsForWorkerOutput


class StaffingPortGetProbationPeriodOutcomes:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetProbationPeriodOutcomesInput
    output = StaffingPortGetProbationPeriodOutcomesOutput


class StaffingPortGetRemarks:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetRemarksInput
    output = StaffingPortGetRemarksOutput


class StaffingPortGetRoleAssignmentsForRoleAssigners:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetRoleAssignmentsForRoleAssignersInput
    output = StaffingPortGetRoleAssignmentsForRoleAssignersOutput


@dataclass
class StaffingPortGetStaffingFieldDefaultsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStaffingFieldDefaultsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_staffing_field_defaults_response: Optional[GetStaffingFieldDefaultsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Staffing_Field_Defaults_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetStaffingFieldDefaultsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetStaffingFieldDefaultsOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetStudentEmploymentEligibilityRuleSet:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetStudentEmploymentEligibilityRuleSetInput
    output = StaffingPortGetStudentEmploymentEligibilityRuleSetOutput


class StaffingPortImportAssignMatrixOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportAssignMatrixOrganizationInput
    output = StaffingPortImportAssignMatrixOrganizationOutput


@dataclass
class StaffingPortImportChangeOrganizationAssignmentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportChangeOrganizationAssignmentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportChangeOrganizationAssignmentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_change_organization_assignment_request: Optional[
            ImportChangeOrganizationAssignmentRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Change_Organization_Assignment_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportRemoveMatrixOrganization:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportRemoveMatrixOrganizationInput
    output = StaffingPortImportRemoveMatrixOrganizationOutput


class StaffingPortPutGlobalStaffingEligibilityRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutGlobalStaffingEligibilityRuleInput
    output = StaffingPortPutGlobalStaffingEligibilityRuleOutput


@dataclass
class StaffingPortPutJobFamilyGroupInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutJobFamilyGroupInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutJobFamilyGroupInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_job_family_group_request: Optional[PutJobFamilyGroupRequest] = field(
            default=None,
            metadata={
                "name": "Put_Job_Family_Group_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutJobOverlapRoutingExclusionRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutJobOverlapRoutingExclusionRuleInput
    output = StaffingPortPutJobOverlapRoutingExclusionRuleOutput


class StaffingPortPutNoticePeriodEligibilityRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutNoticePeriodEligibilityRuleInput
    output = StaffingPortPutNoticePeriodEligibilityRuleOutput


class StaffingPortPutProbationPeriodEligibilityRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutProbationPeriodEligibilityRuleInput
    output = StaffingPortPutProbationPeriodEligibilityRuleOutput


class StaffingPortPutStaffingFieldDefaultsConditionRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutStaffingFieldDefaultsConditionRulesInput
    output = StaffingPortPutStaffingFieldDefaultsConditionRulesOutput


class StaffingPortPutStudentEmploymentEligibilityRule:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutStudentEmploymentEligibilityRuleInput
    output = StaffingPortPutStudentEmploymentEligibilityRuleOutput


class StaffingPortPutWorkingTimeEligibilityRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutWorkingTimeEligibilityRulesInput
    output = StaffingPortPutWorkingTimeEligibilityRulesOutput


@dataclass
class StaffingPortSetHiringRestrictionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortSetHiringRestrictionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortSetHiringRestrictionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        set_hiring_restrictions_request: Optional[SetHiringRestrictionsRequest] = field(
            default=None,
            metadata={
                "name": "Set_Hiring_Restrictions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class ChangeEmergencyContactsSubDataType:
    """
    Container for data used in Change Emergency Contact sub business process.

    Attributes:
        replace_all: This flag controls whether or not to replace existing emergency contacts for
            the person. When true, existing emergency contacts are removed before the data in this
            web service request is processed.
        emergency_contacts_reference_data: Data related to a emergency contact person
    """

    class Meta:
        name = "Change_Emergency_Contacts_Sub_DataType"
        target_namespace = "urn:com.workday/bsvc"

    replace_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Replace_All",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    emergency_contacts_reference_data: list[ChangeEmergencyContactsDataType] = field(
        default_factory=list,
        metadata={
            "name": "Emergency_Contacts_Reference_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobDataType:
    """
    Contains the Change Job web service and its sub business processes.

    Attributes:
        worker_reference: Reference to an Employee or Contingent Worker to do the job change on.
            Must be active (as of the effective date) and must not have any future approved or
            pending staffing actions.
        position_reference: The position ID or WorkdayID of the position. If the worker has more
            than one position, enter the value that indicates the position that is being changed.
        effective_date: The Effective Date of the staffing action. Must be on or after the latest
            date that the worker's position was changed.
        change_job_detail_data
        propose_compensation_sub_process
        request_one_time_payment_sub_process
        request_stock_grant_sub_process
        change_organization_sub_process
        assign_pay_group_sub_process
        assign_matrix_organization_sub_process
        change_personal_information_sub_process
        maintain_employee_contracts_sub_process
        assign_organization_roles_sub_process
        assign_roles_sub_process
        assign_superior_organization_sub_process
        create_job_requisition_sub_process
        check_position_budget_sub_process
        switch_primary_job_sub_process
        update_academic_appointment_sub_process
        assign_costing_allocation_sub_process
        assign_employee_collective_agreement_sub_process: Wrapper to hold the business process
            configuration and data for Assign Employee Collective Agreement sub business process.
        create_subordinate_sub_process
        student_employment_eligibility_sub_process
        onboarding_setup_sub_process
        manage_union_membership_sub_process
        manage_employee_probation_period_sub_business_process
        edit_notice_periods_sub_process: Workday doesn't process custom employee and employer notice
            periods for Edit Notice Period as a subprocess of the Change Job business process if the
            Has Notice Period checkbox is unchecked in the notice period rule
        edit_service_dates_sub_process
        assign_establishment_sub_process: The proposed establishment.
    """

    class Meta:
        name = "Change_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    change_job_detail_data: Optional[ChangeJobDetailDataType] = field(
        default=None,
        metadata={
            "name": "Change_Job_Detail_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    propose_compensation_sub_process: Optional[
        ProposeCompensationForPositionSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Propose_Compensation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_one_time_payment_sub_process: Optional[RequestOneTimePaymentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Request_One_Time_Payment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_stock_grant_sub_process: Optional[RequestStockSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Request_Stock_Grant_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Change_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[AssignPayGroupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_sub_process: Optional[
        ChangePersonalInformationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Change_Personal_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_organization_roles_sub_process: Optional[
        AssignOrganizationRolesSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles_sub_process: Optional[AssignRolesSubProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_superior_organization_sub_process: Optional[AssignSuperiorOrganizationSubProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Assign_Superior_Organization_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    create_job_requisition_sub_process: Optional[CreateJobRequisitionSubProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Job_Requisition_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    switch_primary_job_sub_process: Optional[SwitchPrimaryJobSubProcessType] = field(
        default=None,
        metadata={
            "name": "Switch_Primary_Job_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_academic_appointment_sub_process: Optional[UpdateAcademicAppointmentSubProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Update_Academic_Appointment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_employee_collective_agreement_sub_process: Optional[
        AssignEmployeeCollectiveAgreementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Employee_Collective_Agreement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_subordinate_sub_process: Optional[CreateSubordinateSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Subordinate_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_sub_process: Optional[
        StudentEmploymentEligibilitySubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_sub_process: Optional[OnboardingSetupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    manage_employee_probation_period_sub_business_process: Optional[
        ManageProbationPeriodSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Manage_Employee_Probation_Period_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_notice_periods_sub_process: Optional[EditNoticePeriodsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Notice_Periods_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_service_dates_sub_process: Optional[EditServiceDatesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_establishment_sub_process: Optional[AssignEstablishmentSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Establishment_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangePersonalInformationRequest(ChangePersonalInformationRequestType):
    class Meta:
        name = "Change_Personal_Information_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ChangePersonalInformationResponseDataType:
    """Element containing the worker data for the Get Change Personal Information response."""

    class Meta:
        name = "Change_Personal_Information_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    change_personal_information: list[ChangePersonalInformationResponseWrapperType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Personal_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreateApplicantDataType:
    """
    Data for a new Applicant if an applicant is to be created as part of the hire.

    Attributes:
        applicant_id: The reference ID for the pre-hire. Enter pre- hire information into the
            Applicant Data section to create a new pre-hire.
        personal_data: Wrapper element for Personal Data.
        external_integration_id_data
    """

    class Meta:
        name = "Create_Applicant_DataType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Applicant_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_data: Optional[PersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_integration_id_data: Optional[ExternalIntegrationIdDataType] = field(
        default=None,
        metadata={
            "name": "External_Integration_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class CreatePositionRequest(CreatePositionRequestType):
    class Meta:
        name = "Create_Position_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EditPositionRequestType:
    """
    This web service operation is designed to edit a filled Position (Position, Position Group, Job)
    using the Edit Position Business Process.

    Attributes:
        business_process_parameters: Container for the processing options for a business process. If
            no options are submitted (or the options are submitted as 'false') then the business
            process is simply initiated as if it where submitted on-line with approvals, reviews,
            notifications and to-do's in place. If the Initiator is an Integration System User, any
            validations you configured on the Initiation step are ignored.
        edit_position_data: Wrapper element for the Edit Position web service.
        version
    """

    class Meta:
        name = "Edit_Position_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_position_data: Optional[EditPositionDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRequestHvtype:
    """High Volume Edit Position Request for Import Web Services."""

    class Meta:
        name = "Edit_Position_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_position_data: Optional[EditPositionDataType] = field(
        default=None,
        metadata={
            "name": "Edit_Position_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EditPositionRestrictionsRequest(EditPositionRestrictionsRequestType):
    class Meta:
        name = "Edit_Position_Restrictions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EndAdditionalJobDataType:
    """
    This web service is used to End Additional Job for an Employee.

    It will run the End Additional Job Business Process.

    Attributes:
        employee_reference: You cannot end this additional job because you do not have permission.
        position_reference: Reference to a Position. Enter the Position ID or the GUID.
        end_additional_job_date: Date the end additional job will happen. This attribute is
            required.
        end_additional_job_event_data: Data for the End Additional Job event. This element is
            required and must contain all its required attributes.
        assign_organization_roles_sub_process
        create_job_requisition_sub_process: Run the Create Job Requisition Sub Process to make this
            position available to fill after the additional job is ended.  Only valid for Position
            Management when Job Requisitions are enabled on Tenant Setup.
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        end_academic_appointment_sub_process
        manage_union_membership_sub_process
        switch_primary_job_sub_process
        assign_roles
    """

    class Meta:
        name = "End_Additional_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_additional_job_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_Additional_Job_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_additional_job_event_data: Optional[EndAdditionalJobEventDataType] = field(
        default=None,
        metadata={
            "name": "End_Additional_Job_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    assign_organization_roles_sub_process: Optional[
        AssignOrganizationRolesSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_job_requisition_sub_process: Optional[CreateJobRequisitionSubProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Job_Requisition_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_academic_appointment_sub_process: Optional[EndAcademicAppointmentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "End_Academic_Appointment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    switch_primary_job_sub_process: Optional[SwitchPrimaryJobSubProcessType] = field(
        default=None,
        metadata={
            "name": "Switch_Primary_Job_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles: Optional[AssignRolesSubProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndContingentWorkerContractDataType:
    """
    This web service is used to end a contract for a contingent worker.

    This web service will run the End Contingent Worker Contract
    business process and any of its sub-processes.

    Attributes:
        contingent_worker_reference: Contract Worker whose contract is being ended. Only contract
            workers the processing user has access to can be ended. There cannot be any pending
            staffing event or matrix organization events pending for this worker.
        contract_end_date: Date the contract will end. This attribute is required.
        end_contract_event_data
        assign_organization_roles_sub_process
        create_job_requisition_sub_process
        assign_roles
    """

    class Meta:
        name = "End_Contingent_Worker_Contract_DataType"
        target_namespace = "urn:com.workday/bsvc"

    contingent_worker_reference: Optional[ContingentWorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Contingent_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    contract_end_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_End_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_contract_event_data: Optional[EndContingentWorkerContractEventDataType] = field(
        default=None,
        metadata={
            "name": "End_Contract_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    assign_organization_roles_sub_process: Optional[
        AssignOrganizationRolesSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_job_requisition_sub_process: Optional[CreateJobRequisitionSubProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Job_Requisition_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles: Optional[AssignRolesSubProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndInternationalAssignmentDataType:
    """
    This web service is used to End International Assignment for an Employee.

    It will run the End International Assignment Business Process.

    Attributes:
        employee_reference: Employee reference that will have the international assignment job added
        position_reference: Reference to a Position. Enter the Position ID or the GUID.
        end_international_assignment_date: Date the international assignment will start. This
            attribute is required.
        end_international_assignment_event_data: Data for the End International Assignment event.
            This element is required and must contain all its required attributes.
        create_job_requisition_sub_process
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        assign_roles
    """

    class Meta:
        name = "End_International_Assignment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionElementObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_international_assignment_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "End_International_Assignment_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    end_international_assignment_event_data: Optional[EndInternationalAssignmentEventDataType] = (
        field(
            default=None,
            metadata={
                "name": "End_International_Assignment_Event_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    create_job_requisition_sub_process: Optional[CreateJobRequisitionSubProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Job_Requisition_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles: Optional[AssignRolesSubProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ExternalAcademicRecordDataType:
    """
    Element containing External Student Record data.

    Attributes:
        student_active: Whether the External Student is Active
        do_not_release_directory_information: Indicates that the external student wants to opt out
            of directory exposure.
        academic_unit_reference: The External Student's Academic Unit
        academic_level_reference: The External Student's Academic Level
        expected_graduation_date: The External Student's Expected Graduation Date
        work_study_eligible: Whether the External Student has Work- Study
        gpa: The External Student's GPA
        academic_standing_reference: The External Student's Academic Standing
        student_load_status_reference: The External Student's Load Status
        enrolled_units: Numeric value (up to 3 integer places; greater than or equal to zero; allows
            for 2nd decimal precision: 0.00)
        enrolled_unit_type_reference: Ref ID for metadata Unit Types (see attachment for list of
            types)
        class_standing_reference: Whether the External Student has Class Standing
        external_student_student_data: Element containing information about the Student to whom this
            External Student Record belongs
    """

    class Meta:
        name = "External_Academic_Record_DataType"
        target_namespace = "urn:com.workday/bsvc"

    student_active: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Student_Active",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    do_not_release_directory_information: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Do_Not_Release_Directory_Information",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_unit_reference: Optional[AcademicCurricularDivisionObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Unit_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    academic_level_reference: Optional[AcademicLevelObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Level_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    expected_graduation_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Expected_Graduation_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    work_study_eligible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Work-Study_Eligible",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    gpa: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "GPA",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 9,
            "fraction_digits": 6,
        },
    )
    academic_standing_reference: Optional[StudentAcademicStandingObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Standing_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_load_status_reference: Optional[StudentLoadStatusObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Load_Status_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    enrolled_units: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Enrolled_Units",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 5,
            "fraction_digits": 2,
        },
    )
    enrolled_unit_type_reference: Optional[OtherUnitTypeObjectType] = field(
        default=None,
        metadata={
            "name": "Enrolled_Unit_Type_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    class_standing_reference: Optional[ClassStandingDefinitionObjectType] = field(
        default=None,
        metadata={
            "name": "Class_Standing_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_student_student_data: Optional[ExternalStudentStudentDataType] = field(
        default=None,
        metadata={
            "name": "External_Student_Student_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GetChangeGovernmentIdsResponse(GetChangeGovernmentIdsResponseType):
    class Meta:
        name = "Get_Change_Government_IDs_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangeLicensesResponse(GetChangeLicensesResponseType):
    class Meta:
        name = "Get_Change_Licenses_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangeOtherIdsResponse(GetChangeOtherIdsResponseType):
    class Meta:
        name = "Get_Change_Other_IDs_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangePassportsAndVisasResponse(GetChangePassportsAndVisasResponseType):
    class Meta:
        name = "Get_Change_Passports_and_Visas_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetGlobalStaffingEligibilityRulesResponse(GetGlobalStaffingEligibilityRulesResponseType):
    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetGlobalStaffingEligibilityRulesWithoutDependenciesResponse(
    GetGlobalStaffingEligibilityRulesWithoutDependenciesResponseType
):
    class Meta:
        name = "Get_Global_Staffing_Eligibility_Rules_Without_Dependencies_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetJobFamilyGroupsResponseType:
    """
    Response element for the Get Job Family Group request.

    Attributes:
        request_references: Utilize the Request References element to retrieve a specific
            instance(s) of Job Family Group and its associated data.
        response_filter
        response_group: Contains settings to control the type and amount of data returned by the
            request.
        response_results
        response_data
        version
    """

    class Meta:
        name = "Get_Job_Family_Groups_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[JobFamilyGroupRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[JobFamilyGroupResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[JobFamilyGroupResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobOverlapRoutingExclusionRulesResponse(GetJobOverlapRoutingExclusionRulesResponseType):
    class Meta:
        name = "Get_Job_Overlap_Routing_Exclusion_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodEligibilityRulesResponse(GetNoticePeriodEligibilityRulesResponseType):
    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetNoticePeriodEligibilityRulesWithoutDependenciesResponse(
    GetNoticePeriodEligibilityRulesWithoutDependenciesResponseType
):
    class Meta:
        name = "Get_Notice_Period_Eligibility_Rules_Without_Dependencies_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetOrganizationsResponseType:
    """
    Contains each Organization based on the Request References or Request Criteria.

    The data returned is the current information as of the dates in the
    response filter, and does not include all historical information
    about the Organization.

    Attributes:
        request_references: Wrapper element containing references to specific organizations
        request_criteria: Utilize the Request Criteria element to search the transaction log for
            specific instance(s) of a Organization based upon an Event type within a date range.
        response_filter
        response_group: This response group allows for the response data to be tailored to only
            include elements that the user is looking for.  If no response group is provided in the
            request, only the following elements will be included:  Reference, Hierarchy Data, and
            if a Supervisory Organization, the Supervisory Organization Data.
        response_results: The "Response_Results" element contains summary information about the data
            that has been returned from your request including "Total_Results", "Total_Pages", and
            the current "Page" returned.
        response_data: Contains each Organization based on the Request References or Request
            Criteria. The data returned is the current information as of the dates in the response
            filter, and does not include all historical information about the Organization.
        version
    """

    class Meta:
        name = "Get_Organizations_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ContextuallySecuredOrganizationRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[OrganizationRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[OrganizationResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[OrganizationResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetProbationPeriodEligibilityRulesResponse(GetProbationPeriodEligibilityRulesResponseType):
    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetProbationPeriodEligibilityRulesWithoutDependenciesResponse(
    GetProbationPeriodEligibilityRulesWithoutDependenciesResponseType
):
    class Meta:
        name = "Get_Probation_Period_Eligibility_Rules_Without_Dependencies_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStaffingFieldDefaultsConditionRulesResponse(
    GetStaffingFieldDefaultsConditionRulesResponseType
):
    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStaffingFieldDefaultsConditionRulesWithoutDependenciesResponse(
    GetStaffingFieldDefaultsConditionRulesWithoutDependenciesResponseType
):
    class Meta:
        name = "Get_Staffing_Field_Defaults_Condition_Rules_without_Dependencies_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetStudentEmploymentEligibilityRulesResponse(
    GetStudentEmploymentEligibilityRulesResponseType
):
    class Meta:
        name = "Get_Student_Employment_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetWorkingTimeEligibilityRulesResponse(GetWorkingTimeEligibilityRulesResponseType):
    class Meta:
        name = "Get_Working_Time_Eligibility_Rules_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportCreatePositionRequestType:
    """Root Import Create Position Request Element."""

    class Meta:
        name = "Import_Create_Position_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    create_position_request_hv: list[CreatePositionRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Create_Position_Request_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportEditHiringRestrictionsRequest(ImportEditHiringRestrictionsRequestType):
    class Meta:
        name = "Import_Edit_Hiring_Restrictions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ManageProfessionalAffiliationSubBusinessProcessDataType:
    """
    Manage Professional Affiliation Sub Business Process Data.

    Attributes:
        business_sub_process_parameters: Manage Professional Affiliation Sub Business Process Data
        manage_professional_affiliation_data: Manage Professional Affiliation Sub Business Process
            Data
    """

    class Meta:
        name = "Manage_Professional_Affiliation_Sub_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: list[BusinessSubProcessParametersType] = field(
        default_factory=list,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_professional_affiliation_data: list[ManageProfessionalAffiliationDataForRoleType] = (
        field(
            default_factory=list,
            metadata={
                "name": "Manage_Professional_Affiliation_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class MassSwapPositionsDataType:
    """
    Contains the Position Swap details and the Change Job data.

    Attributes:
        name: The name of the Swap Positions List. Enter a unique list name to create the list for
            this position swap.
        description: The description for the Swap Positions List.
        effective_date: The Effective Date for the position swap.
        change_job_reason_reference: The Change Job reason for all of the Change Job events that
            this position swap initiates.
        change_job_data_for_swap_positions
    """

    class Meta:
        name = "Mass_Swap_Positions_DataType"
        target_namespace = "urn:com.workday/bsvc"

    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    effective_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Effective_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    change_job_reason_reference: Optional[ChangeJobSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Change_Job_Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    change_job_data_for_swap_positions: list[ChangeJobDataForMassPositionSwapType] = field(
        default_factory=list,
        metadata={
            "name": "Change_Job_Data_for_Swap_Positions",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PositionsResponseDataType:
    """
    Contains each Position based on the Request References or Request Criteria.

    The data returned is the current information as of the dates in the response filter, and does
    not include all historical information about the  position.
    """

    class Meta:
        name = "Positions_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    position: list[PositionRestrictionType] = field(
        default_factory=list,
        metadata={
            "name": "Position",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PreHireDataWwstype:
    """
    The Wrapper element for the Applicant Data Web Service.

    Attributes:
        applicant_id: Applicant ID.
        personal_data: Wrapper element for Personal Data.
        qualification_data: Wrapper element for the Qualification Data.
        recruiting_data: Wrapper element for Recruiting Data. Security Note: This element is secured
            to the following domains : Manage Recruiting: Consider Applicants
        resume_data: Contains the applicant's resume(s).
        background_check_data: Contains Background Check Information
        external_integration_id_data
        document_field_result_data
    """

    class Meta:
        name = "Pre-Hire_Data_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Applicant_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_data: Optional[PersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_data: Optional[PersonQualificationDataType] = field(
        default=None,
        metadata={
            "name": "Qualification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    recruiting_data: Optional[RecruitingDataType] = field(
        default=None,
        metadata={
            "name": "Recruiting_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    resume_data: Optional[PreHireResumeDataType] = field(
        default=None,
        metadata={
            "name": "Resume_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    background_check_data: list[BackgroundCheckOverallStatusDataType] = field(
        default_factory=list,
        metadata={
            "name": "Background_Check_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_integration_id_data: Optional[ExternalIntegrationIdDataType] = field(
        default=None,
        metadata={
            "name": "External_Integration_ID_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    document_field_result_data: list[DocumentFieldResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Document_Field_Result_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutDependentRequest(PutDependentRequestType):
    class Meta:
        name = "Put_Dependent_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class RelatedPersonType:
    """
    Encapsulating element containing all Related Person data.

    Attributes:
        related_person_relationship_reference: A reference to the related person relationship.
        person_reference: Reference to the Related Person.
        personal_data
        dependent: Encapsulating element containing all Dependent data.
        beneficiary: Encapsulating element containing all Beneficiary data.
        emergency_contact: Encapsulating element containing all Emergency Contact data.
    """

    class Meta:
        name = "Related_PersonType"
        target_namespace = "urn:com.workday/bsvc"

    related_person_relationship_reference: list[RelatedPersonRelationshipObjectType] = field(
        default_factory=list,
        metadata={
            "name": "Related_Person_Relationship_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    person_reference: Optional[UniqueIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Person_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_data: Optional[PersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    dependent: Optional[DependentType] = field(
        default=None,
        metadata={
            "name": "Dependent",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    beneficiary: Optional[BeneficiaryType] = field(
        default=None,
        metadata={
            "name": "Beneficiary",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    emergency_contact: Optional[OldEmergencyContactType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contact",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StartInternationalAssignmentRequest(StartInternationalAssignmentRequestType):
    class Meta:
        name = "Start_International_Assignment_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class TerminateEmployeeDataType:
    """
    This web service is used to Terminate an Employee.

    It will run the Terminate Employee Business Process and (optionally)
    its subprocesses.

    Attributes:
        employee_reference: Employee to be terminated.  Only employees the processing user has
            access to can be terminated.
        termination_date: Date the termination will happen. This attribute is required.
        terminate_event_data: Data for the Terminate Employee event. This element is required and
            must contain all its required attributes.
        request_one_time_payment_sub_process: Grant an employee a one- time payment such as a
            referral, spot bonus, or severance pay. Uses the Request One Time Payment business event
            through the web service. Can be skipped, processed automatically or processed manually.
        review_cobra_eligibility_sub_process: Enter COBRA information for a United States employee
            who is terminated or requesting a leave of absence.  Uses the Review COBRA Eligibility
            business process. The subprocess can be skipped, processed automatically or processed
            manually from the web service.
        review_payroll_interface_event_sub_process: Launch the payroll integration. Uses the Review
            Payroll Data Integration Extract business process. This subprocess can be skipped,
            processed manually or processed automatically from the web service.
        edit_service_dates_sub_process
        add_retiree_status_sub_process
        maintain_employee_contracts_sub_business_process
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        assign_organization_roles_sub_process
        create_job_requisition_sub_process
        end_academic_appointment_sub_process
        assign_costing_allocation_sub_process
        manage_union_membership_sub_process
        end_collective_agreement_assignment_sub_process
        end_payroll_inputs_sub_process
        end_additional_job_sub_process
        assign_roles
        manage_employee_probation_period_sub_business_process
    """

    class Meta:
        name = "Terminate_Employee_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    termination_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Termination_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    terminate_event_data: Optional[TerminateEventDataType] = field(
        default=None,
        metadata={
            "name": "Terminate_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    request_one_time_payment_sub_process: Optional[RequestOneTimePaymentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Request_One_Time_Payment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    review_cobra_eligibility_sub_process: Optional[ReviewCobraEligibilitySubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Review_COBRA_Eligibility_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    review_payroll_interface_event_sub_process: Optional[
        ReviewPayrollInterfaceDataExtractBusinessSubProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Review_Payroll_Interface_Event_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_service_dates_sub_process: Optional[EditServiceDatesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_retiree_status_sub_process: Optional[AddRetireeStatusSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Add_Retiree_Status_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_business_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_organization_roles_sub_process: Optional[
        AssignOrganizationRolesSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Organization_Roles_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_job_requisition_sub_process: Optional[CreateJobRequisitionSubProcessType] = field(
        default=None,
        metadata={
            "name": "Create_Job_Requisition_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_academic_appointment_sub_process: Optional[EndAcademicAppointmentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "End_Academic_Appointment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    end_collective_agreement_assignment_sub_process: Optional[
        EndCollectiveAgreementAssignmentSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "End_Collective_Agreement_Assignment_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_payroll_inputs_sub_process: Optional[EndPayrollInputsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "End_Payroll_Inputs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_additional_job_sub_process: list[EndAdditionalJobSubBusinessProcessType] = field(
        default_factory=list,
        metadata={
            "name": "End_Additional_Job_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_roles: Optional[AssignRolesSubProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Roles",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_employee_probation_period_sub_business_process: Optional[
        ManageProbationPeriodSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Manage_Employee_Probation_Period_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class WorkerEmploymentInformationDataType:
    """
    Contains the worker's employment information, such as their position and job information.

    Security Note: This element is secured to the following domains:  Self-Service: Current Staffing Information, Worker Data: Current Staffing Information

    Attributes:
        worker_job_data
        worker_status_data: Encapsulating element containing all Status data for a Worker.
        worker_contract_data: Encapsulating element containing all Contract data for a Worker.
        international_assignment_summary_data
    """

    class Meta:
        name = "Worker_Employment_Information_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_job_data: list[WorkerJobDataType] = field(
        default_factory=list,
        metadata={
            "name": "Worker_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_status_data: Optional[WorkerStatusDetailDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Status_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_contract_data: Optional[WorkerContractDetailDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    international_assignment_summary_data: Optional[InternationalAssignmentSummaryDataType] = field(
        default=None,
        metadata={
            "name": "International_Assignment_Summary_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


class StaffingPortAddOnlyEmployee:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortAddOnlyEmployeeInput
    output = StaffingPortAddOnlyEmployeeOutput


@dataclass
class StaffingPortChangePersonalInformationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangePersonalInformationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortChangePersonalInformationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_personal_information_request: Optional[ChangePersonalInformationRequest] = field(
            default=None,
            metadata={
                "name": "Change_Personal_Information_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortCreatePositionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortCreatePositionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortCreatePositionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        create_position_request: Optional[CreatePositionRequest] = field(
            default=None,
            metadata={
                "name": "Create_Position_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortEditHiringRestrictions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditHiringRestrictionsInput
    output = StaffingPortEditHiringRestrictionsOutput


@dataclass
class StaffingPortEditPositionRestrictionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditPositionRestrictionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditPositionRestrictionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_position_restrictions_request: Optional[EditPositionRestrictionsRequest] = field(
            default=None,
            metadata={
                "name": "Edit_Position_Restrictions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangeGovernmentIdsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeGovernmentIdsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_government_ids_response: Optional[GetChangeGovernmentIdsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Change_Government_IDs_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetChangeGovernmentIdsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangeGovernmentIdsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetChangeLegalName:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangeLegalNameInput
    output = StaffingPortGetChangeLegalNameOutput


@dataclass
class StaffingPortGetChangeLicensesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeLicensesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_licenses_response: Optional[GetChangeLicensesResponse] = field(
            default=None,
            metadata={
                "name": "Get_Change_Licenses_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetChangeLicensesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangeLicensesOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetChangeOtherIdsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangeOtherIdsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_other_ids_response: Optional[GetChangeOtherIdsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Change_Other_IDs_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetChangeOtherIdsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangeOtherIdsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetChangePassportsAndVisasOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangePassportsAndVisasOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_passports_and_visas_response: Optional[GetChangePassportsAndVisasResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Change_Passports_and_Visas_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortGetChangePassportsAndVisasOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangePassportsAndVisasOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetChangePreferredName:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangePreferredNameInput
    output = StaffingPortGetChangePreferredNameOutput


@dataclass
class StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional[
        "StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesOutput.Body"
    ] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_global_staffing_eligibility_rules_without_dependencies_response: Optional[
            GetGlobalStaffingEligibilityRulesWithoutDependenciesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Global_Staffing_Eligibility_Rules_Without_Dependencies_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetGlobalStaffingEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetGlobalStaffingEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_global_staffing_eligibility_rules_response: Optional[
            GetGlobalStaffingEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Global_Staffing_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetGlobalStaffingEligibilityRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetGlobalStaffingEligibilityRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetJobClassificationGroups:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetJobClassificationGroupsInput
    output = StaffingPortGetJobClassificationGroupsOutput


@dataclass
class StaffingPortGetJobOverlapRoutingExclusionRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobOverlapRoutingExclusionRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_overlap_routing_exclusion_rules_response: Optional[
            GetJobOverlapRoutingExclusionRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Job_Overlap_Routing_Exclusion_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetJobOverlapRoutingExclusionRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetJobOverlapRoutingExclusionRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetMaintainProbationPeriodsForCountry:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetMaintainProbationPeriodsForCountryInput
    output = StaffingPortGetMaintainProbationPeriodsForCountryOutput


@dataclass
class StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesOutput.Body"] = (
        field(
            default=None,
            metadata={
                "name": "Body",
                "type": "Element",
            },
        )
    )

    @dataclass
    class Body:
        get_notice_period_eligibility_rules_without_dependencies_response: Optional[
            GetNoticePeriodEligibilityRulesWithoutDependenciesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Notice_Period_Eligibility_Rules_Without_Dependencies_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetNoticePeriodEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetNoticePeriodEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_notice_period_eligibility_rules_response: Optional[
            GetNoticePeriodEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Notice_Period_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetNoticePeriodEligibilityRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetNoticePeriodEligibilityRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional[
        "StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesOutput.Body"
    ] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_eligibility_rules_without_dependencies_response: Optional[
            GetProbationPeriodEligibilityRulesWithoutDependenciesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Eligibility_Rules_Without_Dependencies_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetProbationPeriodEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetProbationPeriodEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_probation_period_eligibility_rules_response: Optional[
            GetProbationPeriodEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Probation_Period_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetProbationPeriodEligibilityRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetProbationPeriodEligibilityRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetStaffingFieldDefaults:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetStaffingFieldDefaultsInput
    output = StaffingPortGetStaffingFieldDefaultsOutput


@dataclass
class StaffingPortGetStaffingFieldDefaultsConditionRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStaffingFieldDefaultsConditionRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_staffing_field_defaults_condition_rules_response: Optional[
            GetStaffingFieldDefaultsConditionRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Staffing_Field_Defaults_Condition_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetStaffingFieldDefaultsConditionRulesOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetStaffingFieldDefaultsConditionRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional[
        "StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesOutput.Body"
    ] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_staffing_field_defaults_condition_rules_without_dependencies_response: Optional[
            GetStaffingFieldDefaultsConditionRulesWithoutDependenciesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Staffing_Field_Defaults_Condition_Rules_without_Dependencies_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional[
            "StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesOutput.Body.Fault"
        ] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetStudentEmploymentEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetStudentEmploymentEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_student_employment_eligibility_rules_response: Optional[
            GetStudentEmploymentEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Student_Employment_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetStudentEmploymentEligibilityRulesOutput.Body.Fault"] = (
            field(
                default=None,
                metadata={
                    "name": "Fault",
                    "type": "Element",
                },
            )
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetStudentEmploymentEligibilityRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


@dataclass
class StaffingPortGetWorkingTimeEligibilityRulesOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetWorkingTimeEligibilityRulesOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_working_time_eligibility_rules_response: Optional[
            GetWorkingTimeEligibilityRulesResponse
        ] = field(
            default=None,
            metadata={
                "name": "Get_Working_Time_Eligibility_Rules_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetWorkingTimeEligibilityRulesOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional[
                "StaffingPortGetWorkingTimeEligibilityRulesOutput.Body.Fault.Detail"
            ] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortImportChangeOrganizationAssignment:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportChangeOrganizationAssignmentInput
    output = StaffingPortImportChangeOrganizationAssignmentOutput


@dataclass
class StaffingPortImportEditHiringRestrictionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportEditHiringRestrictionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportEditHiringRestrictionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_edit_hiring_restrictions_request: Optional[ImportEditHiringRestrictionsRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Import_Edit_Hiring_Restrictions_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutDependentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutDependentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutDependentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_dependent_request: Optional[PutDependentRequest] = field(
            default=None,
            metadata={
                "name": "Put_Dependent_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutJobFamilyGroup:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutJobFamilyGroupInput
    output = StaffingPortPutJobFamilyGroupOutput


class StaffingPortSetHiringRestrictions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortSetHiringRestrictionsInput
    output = StaffingPortSetHiringRestrictionsOutput


@dataclass
class StaffingPortStartInternationalAssignmentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortStartInternationalAssignmentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortStartInternationalAssignmentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        start_international_assignment_request: Optional[StartInternationalAssignmentRequest] = (
            field(
                default=None,
                metadata={
                    "name": "Start_International_Assignment_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class AddAcademicAppointmentDataType:
    """
    Wrapper element for the Add Academic Appointment business process.

    Attributes:
        reason_reference: Reference ID for the reason for the academic appointment event.
        add_academic_affiliate_status: Flag to Add Academic Affiliate Status to Worker
        academic_appointee_reference: Reference ID for the person this academic appointment is for.
        create_academic_affiliate_data: Data for a new Academic Affiliate if an affiliate is to be
            created as part of the appointment.
        academic_appointment_data
        manage_education_sub_business_process_for_academic_affiliate
    :ivar
        create_workday_account_sub_business_process_for_academic_affiliate:
    :ivar
        manage_professional_affiliation_sub_business_process_for_academic_affiliate:
    :ivar
        manage_instructor_eligibility_sub_business_process_for_academic_affiliate:
    """

    class Meta:
        name = "Add_Academic_Appointment_DataType"
        target_namespace = "urn:com.workday/bsvc"

    reason_reference: Optional[GeneralEventSubcategoryObjectType] = field(
        default=None,
        metadata={
            "name": "Reason_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_academic_affiliate_status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Academic_Affiliate_Status",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_appointee_reference: Optional[AcademicAppointeeEnabledObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_academic_affiliate_data: Optional[CreateAcademicAffiliateDataType] = field(
        default=None,
        metadata={
            "name": "Create_Academic_Affiliate_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_appointment_data: Optional[AcademicAppointmentSnapshotDataType] = field(
        default=None,
        metadata={
            "name": "Academic_Appointment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    create_workday_account_sub_business_process_for_academic_affiliate: Optional[
        CreateWorkdayAccountSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Create_Workday_Account_Sub_Business_Process_for_Academic_Affiliate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_professional_affiliation_sub_business_process_for_academic_affiliate: list[
        ManageProfessionalAffiliationSubBusinessProcessDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Manage_Professional_Affiliation_Sub_Business_Process_for_Academic_Affiliate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_education_sub_business_process_for_academic_affiliate: list[
        ManageEducationSubBusinessProcessDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Manage_Education_Sub_Business_Process_for_Academic_Affiliate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_instructor_eligibility_sub_business_process_for_academic_affiliate: list[
        ManageInstructorEligibilitySubBusinessProcessDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Manage_Instructor_Eligibility_Sub_Business_Process_for_Academic_Affiliate",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantInformationHvtype:
    """
    The main Wrapper element for the Applicant Data Web Service.

    Attributes:
        applicant_reference: Reference to an existing Applicant
        applicant_data: The Wrapper element for the Applicant Data Web Service.
    """

    class Meta:
        name = "Applicant_Information_HVType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_data: list[PreHireDataWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Applicant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantWwstype:
    """
    Wrapper element for the Applicant Data.

    Attributes:
        applicant_reference: Reference ID for the Applicant.
        applicant_data: Wrapper element for the Applicant data.
    """

    class Meta:
        name = "Applicant_WWSType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_data: Optional[PreHireDataWwstype] = field(
        default=None,
        metadata={
            "name": "Applicant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeEmergencyContactsSubBusinessProcessType:
    """Wrapper for the Change Emergency Contacts sub business process that is part of the Hire and
    Edit Position business processes."""

    class Meta:
        name = "Change_Emergency_Contacts_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_emergency_contacts_data: Optional[ChangeEmergencyContactsSubDataType] = field(
        default=None,
        metadata={
            "name": "Change_Emergency_Contacts_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobRequestType:
    """Business Process for doing a Change Job on a worker."""

    class Meta:
        name = "Change_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_job_data: Optional[ChangeJobDataType] = field(
        default=None,
        metadata={
            "name": "Change_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobRequestHvtype:
    """
    This web service operation is designed to perform a job change on an employee or contingent
    worker using the Change Job business process.

    The types of changes include transfer, promotion, demotion, lateral moves and any other change
    of data on the job.
    """

    class Meta:
        name = "Change_Job_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_job_data: Optional[ChangeJobDataType] = field(
        default=None,
        metadata={
            "name": "Change_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ContractContingentWorkerBusinessProcessDataType:
    """
    Wrapper element for the Contract Contingent Worker business process web service and its sub
    business processes.

    Attributes:
        applicant_reference: Reference to the applicant that will become a contingent worker. The
            applicant must exist in the system and be eligible for hire.
        former_worker_reference: Reference to a Former Worker that will be contracted. Choose either
            an Applicant, Former Worker or Applicant Data (to create a new applicant). Former
            Workers are special persons who were added during implementation to the former worker
            store.
        student_reference: The inactive student or inactive external student you plan to contract.
            You can't contract active students or student prospects.
        applicant_data
        organization_reference: Reference to the supervisory organization the contingent worker will
            be contracted into. This can be derived from the Position Reference if one of those is
            entered. For Job Management organizations, it must be supplied.
        position_reference: Reference to the Position Management group to contract the worker into.
            This must be an existing position group that is for the supervisory organization. Leave
            blank if the worker is being contracted into a Headcount Group or a supervisory
            organization using the Job Management staffing policy.
        job_requisition_reference: Job requisition reference for the position to move the worker
            into.
        contract_start_date: The date the contract takes effect.
        contract_contingent_worker_event_data
        update_id_information_sub_process
        edit_government_ids_sub_process
        edit_passports_and_visas_sub_process
        edit_license_sub_process
        edit_custom_ids_sub_process
        edit_assign_organization_sub_process
        create_workday_account_sub_process
        assign_matrix_organization_sub_process
        change_personal_information_sub_process
        edit_service_dates_sub_process
        remove_retiree_status_sub_process
        onboarding_setup_sub_process
        add_flexible_work_arrangement_sub_process
        assign_establishment_sub_process: The proposed establishment.
    """

    class Meta:
        name = "Contract_Contingent_Worker_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    former_worker_reference: Optional[FormerWorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Former_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_reference: Optional[StudentObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_data: Optional[CreateApplicantDataType] = field(
        default=None,
        metadata={
            "name": "Applicant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Contract_Start_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    contract_contingent_worker_event_data: Optional[ContractContingentWorkerEventDataType] = field(
        default=None,
        metadata={
            "name": "Contract_Contingent_Worker_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    update_id_information_sub_process: Optional[UpdateIdInformationSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Update_ID_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_government_ids_sub_process: Optional[EditGovernmentIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Government_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_passports_and_visas_sub_process: Optional[EditPassportsAndVisasSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Edit_Passports_and_Visas_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    edit_license_sub_process: Optional[EditLicensesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_License_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_custom_ids_sub_process: Optional[EditCustomIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Custom_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_workday_account_sub_process: Optional[CreateWorkdayAccountSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Create_Workday_Account_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_sub_process: Optional[
        ChangePersonalInformationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Change_Personal_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_service_dates_sub_process: Optional[EditServiceDatesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_retiree_status_sub_process: Optional[RemoveRetireeStatusSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Remove_Retiree_Status_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_sub_process: Optional[OnboardingSetupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_flexible_work_arrangement_sub_process: Optional[
        AddFlexibleWorkArrangementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Add_Flexible_Work_Arrangement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_establishment_sub_process: Optional[AssignEstablishmentSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Establishment_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EditPositionRequest(EditPositionRequestType):
    class Meta:
        name = "Edit_Position_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EndAdditionalJobRequestType:
    """
    Wrapper for End Additional Job Web Service.

    Attributes:
        business_process_parameters
        end_additional_job_data: Wrapper element for end additional job request.
    """

    class Meta:
        name = "End_Additional_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_additional_job_data: Optional[EndAdditionalJobDataType] = field(
        default=None,
        metadata={
            "name": "End_Additional_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EndContingentWorkerContractRequestType:
    """Wrapper for End Contingent Worker Contract web service and its sub-processes."""

    class Meta:
        name = "End_Contingent_Worker_Contract_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_contingent_worker_contract_data: Optional[EndContingentWorkerContractDataType] = field(
        default=None,
        metadata={
            "name": "End_Contingent_Worker_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndContingentWorkerContractRequestHvtype:
    """This web service operation is designed to end an existing Contingent Worker Contract."""

    class Meta:
        name = "End_Contingent_Worker_Contract_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_contingent_worker_contract_data: Optional[EndContingentWorkerContractDataType] = field(
        default=None,
        metadata={
            "name": "End_Contingent_Worker_Contract_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class EndInternationalAssignmentForEmployeeEventRequestType:
    """This web service operation is designed to end an existing international assignment."""

    class Meta:
        name = "End_International_Assignment_for_Employee_Event_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    end_international_assignment_data: Optional[EndInternationalAssignmentDataType] = field(
        default=None,
        metadata={
            "name": "End_International_Assignment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetChangePersonalInformationResponseType:
    """Element containing the Get Change Personal Information response elements including echoed
    request data and request references."""

    class Meta:
        name = "Get_Change_Personal_Information_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[GetChangePersonalInformationRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[ChangePersonalInformationResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class GetJobFamilyGroupsResponse(GetJobFamilyGroupsResponseType):
    class Meta:
        name = "Get_Job_Family_Groups_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetOrganizationsResponse(GetOrganizationsResponseType):
    class Meta:
        name = "Get_Organizations_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPositionsResponseType:
    """
    Response element containing instances of positions and their associated data.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_group
        response_results
        response_data: Contains each Position based on the Request References or Request Criteria.
            The data returned is the current information as of the dates in the response filter, and
            does not include all historical information about the  position.
        invalid_reference_id_response
        version
    """

    class Meta:
        name = "Get_Positions_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: list[PositionRequestReferencesType] = field(
        default_factory=list,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: list[PositionRequestCriteriaType] = field(
        default_factory=list,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: list[ResponseFilterType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: list[PositionResponseGroupType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: list[ResponseResultsType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: list[PositionsResponseDataType] = field(
        default_factory=list,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    invalid_reference_id_response: list[InvalidReferenceIdResponseType] = field(
        default_factory=list,
        metadata={
            "name": "Invalid_Reference_ID_Response",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportCreatePositionRequest(ImportCreatePositionRequestType):
    class Meta:
        name = "Import_Create_Position_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportEditPositionRequestType:
    """Root Import Edit Position Request Element."""

    class Meta:
        name = "Import_Edit_Position_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    edit_position_request_hv: list[EditPositionRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Edit_Position_Request_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportExternalStudentRequestType:
    """
    Header element of the Import External Student Information web service task.

    Attributes:
        id: Reference ID of the External Student Data Load header instance
        external_student_data: Container element for External Student data
        version
    """

    class Meta:
        name = "Import_External_Student_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    external_student_data: list[ExternalAcademicRecordDataType] = field(
        default_factory=list,
        metadata={
            "name": "External_Student_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportSwapPositionsRequestType:
    """Business Process for swapping positions between workers."""

    class Meta:
        name = "Import_Swap_Positions_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    mass_swap_positions_data: Optional[MassSwapPositionsDataType] = field(
        default=None,
        metadata={
            "name": "Mass_Swap_Positions_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutApplicantRequestType:
    """
    Wrapper element for the Put Applicant Request Information.

    Attributes:
        applicant_reference: The reference to the Applicant being updated. For new Applicants, this
            element will not exist.
        applicant_data
        add_only: Add Only Flag.  Indicates that the service is an add only, not an update.
        version
    """

    class Meta:
        name = "Put_Applicant_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_data: Optional[PreHireDataWwstype] = field(
        default=None,
        metadata={
            "name": "Applicant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    add_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Add_Only",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TerminateEmployeeRequestType:
    """
    Wrapper for Terminate Employee Web Service and its sub-processes.

    Attributes:
        business_process_parameters
        terminate_employee_data: Wrapper element for terminate employee request.
        version
    """

    class Meta:
        name = "Terminate_Employee_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    terminate_employee_data: Optional[TerminateEmployeeDataType] = field(
        default=None,
        metadata={
            "name": "Terminate_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class TerminateEmployeeRequestHvtype:
    """This web service operation is designed to terminate an existing Employee from a Position."""

    class Meta:
        name = "Terminate_Employee_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    terminate_employee_data: Optional[TerminateEmployeeDataType] = field(
        default=None,
        metadata={
            "name": "Terminate_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class WorkerRelatedPersonsDataType:
    """
    Contains the person's that are related to the worker as a dependent, beneficiary or emergency
    contact.

    Security Note: This element is secured to the following domains:  Self Service: Benefit Elections; Worker Data: Benefit Elections

    Attributes:
        number_of_payroll_dependents: The number of dependents, for this worker, that are used for
            payroll purposes.
        related_person: Contains the dependent, beneficiary, and emergency contact information for
            the related person.
    """

    class Meta:
        name = "Worker_Related_Persons_DataType"
        target_namespace = "urn:com.workday/bsvc"

    number_of_payroll_dependents: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Number_of_Payroll_Dependents",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "min_inclusive": Decimal("0"),
            "total_digits": 2,
            "fraction_digits": 0,
        },
    )
    related_person: list[RelatedPersonType] = field(
        default_factory=list,
        metadata={
            "name": "Related_Person",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


class StaffingPortChangePersonalInformation:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortChangePersonalInformationInput
    output = StaffingPortChangePersonalInformationOutput


class StaffingPortCreatePosition:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortCreatePositionInput
    output = StaffingPortCreatePositionOutput


class StaffingPortEditPositionRestrictions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditPositionRestrictionsInput
    output = StaffingPortEditPositionRestrictionsOutput


@dataclass
class StaffingPortEditPositionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEditPositionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEditPositionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        edit_position_request: Optional[EditPositionRequest] = field(
            default=None,
            metadata={
                "name": "Edit_Position_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortGetChangeGovernmentIds:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangeGovernmentIdsInput
    output = StaffingPortGetChangeGovernmentIdsOutput


class StaffingPortGetChangeLicenses:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangeLicensesInput
    output = StaffingPortGetChangeLicensesOutput


class StaffingPortGetChangeOtherIds:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangeOtherIdsInput
    output = StaffingPortGetChangeOtherIdsOutput


class StaffingPortGetChangePassportsAndVisas:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangePassportsAndVisasInput
    output = StaffingPortGetChangePassportsAndVisasOutput


class StaffingPortGetGlobalStaffingEligibilityRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetGlobalStaffingEligibilityRulesInput
    output = StaffingPortGetGlobalStaffingEligibilityRulesOutput


class StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependencies:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesInput
    output = StaffingPortGetGlobalStaffingEligibilityRulesWithoutDependenciesOutput


@dataclass
class StaffingPortGetJobFamilyGroupsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetJobFamilyGroupsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_job_family_groups_response: Optional[GetJobFamilyGroupsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Job_Family_Groups_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetJobFamilyGroupsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetJobFamilyGroupsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetJobOverlapRoutingExclusionRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetJobOverlapRoutingExclusionRulesInput
    output = StaffingPortGetJobOverlapRoutingExclusionRulesOutput


class StaffingPortGetNoticePeriodEligibilityRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetNoticePeriodEligibilityRulesInput
    output = StaffingPortGetNoticePeriodEligibilityRulesOutput


class StaffingPortGetNoticePeriodEligibilityRulesWithoutDependencies:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesInput
    output = StaffingPortGetNoticePeriodEligibilityRulesWithoutDependenciesOutput


@dataclass
class StaffingPortGetOrganizationsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetOrganizationsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_organizations_response: Optional[GetOrganizationsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Organizations_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetOrganizationsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetOrganizationsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetProbationPeriodEligibilityRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetProbationPeriodEligibilityRulesInput
    output = StaffingPortGetProbationPeriodEligibilityRulesOutput


class StaffingPortGetProbationPeriodEligibilityRulesWithoutDependencies:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesInput
    output = StaffingPortGetProbationPeriodEligibilityRulesWithoutDependenciesOutput


class StaffingPortGetStaffingFieldDefaultsConditionRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetStaffingFieldDefaultsConditionRulesInput
    output = StaffingPortGetStaffingFieldDefaultsConditionRulesOutput


class StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependencies:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesInput
    output = StaffingPortGetStaffingFieldDefaultsConditionRulesWithoutDependenciesOutput


class StaffingPortGetStudentEmploymentEligibilityRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetStudentEmploymentEligibilityRulesInput
    output = StaffingPortGetStudentEmploymentEligibilityRulesOutput


class StaffingPortGetWorkingTimeEligibilityRules:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetWorkingTimeEligibilityRulesInput
    output = StaffingPortGetWorkingTimeEligibilityRulesOutput


@dataclass
class StaffingPortImportCreatePositionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportCreatePositionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportCreatePositionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_create_position_request: Optional[ImportCreatePositionRequest] = field(
            default=None,
            metadata={
                "name": "Import_Create_Position_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportEditHiringRestrictions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportEditHiringRestrictionsInput
    output = StaffingPortImportEditHiringRestrictionsOutput


class StaffingPortPutDependent:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutDependentInput
    output = StaffingPortPutDependentOutput


class StaffingPortStartInternationalAssignment:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortStartInternationalAssignmentInput
    output = StaffingPortStartInternationalAssignmentOutput


@dataclass
class AddAcademicAppointmentSubBusinessProcessType:
    """
    Wrapper for the Add Academic Appointment sub business process that is part of the Hire and Edit
    Position business processes.

    Attributes:
        business_sub_process_parameters
        add_academic_appointment_data: Add Academic Appointment Data Wrapper for the Add Academic
            Appointment Web Service Sub Business Processes
    """

    class Meta:
        name = "Add_Academic_Appointment_Sub_Business_ProcessType"
        target_namespace = "urn:com.workday/bsvc"

    business_sub_process_parameters: Optional[BusinessSubProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Sub_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_academic_appointment_data: Optional[AddAcademicAppointmentDataType] = field(
        default=None,
        metadata={
            "name": "Add_Academic_Appointment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ApplicantsResponseDataType:
    """
    Wrapper element for the Applicant Data.

    Attributes:
        applicant: Wrapper element for the Applicant Data.
    """

    class Meta:
        name = "Applicants_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    applicant: list[ApplicantWwstype] = field(
        default_factory=list,
        metadata={
            "name": "Applicant",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BulkImportEndAdditionalJobRequestType:
    """Contains data for processing many instances of Additional Job."""

    class Meta:
        name = "Bulk_Import_End_Additional_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    end_additional_job_request: list[EndAdditionalJobRequestType] = field(
        default_factory=list,
        metadata={
            "name": "End_Additional_Job_Request",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ChangeJobRequest(ChangeJobRequestType):
    class Meta:
        name = "Change_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ContractContingentWorkerRequestType:
    """This web service operation is designed to contract an existing applicant into an existing
    Position or Job Group."""

    class Meta:
        name = "Contract_Contingent_Worker_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_contingent_worker_data: Optional[ContractContingentWorkerBusinessProcessDataType] = (
        field(
            default=None,
            metadata={
                "name": "Contract_Contingent_Worker_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ContractContingentWorkerRequestHvtype:
    """This web service operation is designed to contract an existing applicant into an existing
    Position."""

    class Meta:
        name = "Contract_Contingent_Worker_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contract_contingent_worker_data: Optional[ContractContingentWorkerBusinessProcessDataType] = (
        field(
            default=None,
            metadata={
                "name": "Contract_Contingent_Worker_Data",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
                "required": True,
            },
        )
    )


@dataclass
class EndAdditionalJobRequestRootType(EndAdditionalJobRequestType):
    class Meta:
        name = "End_Additional_Job_RequestRootType"
        target_namespace = "urn:com.workday/bsvc"

    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class EndContingentWorkerContractRequest(EndContingentWorkerContractRequestType):
    class Meta:
        name = "End_Contingent_Worker_Contract_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EndInternationalAssignmentForEmployeeEventRequest(
    EndInternationalAssignmentForEmployeeEventRequestType
):
    class Meta:
        name = "End_International_Assignment_for_Employee_Event_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetChangePersonalInformationResponse(GetChangePersonalInformationResponseType):
    class Meta:
        name = "Get_Change_Personal_Information_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetPositionsResponse(GetPositionsResponseType):
    class Meta:
        name = "Get_Positions_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportApplicantRequestType:
    """
    Documentation Import Applicant Request element.

    Attributes:
        applicant: The main Wrapper element for the Applicant Data Web Service.
        version
    """

    class Meta:
        name = "Import_Applicant_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    applicant: list[ApplicantInformationHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Applicant",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportChangeJobRequestType:
    """Root Import Change Job Request Element."""

    class Meta:
        name = "Import_Change_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    change_job_information_hv: list[ChangeJobRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Change_Job_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportEditPositionRequest(ImportEditPositionRequestType):
    class Meta:
        name = "Import_Edit_Position_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportEndContingentWorkerContractRequestType:
    """Root Import End Contingent Worker Contract Request Element."""

    class Meta:
        name = "Import_End_Contingent_Worker_Contract_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    end_contingent_worker_contract_information_hv: list[
        EndContingentWorkerContractRequestHvtype
    ] = field(
        default_factory=list,
        metadata={
            "name": "End_Contingent_Worker_Contract_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportExternalStudentRequest(ImportExternalStudentRequestType):
    class Meta:
        name = "Import_External_Student_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportSwapPositionsRequest(ImportSwapPositionsRequestType):
    class Meta:
        name = "Import_Swap_Positions_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportTerminateEmployeeRequestType:
    """Root Import Terminate Employee Request Element."""

    class Meta:
        name = "Import_Terminate_Employee_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    terminate_employee_information_hv: list[TerminateEmployeeRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Terminate_Employee_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class PutApplicantRequest(PutApplicantRequestType):
    class Meta:
        name = "Put_Applicant_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class TerminateEmployeeRequest(TerminateEmployeeRequestType):
    class Meta:
        name = "Terminate_Employee_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class WorkerDataType:
    """
    Contains the detailed information about a worker.

    Attributes:
        worker_id: The ID for the employee or contingent worker.
        user_id: Text attribute identifying User Name.
        universal_id: Universal ID for the worker.
        personal_data: Personal Data
        employment_data: Contains the worker's employment information, such as their position and
            job information. Security Note: This element is secured to the following domains:  Self-
            Service: Current Staffing Information, Worker Data: Current Staffing Information
        compensation_data: Compensation Data
        organization_data: Organization Data
        role_data: Role Data
        management_chain_data: Management Chain Data
        benefit_enrollment_data: Contains the worker's benefits information. Security Note: This
            element is secured to the following domains:  Self Service: Benefit Elections; Worker
            Data: Benefit Elections
        benefit_eligibility_data: Contains the worker's benefit eligibility information for all
            Benefit Plan criteria that is not in the current plan year definition.
        related_person_data: Contains the person's that are related to the worker as a dependent,
            beneficiary or emergency contact. Security Note: This element is secured to the
            following domains: Self Service: Benefit Elections; Worker Data: Benefit Elections
        qualification_data: Qualification Data
        employee_review_data: Contains the employee's latest review for performance, performance
            improvement plan, development plan, and disciplinary action.  This is only valid for a
            worker than is an employee. Security Note: This element is secured to the following
            domains:  Worker Data: Employee Reviews, Self Service: Employee Reviews
        photo_data: Contains a photo of the worker. Security Note: This element is not secured so
            anyone that can run this web service has access to this element.
        worker_document_data: Contains the documents that were added for a worker during staffing
            events or ad-hoc. These domains secure this element: Self-Service: Add Worker Documents
            Self- Service: Edit and Delete Worker Documents Worker Data: Add Worker Documents Worker
            Data: Edit and Delete Worker Documents
        integration_field_override_data: Worker External Field Result Data
        transaction_log_entry_data: Transaction Log Entry Data
        transaction_log_corrected_and_rescinded_data
        succession_profile_data: Contains a list of positions for which the employee is a succession
            candidate. This is only valid for a worker than is an employee. Security Note: This
            element is secured to the following domain:  Worker Data: Succession.
        talent_assessment_data: Contains the employee's latest talent assessment, such as potential,
            achievable level, and retention. This is only valid for a worker than is an employee.
            Security Note: This element is secured to the following domain:  Worker Data: Talent.
        worker_goal_data: Contains the employee's goals and is similar to the content that is found
            in the Employee Goals UI page for an employee. Security Note: This element is secured to
            the following domain:  Worker Data: Employee Goals
        development_item_data: Contains the employee's development items and is similar to the
            content that is found in the Development Items UI page for an employee.
        skill_data
        employee_contracts_data: Contains the employee's contract information.
        extended_employee_contracts_data: Contains the extended employee's contract information.
        feedback_received_data: Contains the employee's feedback received
        user_account_data: Contains the worker's user account information (user name, preferred
            language).
        career_data
        account_provisioning_data: Contains the worker's provisioning group assignments
        background_check_data: Contains Background Check Information
        contingent_worker_tax_authority_form_type_data
    """

    class Meta:
        name = "Worker_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    user_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "User_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Universal_ID",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personal_data: Optional[PersonalInformationDataType] = field(
        default=None,
        metadata={
            "name": "Personal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employment_data: Optional[WorkerEmploymentInformationDataType] = field(
        default=None,
        metadata={
            "name": "Employment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    compensation_data: Optional[WorkerCompensationDataType] = field(
        default=None,
        metadata={
            "name": "Compensation_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_data: Optional[WorkerOrganizationDataType] = field(
        default=None,
        metadata={
            "name": "Organization_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    role_data: Optional[WorkerRoleDataType] = field(
        default=None,
        metadata={
            "name": "Role_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    management_chain_data: Optional[WorkerManagementChainDataType] = field(
        default=None,
        metadata={
            "name": "Management_Chain_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_enrollment_data: Optional[WorkerBenefitEnrollmentDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Enrollment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    benefit_eligibility_data: Optional[WorkerBenefitEligibilityDataType] = field(
        default=None,
        metadata={
            "name": "Benefit_Eligibility_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    related_person_data: Optional[WorkerRelatedPersonsDataType] = field(
        default=None,
        metadata={
            "name": "Related_Person_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    qualification_data: Optional[PersonQualificationDataType] = field(
        default=None,
        metadata={
            "name": "Qualification_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_review_data: Optional[EmployeeReviewDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Review_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    photo_data: Optional[EmployeeImageDataType] = field(
        default=None,
        metadata={
            "name": "Photo_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_document_data: Optional[WorkerDocumentDataWwstype] = field(
        default=None,
        metadata={
            "name": "Worker_Document_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    integration_field_override_data: list[DocumentFieldResultDataType] = field(
        default_factory=list,
        metadata={
            "name": "Integration_Field_Override_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_entry_data: Optional[EventTargetTransactionLogEntryDataType] = field(
        default=None,
        metadata={
            "name": "Transaction_Log_Entry_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transaction_log_corrected_and_rescinded_data: list[
        EventTargetTransactionLogRescindAndCorrectDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Transaction_Log_Corrected_And_Rescinded_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    succession_profile_data: Optional[SuccessionProfileDataType] = field(
        default=None,
        metadata={
            "name": "Succession_Profile_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    talent_assessment_data: Optional[TalentAssessmentDataType] = field(
        default=None,
        metadata={
            "name": "Talent_Assessment_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_goal_data: Optional[WorkerGoalDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Goal_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    development_item_data: Optional[WorkerDevelopmentItemDataType] = field(
        default=None,
        metadata={
            "name": "Development_Item_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    skill_data: Optional[WorkerSkillItemDataType] = field(
        default=None,
        metadata={
            "name": "Skill_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    employee_contracts_data: Optional[EmployeeContractsDataType] = field(
        default=None,
        metadata={
            "name": "Employee_Contracts_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    extended_employee_contracts_data: Optional[ExtendedEmployeeContractsDataType] = field(
        default=None,
        metadata={
            "name": "Extended_Employee_Contracts_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    feedback_received_data: Optional[FeedbackReceivedDataType] = field(
        default=None,
        metadata={
            "name": "Feedback_Received_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    user_account_data: Optional[SystemUserForWorkerDataType] = field(
        default=None,
        metadata={
            "name": "User_Account_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    career_data: Optional[WorkerCareerDataType] = field(
        default=None,
        metadata={
            "name": "Career_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    account_provisioning_data: Optional[PersonAccountProvisioningDataType] = field(
        default=None,
        metadata={
            "name": "Account_Provisioning_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    background_check_data: list[BackgroundCheckOverallStatusDataType] = field(
        default_factory=list,
        metadata={
            "name": "Background_Check_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    contingent_worker_tax_authority_form_type_data: list[
        ContingentWorkerTaxAuthorityFormInformationDataType
    ] = field(
        default_factory=list,
        metadata={
            "name": "Contingent_Worker_Tax_Authority_Form_Type_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortChangeJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortChangeJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortChangeJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        change_job_request: Optional[ChangeJobRequest] = field(
            default=None,
            metadata={
                "name": "Change_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortEditPosition:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEditPositionInput
    output = StaffingPortEditPositionOutput


@dataclass
class StaffingPortEndContingentWorkerContractInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEndContingentWorkerContractInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEndContingentWorkerContractInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        end_contingent_worker_contract_request: Optional[EndContingentWorkerContractRequest] = (
            field(
                default=None,
                metadata={
                    "name": "End_Contingent_Worker_Contract_Request",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEndInternationalAssignmentInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEndInternationalAssignmentInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEndInternationalAssignmentInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        end_international_assignment_for_employee_event_request: Optional[
            EndInternationalAssignmentForEmployeeEventRequest
        ] = field(
            default=None,
            metadata={
                "name": "End_International_Assignment_for_Employee_Event_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortGetChangePersonalInformationOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetChangePersonalInformationOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_change_personal_information_response: Optional[GetChangePersonalInformationResponse] = (
            field(
                default=None,
                metadata={
                    "name": "Get_Change_Personal_Information_Response",
                    "type": "Element",
                    "namespace": "urn:com.workday/bsvc",
                },
            )
        )
        fault: Optional["StaffingPortGetChangePersonalInformationOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetChangePersonalInformationOutput.Body.Fault.Detail"] = (
                field(
                    default=None,
                    metadata={
                        "type": "Element",
                        "namespace": "",
                    },
                )
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortGetJobFamilyGroups:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetJobFamilyGroupsInput
    output = StaffingPortGetJobFamilyGroupsOutput


class StaffingPortGetOrganizations:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetOrganizationsInput
    output = StaffingPortGetOrganizationsOutput


@dataclass
class StaffingPortGetPositionsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetPositionsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_positions_response: Optional[GetPositionsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Positions_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetPositionsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetPositionsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortImportCreatePosition:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportCreatePositionInput
    output = StaffingPortImportCreatePositionOutput


@dataclass
class StaffingPortImportEditPositionInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportEditPositionInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportEditPositionInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_edit_position_request: Optional[ImportEditPositionRequest] = field(
            default=None,
            metadata={
                "name": "Import_Edit_Position_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortImportExternalStudentInformationInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportExternalStudentInformationInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportExternalStudentInformationInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_external_student_request: Optional[ImportExternalStudentRequest] = field(
            default=None,
            metadata={
                "name": "Import_External_Student_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortImportSwapPositionsInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportSwapPositionsInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportSwapPositionsInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_swap_positions_request: Optional[ImportSwapPositionsRequest] = field(
            default=None,
            metadata={
                "name": "Import_Swap_Positions_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortPutApplicantInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortPutApplicantInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortPutApplicantInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        put_applicant_request: Optional[PutApplicantRequest] = field(
            default=None,
            metadata={
                "name": "Put_Applicant_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortTerminateEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortTerminateEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortTerminateEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        terminate_employee_request: Optional[TerminateEmployeeRequest] = field(
            default=None,
            metadata={
                "name": "Terminate_Employee_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class AddAdditionalJobDataType:
    """
    Wrapper Element for the Add Additional Job business process web service and its sub business
    processes.

    Attributes:
        employee_reference: Reference to the employee that will get an additional job. Must be an
            active employee or have a completed hire event as of the start date.
        organization_reference: Reference to the supervisory organization the worker's additional
            job will be in.
        position_reference: Reference to the Position Management group for the worker's additional
            job. This must be an existing position group that is for the supervisory organization.
            Leave blank if the worker is being added into a Headcount Group or a supervisory
            organization using the Job Management staffing policy.
        job_requisition_reference: Job requisition reference for the position to move the worker
            into.
        exclude_from_headcount: If Y, the position will be excluded from headcount reporting.
        add_additional_job_event_data: Wrapper element for the details of an Add Additional Job .
        edit_assign_organization_sub_process: Edit Assign Organization Sub Process
        assign_matrix_organization_sub_process: Assign Matrix Organization Sub Process
        assign_pay_group_sub_process
        propose_compensation_for_additional_job_sub_process
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        onboarding_setup_sub_process
        update_id_information_sub_process
        edit_government_ids_sub_process
        edit_passports_and_visas_sub_process
        edit_license_sub_process
        edit_custom_ids_sub_process
        assign_costing_allocation_sub_process
        switch_primary_job_sub_process
        add_academic_appointment_sub_process
        student_employment_eligibility_sub_process
        manage_union_membership_sub_process
        assign_collective_agreement_sub_process
        maintain_employee_contracts_sub_process
        manage_employee_probation_period_sub_business_process
        add_flexible_work_arrangement_sub_process
        assign_establishment_sub_process: The proposed establishment.
        start_date: The date the worker will start work in this additional job. Must be equal to or
            greater than their latest hire (contract start) date. Will default to today's date if
            not sent.
    """

    class Meta:
        name = "Add_Additional_Job_DataType"
        target_namespace = "urn:com.workday/bsvc"

    employee_reference: Optional[EmployeeObjectType] = field(
        default=None,
        metadata={
            "name": "Employee_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    exclude_from_headcount: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Exclude_from_Headcount",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_additional_job_event_data: Optional[AddAdditionalJobEventDataType] = field(
        default=None,
        metadata={
            "name": "Add_Additional_Job_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[AssignPayGroupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    propose_compensation_for_additional_job_sub_process: Optional[
        ProposeCompensationForEmploymentSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Propose_Compensation_for_Additional_Job_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_sub_process: Optional[OnboardingSetupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_id_information_sub_process: Optional[UpdateIdInformationSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Update_ID_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_government_ids_sub_process: Optional[EditGovernmentIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Government_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_passports_and_visas_sub_process: Optional[EditPassportsAndVisasSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Edit_Passports_and_Visas_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    edit_license_sub_process: Optional[EditLicensesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_License_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_custom_ids_sub_process: Optional[EditCustomIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Custom_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    switch_primary_job_sub_process: Optional[SwitchPrimaryJobSubProcessType] = field(
        default=None,
        metadata={
            "name": "Switch_Primary_Job_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_academic_appointment_sub_process: Optional[AddAcademicAppointmentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Add_Academic_Appointment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    student_employment_eligibility_sub_process: Optional[
        StudentEmploymentEligibilitySubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_collective_agreement_sub_process: Optional[
        AssignEmployeeCollectiveAgreementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Collective_Agreement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_employee_probation_period_sub_business_process: Optional[
        ManageProbationPeriodSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Manage_Employee_Probation_Period_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_flexible_work_arrangement_sub_process: Optional[
        AddFlexibleWorkArrangementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Add_Flexible_Work_Arrangement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_establishment_sub_process: Optional[AssignEstablishmentSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Establishment_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    start_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Start_Date",
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class BulkImportEndAdditionalJobRequest(BulkImportEndAdditionalJobRequestType):
    class Meta:
        name = "Bulk_Import_End_Additional_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ContractContingentWorkerRequest(ContractContingentWorkerRequestType):
    class Meta:
        name = "Contract_Contingent_Worker_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class EndAdditionalJobRequest(EndAdditionalJobRequestRootType):
    class Meta:
        name = "End_Additional_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetApplicantsResponseType:
    """
    Wrapper element for the Applicant Information returned as a result of a Get Applicant request.

    Attributes:
        request_references
        request_criteria
        response_filter
        response_group
        response_results
        response_data: Wrapper element for the Applicant Data.
        version
    """

    class Meta:
        name = "Get_Applicants_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[ApplicantRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[ApplicantRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[ApplicantResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[ApplicantsResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HireEmployeeBusinessProcessDataType:
    """
    Wrapper Element for the Hire Employee business process web service and its sub business
    processes.

    Attributes:
        applicant_reference: The pre-hire that you plan to hire. The pre-hire must have a Workday
            profile and be eligible for hire. To hire an employee, you must enter an applicant,
            former worker, student, or academic affiliate, or create a new pre-hire. To create a new
            pre-hire, enter information into the Applicant Data section.
        former_worker_reference: The former worker that you plan to hire. The former worker must
            have a Workday profile and be eligible for hire. To hire an employee, you must enter an
            applicant, former worker, student, or academic affiliate, or create a new pre-hire. To
            create a new pre-hire, enter information into the Applicant Data section.
        student_reference: The student that you plan to hire. The student must have a Workday
            profile and be eligible for hire. To hire an employee, you must enter an applicant,
            former worker, student, or academic affiliate, or create a new pre-hire. To create a new
            pre-hire, enter information into the Applicant Data section.
        academic_affiliate_reference: The academic affiliate that you plan to hire. The academic
            affiliate must have a Workday profile and be eligible for hire. To hire an employee, you
            must enter an applicant, former worker, student, or academic affiliate, or create a new
            pre-hire. To create a new pre-hire, enter information into the Applicant Data section.
        applicant_data: Data for a new Applicant if an applicant is to be created as part of the
            hire.
        organization_reference: The supervisory organization into which the person will be hired.
            Enter this field when hiring into a job management organization. When hiring into a
            position management organization, Workday uses the organization for the Position.
        position_reference: The position restriction ID into which the employee will be hired. Only
            used for a position management supervisory organization. If the hire event is for a job
            management organization, Workday ignores this value.
        job_requisition_reference: The Job Requisition ID for the position that will be filled. If
            the Job Requisition has more than 1 position, Workday selects the job requisition with
            the lowest Position ID.
        hire_date: The worker's Hire Date. The Hire Date must be on or after the effective date of
            any changes to the position or location.
        hire_employee_event_data
        propose_compensation_for_hire_sub_process
        update_id_information_sub_process
        edit_government_ids_sub_process
        edit_passports_and_visas_sub_process
        edit_license_sub_process
        edit_custom_ids_sub_process
        edit_assign_organization_sub_process
        assign_pay_group_sub_process
        transmit_data_to_third_party_payroll_sub_process
        request_one_time_payment_sub_process
        request_one_time_payment_for_referral_sub_process
        request_stock_grant_sub_process
        create_workday_account_sub_process: Wrapper to hold the business process configuration and
            user account details.
        assign_matrix_organization_sub_process
        change_personal_information_sub_process
        create_provisioning_event_sub_process
        create_benefit_life_event_sub_process
        maintain_employee_contracts_sub_business_process
        edit_creditable_service_sub_process
        edit_service_dates_sub_process
        remove_retiree_status_sub_process
        check_position_budget_sub_process: Run the Check Position Budget Sub Business Process to
            calculate any commitments and obligations for the outbound and/or inbound positions on
            this event to enable budget checking.
        assign_costing_allocation_sub_process
        edit_background_check_sub_process
        add_academic_appointment_sub_process
        assign_employee_collective_agreement_sub_process: Wrapper to hold the business process
            configuration and data for Assign Employee Collective Agreement sub business process.
        manage_employee_probation_period_sub_business_process
        emergency_contacts_sub_process
        onboarding_setup_sub_process
        student_employment_eligibility_sub_process
        manage_union_membership_sub_process
        edit_notice_periods_sub_process: Workday doesn't process custom employee and employer notice
            periods for Edit Notice Period as a subprocess of the Hire business process if the Has
            Notice Period checkbox is unchecked in the notice period rule
        add_flexible_work_arrangement_sub_process
        assign_establishment_sub_process: The proposed establishment.
        personnel_action_request_sub_process
    """

    class Meta:
        name = "Hire_Employee_Business_Process_DataType"
        target_namespace = "urn:com.workday/bsvc"

    applicant_reference: Optional[ApplicantObjectType] = field(
        default=None,
        metadata={
            "name": "Applicant_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    former_worker_reference: Optional[FormerWorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Former_Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_reference: Optional[StudentObjectType] = field(
        default=None,
        metadata={
            "name": "Student_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    academic_affiliate_reference: Optional[AcademicAffiliateObjectType] = field(
        default=None,
        metadata={
            "name": "Academic_Affiliate_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    applicant_data: Optional[CreateApplicantDataType] = field(
        default=None,
        metadata={
            "name": "Applicant_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    organization_reference: Optional[SupervisoryOrganizationObjectType] = field(
        default=None,
        metadata={
            "name": "Organization_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    position_reference: Optional[PositionRestrictionsObjectType] = field(
        default=None,
        metadata={
            "name": "Position_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    job_requisition_reference: Optional[JobRequisitionObjectType] = field(
        default=None,
        metadata={
            "name": "Job_Requisition_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_date: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "Hire_Date",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_employee_event_data: Optional[HireEmployeeEventDataType] = field(
        default=None,
        metadata={
            "name": "Hire_Employee_Event_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    propose_compensation_for_hire_sub_process: Optional[
        ProposeCompensationForEmploymentSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Propose_Compensation_for_Hire_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    update_id_information_sub_process: Optional[UpdateIdInformationSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Update_ID_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_government_ids_sub_process: Optional[EditGovernmentIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Government_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_passports_and_visas_sub_process: Optional[EditPassportsAndVisasSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Edit_Passports_and_Visas_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    edit_license_sub_process: Optional[EditLicensesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_License_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_custom_ids_sub_process: Optional[EditCustomIdsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Custom_IDs_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_assign_organization_sub_process: Optional[
        EditAssignPositionOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Edit_Assign_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_pay_group_sub_process: Optional[AssignPayGroupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Pay_Group_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    transmit_data_to_third_party_payroll_sub_process: Optional[
        TransmitDataToThirdPartyPayrollSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Transmit_Data_to_Third_Party_Payroll_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_one_time_payment_sub_process: Optional[RequestOneTimePaymentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Request_One_Time_Payment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    request_one_time_payment_for_referral_sub_process: Optional[
        OneTimePaymentForReferralSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Request_One_Time_Payment_for_Referral_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_stock_grant_sub_process: Optional[RequestStockSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Request_Stock_Grant_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_workday_account_sub_process: Optional[CreateWorkdayAccountSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Create_Workday_Account_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_matrix_organization_sub_process: Optional[
        AssignMatrixOrganizationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Matrix_Organization_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    change_personal_information_sub_process: Optional[
        ChangePersonalInformationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Change_Personal_Information_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_provisioning_event_sub_process: Optional[
        CreateProvisioningEventSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Create_Provisioning_Event_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    create_benefit_life_event_sub_process: Optional[
        CreateBenefitLifeEventSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Create_Benefit_Life_Event_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    maintain_employee_contracts_sub_business_process: Optional[
        MaintainEmployeeContractsSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Maintain_Employee_Contracts_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_creditable_service_sub_process: Optional[EditCreditableServiceSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Edit_Creditable_Service_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    edit_service_dates_sub_process: Optional[EditServiceDatesSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Service_Dates_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    remove_retiree_status_sub_process: Optional[RemoveRetireeStatusSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Remove_Retiree_Status_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    check_position_budget_sub_process: Optional[CheckPositionBudgetSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Check_Position_Budget_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_costing_allocation_sub_process: Optional[
        AssignCostingAllocationSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Costing_Allocation_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    edit_background_check_sub_process: Optional[EditBackgroundCheckSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Background_Check_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_academic_appointment_sub_process: Optional[AddAcademicAppointmentSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Add_Academic_Appointment_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    assign_employee_collective_agreement_sub_process: Optional[
        AssignEmployeeCollectiveAgreementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Assign_Employee_Collective_Agreement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_employee_probation_period_sub_business_process: Optional[
        ManageProbationPeriodSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Manage_Employee_Probation_Period_Sub_Business_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    emergency_contacts_sub_process: Optional[ChangeEmergencyContactsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Emergency_Contacts_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    onboarding_setup_sub_process: Optional[OnboardingSetupSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Onboarding_Setup_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    student_employment_eligibility_sub_process: Optional[
        StudentEmploymentEligibilitySubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Student_Employment_Eligibility_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    manage_union_membership_sub_process: Optional[ManageUnionMembershipSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Manage_Union_Membership_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )
    edit_notice_periods_sub_process: Optional[EditNoticePeriodsSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Edit_Notice_Periods_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_flexible_work_arrangement_sub_process: Optional[
        AddFlexibleWorkArrangementSubBusinessProcessType
    ] = field(
        default=None,
        metadata={
            "name": "Add_Flexible_Work_Arrangement_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    assign_establishment_sub_process: Optional[AssignEstablishmentSubBusinessProcessType] = field(
        default=None,
        metadata={
            "name": "Assign_Establishment_Sub_Process",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    personnel_action_request_sub_process: Optional[PersonnelActionRequestSubBusinessProcessType] = (
        field(
            default=None,
            metadata={
                "name": "Personnel_Action_Request_Sub_Process",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
    )


@dataclass
class ImportApplicantRequest(ImportApplicantRequestType):
    class Meta:
        name = "Import_Applicant_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportChangeJobRequest(ImportChangeJobRequestType):
    class Meta:
        name = "Import_Change_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportContractContingentWorkerRequestType:
    """Root Import Contract Contingent Worker Request Element."""

    class Meta:
        name = "Import_Contract_Contingent_Worker_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    contract_contingent_worker_information_hv: list[ContractContingentWorkerRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Contract_Contingent_Worker_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportEndContingentWorkerContractRequest(ImportEndContingentWorkerContractRequestType):
    class Meta:
        name = "Import_End_Contingent_Worker_Contract_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportTerminateEmployeeRequest(ImportTerminateEmployeeRequestType):
    class Meta:
        name = "Import_Terminate_Employee_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class WorkerType:
    """
    Encapsulating element containing all Worker Profile data.

    Attributes:
        worker_reference: A reference to the ID of the worker. The ID consists of a type attribute,
            which should be set to "Employee_ID" or "Contingent_Worker_ID", and a value attribute,
            such as "04345".   If Skip Non Existing Instances value is set to true. When a reference
            id value that does not meet the entry date criteria is passed, the non existent
            reference id will be ignored.
        worker_descriptor: The Worker's Person Name.
        universal_identifier_reference: Universal ID for the worker.
        worker_data
    """

    class Meta:
        target_namespace = "urn:com.workday/bsvc"

    worker_reference: Optional[WorkerObjectType] = field(
        default=None,
        metadata={
            "name": "Worker_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_descriptor: Optional[str] = field(
        default=None,
        metadata={
            "name": "Worker_Descriptor",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    universal_identifier_reference: Optional[UniversalIdentifierObjectType] = field(
        default=None,
        metadata={
            "name": "Universal_Identifier_Reference",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    worker_data: Optional[WorkerDataType] = field(
        default=None,
        metadata={
            "name": "Worker_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortBulkImportEndAdditionalJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortBulkImportEndAdditionalJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortBulkImportEndAdditionalJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        bulk_import_end_additional_job_request: Optional[BulkImportEndAdditionalJobRequest] = field(
            default=None,
            metadata={
                "name": "Bulk_Import_End_Additional_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortChangeJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortChangeJobInput
    output = StaffingPortChangeJobOutput


@dataclass
class StaffingPortContractContingentWorkerInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortContractContingentWorkerInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortContractContingentWorkerInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        contract_contingent_worker_request: Optional[ContractContingentWorkerRequest] = field(
            default=None,
            metadata={
                "name": "Contract_Contingent_Worker_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortEndAdditionalJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortEndAdditionalJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortEndAdditionalJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        end_additional_job_request: Optional[EndAdditionalJobRequest] = field(
            default=None,
            metadata={
                "name": "End_Additional_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortEndContingentWorkerContract:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEndContingentWorkerContractInput
    output = StaffingPortEndContingentWorkerContractOutput


class StaffingPortEndInternationalAssignment:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEndInternationalAssignmentInput
    output = StaffingPortEndInternationalAssignmentOutput


class StaffingPortGetChangePersonalInformation:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetChangePersonalInformationInput
    output = StaffingPortGetChangePersonalInformationOutput


class StaffingPortGetPositions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetPositionsInput
    output = StaffingPortGetPositionsOutput


@dataclass
class StaffingPortImportApplicantInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportApplicantInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportApplicantInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_applicant_request: Optional[ImportApplicantRequest] = field(
            default=None,
            metadata={
                "name": "Import_Applicant_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortImportChangeJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportChangeJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportChangeJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_change_job_request: Optional[ImportChangeJobRequest] = field(
            default=None,
            metadata={
                "name": "Import_Change_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportEditPosition:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportEditPositionInput
    output = StaffingPortImportEditPositionOutput


@dataclass
class StaffingPortImportEndContingentWorkerContractInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportEndContingentWorkerContractInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportEndContingentWorkerContractInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_end_contingent_worker_contract_request: Optional[
            ImportEndContingentWorkerContractRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_End_Contingent_Worker_Contract_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportExternalStudentInformation:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportExternalStudentInformationInput
    output = StaffingPortImportExternalStudentInformationOutput


class StaffingPortImportSwapPositions:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportSwapPositionsInput
    output = StaffingPortImportSwapPositionsOutput


@dataclass
class StaffingPortImportTerminateEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportTerminateEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportTerminateEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_terminate_employee_request: Optional[ImportTerminateEmployeeRequest] = field(
            default=None,
            metadata={
                "name": "Import_Terminate_Employee_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortPutApplicant:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortPutApplicantInput
    output = StaffingPortPutApplicantOutput


class StaffingPortTerminateEmployee:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortTerminateEmployeeInput
    output = StaffingPortTerminateEmployeeOutput


@dataclass
class AddAdditionalJobRequestType:
    """This web service operation is designed to all an additional job to be added to an existing
    active employee using the Add Additional Job business process."""

    class Meta:
        name = "Add_Additional_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_additional_job_data: Optional[AddAdditionalJobDataType] = field(
        default=None,
        metadata={
            "name": "Add_Additional_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class AddAdditionalJobRequestHvtype:
    """This web service operation is designed to add an additional job to an existing Employee."""

    class Meta:
        name = "Add_Additional_Job_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    add_additional_job_data: Optional[AddAdditionalJobDataType] = field(
        default=None,
        metadata={
            "name": "Add_Additional_Job_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class GetApplicantsResponse(GetApplicantsResponseType):
    class Meta:
        name = "Get_Applicants_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class HireEmployeeRequestType:
    """This web service operation is designed to hire an existing applicant into an Employee
    position or job using the Hire Employee business process."""

    class Meta:
        name = "Hire_Employee_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_employee_data: Optional[HireEmployeeBusinessProcessDataType] = field(
        default=None,
        metadata={
            "name": "Hire_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HireEmployeeRequestHvtype:
    """This web service operation is designed to hire an existing applicant into an Employee
    position."""

    class Meta:
        name = "Hire_Employee_Request_HVType"
        target_namespace = "urn:com.workday/bsvc"

    business_process_parameters: Optional[BusinessProcessParametersType] = field(
        default=None,
        metadata={
            "name": "Business_Process_Parameters",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    hire_employee_data: Optional[HireEmployeeBusinessProcessDataType] = field(
        default=None,
        metadata={
            "name": "Hire_Employee_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
            "required": True,
        },
    )


@dataclass
class ImportContractContingentWorkerRequest(ImportContractContingentWorkerRequestType):
    class Meta:
        name = "Import_Contract_Contingent_Worker_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class WorkersResponseDataType:
    """
    Contains each Worker based on the Request References or Request Criteria.

    The data returned is the current information as of the dates in the response filter, and does
    not include all historical information about the worker.
    """

    class Meta:
        name = "Workers_Response_DataType"
        target_namespace = "urn:com.workday/bsvc"

    worker: list[WorkerType] = field(
        default_factory=list,
        metadata={
            "name": "Worker",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )


class StaffingPortBulkImportEndAdditionalJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortBulkImportEndAdditionalJobInput
    output = StaffingPortBulkImportEndAdditionalJobOutput


class StaffingPortContractContingentWorker:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortContractContingentWorkerInput
    output = StaffingPortContractContingentWorkerOutput


class StaffingPortEndAdditionalJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortEndAdditionalJobInput
    output = StaffingPortEndAdditionalJobOutput


@dataclass
class StaffingPortGetApplicantsOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetApplicantsOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_applicants_response: Optional[GetApplicantsResponse] = field(
            default=None,
            metadata={
                "name": "Get_Applicants_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetApplicantsOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetApplicantsOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortImportApplicant:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportApplicantInput
    output = StaffingPortImportApplicantOutput


class StaffingPortImportChangeJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportChangeJobInput
    output = StaffingPortImportChangeJobOutput


@dataclass
class StaffingPortImportContractContingentWorkerInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportContractContingentWorkerInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportContractContingentWorkerInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_contract_contingent_worker_request: Optional[
            ImportContractContingentWorkerRequest
        ] = field(
            default=None,
            metadata={
                "name": "Import_Contract_Contingent_Worker_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportEndContingentWorkerContract:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportEndContingentWorkerContractInput
    output = StaffingPortImportEndContingentWorkerContractOutput


class StaffingPortImportTerminateEmployee:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportTerminateEmployeeInput
    output = StaffingPortImportTerminateEmployeeOutput


@dataclass
class AddAdditionalJobRequest(AddAdditionalJobRequestType):
    class Meta:
        name = "Add_Additional_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class GetWorkersResponseType:
    """
    Wrapper element for Get Workers Response.

    The response element has to match the Operation Name.
    """

    class Meta:
        name = "Get_Workers_ResponseType"
        target_namespace = "urn:com.workday/bsvc"

    request_references: Optional[WorkerRequestReferencesType] = field(
        default=None,
        metadata={
            "name": "Request_References",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    request_criteria: Optional[WorkerRequestCriteriaType] = field(
        default=None,
        metadata={
            "name": "Request_Criteria",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_filter: Optional[ResponseFilterType] = field(
        default=None,
        metadata={
            "name": "Response_Filter",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_group: Optional[WorkerResponseGroupType] = field(
        default=None,
        metadata={
            "name": "Response_Group",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_results: Optional[ResponseResultsType] = field(
        default=None,
        metadata={
            "name": "Response_Results",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    response_data: Optional[WorkersResponseDataType] = field(
        default=None,
        metadata={
            "name": "Response_Data",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    invalid_reference_id_response: list[InvalidReferenceIdResponseType] = field(
        default_factory=list,
        metadata={
            "name": "Invalid_Reference_ID_Response",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class HireEmployeeRequest(HireEmployeeRequestType):
    class Meta:
        name = "Hire_Employee_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportAddAdditionalJobRequestType:
    """This web service operation is designed to add an additional job to an existing Employee."""

    class Meta:
        name = "Import_Add_Additional_Job_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    add_additional_job_information_hv: list[AddAdditionalJobRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Add_Additional_Job_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class ImportHireEmployeeRequestType:
    """Root Import Hire Employee Request Element."""

    class Meta:
        name = "Import_Hire_Employee_RequestType"
        target_namespace = "urn:com.workday/bsvc"

    hire_employee_information_hv: list[HireEmployeeRequestHvtype] = field(
        default_factory=list,
        metadata={
            "name": "Hire_Employee_Information_HV",
            "type": "Element",
            "namespace": "urn:com.workday/bsvc",
        },
    )
    version: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "urn:com.workday/bsvc",
        },
    )


@dataclass
class StaffingPortAddAdditionalJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortAddAdditionalJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortAddAdditionalJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        add_additional_job_request: Optional[AddAdditionalJobRequest] = field(
            default=None,
            metadata={
                "name": "Add_Additional_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortGetApplicants:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetApplicantsInput
    output = StaffingPortGetApplicantsOutput


@dataclass
class StaffingPortHireEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortHireEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortHireEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        hire_employee_request: Optional[HireEmployeeRequest] = field(
            default=None,
            metadata={
                "name": "Hire_Employee_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortImportContractContingentWorker:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportContractContingentWorkerInput
    output = StaffingPortImportContractContingentWorkerOutput


@dataclass
class GetWorkersResponse(GetWorkersResponseType):
    class Meta:
        name = "Get_Workers_Response"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportAddAdditionalJobRequest(ImportAddAdditionalJobRequestType):
    class Meta:
        name = "Import_Add_Additional_Job_Request"
        namespace = "urn:com.workday/bsvc"


@dataclass
class ImportHireEmployeeRequest(ImportHireEmployeeRequestType):
    class Meta:
        name = "Import_Hire_Employee_Request"
        namespace = "urn:com.workday/bsvc"


class StaffingPortAddAdditionalJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortAddAdditionalJobInput
    output = StaffingPortAddAdditionalJobOutput


@dataclass
class StaffingPortGetWorkersOutput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortGetWorkersOutput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        get_workers_response: Optional[GetWorkersResponse] = field(
            default=None,
            metadata={
                "name": "Get_Workers_Response",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )
        fault: Optional["StaffingPortGetWorkersOutput.Body.Fault"] = field(
            default=None,
            metadata={
                "name": "Fault",
                "type": "Element",
            },
        )

        @dataclass
        class Fault:
            faultcode: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultstring: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            faultactor: Optional[str] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )
            detail: Optional["StaffingPortGetWorkersOutput.Body.Fault.Detail"] = field(
                default=None,
                metadata={
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class Detail:
                validation_fault: Optional[ValidationFault] = field(
                    default=None,
                    metadata={
                        "name": "Validation_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                processing_fault: Optional[ProcessingFault] = field(
                    default=None,
                    metadata={
                        "name": "Processing_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )
                authentication_fault: Optional[AuthenticationFault] = field(
                    default=None,
                    metadata={
                        "name": "Authentication_Fault",
                        "type": "Element",
                        "namespace": "urn:com.workday/bsvc",
                    },
                )


class StaffingPortHireEmployee:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortHireEmployeeInput
    output = StaffingPortHireEmployeeOutput


@dataclass
class StaffingPortImportAddAdditionalJobInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportAddAdditionalJobInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportAddAdditionalJobInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_add_additional_job_request: Optional[ImportAddAdditionalJobRequest] = field(
            default=None,
            metadata={
                "name": "Import_Add_Additional_Job_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


@dataclass
class StaffingPortImportHireEmployeeInput:
    class Meta:
        name = "Envelope"
        namespace = "http://schemas.xmlsoap.org/soap/envelope/"
        target_namespace = "urn:com.workday/bsvc/Staffing"

    body: Optional["StaffingPortImportHireEmployeeInput.Body"] = field(
        default=None,
        metadata={
            "name": "Body",
            "type": "Element",
        },
    )
    header: Optional["StaffingPortImportHireEmployeeInput.Header"] = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
        },
    )

    @dataclass
    class Body:
        import_hire_employee_request: Optional[ImportHireEmployeeRequest] = field(
            default=None,
            metadata={
                "name": "Import_Hire_Employee_Request",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )

    @dataclass
    class Header:
        workday_common_header: Optional[WorkdayCommonHeader] = field(
            default=None,
            metadata={
                "name": "Workday_Common_Header",
                "type": "Element",
                "namespace": "urn:com.workday/bsvc",
            },
        )


class StaffingPortGetWorkers:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortGetWorkersInput
    output = StaffingPortGetWorkersOutput


class StaffingPortImportAddAdditionalJob:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportAddAdditionalJobInput
    output = StaffingPortImportAddAdditionalJobOutput


class StaffingPortImportHireEmployee:
    style = "document"
    location = "Staffing"
    transport = "http://schemas.xmlsoap.org/soap/http"
    input = StaffingPortImportHireEmployeeInput
    output = StaffingPortImportHireEmployeeOutput
